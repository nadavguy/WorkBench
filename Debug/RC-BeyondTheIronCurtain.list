
RC-BeyondTheIronCurtain.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000133b0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000069c  080135b0  080135b0  000235b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013c4c  08013c4c  000303f4  2**0
                  CONTENTS
  4 .ARM          00000008  08013c4c  08013c4c  00023c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013c54  08013c54  000303f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013c54  08013c54  00023c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013c58  08013c58  00023c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003f4  20000000  08013c5c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000055ec  200003f4  08014050  000303f4  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  200059e0  08014050  000359e0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000303f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005ed9f  00000000  00000000  00030422  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009b1c  00000000  00000000  0008f1c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002568  00000000  00000000  00098ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000021d8  00000000  00000000  0009b248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000392b4  00000000  00000000  0009d420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003fb18  00000000  00000000  000d66d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001172de  00000000  00000000  001161ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0022d4ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a738  00000000  00000000  0022d520  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200003f4 	.word	0x200003f4
 800021c:	00000000 	.word	0x00000000
 8000220:	08013598 	.word	0x08013598

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200003f8 	.word	0x200003f8
 800023c:	08013598 	.word	0x08013598

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_drsub>:
 8000310:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000314:	e002      	b.n	800031c <__adddf3>
 8000316:	bf00      	nop

08000318 <__aeabi_dsub>:
 8000318:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800031c <__adddf3>:
 800031c:	b530      	push	{r4, r5, lr}
 800031e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000322:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000326:	ea94 0f05 	teq	r4, r5
 800032a:	bf08      	it	eq
 800032c:	ea90 0f02 	teqeq	r0, r2
 8000330:	bf1f      	itttt	ne
 8000332:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000336:	ea55 0c02 	orrsne.w	ip, r5, r2
 800033a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800033e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000342:	f000 80e2 	beq.w	800050a <__adddf3+0x1ee>
 8000346:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800034a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800034e:	bfb8      	it	lt
 8000350:	426d      	neglt	r5, r5
 8000352:	dd0c      	ble.n	800036e <__adddf3+0x52>
 8000354:	442c      	add	r4, r5
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	ea82 0000 	eor.w	r0, r2, r0
 8000362:	ea83 0101 	eor.w	r1, r3, r1
 8000366:	ea80 0202 	eor.w	r2, r0, r2
 800036a:	ea81 0303 	eor.w	r3, r1, r3
 800036e:	2d36      	cmp	r5, #54	; 0x36
 8000370:	bf88      	it	hi
 8000372:	bd30      	pophi	{r4, r5, pc}
 8000374:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000378:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800037c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000380:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000384:	d002      	beq.n	800038c <__adddf3+0x70>
 8000386:	4240      	negs	r0, r0
 8000388:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800038c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000390:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000394:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000398:	d002      	beq.n	80003a0 <__adddf3+0x84>
 800039a:	4252      	negs	r2, r2
 800039c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003a0:	ea94 0f05 	teq	r4, r5
 80003a4:	f000 80a7 	beq.w	80004f6 <__adddf3+0x1da>
 80003a8:	f1a4 0401 	sub.w	r4, r4, #1
 80003ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80003b0:	db0d      	blt.n	80003ce <__adddf3+0xb2>
 80003b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003b6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ba:	1880      	adds	r0, r0, r2
 80003bc:	f141 0100 	adc.w	r1, r1, #0
 80003c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003c4:	1880      	adds	r0, r0, r2
 80003c6:	fa43 f305 	asr.w	r3, r3, r5
 80003ca:	4159      	adcs	r1, r3
 80003cc:	e00e      	b.n	80003ec <__adddf3+0xd0>
 80003ce:	f1a5 0520 	sub.w	r5, r5, #32
 80003d2:	f10e 0e20 	add.w	lr, lr, #32
 80003d6:	2a01      	cmp	r2, #1
 80003d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003dc:	bf28      	it	cs
 80003de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003e2:	fa43 f305 	asr.w	r3, r3, r5
 80003e6:	18c0      	adds	r0, r0, r3
 80003e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003f0:	d507      	bpl.n	8000402 <__adddf3+0xe6>
 80003f2:	f04f 0e00 	mov.w	lr, #0
 80003f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000402:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000406:	d31b      	bcc.n	8000440 <__adddf3+0x124>
 8000408:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800040c:	d30c      	bcc.n	8000428 <__adddf3+0x10c>
 800040e:	0849      	lsrs	r1, r1, #1
 8000410:	ea5f 0030 	movs.w	r0, r0, rrx
 8000414:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000418:	f104 0401 	add.w	r4, r4, #1
 800041c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000420:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000424:	f080 809a 	bcs.w	800055c <__adddf3+0x240>
 8000428:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800042c:	bf08      	it	eq
 800042e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000432:	f150 0000 	adcs.w	r0, r0, #0
 8000436:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800043a:	ea41 0105 	orr.w	r1, r1, r5
 800043e:	bd30      	pop	{r4, r5, pc}
 8000440:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000444:	4140      	adcs	r0, r0
 8000446:	eb41 0101 	adc.w	r1, r1, r1
 800044a:	3c01      	subs	r4, #1
 800044c:	bf28      	it	cs
 800044e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000452:	d2e9      	bcs.n	8000428 <__adddf3+0x10c>
 8000454:	f091 0f00 	teq	r1, #0
 8000458:	bf04      	itt	eq
 800045a:	4601      	moveq	r1, r0
 800045c:	2000      	moveq	r0, #0
 800045e:	fab1 f381 	clz	r3, r1
 8000462:	bf08      	it	eq
 8000464:	3320      	addeq	r3, #32
 8000466:	f1a3 030b 	sub.w	r3, r3, #11
 800046a:	f1b3 0220 	subs.w	r2, r3, #32
 800046e:	da0c      	bge.n	800048a <__adddf3+0x16e>
 8000470:	320c      	adds	r2, #12
 8000472:	dd08      	ble.n	8000486 <__adddf3+0x16a>
 8000474:	f102 0c14 	add.w	ip, r2, #20
 8000478:	f1c2 020c 	rsb	r2, r2, #12
 800047c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000480:	fa21 f102 	lsr.w	r1, r1, r2
 8000484:	e00c      	b.n	80004a0 <__adddf3+0x184>
 8000486:	f102 0214 	add.w	r2, r2, #20
 800048a:	bfd8      	it	le
 800048c:	f1c2 0c20 	rsble	ip, r2, #32
 8000490:	fa01 f102 	lsl.w	r1, r1, r2
 8000494:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000498:	bfdc      	itt	le
 800049a:	ea41 010c 	orrle.w	r1, r1, ip
 800049e:	4090      	lslle	r0, r2
 80004a0:	1ae4      	subs	r4, r4, r3
 80004a2:	bfa2      	ittt	ge
 80004a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004a8:	4329      	orrge	r1, r5
 80004aa:	bd30      	popge	{r4, r5, pc}
 80004ac:	ea6f 0404 	mvn.w	r4, r4
 80004b0:	3c1f      	subs	r4, #31
 80004b2:	da1c      	bge.n	80004ee <__adddf3+0x1d2>
 80004b4:	340c      	adds	r4, #12
 80004b6:	dc0e      	bgt.n	80004d6 <__adddf3+0x1ba>
 80004b8:	f104 0414 	add.w	r4, r4, #20
 80004bc:	f1c4 0220 	rsb	r2, r4, #32
 80004c0:	fa20 f004 	lsr.w	r0, r0, r4
 80004c4:	fa01 f302 	lsl.w	r3, r1, r2
 80004c8:	ea40 0003 	orr.w	r0, r0, r3
 80004cc:	fa21 f304 	lsr.w	r3, r1, r4
 80004d0:	ea45 0103 	orr.w	r1, r5, r3
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f1c4 040c 	rsb	r4, r4, #12
 80004da:	f1c4 0220 	rsb	r2, r4, #32
 80004de:	fa20 f002 	lsr.w	r0, r0, r2
 80004e2:	fa01 f304 	lsl.w	r3, r1, r4
 80004e6:	ea40 0003 	orr.w	r0, r0, r3
 80004ea:	4629      	mov	r1, r5
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	fa21 f004 	lsr.w	r0, r1, r4
 80004f2:	4629      	mov	r1, r5
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	f094 0f00 	teq	r4, #0
 80004fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004fe:	bf06      	itte	eq
 8000500:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000504:	3401      	addeq	r4, #1
 8000506:	3d01      	subne	r5, #1
 8000508:	e74e      	b.n	80003a8 <__adddf3+0x8c>
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf18      	it	ne
 8000510:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000514:	d029      	beq.n	800056a <__adddf3+0x24e>
 8000516:	ea94 0f05 	teq	r4, r5
 800051a:	bf08      	it	eq
 800051c:	ea90 0f02 	teqeq	r0, r2
 8000520:	d005      	beq.n	800052e <__adddf3+0x212>
 8000522:	ea54 0c00 	orrs.w	ip, r4, r0
 8000526:	bf04      	itt	eq
 8000528:	4619      	moveq	r1, r3
 800052a:	4610      	moveq	r0, r2
 800052c:	bd30      	pop	{r4, r5, pc}
 800052e:	ea91 0f03 	teq	r1, r3
 8000532:	bf1e      	ittt	ne
 8000534:	2100      	movne	r1, #0
 8000536:	2000      	movne	r0, #0
 8000538:	bd30      	popne	{r4, r5, pc}
 800053a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800053e:	d105      	bne.n	800054c <__adddf3+0x230>
 8000540:	0040      	lsls	r0, r0, #1
 8000542:	4149      	adcs	r1, r1
 8000544:	bf28      	it	cs
 8000546:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000550:	bf3c      	itt	cc
 8000552:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000556:	bd30      	popcc	{r4, r5, pc}
 8000558:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800055c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000560:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000564:	f04f 0000 	mov.w	r0, #0
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800056e:	bf1a      	itte	ne
 8000570:	4619      	movne	r1, r3
 8000572:	4610      	movne	r0, r2
 8000574:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000578:	bf1c      	itt	ne
 800057a:	460b      	movne	r3, r1
 800057c:	4602      	movne	r2, r0
 800057e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000582:	bf06      	itte	eq
 8000584:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000588:	ea91 0f03 	teqeq	r1, r3
 800058c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	bf00      	nop

08000594 <__aeabi_ui2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f04f 0500 	mov.w	r5, #0
 80005ac:	f04f 0100 	mov.w	r1, #0
 80005b0:	e750      	b.n	8000454 <__adddf3+0x138>
 80005b2:	bf00      	nop

080005b4 <__aeabi_i2d>:
 80005b4:	f090 0f00 	teq	r0, #0
 80005b8:	bf04      	itt	eq
 80005ba:	2100      	moveq	r1, #0
 80005bc:	4770      	bxeq	lr
 80005be:	b530      	push	{r4, r5, lr}
 80005c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005cc:	bf48      	it	mi
 80005ce:	4240      	negmi	r0, r0
 80005d0:	f04f 0100 	mov.w	r1, #0
 80005d4:	e73e      	b.n	8000454 <__adddf3+0x138>
 80005d6:	bf00      	nop

080005d8 <__aeabi_f2d>:
 80005d8:	0042      	lsls	r2, r0, #1
 80005da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005de:	ea4f 0131 	mov.w	r1, r1, rrx
 80005e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005e6:	bf1f      	itttt	ne
 80005e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005f4:	4770      	bxne	lr
 80005f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005fa:	bf08      	it	eq
 80005fc:	4770      	bxeq	lr
 80005fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000602:	bf04      	itt	eq
 8000604:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000608:	4770      	bxeq	lr
 800060a:	b530      	push	{r4, r5, lr}
 800060c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000610:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000614:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000618:	e71c      	b.n	8000454 <__adddf3+0x138>
 800061a:	bf00      	nop

0800061c <__aeabi_ul2d>:
 800061c:	ea50 0201 	orrs.w	r2, r0, r1
 8000620:	bf08      	it	eq
 8000622:	4770      	bxeq	lr
 8000624:	b530      	push	{r4, r5, lr}
 8000626:	f04f 0500 	mov.w	r5, #0
 800062a:	e00a      	b.n	8000642 <__aeabi_l2d+0x16>

0800062c <__aeabi_l2d>:
 800062c:	ea50 0201 	orrs.w	r2, r0, r1
 8000630:	bf08      	it	eq
 8000632:	4770      	bxeq	lr
 8000634:	b530      	push	{r4, r5, lr}
 8000636:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800063a:	d502      	bpl.n	8000642 <__aeabi_l2d+0x16>
 800063c:	4240      	negs	r0, r0
 800063e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000642:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000646:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800064a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800064e:	f43f aed8 	beq.w	8000402 <__adddf3+0xe6>
 8000652:	f04f 0203 	mov.w	r2, #3
 8000656:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800065a:	bf18      	it	ne
 800065c:	3203      	addne	r2, #3
 800065e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000662:	bf18      	it	ne
 8000664:	3203      	addne	r2, #3
 8000666:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800066a:	f1c2 0320 	rsb	r3, r2, #32
 800066e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000672:	fa20 f002 	lsr.w	r0, r0, r2
 8000676:	fa01 fe03 	lsl.w	lr, r1, r3
 800067a:	ea40 000e 	orr.w	r0, r0, lr
 800067e:	fa21 f102 	lsr.w	r1, r1, r2
 8000682:	4414      	add	r4, r2
 8000684:	e6bd      	b.n	8000402 <__adddf3+0xe6>
 8000686:	bf00      	nop

08000688 <__aeabi_uldivmod>:
 8000688:	b953      	cbnz	r3, 80006a0 <__aeabi_uldivmod+0x18>
 800068a:	b94a      	cbnz	r2, 80006a0 <__aeabi_uldivmod+0x18>
 800068c:	2900      	cmp	r1, #0
 800068e:	bf08      	it	eq
 8000690:	2800      	cmpeq	r0, #0
 8000692:	bf1c      	itt	ne
 8000694:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000698:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800069c:	f000 b9a6 	b.w	80009ec <__aeabi_idiv0>
 80006a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80006a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006a8:	f000 f83e 	bl	8000728 <__udivmoddi4>
 80006ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006b4:	b004      	add	sp, #16
 80006b6:	4770      	bx	lr

080006b8 <__aeabi_d2lz>:
 80006b8:	b508      	push	{r3, lr}
 80006ba:	4602      	mov	r2, r0
 80006bc:	460b      	mov	r3, r1
 80006be:	ec43 2b17 	vmov	d7, r2, r3
 80006c2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006ca:	d403      	bmi.n	80006d4 <__aeabi_d2lz+0x1c>
 80006cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006d0:	f000 b80a 	b.w	80006e8 <__aeabi_d2ulz>
 80006d4:	eeb1 7b47 	vneg.f64	d7, d7
 80006d8:	ec51 0b17 	vmov	r0, r1, d7
 80006dc:	f000 f804 	bl	80006e8 <__aeabi_d2ulz>
 80006e0:	4240      	negs	r0, r0
 80006e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e6:	bd08      	pop	{r3, pc}

080006e8 <__aeabi_d2ulz>:
 80006e8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000718 <__aeabi_d2ulz+0x30>
 80006ec:	ec41 0b17 	vmov	d7, r0, r1
 80006f0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000720 <__aeabi_d2ulz+0x38>
 80006f4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006f8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006fc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000700:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000704:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000708:	ee16 1a10 	vmov	r1, s12
 800070c:	ee17 0a90 	vmov	r0, s15
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	f3af 8000 	nop.w
 8000718:	00000000 	.word	0x00000000
 800071c:	3df00000 	.word	0x3df00000
 8000720:	00000000 	.word	0x00000000
 8000724:	41f00000 	.word	0x41f00000

08000728 <__udivmoddi4>:
 8000728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800072c:	9d08      	ldr	r5, [sp, #32]
 800072e:	4604      	mov	r4, r0
 8000730:	468c      	mov	ip, r1
 8000732:	2b00      	cmp	r3, #0
 8000734:	f040 8083 	bne.w	800083e <__udivmoddi4+0x116>
 8000738:	428a      	cmp	r2, r1
 800073a:	4617      	mov	r7, r2
 800073c:	d947      	bls.n	80007ce <__udivmoddi4+0xa6>
 800073e:	fab2 f282 	clz	r2, r2
 8000742:	b142      	cbz	r2, 8000756 <__udivmoddi4+0x2e>
 8000744:	f1c2 0020 	rsb	r0, r2, #32
 8000748:	fa24 f000 	lsr.w	r0, r4, r0
 800074c:	4091      	lsls	r1, r2
 800074e:	4097      	lsls	r7, r2
 8000750:	ea40 0c01 	orr.w	ip, r0, r1
 8000754:	4094      	lsls	r4, r2
 8000756:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800075a:	0c23      	lsrs	r3, r4, #16
 800075c:	fbbc f6f8 	udiv	r6, ip, r8
 8000760:	fa1f fe87 	uxth.w	lr, r7
 8000764:	fb08 c116 	mls	r1, r8, r6, ip
 8000768:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800076c:	fb06 f10e 	mul.w	r1, r6, lr
 8000770:	4299      	cmp	r1, r3
 8000772:	d909      	bls.n	8000788 <__udivmoddi4+0x60>
 8000774:	18fb      	adds	r3, r7, r3
 8000776:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800077a:	f080 8119 	bcs.w	80009b0 <__udivmoddi4+0x288>
 800077e:	4299      	cmp	r1, r3
 8000780:	f240 8116 	bls.w	80009b0 <__udivmoddi4+0x288>
 8000784:	3e02      	subs	r6, #2
 8000786:	443b      	add	r3, r7
 8000788:	1a5b      	subs	r3, r3, r1
 800078a:	b2a4      	uxth	r4, r4
 800078c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000790:	fb08 3310 	mls	r3, r8, r0, r3
 8000794:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000798:	fb00 fe0e 	mul.w	lr, r0, lr
 800079c:	45a6      	cmp	lr, r4
 800079e:	d909      	bls.n	80007b4 <__udivmoddi4+0x8c>
 80007a0:	193c      	adds	r4, r7, r4
 80007a2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80007a6:	f080 8105 	bcs.w	80009b4 <__udivmoddi4+0x28c>
 80007aa:	45a6      	cmp	lr, r4
 80007ac:	f240 8102 	bls.w	80009b4 <__udivmoddi4+0x28c>
 80007b0:	3802      	subs	r0, #2
 80007b2:	443c      	add	r4, r7
 80007b4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007b8:	eba4 040e 	sub.w	r4, r4, lr
 80007bc:	2600      	movs	r6, #0
 80007be:	b11d      	cbz	r5, 80007c8 <__udivmoddi4+0xa0>
 80007c0:	40d4      	lsrs	r4, r2
 80007c2:	2300      	movs	r3, #0
 80007c4:	e9c5 4300 	strd	r4, r3, [r5]
 80007c8:	4631      	mov	r1, r6
 80007ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ce:	b902      	cbnz	r2, 80007d2 <__udivmoddi4+0xaa>
 80007d0:	deff      	udf	#255	; 0xff
 80007d2:	fab2 f282 	clz	r2, r2
 80007d6:	2a00      	cmp	r2, #0
 80007d8:	d150      	bne.n	800087c <__udivmoddi4+0x154>
 80007da:	1bcb      	subs	r3, r1, r7
 80007dc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007e0:	fa1f f887 	uxth.w	r8, r7
 80007e4:	2601      	movs	r6, #1
 80007e6:	fbb3 fcfe 	udiv	ip, r3, lr
 80007ea:	0c21      	lsrs	r1, r4, #16
 80007ec:	fb0e 331c 	mls	r3, lr, ip, r3
 80007f0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80007f4:	fb08 f30c 	mul.w	r3, r8, ip
 80007f8:	428b      	cmp	r3, r1
 80007fa:	d907      	bls.n	800080c <__udivmoddi4+0xe4>
 80007fc:	1879      	adds	r1, r7, r1
 80007fe:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000802:	d202      	bcs.n	800080a <__udivmoddi4+0xe2>
 8000804:	428b      	cmp	r3, r1
 8000806:	f200 80e9 	bhi.w	80009dc <__udivmoddi4+0x2b4>
 800080a:	4684      	mov	ip, r0
 800080c:	1ac9      	subs	r1, r1, r3
 800080e:	b2a3      	uxth	r3, r4
 8000810:	fbb1 f0fe 	udiv	r0, r1, lr
 8000814:	fb0e 1110 	mls	r1, lr, r0, r1
 8000818:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800081c:	fb08 f800 	mul.w	r8, r8, r0
 8000820:	45a0      	cmp	r8, r4
 8000822:	d907      	bls.n	8000834 <__udivmoddi4+0x10c>
 8000824:	193c      	adds	r4, r7, r4
 8000826:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800082a:	d202      	bcs.n	8000832 <__udivmoddi4+0x10a>
 800082c:	45a0      	cmp	r8, r4
 800082e:	f200 80d9 	bhi.w	80009e4 <__udivmoddi4+0x2bc>
 8000832:	4618      	mov	r0, r3
 8000834:	eba4 0408 	sub.w	r4, r4, r8
 8000838:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800083c:	e7bf      	b.n	80007be <__udivmoddi4+0x96>
 800083e:	428b      	cmp	r3, r1
 8000840:	d909      	bls.n	8000856 <__udivmoddi4+0x12e>
 8000842:	2d00      	cmp	r5, #0
 8000844:	f000 80b1 	beq.w	80009aa <__udivmoddi4+0x282>
 8000848:	2600      	movs	r6, #0
 800084a:	e9c5 0100 	strd	r0, r1, [r5]
 800084e:	4630      	mov	r0, r6
 8000850:	4631      	mov	r1, r6
 8000852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000856:	fab3 f683 	clz	r6, r3
 800085a:	2e00      	cmp	r6, #0
 800085c:	d14a      	bne.n	80008f4 <__udivmoddi4+0x1cc>
 800085e:	428b      	cmp	r3, r1
 8000860:	d302      	bcc.n	8000868 <__udivmoddi4+0x140>
 8000862:	4282      	cmp	r2, r0
 8000864:	f200 80b8 	bhi.w	80009d8 <__udivmoddi4+0x2b0>
 8000868:	1a84      	subs	r4, r0, r2
 800086a:	eb61 0103 	sbc.w	r1, r1, r3
 800086e:	2001      	movs	r0, #1
 8000870:	468c      	mov	ip, r1
 8000872:	2d00      	cmp	r5, #0
 8000874:	d0a8      	beq.n	80007c8 <__udivmoddi4+0xa0>
 8000876:	e9c5 4c00 	strd	r4, ip, [r5]
 800087a:	e7a5      	b.n	80007c8 <__udivmoddi4+0xa0>
 800087c:	f1c2 0320 	rsb	r3, r2, #32
 8000880:	fa20 f603 	lsr.w	r6, r0, r3
 8000884:	4097      	lsls	r7, r2
 8000886:	fa01 f002 	lsl.w	r0, r1, r2
 800088a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800088e:	40d9      	lsrs	r1, r3
 8000890:	4330      	orrs	r0, r6
 8000892:	0c03      	lsrs	r3, r0, #16
 8000894:	fbb1 f6fe 	udiv	r6, r1, lr
 8000898:	fa1f f887 	uxth.w	r8, r7
 800089c:	fb0e 1116 	mls	r1, lr, r6, r1
 80008a0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008a4:	fb06 f108 	mul.w	r1, r6, r8
 80008a8:	4299      	cmp	r1, r3
 80008aa:	fa04 f402 	lsl.w	r4, r4, r2
 80008ae:	d909      	bls.n	80008c4 <__udivmoddi4+0x19c>
 80008b0:	18fb      	adds	r3, r7, r3
 80008b2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80008b6:	f080 808d 	bcs.w	80009d4 <__udivmoddi4+0x2ac>
 80008ba:	4299      	cmp	r1, r3
 80008bc:	f240 808a 	bls.w	80009d4 <__udivmoddi4+0x2ac>
 80008c0:	3e02      	subs	r6, #2
 80008c2:	443b      	add	r3, r7
 80008c4:	1a5b      	subs	r3, r3, r1
 80008c6:	b281      	uxth	r1, r0
 80008c8:	fbb3 f0fe 	udiv	r0, r3, lr
 80008cc:	fb0e 3310 	mls	r3, lr, r0, r3
 80008d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008d4:	fb00 f308 	mul.w	r3, r0, r8
 80008d8:	428b      	cmp	r3, r1
 80008da:	d907      	bls.n	80008ec <__udivmoddi4+0x1c4>
 80008dc:	1879      	adds	r1, r7, r1
 80008de:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80008e2:	d273      	bcs.n	80009cc <__udivmoddi4+0x2a4>
 80008e4:	428b      	cmp	r3, r1
 80008e6:	d971      	bls.n	80009cc <__udivmoddi4+0x2a4>
 80008e8:	3802      	subs	r0, #2
 80008ea:	4439      	add	r1, r7
 80008ec:	1acb      	subs	r3, r1, r3
 80008ee:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80008f2:	e778      	b.n	80007e6 <__udivmoddi4+0xbe>
 80008f4:	f1c6 0c20 	rsb	ip, r6, #32
 80008f8:	fa03 f406 	lsl.w	r4, r3, r6
 80008fc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000900:	431c      	orrs	r4, r3
 8000902:	fa20 f70c 	lsr.w	r7, r0, ip
 8000906:	fa01 f306 	lsl.w	r3, r1, r6
 800090a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800090e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000912:	431f      	orrs	r7, r3
 8000914:	0c3b      	lsrs	r3, r7, #16
 8000916:	fbb1 f9fe 	udiv	r9, r1, lr
 800091a:	fa1f f884 	uxth.w	r8, r4
 800091e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000922:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000926:	fb09 fa08 	mul.w	sl, r9, r8
 800092a:	458a      	cmp	sl, r1
 800092c:	fa02 f206 	lsl.w	r2, r2, r6
 8000930:	fa00 f306 	lsl.w	r3, r0, r6
 8000934:	d908      	bls.n	8000948 <__udivmoddi4+0x220>
 8000936:	1861      	adds	r1, r4, r1
 8000938:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800093c:	d248      	bcs.n	80009d0 <__udivmoddi4+0x2a8>
 800093e:	458a      	cmp	sl, r1
 8000940:	d946      	bls.n	80009d0 <__udivmoddi4+0x2a8>
 8000942:	f1a9 0902 	sub.w	r9, r9, #2
 8000946:	4421      	add	r1, r4
 8000948:	eba1 010a 	sub.w	r1, r1, sl
 800094c:	b2bf      	uxth	r7, r7
 800094e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000952:	fb0e 1110 	mls	r1, lr, r0, r1
 8000956:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800095a:	fb00 f808 	mul.w	r8, r0, r8
 800095e:	45b8      	cmp	r8, r7
 8000960:	d907      	bls.n	8000972 <__udivmoddi4+0x24a>
 8000962:	19e7      	adds	r7, r4, r7
 8000964:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000968:	d22e      	bcs.n	80009c8 <__udivmoddi4+0x2a0>
 800096a:	45b8      	cmp	r8, r7
 800096c:	d92c      	bls.n	80009c8 <__udivmoddi4+0x2a0>
 800096e:	3802      	subs	r0, #2
 8000970:	4427      	add	r7, r4
 8000972:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000976:	eba7 0708 	sub.w	r7, r7, r8
 800097a:	fba0 8902 	umull	r8, r9, r0, r2
 800097e:	454f      	cmp	r7, r9
 8000980:	46c6      	mov	lr, r8
 8000982:	4649      	mov	r1, r9
 8000984:	d31a      	bcc.n	80009bc <__udivmoddi4+0x294>
 8000986:	d017      	beq.n	80009b8 <__udivmoddi4+0x290>
 8000988:	b15d      	cbz	r5, 80009a2 <__udivmoddi4+0x27a>
 800098a:	ebb3 020e 	subs.w	r2, r3, lr
 800098e:	eb67 0701 	sbc.w	r7, r7, r1
 8000992:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000996:	40f2      	lsrs	r2, r6
 8000998:	ea4c 0202 	orr.w	r2, ip, r2
 800099c:	40f7      	lsrs	r7, r6
 800099e:	e9c5 2700 	strd	r2, r7, [r5]
 80009a2:	2600      	movs	r6, #0
 80009a4:	4631      	mov	r1, r6
 80009a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009aa:	462e      	mov	r6, r5
 80009ac:	4628      	mov	r0, r5
 80009ae:	e70b      	b.n	80007c8 <__udivmoddi4+0xa0>
 80009b0:	4606      	mov	r6, r0
 80009b2:	e6e9      	b.n	8000788 <__udivmoddi4+0x60>
 80009b4:	4618      	mov	r0, r3
 80009b6:	e6fd      	b.n	80007b4 <__udivmoddi4+0x8c>
 80009b8:	4543      	cmp	r3, r8
 80009ba:	d2e5      	bcs.n	8000988 <__udivmoddi4+0x260>
 80009bc:	ebb8 0e02 	subs.w	lr, r8, r2
 80009c0:	eb69 0104 	sbc.w	r1, r9, r4
 80009c4:	3801      	subs	r0, #1
 80009c6:	e7df      	b.n	8000988 <__udivmoddi4+0x260>
 80009c8:	4608      	mov	r0, r1
 80009ca:	e7d2      	b.n	8000972 <__udivmoddi4+0x24a>
 80009cc:	4660      	mov	r0, ip
 80009ce:	e78d      	b.n	80008ec <__udivmoddi4+0x1c4>
 80009d0:	4681      	mov	r9, r0
 80009d2:	e7b9      	b.n	8000948 <__udivmoddi4+0x220>
 80009d4:	4666      	mov	r6, ip
 80009d6:	e775      	b.n	80008c4 <__udivmoddi4+0x19c>
 80009d8:	4630      	mov	r0, r6
 80009da:	e74a      	b.n	8000872 <__udivmoddi4+0x14a>
 80009dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80009e0:	4439      	add	r1, r7
 80009e2:	e713      	b.n	800080c <__udivmoddi4+0xe4>
 80009e4:	3802      	subs	r0, #2
 80009e6:	443c      	add	r4, r7
 80009e8:	e724      	b.n	8000834 <__udivmoddi4+0x10c>
 80009ea:	bf00      	nop

080009ec <__aeabi_idiv0>:
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <MX_BlueNRG_2_Init>:
  PRINT_CSV("%02d:%02d:%02d.%03d", ms/(60*60*1000)%24, ms/(60*1000)%60, (ms/1000)%60, ms%1000);
}
#endif

void MX_BlueNRG_2_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN BlueNRG_2_Init_PreTreatment */

  /* USER CODE END BlueNRG_2_Init_PreTreatment */

  User_Init();
 80009f4:	f000 f80c 	bl	8000a10 <User_Init>

  hci_init(NULL, NULL);
 80009f8:	2100      	movs	r1, #0
 80009fa:	2000      	movs	r0, #0
 80009fc:	f00a f9a8 	bl	800ad50 <hci_init>

  /* USER CODE BEGIN BlueNRG_2_Init_PostTreatment */

  /* USER CODE END BlueNRG_2_Init_PostTreatment */
}
 8000a00:	bf00      	nop
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <MX_BlueNRG_2_Process>:

/*
 * BlueNRG-2 background task
 */
void MX_BlueNRG_2_Process(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BlueNRG_2_Process_PreTreatment */

  /* USER CODE END BlueNRG_2_Process_PreTreatment */

  User_Process();
 8000a08:	f000 f80a 	bl	8000a20 <User_Process>

  /* USER CODE BEGIN BlueNRG_2_Process_PostTreatment */

  /* USER CODE END BlueNRG_2_Process_PostTreatment */
}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <User_Init>:
 *
 * @param  None
 * @retval None
 */
static void User_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  BSP_COM_Init(COM1);
 8000a14:	2000      	movs	r0, #0
 8000a16:	f001 fafd 	bl	8002014 <BSP_COM_Init>
}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
	...

08000a20 <User_Process>:
 *
 * @param  None
 * @retval None
 */
static void User_Process(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b0c2      	sub	sp, #264	; 0x108
 8000a24:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status;
  uint8_t len;
  int i;

  /* Read uart header */
  status = HAL_UART_Receive(&hcom_uart[COM1], (uint8_t *)uart_header, UARTHEADERSIZE, BLE_UART_SHORT_TIMEOUT);
 8000a26:	231e      	movs	r3, #30
 8000a28:	2204      	movs	r2, #4
 8000a2a:	4939      	ldr	r1, [pc, #228]	; (8000b10 <User_Process+0xf0>)
 8000a2c:	4839      	ldr	r0, [pc, #228]	; (8000b14 <User_Process+0xf4>)
 8000a2e:	f007 fd24 	bl	800847a <HAL_UART_Receive>
 8000a32:	4603      	mov	r3, r0
 8000a34:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
  if (status != HAL_OK && status != HAL_TIMEOUT)
 8000a38:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d005      	beq.n	8000a4c <User_Process+0x2c>
 8000a40:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8000a44:	2b03      	cmp	r3, #3
 8000a46:	d001      	beq.n	8000a4c <User_Process+0x2c>
  {
    Error_Handler();
 8000a48:	f000 feb0 	bl	80017ac <Error_Handler>
  }

  if (status == HAL_OK) {
 8000a4c:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d150      	bne.n	8000af6 <User_Process+0xd6>
    //We actually received data from the GUI
    PRINT_DBG("From GUI ");

    len = uart_header[UARTHEADERSIZE-1];
 8000a54:	4b2e      	ldr	r3, [pc, #184]	; (8000b10 <User_Process+0xf0>)
 8000a56:	78db      	ldrb	r3, [r3, #3]
 8000a58:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102

    if (len > 0) {
 8000a5c:	f897 3102 	ldrb.w	r3, [r7, #258]	; 0x102
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d00d      	beq.n	8000a80 <User_Process+0x60>
      /*## Put UART peripheral in reception process ###########################*/
      /* Any data received will be stored "aRxBuffer" buffer */
      if(HAL_UART_Receive(&hcom_uart[COM1], (uint8_t *)aRxBuffer, len, BLE_UART_LONG_TIMEOUT) != HAL_OK)
 8000a64:	f897 3102 	ldrb.w	r3, [r7, #258]	; 0x102
 8000a68:	b29a      	uxth	r2, r3
 8000a6a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000a6e:	492a      	ldr	r1, [pc, #168]	; (8000b18 <User_Process+0xf8>)
 8000a70:	4828      	ldr	r0, [pc, #160]	; (8000b14 <User_Process+0xf4>)
 8000a72:	f007 fd02 	bl	800847a <HAL_UART_Receive>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <User_Process+0x60>
      {
        Error_Handler();
 8000a7c:	f000 fe96 	bl	80017ac <Error_Handler>
    }
    PRINT_CSV("\n");
#endif

    /* write data received from the vcom to the BlueNRG chip via SPI */
    if (uart_header[HCI_TYPE_OFFSET] == HCI_COMMAND_PKT) {
 8000a80:	4b23      	ldr	r3, [pc, #140]	; (8000b10 <User_Process+0xf0>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	2b01      	cmp	r3, #1
 8000a86:	d107      	bne.n	8000a98 <User_Process+0x78>
      //This is an HCI command so pass it to BlueNRG via SPI
      Hal_Write_Serial(uart_header, aRxBuffer, UARTHEADERSIZE, len);
 8000a88:	f897 3102 	ldrb.w	r3, [r7, #258]	; 0x102
 8000a8c:	2204      	movs	r2, #4
 8000a8e:	4922      	ldr	r1, [pc, #136]	; (8000b18 <User_Process+0xf8>)
 8000a90:	481f      	ldr	r0, [pc, #124]	; (8000b10 <User_Process+0xf0>)
 8000a92:	f000 f8c5 	bl	8000c20 <Hal_Write_Serial>
 8000a96:	e02e      	b.n	8000af6 <User_Process+0xd6>
    } else {
      //Process the command locally without bothering with the BlueNRG chip
      handle_vendor_command(uart_header, UARTHEADERSIZE);
 8000a98:	2104      	movs	r1, #4
 8000a9a:	481d      	ldr	r0, [pc, #116]	; (8000b10 <User_Process+0xf0>)
 8000a9c:	f000 f840 	bl	8000b20 <handle_vendor_command>
    }
  }

  while (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET) {
 8000aa0:	e029      	b.n	8000af6 <User_Process+0xd6>
    uint8_t rx_buffer[255];
    uint8_t rx_bytes;

    /* Data are available from BlueNRG: read them through SPI */
    rx_bytes = HCI_TL_SPI_Receive(rx_buffer, sizeof(rx_buffer));
 8000aa2:	463b      	mov	r3, r7
 8000aa4:	21ff      	movs	r1, #255	; 0xff
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f000 f9e8 	bl	8000e7c <HCI_TL_SPI_Receive>
 8000aac:	4603      	mov	r3, r0
 8000aae:	f887 3101 	strb.w	r3, [r7, #257]	; 0x101

    /* Check if there is data is so, send it to VCOM */
    if (rx_bytes > 0) {
 8000ab2:	f897 3101 	ldrb.w	r3, [r7, #257]	; 0x101
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d01d      	beq.n	8000af6 <User_Process+0xd6>
        PRINT_CSV(" %02x", (uint8_t*)rx_buffer[i]);
      }
      PRINT_CSV("\n");
#endif

      for (i = 0; i < rx_bytes; i++) {
 8000aba:	2300      	movs	r3, #0
 8000abc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000ac0:	e013      	b.n	8000aea <User_Process+0xca>
        if(HAL_UART_Transmit(&hcom_uart[COM1], (uint8_t*)&rx_buffer[i], 1, BLE_UART_LONG_TIMEOUT)!= HAL_OK) {
 8000ac2:	463a      	mov	r2, r7
 8000ac4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000ac8:	18d1      	adds	r1, r2, r3
 8000aca:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000ace:	2201      	movs	r2, #1
 8000ad0:	4810      	ldr	r0, [pc, #64]	; (8000b14 <User_Process+0xf4>)
 8000ad2:	f007 fc3f 	bl	8008354 <HAL_UART_Transmit>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <User_Process+0xc0>
          Error_Handler();
 8000adc:	f000 fe66 	bl	80017ac <Error_Handler>
      for (i = 0; i < rx_bytes; i++) {
 8000ae0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000aea:	f897 3101 	ldrb.w	r3, [r7, #257]	; 0x101
 8000aee:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8000af2:	429a      	cmp	r2, r3
 8000af4:	dbe5      	blt.n	8000ac2 <User_Process+0xa2>
  while (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET) {
 8000af6:	2180      	movs	r1, #128	; 0x80
 8000af8:	4808      	ldr	r0, [pc, #32]	; (8000b1c <User_Process+0xfc>)
 8000afa:	f003 f9db 	bl	8003eb4 <HAL_GPIO_ReadPin>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	d0ce      	beq.n	8000aa2 <User_Process+0x82>
        }
      }
    }
  }
}
 8000b04:	bf00      	nop
 8000b06:	bf00      	nop
 8000b08:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	200016bc 	.word	0x200016bc
 8000b14:	20001a68 	.word	0x20001a68
 8000b18:	200016c0 	.word	0x200016c0
 8000b1c:	40021000 	.word	0x40021000

08000b20 <handle_vendor_command>:
 * @param  cmd: the command
 * @param  cmd_len: the length of the command
 * @return None
 */
void handle_vendor_command(uint8_t* cmd, uint8_t cmd_len)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b0c4      	sub	sp, #272	; 0x110
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	1d3b      	adds	r3, r7, #4
 8000b28:	6018      	str	r0, [r3, #0]
 8000b2a:	460a      	mov	r2, r1
 8000b2c:	1cfb      	adds	r3, r7, #3
 8000b2e:	701a      	strb	r2, [r3, #0]
  int unsupported = 0;
 8000b30:	2300      	movs	r3, #0
 8000b32:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  uint8_t len = 0;
 8000b36:	2300      	movs	r3, #0
 8000b38:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
  uint8_t response[MAX_RESP_SIZE];

  response[0] = HCI_VENDOR_PKT;
 8000b3c:	f107 030c 	add.w	r3, r7, #12
 8000b40:	22ff      	movs	r2, #255	; 0xff
 8000b42:	701a      	strb	r2, [r3, #0]
  response[RESP_VENDOR_CODE_OFFSET] = RESPONSE;
 8000b44:	f107 030c 	add.w	r3, r7, #12
 8000b48:	2201      	movs	r2, #1
 8000b4a:	705a      	strb	r2, [r3, #1]
  response[RESP_CMDCODE_OFFSET] = cmd[HCI_VENDOR_CMDCODE_OFFSET];
 8000b4c:	1d3b      	adds	r3, r7, #4
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	785a      	ldrb	r2, [r3, #1]
 8000b52:	f107 030c 	add.w	r3, r7, #12
 8000b56:	711a      	strb	r2, [r3, #4]
  response[RESP_STATUS_OFFSET] = 0;
 8000b58:	f107 030c 	add.w	r3, r7, #12
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	715a      	strb	r2, [r3, #5]

  if (cmd[HCI_TYPE_OFFSET] == HCI_VENDOR_PKT) {
 8000b60:	1d3b      	adds	r3, r7, #4
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	2bff      	cmp	r3, #255	; 0xff
 8000b68:	d122      	bne.n	8000bb0 <handle_vendor_command+0x90>
    switch (cmd[HCI_VENDOR_CMDCODE_OFFSET]) {
 8000b6a:	1d3b      	adds	r3, r7, #4
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	3301      	adds	r3, #1
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	2b05      	cmp	r3, #5
 8000b74:	d015      	beq.n	8000ba2 <handle_vendor_command+0x82>
 8000b76:	2b05      	cmp	r3, #5
 8000b78:	dc16      	bgt.n	8000ba8 <handle_vendor_command+0x88>
 8000b7a:	2b01      	cmp	r3, #1
 8000b7c:	d002      	beq.n	8000b84 <handle_vendor_command+0x64>
 8000b7e:	2b04      	cmp	r3, #4
 8000b80:	d00c      	beq.n	8000b9c <handle_vendor_command+0x7c>
 8000b82:	e011      	b.n	8000ba8 <handle_vendor_command+0x88>
    case VERSION:
      response[RESP_PARAM_OFFSET] = FW_VERSION_MAJOR;
 8000b84:	f107 030c 	add.w	r3, r7, #12
 8000b88:	2201      	movs	r2, #1
 8000b8a:	719a      	strb	r2, [r3, #6]
      response[RESP_PARAM_OFFSET+1] = FW_VERSION_MINOR;
 8000b8c:	f107 030c 	add.w	r3, r7, #12
 8000b90:	2206      	movs	r2, #6
 8000b92:	71da      	strb	r2, [r3, #7]
      len = 2;
 8000b94:	2302      	movs	r3, #2
 8000b96:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
      break;
 8000b9a:	e00c      	b.n	8000bb6 <handle_vendor_command+0x96>

    case BLUENRG_RESET:
      HCI_TL_SPI_Reset();
 8000b9c:	f000 f94e 	bl	8000e3c <HCI_TL_SPI_Reset>
      break;
 8000ba0:	e009      	b.n	8000bb6 <handle_vendor_command+0x96>

    case HW_BOOTLOADER:
      BlueNRG_HW_Bootloader();
 8000ba2:	f000 f885 	bl	8000cb0 <BlueNRG_HW_Bootloader>
      break;
 8000ba6:	e006      	b.n	8000bb6 <handle_vendor_command+0x96>

    default:
      unsupported = 1;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000bae:	e002      	b.n	8000bb6 <handle_vendor_command+0x96>
    }
  } else {
    unsupported = 1;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  }

  if (unsupported) {
 8000bb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d003      	beq.n	8000bc6 <handle_vendor_command+0xa6>
    response[RESP_STATUS_OFFSET] = UNKNOWN_COMMAND;
 8000bbe:	f107 030c 	add.w	r3, r7, #12
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	715a      	strb	r2, [r3, #5]
  }

  len += 2; //Status and Command code
 8000bc6:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8000bca:	3302      	adds	r3, #2
 8000bcc:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
  PACK_2_BYTE_PARAMETER(response + RESP_LEN_OFFSET_LSB, len);
 8000bd0:	f107 030c 	add.w	r3, r7, #12
 8000bd4:	f897 210b 	ldrb.w	r2, [r7, #267]	; 0x10b
 8000bd8:	709a      	strb	r2, [r3, #2]
 8000bda:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8000bde:	121b      	asrs	r3, r3, #8
 8000be0:	b2da      	uxtb	r2, r3
 8000be2:	f107 030c 	add.w	r3, r7, #12
 8000be6:	70da      	strb	r2, [r3, #3]
  len += RESP_CMDCODE_OFFSET;
 8000be8:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8000bec:	3304      	adds	r3, #4
 8000bee:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    PRINT_CSV(" %02x", response[i]);
  }
  PRINT_CSV("\n");
#endif

  if(HAL_UART_Transmit(&hcom_uart[COM1], (uint8_t*)response, len, BLE_UART_LONG_TIMEOUT) != HAL_OK) {
 8000bf2:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8000bf6:	b29a      	uxth	r2, r3
 8000bf8:	f107 010c 	add.w	r1, r7, #12
 8000bfc:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000c00:	4806      	ldr	r0, [pc, #24]	; (8000c1c <handle_vendor_command+0xfc>)
 8000c02:	f007 fba7 	bl	8008354 <HAL_UART_Transmit>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <handle_vendor_command+0xf0>
    Error_Handler();
 8000c0c:	f000 fdce 	bl	80017ac <Error_Handler>
  }
}
 8000c10:	bf00      	nop
 8000c12:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20001a68 	.word	0x20001a68

08000c20 <Hal_Write_Serial>:
 * @param  n_bytes2: number of bytes in 2nd buffer
 * @retval None
 */
void Hal_Write_Serial(const void* data1, const void* data2, int32_t n_bytes1,
                      int32_t n_bytes2)
{
 8000c20:	b590      	push	{r4, r7, lr}
 8000c22:	b0c7      	sub	sp, #284	; 0x11c
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	f107 040c 	add.w	r4, r7, #12
 8000c2a:	6020      	str	r0, [r4, #0]
 8000c2c:	f107 0008 	add.w	r0, r7, #8
 8000c30:	6001      	str	r1, [r0, #0]
 8000c32:	1d39      	adds	r1, r7, #4
 8000c34:	600a      	str	r2, [r1, #0]
 8000c36:	463a      	mov	r2, r7
 8000c38:	6013      	str	r3, [r2, #0]
  uint8_t buff[UARTHEADERSIZE + RXBUFFERSIZE];
  uint32_t tickstart;

  BLUENRG_memcpy(buff, (uint8_t *)data1, n_bytes1);
 8000c3a:	1d3b      	adds	r3, r7, #4
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	f107 030c 	add.w	r3, r7, #12
 8000c42:	f107 0010 	add.w	r0, r7, #16
 8000c46:	6819      	ldr	r1, [r3, #0]
 8000c48:	f00f fe64 	bl	8010914 <memcpy>
  BLUENRG_memcpy(buff + n_bytes1, (uint8_t *)data2, n_bytes2);
 8000c4c:	1d3b      	adds	r3, r7, #4
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f107 0210 	add.w	r2, r7, #16
 8000c54:	18d0      	adds	r0, r2, r3
 8000c56:	463b      	mov	r3, r7
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	f107 0308 	add.w	r3, r7, #8
 8000c5e:	6819      	ldr	r1, [r3, #0]
 8000c60:	f00f fe58 	bl	8010914 <memcpy>

  tickstart = HAL_GetTick();
 8000c64:	f001 fafa 	bl	800225c <HAL_GetTick>
 8000c68:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  while(1){
    /* Data are available for the BlueNRG: write them through SPI */
    if (HCI_TL_SPI_Send(buff, n_bytes1+n_bytes2) == 0) break;
 8000c6c:	1d3b      	adds	r3, r7, #4
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	b29a      	uxth	r2, r3
 8000c72:	463b      	mov	r3, r7
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	b29b      	uxth	r3, r3
 8000c78:	4413      	add	r3, r2
 8000c7a:	b29a      	uxth	r2, r3
 8000c7c:	f107 0310 	add.w	r3, r7, #16
 8000c80:	4611      	mov	r1, r2
 8000c82:	4618      	mov	r0, r3
 8000c84:	f000 f956 	bl	8000f34 <HCI_TL_SPI_Send>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d008      	beq.n	8000ca0 <Hal_Write_Serial+0x80>
    if ((HAL_GetTick() - tickstart) > (HCI_DEFAULT_TIMEOUT_MS/10)) break;
 8000c8e:	f001 fae5 	bl	800225c <HAL_GetTick>
 8000c92:	4602      	mov	r2, r0
 8000c94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000c98:	1ad3      	subs	r3, r2, r3
 8000c9a:	2b64      	cmp	r3, #100	; 0x64
 8000c9c:	d802      	bhi.n	8000ca4 <Hal_Write_Serial+0x84>
    if (HCI_TL_SPI_Send(buff, n_bytes1+n_bytes2) == 0) break;
 8000c9e:	e7e5      	b.n	8000c6c <Hal_Write_Serial+0x4c>
 8000ca0:	bf00      	nop
 8000ca2:	e000      	b.n	8000ca6 <Hal_Write_Serial+0x86>
    if ((HAL_GetTick() - tickstart) > (HCI_DEFAULT_TIMEOUT_MS/10)) break;
 8000ca4:	bf00      	nop
  }
}
 8000ca6:	bf00      	nop
 8000ca8:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd90      	pop	{r4, r7, pc}

08000cb0 <BlueNRG_HW_Bootloader>:
 * @brief  Activate internal bootloader using pin.
 * @param  None
 * @retval None
 */
void BlueNRG_HW_Bootloader(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  Disable_SPI_IRQ();
 8000cb4:	f000 f811 	bl	8000cda <Disable_SPI_IRQ>
  set_irq_as_output();
 8000cb8:	f000 f816 	bl	8000ce8 <set_irq_as_output>

  HCI_TL_SPI_Reset();
 8000cbc:	f000 f8be 	bl	8000e3c <HCI_TL_SPI_Reset>

  set_irq_as_input();
 8000cc0:	f000 f82e 	bl	8000d20 <set_irq_as_input>
  Enable_SPI_IRQ();
 8000cc4:	f000 f802 	bl	8000ccc <Enable_SPI_IRQ>
}
 8000cc8:	bf00      	nop
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <Enable_SPI_IRQ>:
 * @brief  Enable SPI IRQ.
 * @param  None
 * @retval None
 */
void Enable_SPI_IRQ(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  HAL_NVIC_EnableIRQ(HCI_TL_SPI_EXTI_IRQn);
 8000cd0:	2017      	movs	r0, #23
 8000cd2:	f001 fe96 	bl	8002a02 <HAL_NVIC_EnableIRQ>
}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <Disable_SPI_IRQ>:
 * @brief  Disable SPI IRQ.
 * @param  None
 * @retval None
 */
void Disable_SPI_IRQ(void)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	af00      	add	r7, sp, #0
  HAL_NVIC_DisableIRQ(HCI_TL_SPI_EXTI_IRQn);
 8000cde:	2017      	movs	r0, #23
 8000ce0:	f001 fe9d 	bl	8002a1e <HAL_NVIC_DisableIRQ>
}
 8000ce4:	bf00      	nop
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <set_irq_as_output>:
 * @brief  Set in Output mode the IRQ.
 * @param  None
 * @retval None
 */
void set_irq_as_output(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Pull IRQ high */
  GPIO_InitStructure.Pin   = HCI_TL_SPI_IRQ_PIN;
 8000cee:	2380      	movs	r3, #128	; 0x80
 8000cf0:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf6:	2303      	movs	r3, #3
 8000cf8:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(HCI_TL_SPI_IRQ_PORT, &GPIO_InitStructure);
 8000cfe:	1d3b      	adds	r3, r7, #4
 8000d00:	4619      	mov	r1, r3
 8000d02:	4806      	ldr	r0, [pc, #24]	; (8000d1c <set_irq_as_output+0x34>)
 8000d04:	f002 fe1e 	bl	8003944 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(HCI_TL_SPI_IRQ_PORT, HCI_TL_SPI_IRQ_PIN, GPIO_PIN_SET);
 8000d08:	2201      	movs	r2, #1
 8000d0a:	2180      	movs	r1, #128	; 0x80
 8000d0c:	4803      	ldr	r0, [pc, #12]	; (8000d1c <set_irq_as_output+0x34>)
 8000d0e:	f003 f8e9 	bl	8003ee4 <HAL_GPIO_WritePin>
}
 8000d12:	bf00      	nop
 8000d14:	3718      	adds	r7, #24
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40021000 	.word	0x40021000

08000d20 <set_irq_as_input>:
 * @brief  Set the IRQ in input mode.
 * @param  None
 * @retval None
 */
void set_irq_as_input(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b086      	sub	sp, #24
 8000d24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* IRQ input */
  GPIO_InitStructure.Pin       = HCI_TL_SPI_IRQ_PIN;
 8000d26:	2380      	movs	r3, #128	; 0x80
 8000d28:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode      = GPIO_MODE_IT_RISING;
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <set_irq_as_input+0x3c>)
 8000d2c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Pull      = GPIO_PULLDOWN;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d32:	2303      	movs	r3, #3
 8000d34:	613b      	str	r3, [r7, #16]
#ifdef IS_GPIO_AF
  GPIO_InitStructure.Alternate = 0;
 8000d36:	2300      	movs	r3, #0
 8000d38:	617b      	str	r3, [r7, #20]
#endif
  HAL_GPIO_Init(HCI_TL_SPI_IRQ_PORT, &GPIO_InitStructure);
 8000d3a:	1d3b      	adds	r3, r7, #4
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4808      	ldr	r0, [pc, #32]	; (8000d60 <set_irq_as_input+0x40>)
 8000d40:	f002 fe00 	bl	8003944 <HAL_GPIO_Init>

  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(HCI_TL_SPI_IRQ_PORT, &GPIO_InitStructure);
 8000d48:	1d3b      	adds	r3, r7, #4
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4804      	ldr	r0, [pc, #16]	; (8000d60 <set_irq_as_input+0x40>)
 8000d4e:	f002 fdf9 	bl	8003944 <HAL_GPIO_Init>
}
 8000d52:	bf00      	nop
 8000d54:	3718      	adds	r7, #24
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	10110000 	.word	0x10110000
 8000d60:	40021000 	.word	0x40021000

08000d64 <HCI_TL_SPI_Disable_IRQ>:
 * @brief  Disable SPI IRQ.
 * @param  None
 * @retval None
 */
static void HCI_TL_SPI_Disable_IRQ(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  HAL_NVIC_DisableIRQ(HCI_TL_SPI_EXTI_IRQn);
 8000d68:	2017      	movs	r0, #23
 8000d6a:	f001 fe58 	bl	8002a1e <HAL_NVIC_DisableIRQ>
}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
	...

08000d74 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b088      	sub	sp, #32
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7c:	4b21      	ldr	r3, [pc, #132]	; (8000e04 <HCI_TL_SPI_Init+0x90>)
 8000d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d80:	4a20      	ldr	r2, [pc, #128]	; (8000e04 <HCI_TL_SPI_Init+0x90>)
 8000d82:	f043 0301 	orr.w	r3, r3, #1
 8000d86:	6313      	str	r3, [r2, #48]	; 0x30
 8000d88:	4b1e      	ldr	r3, [pc, #120]	; (8000e04 <HCI_TL_SPI_Init+0x90>)
 8000d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8c:	f003 0301 	and.w	r3, r3, #1
 8000d90:	60bb      	str	r3, [r7, #8]
 8000d92:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8000d94:	2380      	movs	r3, #128	; 0x80
 8000d96:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d98:	4b1b      	ldr	r3, [pc, #108]	; (8000e08 <HCI_TL_SPI_Init+0x94>)
 8000d9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 8000da0:	f107 030c 	add.w	r3, r7, #12
 8000da4:	4619      	mov	r1, r3
 8000da6:	4819      	ldr	r0, [pc, #100]	; (8000e0c <HCI_TL_SPI_Init+0x98>)
 8000da8:	f002 fdcc 	bl	8003944 <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 8000dac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000db0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db2:	2301      	movs	r3, #1
 8000db4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 8000dbe:	f107 030c 	add.w	r3, r7, #12
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4811      	ldr	r0, [pc, #68]	; (8000e0c <HCI_TL_SPI_Init+0x98>)
 8000dc6:	f002 fdbd 	bl	8003944 <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 8000dca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 8000ddc:	f107 030c 	add.w	r3, r7, #12
 8000de0:	4619      	mov	r1, r3
 8000de2:	480a      	ldr	r0, [pc, #40]	; (8000e0c <HCI_TL_SPI_Init+0x98>)
 8000de4:	f002 fdae 	bl	8003944 <HAL_GPIO_Init>
  /* Deselect CS PIN for BlueNRG at startup to avoid spurious commands */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000de8:	2201      	movs	r2, #1
 8000dea:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dee:	4807      	ldr	r0, [pc, #28]	; (8000e0c <HCI_TL_SPI_Init+0x98>)
 8000df0:	f003 f878 	bl	8003ee4 <HAL_GPIO_WritePin>

  return BSP_SPI2_Init();
 8000df4:	f000 fa02 	bl	80011fc <BSP_SPI2_Init>
 8000df8:	4603      	mov	r3, r0
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3720      	adds	r7, #32
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40023800 	.word	0x40023800
 8000e08:	10110000 	.word	0x10110000
 8000e0c:	40021000 	.word	0x40021000

08000e10 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 8000e14:	2180      	movs	r1, #128	; 0x80
 8000e16:	4808      	ldr	r0, [pc, #32]	; (8000e38 <HCI_TL_SPI_DeInit+0x28>)
 8000e18:	f002 ff40 	bl	8003c9c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 8000e1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e20:	4805      	ldr	r0, [pc, #20]	; (8000e38 <HCI_TL_SPI_DeInit+0x28>)
 8000e22:	f002 ff3b 	bl	8003c9c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 8000e26:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e2a:	4803      	ldr	r0, [pc, #12]	; (8000e38 <HCI_TL_SPI_DeInit+0x28>)
 8000e2c:	f002 ff36 	bl	8003c9c <HAL_GPIO_DeInit>
  return 0;
 8000e30:	2300      	movs	r3, #0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40021000 	.word	0x40021000

08000e3c <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000e40:	2201      	movs	r2, #1
 8000e42:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e46:	480c      	ldr	r0, [pc, #48]	; (8000e78 <HCI_TL_SPI_Reset+0x3c>)
 8000e48:	f003 f84c 	bl	8003ee4 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e52:	4809      	ldr	r0, [pc, #36]	; (8000e78 <HCI_TL_SPI_Reset+0x3c>)
 8000e54:	f003 f846 	bl	8003ee4 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8000e58:	2005      	movs	r0, #5
 8000e5a:	f001 fa0b 	bl	8002274 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 8000e5e:	2201      	movs	r2, #1
 8000e60:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e64:	4804      	ldr	r0, [pc, #16]	; (8000e78 <HCI_TL_SPI_Reset+0x3c>)
 8000e66:	f003 f83d 	bl	8003ee4 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8000e6a:	2005      	movs	r0, #5
 8000e6c:	f001 fa02 	bl	8002274 <HAL_Delay>
  return 0;
 8000e70:	2300      	movs	r3, #0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40021000 	.word	0x40021000

08000e7c <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b088      	sub	sp, #32
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	460b      	mov	r3, r1
 8000e86:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	777b      	strb	r3, [r7, #29]
  uint8_t char_00 = 0x00;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	773b      	strb	r3, [r7, #28]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8000e90:	4a26      	ldr	r2, [pc, #152]	; (8000f2c <HCI_TL_SPI_Receive+0xb0>)
 8000e92:	f107 0314 	add.w	r3, r7, #20
 8000e96:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e9a:	6018      	str	r0, [r3, #0]
 8000e9c:	3304      	adds	r3, #4
 8000e9e:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  HCI_TL_SPI_Disable_IRQ();
 8000ea0:	f7ff ff60 	bl	8000d64 <HCI_TL_SPI_Disable_IRQ>

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eaa:	4821      	ldr	r0, [pc, #132]	; (8000f30 <HCI_TL_SPI_Receive+0xb4>)
 8000eac:	f003 f81a 	bl	8003ee4 <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI2_SendRecv(header_master, header_slave, HEADER_SIZE);
 8000eb0:	f107 010c 	add.w	r1, r7, #12
 8000eb4:	f107 0314 	add.w	r3, r7, #20
 8000eb8:	2205      	movs	r2, #5
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f000 f9ce 	bl	800125c <BSP_SPI2_SendRecv>

  /* device is ready */
  byte_count = (header_slave[4] << 8)| header_slave[3];
 8000ec0:	7c3b      	ldrb	r3, [r7, #16]
 8000ec2:	021b      	lsls	r3, r3, #8
 8000ec4:	b21a      	sxth	r2, r3
 8000ec6:	7bfb      	ldrb	r3, [r7, #15]
 8000ec8:	b21b      	sxth	r3, r3
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	b21b      	sxth	r3, r3
 8000ece:	83fb      	strh	r3, [r7, #30]

  if(byte_count > 0)
 8000ed0:	8bfb      	ldrh	r3, [r7, #30]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d01e      	beq.n	8000f14 <HCI_TL_SPI_Receive+0x98>
  {

    /* avoid to read more data than the size of the buffer */
    if (byte_count > size)
 8000ed6:	8bfa      	ldrh	r2, [r7, #30]
 8000ed8:	887b      	ldrh	r3, [r7, #2]
 8000eda:	429a      	cmp	r2, r3
 8000edc:	d901      	bls.n	8000ee2 <HCI_TL_SPI_Receive+0x66>
    {
      byte_count = size;
 8000ede:	887b      	ldrh	r3, [r7, #2]
 8000ee0:	83fb      	strh	r3, [r7, #30]
    }

    for(len = 0; len < byte_count; len++)
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	777b      	strb	r3, [r7, #29]
 8000ee6:	e010      	b.n	8000f0a <HCI_TL_SPI_Receive+0x8e>
    {
      BSP_SPI2_SendRecv(&char_00, (uint8_t*)&read_char, 1);
 8000ee8:	f107 011b 	add.w	r1, r7, #27
 8000eec:	f107 031c 	add.w	r3, r7, #28
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f000 f9b2 	bl	800125c <BSP_SPI2_SendRecv>
      buffer[len] = read_char;
 8000ef8:	7f7b      	ldrb	r3, [r7, #29]
 8000efa:	687a      	ldr	r2, [r7, #4]
 8000efc:	4413      	add	r3, r2
 8000efe:	7efa      	ldrb	r2, [r7, #27]
 8000f00:	b2d2      	uxtb	r2, r2
 8000f02:	701a      	strb	r2, [r3, #0]
    for(len = 0; len < byte_count; len++)
 8000f04:	7f7b      	ldrb	r3, [r7, #29]
 8000f06:	3301      	adds	r3, #1
 8000f08:	777b      	strb	r3, [r7, #29]
 8000f0a:	7f7b      	ldrb	r3, [r7, #29]
 8000f0c:	b29b      	uxth	r3, r3
 8000f0e:	8bfa      	ldrh	r2, [r7, #30]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d8e9      	bhi.n	8000ee8 <HCI_TL_SPI_Receive+0x6c>
    }
  }

  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000f14:	2201      	movs	r2, #1
 8000f16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f1a:	4805      	ldr	r0, [pc, #20]	; (8000f30 <HCI_TL_SPI_Receive+0xb4>)
 8000f1c:	f002 ffe2 	bl	8003ee4 <HAL_GPIO_WritePin>

  return len;
 8000f20:	7f7b      	ldrb	r3, [r7, #29]
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3720      	adds	r7, #32
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	080135b0 	.word	0x080135b0
 8000f30:	40021000 	.word	0x40021000

08000f34 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b08a      	sub	sp, #40	; 0x28
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	807b      	strh	r3, [r7, #2]
  int32_t result;
  uint16_t rx_bytes;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8000f40:	4a34      	ldr	r2, [pc, #208]	; (8001014 <HCI_TL_SPI_Send+0xe0>)
 8000f42:	f107 0314 	add.w	r3, r7, #20
 8000f46:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f4a:	6018      	str	r0, [r3, #0]
 8000f4c:	3304      	adds	r3, #4
 8000f4e:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 8000f50:	f001 f984 	bl	800225c <HAL_GetTick>
 8000f54:	6238      	str	r0, [r7, #32]

  do
  {
    uint32_t tickstart_data_available = HAL_GetTick();
 8000f56:	f001 f981 	bl	800225c <HAL_GetTick>
 8000f5a:	61f8      	str	r0, [r7, #28]

    result = 0;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	627b      	str	r3, [r7, #36]	; 0x24

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8000f60:	2200      	movs	r2, #0
 8000f62:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f66:	482c      	ldr	r0, [pc, #176]	; (8001018 <HCI_TL_SPI_Send+0xe4>)
 8000f68:	f002 ffbc 	bl	8003ee4 <HAL_GPIO_WritePin>

    /*
     * Wait until BlueNRG-2 is ready.
     * When ready it will raise the IRQ pin.
     */
    while(!IsDataAvailable())
 8000f6c:	e00a      	b.n	8000f84 <HCI_TL_SPI_Send+0x50>
    {
      if((HAL_GetTick() - tickstart_data_available) > TIMEOUT_DURATION)
 8000f6e:	f001 f975 	bl	800225c <HAL_GetTick>
 8000f72:	4602      	mov	r2, r0
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	1ad3      	subs	r3, r2, r3
 8000f78:	2b0f      	cmp	r3, #15
 8000f7a:	d903      	bls.n	8000f84 <HCI_TL_SPI_Send+0x50>
      {
        result = -3;
 8000f7c:	f06f 0302 	mvn.w	r3, #2
 8000f80:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8000f82:	e004      	b.n	8000f8e <HCI_TL_SPI_Send+0x5a>
    while(!IsDataAvailable())
 8000f84:	f000 f84c 	bl	8001020 <IsDataAvailable>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d0ef      	beq.n	8000f6e <HCI_TL_SPI_Send+0x3a>
      }
    }
    if(result == -3)
 8000f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f90:	f113 0f03 	cmn.w	r3, #3
 8000f94:	d106      	bne.n	8000fa4 <HCI_TL_SPI_Send+0x70>
    {
      /* The break causes the exiting from the "while", so the CS line must be released */
      HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000f96:	2201      	movs	r2, #1
 8000f98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f9c:	481e      	ldr	r0, [pc, #120]	; (8001018 <HCI_TL_SPI_Send+0xe4>)
 8000f9e:	f002 ffa1 	bl	8003ee4 <HAL_GPIO_WritePin>
      break;
 8000fa2:	e031      	b.n	8001008 <HCI_TL_SPI_Send+0xd4>
    }

    /* Read header */
    BSP_SPI2_SendRecv(header_master, header_slave, HEADER_SIZE);
 8000fa4:	f107 010c 	add.w	r1, r7, #12
 8000fa8:	f107 0314 	add.w	r3, r7, #20
 8000fac:	2205      	movs	r2, #5
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f000 f954 	bl	800125c <BSP_SPI2_SendRecv>

    rx_bytes = (((uint16_t)header_slave[2])<<8) | ((uint16_t)header_slave[1]);
 8000fb4:	7bbb      	ldrb	r3, [r7, #14]
 8000fb6:	021b      	lsls	r3, r3, #8
 8000fb8:	b21a      	sxth	r2, r3
 8000fba:	7b7b      	ldrb	r3, [r7, #13]
 8000fbc:	b21b      	sxth	r3, r3
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	b21b      	sxth	r3, r3
 8000fc2:	837b      	strh	r3, [r7, #26]

    if(rx_bytes >= size)
 8000fc4:	8b7a      	ldrh	r2, [r7, #26]
 8000fc6:	887b      	ldrh	r3, [r7, #2]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d306      	bcc.n	8000fda <HCI_TL_SPI_Send+0xa6>
    {
      /* Buffer is big enough */
      BSP_SPI2_SendRecv(buffer, read_char_buf, size);
 8000fcc:	887b      	ldrh	r3, [r7, #2]
 8000fce:	461a      	mov	r2, r3
 8000fd0:	4912      	ldr	r1, [pc, #72]	; (800101c <HCI_TL_SPI_Send+0xe8>)
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f000 f942 	bl	800125c <BSP_SPI2_SendRecv>
 8000fd8:	e002      	b.n	8000fe0 <HCI_TL_SPI_Send+0xac>
    }
    else
    {
      /* Buffer is too small */
      result = -2;
 8000fda:	f06f 0301 	mvn.w	r3, #1
 8000fde:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fe6:	480c      	ldr	r0, [pc, #48]	; (8001018 <HCI_TL_SPI_Send+0xe4>)
 8000fe8:	f002 ff7c 	bl	8003ee4 <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 8000fec:	f001 f936 	bl	800225c <HAL_GetTick>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	6a3b      	ldr	r3, [r7, #32]
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	2b0f      	cmp	r3, #15
 8000ff8:	d903      	bls.n	8001002 <HCI_TL_SPI_Send+0xce>
    {
      result = -3;
 8000ffa:	f06f 0302 	mvn.w	r3, #2
 8000ffe:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8001000:	e002      	b.n	8001008 <HCI_TL_SPI_Send+0xd4>
    }
  } while(result < 0);
 8001002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001004:	2b00      	cmp	r3, #0
 8001006:	dba6      	blt.n	8000f56 <HCI_TL_SPI_Send+0x22>

  return result;
 8001008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800100a:	4618      	mov	r0, r3
 800100c:	3728      	adds	r7, #40	; 0x28
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	080135b8 	.word	0x080135b8
 8001018:	40021000 	.word	0x40021000
 800101c:	20000410 	.word	0x20000410

08001020 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8001024:	2180      	movs	r1, #128	; 0x80
 8001026:	4805      	ldr	r0, [pc, #20]	; (800103c <IsDataAvailable+0x1c>)
 8001028:	f002 ff44 	bl	8003eb4 <HAL_GPIO_ReadPin>
 800102c:	4603      	mov	r3, r0
 800102e:	2b01      	cmp	r3, #1
 8001030:	bf0c      	ite	eq
 8001032:	2301      	moveq	r3, #1
 8001034:	2300      	movne	r3, #0
 8001036:	b2db      	uxtb	r3, r3
}
 8001038:	4618      	mov	r0, r3
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40021000 	.word	0x40021000

08001040 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b088      	sub	sp, #32
 8001044:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 8001046:	4b12      	ldr	r3, [pc, #72]	; (8001090 <hci_tl_lowlevel_init+0x50>)
 8001048:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 800104a:	4b12      	ldr	r3, [pc, #72]	; (8001094 <hci_tl_lowlevel_init+0x54>)
 800104c:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 800104e:	4b12      	ldr	r3, [pc, #72]	; (8001098 <hci_tl_lowlevel_init+0x58>)
 8001050:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 8001052:	4b12      	ldr	r3, [pc, #72]	; (800109c <hci_tl_lowlevel_init+0x5c>)
 8001054:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 8001056:	4b12      	ldr	r3, [pc, #72]	; (80010a0 <hci_tl_lowlevel_init+0x60>)
 8001058:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 800105a:	4b12      	ldr	r3, [pc, #72]	; (80010a4 <hci_tl_lowlevel_init+0x64>)
 800105c:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 800105e:	1d3b      	adds	r3, r7, #4
 8001060:	4618      	mov	r0, r3
 8001062:	f009 feb7 	bl	800add4 <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti7, EXTI_LINE_7);
 8001066:	4910      	ldr	r1, [pc, #64]	; (80010a8 <hci_tl_lowlevel_init+0x68>)
 8001068:	4810      	ldr	r0, [pc, #64]	; (80010ac <hci_tl_lowlevel_init+0x6c>)
 800106a:	f002 f901 	bl	8003270 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti7, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 800106e:	4a10      	ldr	r2, [pc, #64]	; (80010b0 <hci_tl_lowlevel_init+0x70>)
 8001070:	2100      	movs	r1, #0
 8001072:	480e      	ldr	r0, [pc, #56]	; (80010ac <hci_tl_lowlevel_init+0x6c>)
 8001074:	f002 f8e2 	bl	800323c <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001078:	2200      	movs	r2, #0
 800107a:	2100      	movs	r1, #0
 800107c:	2017      	movs	r0, #23
 800107e:	f001 fca4 	bl	80029ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001082:	2017      	movs	r0, #23
 8001084:	f001 fcbd 	bl	8002a02 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 8001088:	bf00      	nop
 800108a:	3720      	adds	r7, #32
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	08000d75 	.word	0x08000d75
 8001094:	08000e11 	.word	0x08000e11
 8001098:	08000f35 	.word	0x08000f35
 800109c:	08000e7d 	.word	0x08000e7d
 80010a0:	08000e3d 	.word	0x08000e3d
 80010a4:	0800129d 	.word	0x0800129d
 80010a8:	06000007 	.word	0x06000007
 80010ac:	200017c0 	.word	0x200017c0
 80010b0:	080010b5 	.word	0x080010b5

080010b4 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 80010b8:	e005      	b.n	80010c6 <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 80010ba:	2000      	movs	r0, #0
 80010bc:	f009 feaa 	bl	800ae14 <hci_notify_asynch_evt>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d105      	bne.n	80010d2 <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 80010c6:	f7ff ffab 	bl	8001020 <IsDataAvailable>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d1f4      	bne.n	80010ba <hci_tl_lowlevel_isr+0x6>
 80010d0:	e000      	b.n	80010d4 <hci_tl_lowlevel_isr+0x20>
    {
      return;
 80010d2:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 80010d4:	bd80      	pop	{r7, pc}
	...

080010d8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010de:	463b      	mov	r3, r7
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80010ea:	4b21      	ldr	r3, [pc, #132]	; (8001170 <MX_ADC1_Init+0x98>)
 80010ec:	4a21      	ldr	r2, [pc, #132]	; (8001174 <MX_ADC1_Init+0x9c>)
 80010ee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010f0:	4b1f      	ldr	r3, [pc, #124]	; (8001170 <MX_ADC1_Init+0x98>)
 80010f2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010f6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010f8:	4b1d      	ldr	r3, [pc, #116]	; (8001170 <MX_ADC1_Init+0x98>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010fe:	4b1c      	ldr	r3, [pc, #112]	; (8001170 <MX_ADC1_Init+0x98>)
 8001100:	2200      	movs	r2, #0
 8001102:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001104:	4b1a      	ldr	r3, [pc, #104]	; (8001170 <MX_ADC1_Init+0x98>)
 8001106:	2201      	movs	r2, #1
 8001108:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800110a:	4b19      	ldr	r3, [pc, #100]	; (8001170 <MX_ADC1_Init+0x98>)
 800110c:	2200      	movs	r2, #0
 800110e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001112:	4b17      	ldr	r3, [pc, #92]	; (8001170 <MX_ADC1_Init+0x98>)
 8001114:	2200      	movs	r2, #0
 8001116:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001118:	4b15      	ldr	r3, [pc, #84]	; (8001170 <MX_ADC1_Init+0x98>)
 800111a:	4a17      	ldr	r2, [pc, #92]	; (8001178 <MX_ADC1_Init+0xa0>)
 800111c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800111e:	4b14      	ldr	r3, [pc, #80]	; (8001170 <MX_ADC1_Init+0x98>)
 8001120:	2200      	movs	r2, #0
 8001122:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001124:	4b12      	ldr	r3, [pc, #72]	; (8001170 <MX_ADC1_Init+0x98>)
 8001126:	2201      	movs	r2, #1
 8001128:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800112a:	4b11      	ldr	r3, [pc, #68]	; (8001170 <MX_ADC1_Init+0x98>)
 800112c:	2200      	movs	r2, #0
 800112e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001132:	4b0f      	ldr	r3, [pc, #60]	; (8001170 <MX_ADC1_Init+0x98>)
 8001134:	2201      	movs	r2, #1
 8001136:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001138:	480d      	ldr	r0, [pc, #52]	; (8001170 <MX_ADC1_Init+0x98>)
 800113a:	f001 f8bf 	bl	80022bc <HAL_ADC_Init>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001144:	f000 fb32 	bl	80017ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001148:	2301      	movs	r3, #1
 800114a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800114c:	2301      	movs	r3, #1
 800114e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001150:	2300      	movs	r3, #0
 8001152:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001154:	463b      	mov	r3, r7
 8001156:	4619      	mov	r1, r3
 8001158:	4805      	ldr	r0, [pc, #20]	; (8001170 <MX_ADC1_Init+0x98>)
 800115a:	f001 f8f3 	bl	8002344 <HAL_ADC_ConfigChannel>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001164:	f000 fb22 	bl	80017ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001168:	bf00      	nop
 800116a:	3710      	adds	r7, #16
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	200017c8 	.word	0x200017c8
 8001174:	40012000 	.word	0x40012000
 8001178:	0f000001 	.word	0x0f000001

0800117c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b08a      	sub	sp, #40	; 0x28
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001184:	f107 0314 	add.w	r3, r7, #20
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	609a      	str	r2, [r3, #8]
 8001190:	60da      	str	r2, [r3, #12]
 8001192:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a15      	ldr	r2, [pc, #84]	; (80011f0 <HAL_ADC_MspInit+0x74>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d123      	bne.n	80011e6 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800119e:	4b15      	ldr	r3, [pc, #84]	; (80011f4 <HAL_ADC_MspInit+0x78>)
 80011a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a2:	4a14      	ldr	r2, [pc, #80]	; (80011f4 <HAL_ADC_MspInit+0x78>)
 80011a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011a8:	6453      	str	r3, [r2, #68]	; 0x44
 80011aa:	4b12      	ldr	r3, [pc, #72]	; (80011f4 <HAL_ADC_MspInit+0x78>)
 80011ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011b2:	613b      	str	r3, [r7, #16]
 80011b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b6:	4b0f      	ldr	r3, [pc, #60]	; (80011f4 <HAL_ADC_MspInit+0x78>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	4a0e      	ldr	r2, [pc, #56]	; (80011f4 <HAL_ADC_MspInit+0x78>)
 80011bc:	f043 0301 	orr.w	r3, r3, #1
 80011c0:	6313      	str	r3, [r2, #48]	; 0x30
 80011c2:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <HAL_ADC_MspInit+0x78>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = ADC1_3_3V_Pin|ADC1_5_0V_Pin|ADC1_Battery_Pin|GPIO_PIN_4;
 80011ce:	231e      	movs	r3, #30
 80011d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011d2:	2303      	movs	r3, #3
 80011d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d6:	2300      	movs	r3, #0
 80011d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011da:	f107 0314 	add.w	r3, r7, #20
 80011de:	4619      	mov	r1, r3
 80011e0:	4805      	ldr	r0, [pc, #20]	; (80011f8 <HAL_ADC_MspInit+0x7c>)
 80011e2:	f002 fbaf 	bl	8003944 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011e6:	bf00      	nop
 80011e8:	3728      	adds	r7, #40	; 0x28
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40012000 	.word	0x40012000
 80011f4:	40023800 	.word	0x40023800
 80011f8:	40020000 	.word	0x40020000

080011fc <BSP_SPI2_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI2_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8001202:	2300      	movs	r3, #0
 8001204:	607b      	str	r3, [r7, #4]

  hspi2.Instance  = SPI2;
 8001206:	4b12      	ldr	r3, [pc, #72]	; (8001250 <BSP_SPI2_Init+0x54>)
 8001208:	4a12      	ldr	r2, [pc, #72]	; (8001254 <BSP_SPI2_Init+0x58>)
 800120a:	601a      	str	r2, [r3, #0]

  if(SPI2InitCounter++ == 0)
 800120c:	4b12      	ldr	r3, [pc, #72]	; (8001258 <BSP_SPI2_Init+0x5c>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	1c5a      	adds	r2, r3, #1
 8001212:	4911      	ldr	r1, [pc, #68]	; (8001258 <BSP_SPI2_Init+0x5c>)
 8001214:	600a      	str	r2, [r1, #0]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d114      	bne.n	8001244 <BSP_SPI2_Init+0x48>
  {
	if (HAL_SPI_GetState(&hspi2) == HAL_SPI_STATE_RESET)
 800121a:	480d      	ldr	r0, [pc, #52]	; (8001250 <BSP_SPI2_Init+0x54>)
 800121c:	f006 f87c 	bl	8007318 <HAL_SPI_GetState>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d10e      	bne.n	8001244 <BSP_SPI2_Init+0x48>
	{
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
		/* Init the SPI Msp */
		SPI2_MspInit(&hspi2);
 8001226:	480a      	ldr	r0, [pc, #40]	; (8001250 <BSP_SPI2_Init+0x54>)
 8001228:	f000 f882 	bl	8001330 <SPI2_MspInit>
			{
				return BSP_ERROR_MSP_FAILURE;
			}
		}
#endif
		if(ret == BSP_ERROR_NONE)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d108      	bne.n	8001244 <BSP_SPI2_Init+0x48>
		{
			/* Init the SPI */
			if (MX_SPI2_Init(&hspi2) != HAL_OK)
 8001232:	4807      	ldr	r0, [pc, #28]	; (8001250 <BSP_SPI2_Init+0x54>)
 8001234:	f000 f83a 	bl	80012ac <MX_SPI2_Init>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d002      	beq.n	8001244 <BSP_SPI2_Init+0x48>
			{
				ret = BSP_ERROR_BUS_FAILURE;
 800123e:	f06f 0307 	mvn.w	r3, #7
 8001242:	607b      	str	r3, [r7, #4]
			}
		}
	}
  }

  return ret;
 8001244:	687b      	ldr	r3, [r7, #4]
}
 8001246:	4618      	mov	r0, r3
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20001810 	.word	0x20001810
 8001254:	40003800 	.word	0x40003800
 8001258:	20000510 	.word	0x20000510

0800125c <BSP_SPI2_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI2_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b088      	sub	sp, #32
 8001260:	af02      	add	r7, sp, #8
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	60b9      	str	r1, [r7, #8]
 8001266:	4613      	mov	r3, r2
 8001268:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800126a:	2300      	movs	r3, #0
 800126c:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi2, pTxData, pRxData, Length, BUS_SPI2_POLL_TIMEOUT) != HAL_OK)
 800126e:	88fb      	ldrh	r3, [r7, #6]
 8001270:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001274:	9200      	str	r2, [sp, #0]
 8001276:	68ba      	ldr	r2, [r7, #8]
 8001278:	68f9      	ldr	r1, [r7, #12]
 800127a:	4807      	ldr	r0, [pc, #28]	; (8001298 <BSP_SPI2_SendRecv+0x3c>)
 800127c:	f005 fe39 	bl	8006ef2 <HAL_SPI_TransmitReceive>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d002      	beq.n	800128c <BSP_SPI2_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8001286:	f06f 0305 	mvn.w	r3, #5
 800128a:	617b      	str	r3, [r7, #20]
  }
  return ret;
 800128c:	697b      	ldr	r3, [r7, #20]
}
 800128e:	4618      	mov	r0, r3
 8001290:	3718      	adds	r7, #24
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20001810 	.word	0x20001810

0800129c <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80012a0:	f000 ffdc 	bl	800225c <HAL_GetTick>
 80012a4:	4603      	mov	r3, r0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	bd80      	pop	{r7, pc}
	...

080012ac <MX_SPI2_Init>:

/* SPI2 init function */

__weak HAL_StatusTypeDef MX_SPI2_Init(SPI_HandleTypeDef* hspi)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80012b4:	2300      	movs	r3, #0
 80012b6:	73fb      	strb	r3, [r7, #15]
  hspi->Instance = SPI2;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	4a1c      	ldr	r2, [pc, #112]	; (800132c <MX_SPI2_Init+0x80>)
 80012bc:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012c4:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2200      	movs	r2, #0
 80012ca:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_4BIT;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f44f 7240 	mov.w	r2, #768	; 0x300
 80012d2:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2200      	movs	r2, #0
 80012d8:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2200      	movs	r2, #0
 80012de:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012e6:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2200      	movs	r2, #0
 80012ec:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2200      	movs	r2, #0
 80012f2:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2200      	movs	r2, #0
 80012f8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2200      	movs	r2, #0
 80012fe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2207      	movs	r2, #7
 8001304:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2200      	movs	r2, #0
 800130a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2208      	movs	r2, #8
 8001310:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f005 fd42 	bl	8006d9c <HAL_SPI_Init>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_SPI2_Init+0x76>
  {
    ret = HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001322:	7bfb      	ldrb	r3, [r7, #15]
}
 8001324:	4618      	mov	r0, r3
 8001326:	3710      	adds	r7, #16
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	40003800 	.word	0x40003800

08001330 <SPI2_MspInit>:

static void SPI2_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b08a      	sub	sp, #40	; 0x28
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001338:	4b2c      	ldr	r3, [pc, #176]	; (80013ec <SPI2_MspInit+0xbc>)
 800133a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133c:	4a2b      	ldr	r2, [pc, #172]	; (80013ec <SPI2_MspInit+0xbc>)
 800133e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001342:	6413      	str	r3, [r2, #64]	; 0x40
 8001344:	4b29      	ldr	r3, [pc, #164]	; (80013ec <SPI2_MspInit+0xbc>)
 8001346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001348:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800134c:	613b      	str	r3, [r7, #16]
 800134e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001350:	4b26      	ldr	r3, [pc, #152]	; (80013ec <SPI2_MspInit+0xbc>)
 8001352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001354:	4a25      	ldr	r2, [pc, #148]	; (80013ec <SPI2_MspInit+0xbc>)
 8001356:	f043 0304 	orr.w	r3, r3, #4
 800135a:	6313      	str	r3, [r2, #48]	; 0x30
 800135c:	4b23      	ldr	r3, [pc, #140]	; (80013ec <SPI2_MspInit+0xbc>)
 800135e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001360:	f003 0304 	and.w	r3, r3, #4
 8001364:	60fb      	str	r3, [r7, #12]
 8001366:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001368:	4b20      	ldr	r3, [pc, #128]	; (80013ec <SPI2_MspInit+0xbc>)
 800136a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136c:	4a1f      	ldr	r2, [pc, #124]	; (80013ec <SPI2_MspInit+0xbc>)
 800136e:	f043 0302 	orr.w	r3, r3, #2
 8001372:	6313      	str	r3, [r2, #48]	; 0x30
 8001374:	4b1d      	ldr	r3, [pc, #116]	; (80013ec <SPI2_MspInit+0xbc>)
 8001376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001378:	f003 0302 	and.w	r3, r3, #2
 800137c:	60bb      	str	r3, [r7, #8]
 800137e:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = BUS_SPI2_MOSI_GPIO_PIN;
 8001380:	2302      	movs	r3, #2
 8001382:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001384:	2302      	movs	r3, #2
 8001386:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	2300      	movs	r3, #0
 800138a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800138c:	2303      	movs	r3, #3
 800138e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI2_MOSI_GPIO_AF;
 8001390:	2305      	movs	r3, #5
 8001392:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI2_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8001394:	f107 0314 	add.w	r3, r7, #20
 8001398:	4619      	mov	r1, r3
 800139a:	4815      	ldr	r0, [pc, #84]	; (80013f0 <SPI2_MspInit+0xc0>)
 800139c:	f002 fad2 	bl	8003944 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI2_MISO_GPIO_PIN;
 80013a0:	2304      	movs	r3, #4
 80013a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a4:	2302      	movs	r3, #2
 80013a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a8:	2300      	movs	r3, #0
 80013aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ac:	2303      	movs	r3, #3
 80013ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI2_MISO_GPIO_AF;
 80013b0:	2305      	movs	r3, #5
 80013b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI2_MISO_GPIO_PORT, &GPIO_InitStruct);
 80013b4:	f107 0314 	add.w	r3, r7, #20
 80013b8:	4619      	mov	r1, r3
 80013ba:	480d      	ldr	r0, [pc, #52]	; (80013f0 <SPI2_MspInit+0xc0>)
 80013bc:	f002 fac2 	bl	8003944 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI2_SCK_GPIO_PIN;
 80013c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c6:	2302      	movs	r3, #2
 80013c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ce:	2303      	movs	r3, #3
 80013d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI2_SCK_GPIO_AF;
 80013d2:	2305      	movs	r3, #5
 80013d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI2_SCK_GPIO_PORT, &GPIO_InitStruct);
 80013d6:	f107 0314 	add.w	r3, r7, #20
 80013da:	4619      	mov	r1, r3
 80013dc:	4805      	ldr	r0, [pc, #20]	; (80013f4 <SPI2_MspInit+0xc4>)
 80013de:	f002 fab1 	bl	8003944 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
}
 80013e2:	bf00      	nop
 80013e4:	3728      	adds	r7, #40	; 0x28
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40023800 	.word	0x40023800
 80013f0:	40020800 	.word	0x40020800
 80013f4:	40020400 	.word	0x40020400

080013f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80013fe:	4b0c      	ldr	r3, [pc, #48]	; (8001430 <MX_DMA_Init+0x38>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	4a0b      	ldr	r2, [pc, #44]	; (8001430 <MX_DMA_Init+0x38>)
 8001404:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001408:	6313      	str	r3, [r2, #48]	; 0x30
 800140a:	4b09      	ldr	r3, [pc, #36]	; (8001430 <MX_DMA_Init+0x38>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001412:	607b      	str	r3, [r7, #4]
 8001414:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001416:	2200      	movs	r2, #0
 8001418:	2100      	movs	r1, #0
 800141a:	203a      	movs	r0, #58	; 0x3a
 800141c:	f001 fad5 	bl	80029ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001420:	203a      	movs	r0, #58	; 0x3a
 8001422:	f001 faee 	bl	8002a02 <HAL_NVIC_EnableIRQ>

}
 8001426:	bf00      	nop
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	40023800 	.word	0x40023800

08001434 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b08c      	sub	sp, #48	; 0x30
 8001438:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143a:	f107 031c 	add.w	r3, r7, #28
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	605a      	str	r2, [r3, #4]
 8001444:	609a      	str	r2, [r3, #8]
 8001446:	60da      	str	r2, [r3, #12]
 8001448:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800144a:	4b6d      	ldr	r3, [pc, #436]	; (8001600 <MX_GPIO_Init+0x1cc>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	4a6c      	ldr	r2, [pc, #432]	; (8001600 <MX_GPIO_Init+0x1cc>)
 8001450:	f043 0310 	orr.w	r3, r3, #16
 8001454:	6313      	str	r3, [r2, #48]	; 0x30
 8001456:	4b6a      	ldr	r3, [pc, #424]	; (8001600 <MX_GPIO_Init+0x1cc>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	f003 0310 	and.w	r3, r3, #16
 800145e:	61bb      	str	r3, [r7, #24]
 8001460:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001462:	4b67      	ldr	r3, [pc, #412]	; (8001600 <MX_GPIO_Init+0x1cc>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	4a66      	ldr	r2, [pc, #408]	; (8001600 <MX_GPIO_Init+0x1cc>)
 8001468:	f043 0304 	orr.w	r3, r3, #4
 800146c:	6313      	str	r3, [r2, #48]	; 0x30
 800146e:	4b64      	ldr	r3, [pc, #400]	; (8001600 <MX_GPIO_Init+0x1cc>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	f003 0304 	and.w	r3, r3, #4
 8001476:	617b      	str	r3, [r7, #20]
 8001478:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800147a:	4b61      	ldr	r3, [pc, #388]	; (8001600 <MX_GPIO_Init+0x1cc>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	4a60      	ldr	r2, [pc, #384]	; (8001600 <MX_GPIO_Init+0x1cc>)
 8001480:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001484:	6313      	str	r3, [r2, #48]	; 0x30
 8001486:	4b5e      	ldr	r3, [pc, #376]	; (8001600 <MX_GPIO_Init+0x1cc>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800148e:	613b      	str	r3, [r7, #16]
 8001490:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001492:	4b5b      	ldr	r3, [pc, #364]	; (8001600 <MX_GPIO_Init+0x1cc>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	4a5a      	ldr	r2, [pc, #360]	; (8001600 <MX_GPIO_Init+0x1cc>)
 8001498:	f043 0301 	orr.w	r3, r3, #1
 800149c:	6313      	str	r3, [r2, #48]	; 0x30
 800149e:	4b58      	ldr	r3, [pc, #352]	; (8001600 <MX_GPIO_Init+0x1cc>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014aa:	4b55      	ldr	r3, [pc, #340]	; (8001600 <MX_GPIO_Init+0x1cc>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	4a54      	ldr	r2, [pc, #336]	; (8001600 <MX_GPIO_Init+0x1cc>)
 80014b0:	f043 0302 	orr.w	r3, r3, #2
 80014b4:	6313      	str	r3, [r2, #48]	; 0x30
 80014b6:	4b52      	ldr	r3, [pc, #328]	; (8001600 <MX_GPIO_Init+0x1cc>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	60bb      	str	r3, [r7, #8]
 80014c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014c2:	4b4f      	ldr	r3, [pc, #316]	; (8001600 <MX_GPIO_Init+0x1cc>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	4a4e      	ldr	r2, [pc, #312]	; (8001600 <MX_GPIO_Init+0x1cc>)
 80014c8:	f043 0308 	orr.w	r3, r3, #8
 80014cc:	6313      	str	r3, [r2, #48]	; 0x30
 80014ce:	4b4c      	ldr	r3, [pc, #304]	; (8001600 <MX_GPIO_Init+0x1cc>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	f003 0308 	and.w	r3, r3, #8
 80014d6:	607b      	str	r3, [r7, #4]
 80014d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_DC___LCD_Pin|GPIO_RST___LCD_Pin|GPIO_CS___LCD_Pin, GPIO_PIN_RESET);
 80014da:	2200      	movs	r2, #0
 80014dc:	2170      	movs	r1, #112	; 0x70
 80014de:	4849      	ldr	r0, [pc, #292]	; (8001604 <MX_GPIO_Init+0x1d0>)
 80014e0:	f002 fd00 	bl	8003ee4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_BLE___CS_Pin|GPIO_BLE___Reset_Pin|GPIO_Buzzer_Pin|GPIO_ChargeEN_Pin, GPIO_PIN_RESET);
 80014e4:	2200      	movs	r2, #0
 80014e6:	f240 5103 	movw	r1, #1283	; 0x503
 80014ea:	4847      	ldr	r0, [pc, #284]	; (8001608 <MX_GPIO_Init+0x1d4>)
 80014ec:	f002 fcfa 	bl	8003ee4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE4 PE5 PE6
                           PE12 PE13 PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80014f0:	f24f 0378 	movw	r3, #61560	; 0xf078
 80014f4:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014f6:	2303      	movs	r3, #3
 80014f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014fe:	f107 031c 	add.w	r3, r7, #28
 8001502:	4619      	mov	r1, r3
 8001504:	4840      	ldr	r0, [pc, #256]	; (8001608 <MX_GPIO_Init+0x1d4>)
 8001506:	f002 fa1d 	bl	8003944 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC3 PC7 PC8
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8
 800150a:	f641 7389 	movw	r3, #8073	; 0x1f89
 800150e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001510:	2303      	movs	r3, #3
 8001512:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001514:	2300      	movs	r3, #0
 8001516:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001518:	f107 031c 	add.w	r3, r7, #28
 800151c:	4619      	mov	r1, r3
 800151e:	4839      	ldr	r0, [pc, #228]	; (8001604 <MX_GPIO_Init+0x1d0>)
 8001520:	f002 fa10 	bl	8003944 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPIO_WakeUp_Pin;
 8001524:	2301      	movs	r3, #1
 8001526:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001528:	2300      	movs	r3, #0
 800152a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800152c:	2301      	movs	r3, #1
 800152e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIO_WakeUp_GPIO_Port, &GPIO_InitStruct);
 8001530:	f107 031c 	add.w	r3, r7, #28
 8001534:	4619      	mov	r1, r3
 8001536:	4835      	ldr	r0, [pc, #212]	; (800160c <MX_GPIO_Init+0x1d8>)
 8001538:	f002 fa04 	bl	8003944 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_DC___LCD_Pin|GPIO_RST___LCD_Pin|GPIO_CS___LCD_Pin;
 800153c:	2370      	movs	r3, #112	; 0x70
 800153e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001540:	2301      	movs	r3, #1
 8001542:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001544:	2300      	movs	r3, #0
 8001546:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001548:	2300      	movs	r3, #0
 800154a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800154c:	f107 031c 	add.w	r3, r7, #28
 8001550:	4619      	mov	r1, r3
 8001552:	482c      	ldr	r0, [pc, #176]	; (8001604 <MX_GPIO_Init+0x1d0>)
 8001554:	f002 f9f6 	bl	8003944 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB11 PB12
                           PB3 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12
 8001558:	f641 33fb 	movw	r3, #7163	; 0x1bfb
 800155c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800155e:	2303      	movs	r3, #3
 8001560:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001562:	2300      	movs	r3, #0
 8001564:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001566:	f107 031c 	add.w	r3, r7, #28
 800156a:	4619      	mov	r1, r3
 800156c:	4828      	ldr	r0, [pc, #160]	; (8001610 <MX_GPIO_Init+0x1dc>)
 800156e:	f002 f9e9 	bl	8003944 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPIO_BLE___EXTI_Pin;
 8001572:	2380      	movs	r3, #128	; 0x80
 8001574:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001576:	4b27      	ldr	r3, [pc, #156]	; (8001614 <MX_GPIO_Init+0x1e0>)
 8001578:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157a:	2300      	movs	r3, #0
 800157c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIO_BLE___EXTI_GPIO_Port, &GPIO_InitStruct);
 800157e:	f107 031c 	add.w	r3, r7, #28
 8001582:	4619      	mov	r1, r3
 8001584:	4820      	ldr	r0, [pc, #128]	; (8001608 <MX_GPIO_Init+0x1d4>)
 8001586:	f002 f9dd 	bl	8003944 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = GPIO_BLE___CS_Pin|GPIO_BLE___Reset_Pin|GPIO_Buzzer_Pin|GPIO_ChargeEN_Pin;
 800158a:	f240 5303 	movw	r3, #1283	; 0x503
 800158e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001590:	2301      	movs	r3, #1
 8001592:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001598:	2300      	movs	r3, #0
 800159a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800159c:	f107 031c 	add.w	r3, r7, #28
 80015a0:	4619      	mov	r1, r3
 80015a2:	4819      	ldr	r0, [pc, #100]	; (8001608 <MX_GPIO_Init+0x1d4>)
 80015a4:	f002 f9ce 	bl	8003944 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = GPIO_TriggerButton_Pin|GPIO_ArmButton_Pin;
 80015a8:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80015ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ae:	2300      	movs	r3, #0
 80015b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015b2:	2301      	movs	r3, #1
 80015b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015b6:	f107 031c 	add.w	r3, r7, #28
 80015ba:	4619      	mov	r1, r3
 80015bc:	4812      	ldr	r0, [pc, #72]	; (8001608 <MX_GPIO_Init+0x1d4>)
 80015be:	f002 f9c1 	bl	8003944 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD14
                           PD15 PD0 PD1 PD2
                           PD3 PD4 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80015c2:	f24c 739f 	movw	r3, #51103	; 0xc79f
 80015c6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015c8:	2303      	movs	r3, #3
 80015ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015cc:	2300      	movs	r3, #0
 80015ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015d0:	f107 031c 	add.w	r3, r7, #28
 80015d4:	4619      	mov	r1, r3
 80015d6:	4810      	ldr	r0, [pc, #64]	; (8001618 <MX_GPIO_Init+0x1e4>)
 80015d8:	f002 f9b4 	bl	8003944 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 80015dc:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80015e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015e2:	2303      	movs	r3, #3
 80015e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e6:	2300      	movs	r3, #0
 80015e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ea:	f107 031c 	add.w	r3, r7, #28
 80015ee:	4619      	mov	r1, r3
 80015f0:	4806      	ldr	r0, [pc, #24]	; (800160c <MX_GPIO_Init+0x1d8>)
 80015f2:	f002 f9a7 	bl	8003944 <HAL_GPIO_Init>

}
 80015f6:	bf00      	nop
 80015f8:	3730      	adds	r7, #48	; 0x30
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40023800 	.word	0x40023800
 8001604:	40020800 	.word	0x40020800
 8001608:	40021000 	.word	0x40021000
 800160c:	40020000 	.word	0x40020000
 8001610:	40020400 	.word	0x40020400
 8001614:	10110000 	.word	0x10110000
 8001618:	40020c00 	.word	0x40020c00

0800161c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001620:	f000 fdca 	bl	80021b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001624:	f000 f824 	bl	8001670 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001628:	f7ff ff04 	bl	8001434 <MX_GPIO_Init>
  MX_DMA_Init();
 800162c:	f7ff fee4 	bl	80013f8 <MX_DMA_Init>
  MX_FATFS_Init();
 8001630:	f009 fa7e 	bl	800ab30 <MX_FATFS_Init>
  MX_QUADSPI_Init();
 8001634:	f000 f8c0 	bl	80017b8 <MX_QUADSPI_Init>
  MX_SPI1_Init();
 8001638:	f000 f96c 	bl	8001914 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800163c:	f000 fbf2 	bl	8001e24 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8001640:	f00e fbd8 	bl	800fdf4 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8001644:	f7ff fd48 	bl	80010d8 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001648:	f000 fb38 	bl	8001cbc <MX_TIM2_Init>
  MX_BlueNRG_2_Init();
 800164c:	f7ff f9d0 	bl	80009f0 <MX_BlueNRG_2_Init>
  /* USER CODE BEGIN 2 */

  QSPI_Init();
 8001650:	f00c fca2 	bl	800df98 <QSPI_Init>
  fatFSInit();
 8001654:	f00d f888 	bl	800e768 <fatFSInit>

  CheckButtons();
 8001658:	f00d f914 	bl	800e884 <CheckButtons>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  CheckButtons();
 800165c:	f00d f912 	bl	800e884 <CheckButtons>
	  sendChannelMessageToRX();
 8001660:	f00d fa6c 	bl	800eb3c <sendChannelMessageToRX>
	  readUSBData();
 8001664:	f00e fb8e 	bl	800fd84 <readUSBData>

    /* USER CODE END WHILE */

  MX_BlueNRG_2_Process();
 8001668:	f7ff f9cc 	bl	8000a04 <MX_BlueNRG_2_Process>
	  CheckButtons();
 800166c:	e7f6      	b.n	800165c <main+0x40>
	...

08001670 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b0b8      	sub	sp, #224	; 0xe0
 8001674:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001676:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800167a:	2234      	movs	r2, #52	; 0x34
 800167c:	2100      	movs	r1, #0
 800167e:	4618      	mov	r0, r3
 8001680:	f00f f956 	bl	8010930 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001684:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	605a      	str	r2, [r3, #4]
 800168e:	609a      	str	r2, [r3, #8]
 8001690:	60da      	str	r2, [r3, #12]
 8001692:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001694:	f107 0308 	add.w	r3, r7, #8
 8001698:	2290      	movs	r2, #144	; 0x90
 800169a:	2100      	movs	r1, #0
 800169c:	4618      	mov	r0, r3
 800169e:	f00f f947 	bl	8010930 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80016a2:	f003 fdf7 	bl	8005294 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016a6:	4b3e      	ldr	r3, [pc, #248]	; (80017a0 <SystemClock_Config+0x130>)
 80016a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016aa:	4a3d      	ldr	r2, [pc, #244]	; (80017a0 <SystemClock_Config+0x130>)
 80016ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016b0:	6413      	str	r3, [r2, #64]	; 0x40
 80016b2:	4b3b      	ldr	r3, [pc, #236]	; (80017a0 <SystemClock_Config+0x130>)
 80016b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ba:	607b      	str	r3, [r7, #4]
 80016bc:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016be:	4b39      	ldr	r3, [pc, #228]	; (80017a4 <SystemClock_Config+0x134>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a38      	ldr	r2, [pc, #224]	; (80017a4 <SystemClock_Config+0x134>)
 80016c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016c8:	6013      	str	r3, [r2, #0]
 80016ca:	4b36      	ldr	r3, [pc, #216]	; (80017a4 <SystemClock_Config+0x134>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016d2:	603b      	str	r3, [r7, #0]
 80016d4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016d6:	2301      	movs	r3, #1
 80016d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016e4:	2302      	movs	r3, #2
 80016e6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 80016f2:	2319      	movs	r3, #25
 80016f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 432;
 80016f8:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80016fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001700:	2302      	movs	r3, #2
 8001702:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001706:	2309      	movs	r3, #9
 8001708:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800170c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001710:	4618      	mov	r0, r3
 8001712:	f004 fa6b 	bl	8005bec <HAL_RCC_OscConfig>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800171c:	f000 f846 	bl	80017ac <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001720:	f003 fdc8 	bl	80052b4 <HAL_PWREx_EnableOverDrive>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800172a:	f000 f83f 	bl	80017ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800172e:	230f      	movs	r3, #15
 8001730:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001734:	2302      	movs	r3, #2
 8001736:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800173a:	2300      	movs	r3, #0
 800173c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001740:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001744:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001748:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800174c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001750:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001754:	2107      	movs	r1, #7
 8001756:	4618      	mov	r0, r3
 8001758:	f004 fcf6 	bl	8006148 <HAL_RCC_ClockConfig>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8001762:	f000 f823 	bl	80017ac <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_TIM|RCC_PERIPHCLK_USART1
 8001766:	4b10      	ldr	r3, [pc, #64]	; (80017a8 <SystemClock_Config+0x138>)
 8001768:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800176a:	2300      	movs	r3, #0
 800176c:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800176e:	2300      	movs	r3, #0
 8001770:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001772:	2300      	movs	r3, #0
 8001774:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 8001778:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800177c:	643b      	str	r3, [r7, #64]	; 0x40

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800177e:	f107 0308 	add.w	r3, r7, #8
 8001782:	4618      	mov	r0, r3
 8001784:	f004 fee2 	bl	800654c <HAL_RCCEx_PeriphCLKConfig>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <SystemClock_Config+0x122>
  {
    Error_Handler();
 800178e:	f000 f80d 	bl	80017ac <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001792:	f004 fdc5 	bl	8006320 <HAL_RCC_EnableCSS>
}
 8001796:	bf00      	nop
 8001798:	37e0      	adds	r7, #224	; 0xe0
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	40023800 	.word	0x40023800
 80017a4:	40007000 	.word	0x40007000
 80017a8:	002000d0 	.word	0x002000d0

080017ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017b0:	b672      	cpsid	i
}
 80017b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017b4:	e7fe      	b.n	80017b4 <Error_Handler+0x8>
	...

080017b8 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 80017bc:	4b12      	ldr	r3, [pc, #72]	; (8001808 <MX_QUADSPI_Init+0x50>)
 80017be:	4a13      	ldr	r2, [pc, #76]	; (800180c <MX_QUADSPI_Init+0x54>)
 80017c0:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80017c2:	4b11      	ldr	r3, [pc, #68]	; (8001808 <MX_QUADSPI_Init+0x50>)
 80017c4:	22ff      	movs	r2, #255	; 0xff
 80017c6:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80017c8:	4b0f      	ldr	r3, [pc, #60]	; (8001808 <MX_QUADSPI_Init+0x50>)
 80017ca:	2201      	movs	r2, #1
 80017cc:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80017ce:	4b0e      	ldr	r3, [pc, #56]	; (8001808 <MX_QUADSPI_Init+0x50>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 80017d4:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <MX_QUADSPI_Init+0x50>)
 80017d6:	2201      	movs	r2, #1
 80017d8:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80017da:	4b0b      	ldr	r3, [pc, #44]	; (8001808 <MX_QUADSPI_Init+0x50>)
 80017dc:	2200      	movs	r2, #0
 80017de:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80017e0:	4b09      	ldr	r3, [pc, #36]	; (8001808 <MX_QUADSPI_Init+0x50>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80017e6:	4b08      	ldr	r3, [pc, #32]	; (8001808 <MX_QUADSPI_Init+0x50>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80017ec:	4b06      	ldr	r3, [pc, #24]	; (8001808 <MX_QUADSPI_Init+0x50>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80017f2:	4805      	ldr	r0, [pc, #20]	; (8001808 <MX_QUADSPI_Init+0x50>)
 80017f4:	f003 fdae 	bl	8005354 <HAL_QSPI_Init>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 80017fe:	f7ff ffd5 	bl	80017ac <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	20001888 	.word	0x20001888
 800180c:	a0001000 	.word	0xa0001000

08001810 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b08c      	sub	sp, #48	; 0x30
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001818:	f107 031c 	add.w	r3, r7, #28
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	605a      	str	r2, [r3, #4]
 8001822:	609a      	str	r2, [r3, #8]
 8001824:	60da      	str	r2, [r3, #12]
 8001826:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a34      	ldr	r2, [pc, #208]	; (8001900 <HAL_QSPI_MspInit+0xf0>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d161      	bne.n	80018f6 <HAL_QSPI_MspInit+0xe6>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001832:	4b34      	ldr	r3, [pc, #208]	; (8001904 <HAL_QSPI_MspInit+0xf4>)
 8001834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001836:	4a33      	ldr	r2, [pc, #204]	; (8001904 <HAL_QSPI_MspInit+0xf4>)
 8001838:	f043 0302 	orr.w	r3, r3, #2
 800183c:	6393      	str	r3, [r2, #56]	; 0x38
 800183e:	4b31      	ldr	r3, [pc, #196]	; (8001904 <HAL_QSPI_MspInit+0xf4>)
 8001840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	61bb      	str	r3, [r7, #24]
 8001848:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800184a:	4b2e      	ldr	r3, [pc, #184]	; (8001904 <HAL_QSPI_MspInit+0xf4>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	4a2d      	ldr	r2, [pc, #180]	; (8001904 <HAL_QSPI_MspInit+0xf4>)
 8001850:	f043 0310 	orr.w	r3, r3, #16
 8001854:	6313      	str	r3, [r2, #48]	; 0x30
 8001856:	4b2b      	ldr	r3, [pc, #172]	; (8001904 <HAL_QSPI_MspInit+0xf4>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	f003 0310 	and.w	r3, r3, #16
 800185e:	617b      	str	r3, [r7, #20]
 8001860:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001862:	4b28      	ldr	r3, [pc, #160]	; (8001904 <HAL_QSPI_MspInit+0xf4>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	4a27      	ldr	r2, [pc, #156]	; (8001904 <HAL_QSPI_MspInit+0xf4>)
 8001868:	f043 0302 	orr.w	r3, r3, #2
 800186c:	6313      	str	r3, [r2, #48]	; 0x30
 800186e:	4b25      	ldr	r3, [pc, #148]	; (8001904 <HAL_QSPI_MspInit+0xf4>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	613b      	str	r3, [r7, #16]
 8001878:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800187a:	4b22      	ldr	r3, [pc, #136]	; (8001904 <HAL_QSPI_MspInit+0xf4>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	4a21      	ldr	r2, [pc, #132]	; (8001904 <HAL_QSPI_MspInit+0xf4>)
 8001880:	f043 0308 	orr.w	r3, r3, #8
 8001884:	6313      	str	r3, [r2, #48]	; 0x30
 8001886:	4b1f      	ldr	r3, [pc, #124]	; (8001904 <HAL_QSPI_MspInit+0xf4>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	f003 0308 	and.w	r3, r3, #8
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	68fb      	ldr	r3, [r7, #12]
    PB10     ------> QUADSPI_BK1_NCS
    PD11     ------> QUADSPI_BK1_IO0
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001892:	2304      	movs	r3, #4
 8001894:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001896:	2302      	movs	r3, #2
 8001898:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189a:	2300      	movs	r3, #0
 800189c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800189e:	2303      	movs	r3, #3
 80018a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80018a2:	2309      	movs	r3, #9
 80018a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018a6:	f107 031c 	add.w	r3, r7, #28
 80018aa:	4619      	mov	r1, r3
 80018ac:	4816      	ldr	r0, [pc, #88]	; (8001908 <HAL_QSPI_MspInit+0xf8>)
 80018ae:	f002 f849 	bl	8003944 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10;
 80018b2:	f240 4304 	movw	r3, #1028	; 0x404
 80018b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b8:	2302      	movs	r3, #2
 80018ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018bc:	2300      	movs	r3, #0
 80018be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c0:	2303      	movs	r3, #3
 80018c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80018c4:	2309      	movs	r3, #9
 80018c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018c8:	f107 031c 	add.w	r3, r7, #28
 80018cc:	4619      	mov	r1, r3
 80018ce:	480f      	ldr	r0, [pc, #60]	; (800190c <HAL_QSPI_MspInit+0xfc>)
 80018d0:	f002 f838 	bl	8003944 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80018d4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80018d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018da:	2302      	movs	r3, #2
 80018dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018de:	2300      	movs	r3, #0
 80018e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e2:	2303      	movs	r3, #3
 80018e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80018e6:	2309      	movs	r3, #9
 80018e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018ea:	f107 031c 	add.w	r3, r7, #28
 80018ee:	4619      	mov	r1, r3
 80018f0:	4807      	ldr	r0, [pc, #28]	; (8001910 <HAL_QSPI_MspInit+0x100>)
 80018f2:	f002 f827 	bl	8003944 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 80018f6:	bf00      	nop
 80018f8:	3730      	adds	r7, #48	; 0x30
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	a0001000 	.word	0xa0001000
 8001904:	40023800 	.word	0x40023800
 8001908:	40021000 	.word	0x40021000
 800190c:	40020400 	.word	0x40020400
 8001910:	40020c00 	.word	0x40020c00

08001914 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001918:	4b1b      	ldr	r3, [pc, #108]	; (8001988 <MX_SPI1_Init+0x74>)
 800191a:	4a1c      	ldr	r2, [pc, #112]	; (800198c <MX_SPI1_Init+0x78>)
 800191c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800191e:	4b1a      	ldr	r3, [pc, #104]	; (8001988 <MX_SPI1_Init+0x74>)
 8001920:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001924:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001926:	4b18      	ldr	r3, [pc, #96]	; (8001988 <MX_SPI1_Init+0x74>)
 8001928:	2200      	movs	r2, #0
 800192a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800192c:	4b16      	ldr	r3, [pc, #88]	; (8001988 <MX_SPI1_Init+0x74>)
 800192e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001932:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001934:	4b14      	ldr	r3, [pc, #80]	; (8001988 <MX_SPI1_Init+0x74>)
 8001936:	2200      	movs	r2, #0
 8001938:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800193a:	4b13      	ldr	r3, [pc, #76]	; (8001988 <MX_SPI1_Init+0x74>)
 800193c:	2200      	movs	r2, #0
 800193e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001940:	4b11      	ldr	r3, [pc, #68]	; (8001988 <MX_SPI1_Init+0x74>)
 8001942:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001946:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001948:	4b0f      	ldr	r3, [pc, #60]	; (8001988 <MX_SPI1_Init+0x74>)
 800194a:	2210      	movs	r2, #16
 800194c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800194e:	4b0e      	ldr	r3, [pc, #56]	; (8001988 <MX_SPI1_Init+0x74>)
 8001950:	2200      	movs	r2, #0
 8001952:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001954:	4b0c      	ldr	r3, [pc, #48]	; (8001988 <MX_SPI1_Init+0x74>)
 8001956:	2200      	movs	r2, #0
 8001958:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800195a:	4b0b      	ldr	r3, [pc, #44]	; (8001988 <MX_SPI1_Init+0x74>)
 800195c:	2200      	movs	r2, #0
 800195e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001960:	4b09      	ldr	r3, [pc, #36]	; (8001988 <MX_SPI1_Init+0x74>)
 8001962:	2207      	movs	r2, #7
 8001964:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001966:	4b08      	ldr	r3, [pc, #32]	; (8001988 <MX_SPI1_Init+0x74>)
 8001968:	2200      	movs	r2, #0
 800196a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800196c:	4b06      	ldr	r3, [pc, #24]	; (8001988 <MX_SPI1_Init+0x74>)
 800196e:	2208      	movs	r2, #8
 8001970:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001972:	4805      	ldr	r0, [pc, #20]	; (8001988 <MX_SPI1_Init+0x74>)
 8001974:	f005 fa12 	bl	8006d9c <HAL_SPI_Init>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800197e:	f7ff ff15 	bl	80017ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	200018d4 	.word	0x200018d4
 800198c:	40013000 	.word	0x40013000

08001990 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b08a      	sub	sp, #40	; 0x28
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001998:	f107 0314 	add.w	r3, r7, #20
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	605a      	str	r2, [r3, #4]
 80019a2:	609a      	str	r2, [r3, #8]
 80019a4:	60da      	str	r2, [r3, #12]
 80019a6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a17      	ldr	r2, [pc, #92]	; (8001a0c <HAL_SPI_MspInit+0x7c>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d127      	bne.n	8001a02 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80019b2:	4b17      	ldr	r3, [pc, #92]	; (8001a10 <HAL_SPI_MspInit+0x80>)
 80019b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b6:	4a16      	ldr	r2, [pc, #88]	; (8001a10 <HAL_SPI_MspInit+0x80>)
 80019b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019bc:	6453      	str	r3, [r2, #68]	; 0x44
 80019be:	4b14      	ldr	r3, [pc, #80]	; (8001a10 <HAL_SPI_MspInit+0x80>)
 80019c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019c6:	613b      	str	r3, [r7, #16]
 80019c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ca:	4b11      	ldr	r3, [pc, #68]	; (8001a10 <HAL_SPI_MspInit+0x80>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	4a10      	ldr	r2, [pc, #64]	; (8001a10 <HAL_SPI_MspInit+0x80>)
 80019d0:	f043 0301 	orr.w	r3, r3, #1
 80019d4:	6313      	str	r3, [r2, #48]	; 0x30
 80019d6:	4b0e      	ldr	r3, [pc, #56]	; (8001a10 <HAL_SPI_MspInit+0x80>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK___LCD_Pin|SPI1_MISO___LCD_Pin|SPI1_MOSI___LCD_Pin;
 80019e2:	23e0      	movs	r3, #224	; 0xe0
 80019e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e6:	2302      	movs	r3, #2
 80019e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ea:	2300      	movs	r3, #0
 80019ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ee:	2303      	movs	r3, #3
 80019f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019f2:	2305      	movs	r3, #5
 80019f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f6:	f107 0314 	add.w	r3, r7, #20
 80019fa:	4619      	mov	r1, r3
 80019fc:	4805      	ldr	r0, [pc, #20]	; (8001a14 <HAL_SPI_MspInit+0x84>)
 80019fe:	f001 ffa1 	bl	8003944 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001a02:	bf00      	nop
 8001a04:	3728      	adds	r7, #40	; 0x28
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	40013000 	.word	0x40013000
 8001a10:	40023800 	.word	0x40023800
 8001a14:	40020000 	.word	0x40020000

08001a18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001a1e:	4b12      	ldr	r3, [pc, #72]	; (8001a68 <HAL_MspInit+0x50>)
 8001a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a22:	4a11      	ldr	r2, [pc, #68]	; (8001a68 <HAL_MspInit+0x50>)
 8001a24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a28:	6413      	str	r3, [r2, #64]	; 0x40
 8001a2a:	4b0f      	ldr	r3, [pc, #60]	; (8001a68 <HAL_MspInit+0x50>)
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a32:	607b      	str	r3, [r7, #4]
 8001a34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a36:	4b0c      	ldr	r3, [pc, #48]	; (8001a68 <HAL_MspInit+0x50>)
 8001a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3a:	4a0b      	ldr	r2, [pc, #44]	; (8001a68 <HAL_MspInit+0x50>)
 8001a3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a40:	6453      	str	r3, [r2, #68]	; 0x44
 8001a42:	4b09      	ldr	r3, [pc, #36]	; (8001a68 <HAL_MspInit+0x50>)
 8001a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a4a:	603b      	str	r3, [r7, #0]
 8001a4c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 8001a4e:	2200      	movs	r2, #0
 8001a50:	2100      	movs	r1, #0
 8001a52:	2004      	movs	r0, #4
 8001a54:	f000 ffb9 	bl	80029ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8001a58:	2004      	movs	r0, #4
 8001a5a:	f000 ffd2 	bl	8002a02 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a5e:	bf00      	nop
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	40023800 	.word	0x40023800

08001a6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001a70:	f004 fd50 	bl	8006514 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a74:	e7fe      	b.n	8001a74 <NMI_Handler+0x8>

08001a76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a76:	b480      	push	{r7}
 8001a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a7a:	e7fe      	b.n	8001a7a <HardFault_Handler+0x4>

08001a7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a80:	e7fe      	b.n	8001a80 <MemManage_Handler+0x4>

08001a82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a82:	b480      	push	{r7}
 8001a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a86:	e7fe      	b.n	8001a86 <BusFault_Handler+0x4>

08001a88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a8c:	e7fe      	b.n	8001a8c <UsageFault_Handler+0x4>

08001a8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a92:	bf00      	nop
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aa0:	bf00      	nop
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr

08001aaa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001aae:	bf00      	nop
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001abc:	f000 fbba 	bl	8002234 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ac0:	bf00      	nop
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8001ac8:	f001 fc42 	bl	8003350 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8001acc:	bf00      	nop
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ad4:	4802      	ldr	r0, [pc, #8]	; (8001ae0 <TIM2_IRQHandler+0x10>)
 8001ad6:	f005 fde4 	bl	80076a2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ada:	bf00      	nop
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	20001938 	.word	0x20001938

08001ae4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001ae8:	4802      	ldr	r0, [pc, #8]	; (8001af4 <DMA2_Stream2_IRQHandler+0x10>)
 8001aea:	f001 f931 	bl	8002d50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001aee:	bf00      	nop
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	20001984 	.word	0x20001984

08001af8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001afc:	4802      	ldr	r0, [pc, #8]	; (8001b08 <OTG_FS_IRQHandler+0x10>)
 8001afe:	f002 fb50 	bl	80041a2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001b02:	bf00      	nop
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	200055cc 	.word	0x200055cc

08001b0c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
	return 1;
 8001b10:	2301      	movs	r3, #1
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <_kill>:

int _kill(int pid, int sig)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b26:	f00e febb 	bl	80108a0 <__errno>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2216      	movs	r2, #22
 8001b2e:	601a      	str	r2, [r3, #0]
	return -1;
 8001b30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3708      	adds	r7, #8
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <_exit>:

void _exit (int status)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b44:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f7ff ffe7 	bl	8001b1c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b4e:	e7fe      	b.n	8001b4e <_exit+0x12>

08001b50 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	617b      	str	r3, [r7, #20]
 8001b60:	e00a      	b.n	8001b78 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b62:	f3af 8000 	nop.w
 8001b66:	4601      	mov	r1, r0
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	1c5a      	adds	r2, r3, #1
 8001b6c:	60ba      	str	r2, [r7, #8]
 8001b6e:	b2ca      	uxtb	r2, r1
 8001b70:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	3301      	adds	r3, #1
 8001b76:	617b      	str	r3, [r7, #20]
 8001b78:	697a      	ldr	r2, [r7, #20]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	dbf0      	blt.n	8001b62 <_read+0x12>
	}

return len;
 8001b80:	687b      	ldr	r3, [r7, #4]
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3718      	adds	r7, #24
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b086      	sub	sp, #24
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	60f8      	str	r0, [r7, #12]
 8001b92:	60b9      	str	r1, [r7, #8]
 8001b94:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b96:	2300      	movs	r3, #0
 8001b98:	617b      	str	r3, [r7, #20]
 8001b9a:	e009      	b.n	8001bb0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	1c5a      	adds	r2, r3, #1
 8001ba0:	60ba      	str	r2, [r7, #8]
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f000 faa7 	bl	80020f8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	3301      	adds	r3, #1
 8001bae:	617b      	str	r3, [r7, #20]
 8001bb0:	697a      	ldr	r2, [r7, #20]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	dbf1      	blt.n	8001b9c <_write+0x12>
	}
	return len;
 8001bb8:	687b      	ldr	r3, [r7, #4]
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3718      	adds	r7, #24
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <_close>:

int _close(int file)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	b083      	sub	sp, #12
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
	return -1;
 8001bca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr

08001bda <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	b083      	sub	sp, #12
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
 8001be2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bea:	605a      	str	r2, [r3, #4]
	return 0;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr

08001bfa <_isatty>:

int _isatty(int file)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	b083      	sub	sp, #12
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
	return 1;
 8001c02:	2301      	movs	r3, #1
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b085      	sub	sp, #20
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	60b9      	str	r1, [r7, #8]
 8001c1a:	607a      	str	r2, [r7, #4]
	return 0;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3714      	adds	r7, #20
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
	...

08001c2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c34:	4a14      	ldr	r2, [pc, #80]	; (8001c88 <_sbrk+0x5c>)
 8001c36:	4b15      	ldr	r3, [pc, #84]	; (8001c8c <_sbrk+0x60>)
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c40:	4b13      	ldr	r3, [pc, #76]	; (8001c90 <_sbrk+0x64>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d102      	bne.n	8001c4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c48:	4b11      	ldr	r3, [pc, #68]	; (8001c90 <_sbrk+0x64>)
 8001c4a:	4a12      	ldr	r2, [pc, #72]	; (8001c94 <_sbrk+0x68>)
 8001c4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c4e:	4b10      	ldr	r3, [pc, #64]	; (8001c90 <_sbrk+0x64>)
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4413      	add	r3, r2
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d207      	bcs.n	8001c6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c5c:	f00e fe20 	bl	80108a0 <__errno>
 8001c60:	4603      	mov	r3, r0
 8001c62:	220c      	movs	r2, #12
 8001c64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c6a:	e009      	b.n	8001c80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c6c:	4b08      	ldr	r3, [pc, #32]	; (8001c90 <_sbrk+0x64>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c72:	4b07      	ldr	r3, [pc, #28]	; (8001c90 <_sbrk+0x64>)
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4413      	add	r3, r2
 8001c7a:	4a05      	ldr	r2, [pc, #20]	; (8001c90 <_sbrk+0x64>)
 8001c7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3718      	adds	r7, #24
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	20080000 	.word	0x20080000
 8001c8c:	00004000 	.word	0x00004000
 8001c90:	20000520 	.word	0x20000520
 8001c94:	200059e0 	.word	0x200059e0

08001c98 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c9c:	4b06      	ldr	r3, [pc, #24]	; (8001cb8 <SystemInit+0x20>)
 8001c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ca2:	4a05      	ldr	r2, [pc, #20]	; (8001cb8 <SystemInit+0x20>)
 8001ca4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ca8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cac:	bf00      	nop
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	e000ed00 	.word	0xe000ed00

08001cbc <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b08a      	sub	sp, #40	; 0x28
 8001cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cc2:	f107 031c 	add.w	r3, r7, #28
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	601a      	str	r2, [r3, #0]
 8001cca:	605a      	str	r2, [r3, #4]
 8001ccc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cce:	463b      	mov	r3, r7
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	605a      	str	r2, [r3, #4]
 8001cd6:	609a      	str	r2, [r3, #8]
 8001cd8:	60da      	str	r2, [r3, #12]
 8001cda:	611a      	str	r2, [r3, #16]
 8001cdc:	615a      	str	r2, [r3, #20]
 8001cde:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ce0:	4b22      	ldr	r3, [pc, #136]	; (8001d6c <MX_TIM2_Init+0xb0>)
 8001ce2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ce6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 216;
 8001ce8:	4b20      	ldr	r3, [pc, #128]	; (8001d6c <MX_TIM2_Init+0xb0>)
 8001cea:	22d8      	movs	r2, #216	; 0xd8
 8001cec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cee:	4b1f      	ldr	r3, [pc, #124]	; (8001d6c <MX_TIM2_Init+0xb0>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000;
 8001cf4:	4b1d      	ldr	r3, [pc, #116]	; (8001d6c <MX_TIM2_Init+0xb0>)
 8001cf6:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001cfa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cfc:	4b1b      	ldr	r3, [pc, #108]	; (8001d6c <MX_TIM2_Init+0xb0>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d02:	4b1a      	ldr	r3, [pc, #104]	; (8001d6c <MX_TIM2_Init+0xb0>)
 8001d04:	2280      	movs	r2, #128	; 0x80
 8001d06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001d08:	4818      	ldr	r0, [pc, #96]	; (8001d6c <MX_TIM2_Init+0xb0>)
 8001d0a:	f005 fc73 	bl	80075f4 <HAL_TIM_PWM_Init>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001d14:	f7ff fd4a 	bl	80017ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d20:	f107 031c 	add.w	r3, r7, #28
 8001d24:	4619      	mov	r1, r3
 8001d26:	4811      	ldr	r0, [pc, #68]	; (8001d6c <MX_TIM2_Init+0xb0>)
 8001d28:	f006 fa1a 	bl	8008160 <HAL_TIMEx_MasterConfigSynchronization>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001d32:	f7ff fd3b 	bl	80017ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d36:	2360      	movs	r3, #96	; 0x60
 8001d38:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 20000;
 8001d3a:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001d3e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d40:	2300      	movs	r3, #0
 8001d42:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d44:	2300      	movs	r3, #0
 8001d46:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d48:	463b      	mov	r3, r7
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4807      	ldr	r0, [pc, #28]	; (8001d6c <MX_TIM2_Init+0xb0>)
 8001d50:	f005 fdc6 	bl	80078e0 <HAL_TIM_PWM_ConfigChannel>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8001d5a:	f7ff fd27 	bl	80017ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001d5e:	4803      	ldr	r0, [pc, #12]	; (8001d6c <MX_TIM2_Init+0xb0>)
 8001d60:	f000 f82a 	bl	8001db8 <HAL_TIM_MspPostInit>

}
 8001d64:	bf00      	nop
 8001d66:	3728      	adds	r7, #40	; 0x28
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	20001938 	.word	0x20001938

08001d70 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d80:	d113      	bne.n	8001daa <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d82:	4b0c      	ldr	r3, [pc, #48]	; (8001db4 <HAL_TIM_PWM_MspInit+0x44>)
 8001d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d86:	4a0b      	ldr	r2, [pc, #44]	; (8001db4 <HAL_TIM_PWM_MspInit+0x44>)
 8001d88:	f043 0301 	orr.w	r3, r3, #1
 8001d8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d8e:	4b09      	ldr	r3, [pc, #36]	; (8001db4 <HAL_TIM_PWM_MspInit+0x44>)
 8001d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	60fb      	str	r3, [r7, #12]
 8001d98:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	2100      	movs	r1, #0
 8001d9e:	201c      	movs	r0, #28
 8001da0:	f000 fe13 	bl	80029ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001da4:	201c      	movs	r0, #28
 8001da6:	f000 fe2c 	bl	8002a02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001daa:	bf00      	nop
 8001dac:	3710      	adds	r7, #16
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	40023800 	.word	0x40023800

08001db8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b088      	sub	sp, #32
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc0:	f107 030c 	add.w	r3, r7, #12
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	605a      	str	r2, [r3, #4]
 8001dca:	609a      	str	r2, [r3, #8]
 8001dcc:	60da      	str	r2, [r3, #12]
 8001dce:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dd8:	d11c      	bne.n	8001e14 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dda:	4b10      	ldr	r3, [pc, #64]	; (8001e1c <HAL_TIM_MspPostInit+0x64>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	4a0f      	ldr	r2, [pc, #60]	; (8001e1c <HAL_TIM_MspPostInit+0x64>)
 8001de0:	f043 0301 	orr.w	r3, r3, #1
 8001de4:	6313      	str	r3, [r2, #48]	; 0x30
 8001de6:	4b0d      	ldr	r3, [pc, #52]	; (8001e1c <HAL_TIM_MspPostInit+0x64>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	f003 0301 	and.w	r3, r3, #1
 8001dee:	60bb      	str	r3, [r7, #8]
 8001df0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = TIM2_CH1___BL_LCD_Pin;
 8001df2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001df6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df8:	2302      	movs	r3, #2
 8001dfa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e00:	2300      	movs	r3, #0
 8001e02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e04:	2301      	movs	r3, #1
 8001e06:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TIM2_CH1___BL_LCD_GPIO_Port, &GPIO_InitStruct);
 8001e08:	f107 030c 	add.w	r3, r7, #12
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	4804      	ldr	r0, [pc, #16]	; (8001e20 <HAL_TIM_MspPostInit+0x68>)
 8001e10:	f001 fd98 	bl	8003944 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001e14:	bf00      	nop
 8001e16:	3720      	adds	r7, #32
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	40023800 	.word	0x40023800
 8001e20:	40020000 	.word	0x40020000

08001e24 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e28:	4b17      	ldr	r3, [pc, #92]	; (8001e88 <MX_USART1_UART_Init+0x64>)
 8001e2a:	4a18      	ldr	r2, [pc, #96]	; (8001e8c <MX_USART1_UART_Init+0x68>)
 8001e2c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 420000;
 8001e2e:	4b16      	ldr	r3, [pc, #88]	; (8001e88 <MX_USART1_UART_Init+0x64>)
 8001e30:	4a17      	ldr	r2, [pc, #92]	; (8001e90 <MX_USART1_UART_Init+0x6c>)
 8001e32:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e34:	4b14      	ldr	r3, [pc, #80]	; (8001e88 <MX_USART1_UART_Init+0x64>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e3a:	4b13      	ldr	r3, [pc, #76]	; (8001e88 <MX_USART1_UART_Init+0x64>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e40:	4b11      	ldr	r3, [pc, #68]	; (8001e88 <MX_USART1_UART_Init+0x64>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e46:	4b10      	ldr	r3, [pc, #64]	; (8001e88 <MX_USART1_UART_Init+0x64>)
 8001e48:	220c      	movs	r2, #12
 8001e4a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e4c:	4b0e      	ldr	r3, [pc, #56]	; (8001e88 <MX_USART1_UART_Init+0x64>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e52:	4b0d      	ldr	r3, [pc, #52]	; (8001e88 <MX_USART1_UART_Init+0x64>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e58:	4b0b      	ldr	r3, [pc, #44]	; (8001e88 <MX_USART1_UART_Init+0x64>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_TXINVERT_INIT|UART_ADVFEATURE_RXINVERT_INIT;
 8001e5e:	4b0a      	ldr	r3, [pc, #40]	; (8001e88 <MX_USART1_UART_Init+0x64>)
 8001e60:	2203      	movs	r2, #3
 8001e62:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.TxPinLevelInvert = UART_ADVFEATURE_TXINV_ENABLE;
 8001e64:	4b08      	ldr	r3, [pc, #32]	; (8001e88 <MX_USART1_UART_Init+0x64>)
 8001e66:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e6a:	629a      	str	r2, [r3, #40]	; 0x28
  huart1.AdvancedInit.RxPinLevelInvert = UART_ADVFEATURE_RXINV_ENABLE;
 8001e6c:	4b06      	ldr	r3, [pc, #24]	; (8001e88 <MX_USART1_UART_Init+0x64>)
 8001e6e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e72:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e74:	4804      	ldr	r0, [pc, #16]	; (8001e88 <MX_USART1_UART_Init+0x64>)
 8001e76:	f006 fa1f 	bl	80082b8 <HAL_UART_Init>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <MX_USART1_UART_Init+0x60>
  {
    Error_Handler();
 8001e80:	f7ff fc94 	bl	80017ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e84:	bf00      	nop
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	200019e4 	.word	0x200019e4
 8001e8c:	40011000 	.word	0x40011000
 8001e90:	000668a0 	.word	0x000668a0

08001e94 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b08a      	sub	sp, #40	; 0x28
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e9c:	f107 0314 	add.w	r3, r7, #20
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	605a      	str	r2, [r3, #4]
 8001ea6:	609a      	str	r2, [r3, #8]
 8001ea8:	60da      	str	r2, [r3, #12]
 8001eaa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a2f      	ldr	r2, [pc, #188]	; (8001f70 <HAL_UART_MspInit+0xdc>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d157      	bne.n	8001f66 <HAL_UART_MspInit+0xd2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001eb6:	4b2f      	ldr	r3, [pc, #188]	; (8001f74 <HAL_UART_MspInit+0xe0>)
 8001eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eba:	4a2e      	ldr	r2, [pc, #184]	; (8001f74 <HAL_UART_MspInit+0xe0>)
 8001ebc:	f043 0310 	orr.w	r3, r3, #16
 8001ec0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ec2:	4b2c      	ldr	r3, [pc, #176]	; (8001f74 <HAL_UART_MspInit+0xe0>)
 8001ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec6:	f003 0310 	and.w	r3, r3, #16
 8001eca:	613b      	str	r3, [r7, #16]
 8001ecc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ece:	4b29      	ldr	r3, [pc, #164]	; (8001f74 <HAL_UART_MspInit+0xe0>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed2:	4a28      	ldr	r2, [pc, #160]	; (8001f74 <HAL_UART_MspInit+0xe0>)
 8001ed4:	f043 0302 	orr.w	r3, r3, #2
 8001ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eda:	4b26      	ldr	r3, [pc, #152]	; (8001f74 <HAL_UART_MspInit+0xe0>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	60fb      	str	r3, [r7, #12]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX___TBS_Pin|USART1_RX___TBS_Pin;
 8001ee6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001eea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eec:	2302      	movs	r3, #2
 8001eee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001ef8:	2304      	movs	r3, #4
 8001efa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001efc:	f107 0314 	add.w	r3, r7, #20
 8001f00:	4619      	mov	r1, r3
 8001f02:	481d      	ldr	r0, [pc, #116]	; (8001f78 <HAL_UART_MspInit+0xe4>)
 8001f04:	f001 fd1e 	bl	8003944 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001f08:	4b1c      	ldr	r3, [pc, #112]	; (8001f7c <HAL_UART_MspInit+0xe8>)
 8001f0a:	4a1d      	ldr	r2, [pc, #116]	; (8001f80 <HAL_UART_MspInit+0xec>)
 8001f0c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001f0e:	4b1b      	ldr	r3, [pc, #108]	; (8001f7c <HAL_UART_MspInit+0xe8>)
 8001f10:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f14:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f16:	4b19      	ldr	r3, [pc, #100]	; (8001f7c <HAL_UART_MspInit+0xe8>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f1c:	4b17      	ldr	r3, [pc, #92]	; (8001f7c <HAL_UART_MspInit+0xe8>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f22:	4b16      	ldr	r3, [pc, #88]	; (8001f7c <HAL_UART_MspInit+0xe8>)
 8001f24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f28:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f2a:	4b14      	ldr	r3, [pc, #80]	; (8001f7c <HAL_UART_MspInit+0xe8>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f30:	4b12      	ldr	r3, [pc, #72]	; (8001f7c <HAL_UART_MspInit+0xe8>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001f36:	4b11      	ldr	r3, [pc, #68]	; (8001f7c <HAL_UART_MspInit+0xe8>)
 8001f38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f3c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f3e:	4b0f      	ldr	r3, [pc, #60]	; (8001f7c <HAL_UART_MspInit+0xe8>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f44:	4b0d      	ldr	r3, [pc, #52]	; (8001f7c <HAL_UART_MspInit+0xe8>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001f4a:	480c      	ldr	r0, [pc, #48]	; (8001f7c <HAL_UART_MspInit+0xe8>)
 8001f4c:	f000 fd82 	bl	8002a54 <HAL_DMA_Init>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8001f56:	f7ff fc29 	bl	80017ac <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a07      	ldr	r2, [pc, #28]	; (8001f7c <HAL_UART_MspInit+0xe8>)
 8001f5e:	671a      	str	r2, [r3, #112]	; 0x70
 8001f60:	4a06      	ldr	r2, [pc, #24]	; (8001f7c <HAL_UART_MspInit+0xe8>)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001f66:	bf00      	nop
 8001f68:	3728      	adds	r7, #40	; 0x28
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	40011000 	.word	0x40011000
 8001f74:	40023800 	.word	0x40023800
 8001f78:	40020400 	.word	0x40020400
 8001f7c:	20001984 	.word	0x20001984
 8001f80:	40026440 	.word	0x40026440

08001f84 <HAL_UART_RxCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  if (huart == &huart1)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4a0a      	ldr	r2, [pc, #40]	; (8001fb8 <HAL_UART_RxCpltCallback+0x34>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d10c      	bne.n	8001fae <HAL_UART_RxCpltCallback+0x2a>
  {
	  HAL_UART_DMAPause(&huart1);
 8001f94:	4808      	ldr	r0, [pc, #32]	; (8001fb8 <HAL_UART_RxCpltCallback+0x34>)
 8001f96:	f006 fbda 	bl	800874e <HAL_UART_DMAPause>
	  parseTBSMessage();
 8001f9a:	f00c fe87 	bl	800ecac <parseTBSMessage>

	  HAL_UART_DMAResume(&huart1);
 8001f9e:	4806      	ldr	r0, [pc, #24]	; (8001fb8 <HAL_UART_RxCpltCallback+0x34>)
 8001fa0:	f006 fc29 	bl	80087f6 <HAL_UART_DMAResume>
	  HAL_UART_Receive_DMA(&huart1, tbsRXArray, 64);
 8001fa4:	2240      	movs	r2, #64	; 0x40
 8001fa6:	4905      	ldr	r1, [pc, #20]	; (8001fbc <HAL_UART_RxCpltCallback+0x38>)
 8001fa8:	4803      	ldr	r0, [pc, #12]	; (8001fb8 <HAL_UART_RxCpltCallback+0x34>)
 8001faa:	f006 fb93 	bl	80086d4 <HAL_UART_Receive_DMA>
  }
}
 8001fae:	bf00      	nop
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	200019e4 	.word	0x200019e4
 8001fbc:	20000d44 	.word	0x20000d44

08001fc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001fc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ff8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fc4:	480d      	ldr	r0, [pc, #52]	; (8001ffc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001fc6:	490e      	ldr	r1, [pc, #56]	; (8002000 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001fc8:	4a0e      	ldr	r2, [pc, #56]	; (8002004 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001fca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fcc:	e002      	b.n	8001fd4 <LoopCopyDataInit>

08001fce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fd2:	3304      	adds	r3, #4

08001fd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fd8:	d3f9      	bcc.n	8001fce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fda:	4a0b      	ldr	r2, [pc, #44]	; (8002008 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001fdc:	4c0b      	ldr	r4, [pc, #44]	; (800200c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001fde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fe0:	e001      	b.n	8001fe6 <LoopFillZerobss>

08001fe2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fe2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fe4:	3204      	adds	r2, #4

08001fe6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fe6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fe8:	d3fb      	bcc.n	8001fe2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001fea:	f7ff fe55 	bl	8001c98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fee:	f00e fc5d 	bl	80108ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ff2:	f7ff fb13 	bl	800161c <main>
  bx  lr    
 8001ff6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ff8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001ffc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002000:	200003f4 	.word	0x200003f4
  ldr r2, =_sidata
 8002004:	08013c5c 	.word	0x08013c5c
  ldr r2, =_sbss
 8002008:	200003f4 	.word	0x200003f4
  ldr r4, =_ebss
 800200c:	200059e0 	.word	0x200059e0

08002010 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002010:	e7fe      	b.n	8002010 <ADC_IRQHandler>
	...

08002014 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	4603      	mov	r3, r0
 800201c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800201e:	2300      	movs	r3, #0
 8002020:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8002022:	79fb      	ldrb	r3, [r7, #7]
 8002024:	2b01      	cmp	r3, #1
 8002026:	d903      	bls.n	8002030 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002028:	f06f 0301 	mvn.w	r3, #1
 800202c:	60fb      	str	r3, [r7, #12]
 800202e:	e025      	b.n	800207c <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8002030:	79fb      	ldrb	r3, [r7, #7]
 8002032:	79fa      	ldrb	r2, [r7, #7]
 8002034:	4914      	ldr	r1, [pc, #80]	; (8002088 <BSP_COM_Init+0x74>)
 8002036:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800203a:	4814      	ldr	r0, [pc, #80]	; (800208c <BSP_COM_Init+0x78>)
 800203c:	4613      	mov	r3, r2
 800203e:	015b      	lsls	r3, r3, #5
 8002040:	4413      	add	r3, r2
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	4403      	add	r3, r0
 8002046:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 8002048:	79fa      	ldrb	r2, [r7, #7]
 800204a:	4613      	mov	r3, r2
 800204c:	015b      	lsls	r3, r3, #5
 800204e:	4413      	add	r3, r2
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	4a0e      	ldr	r2, [pc, #56]	; (800208c <BSP_COM_Init+0x78>)
 8002054:	4413      	add	r3, r2
 8002056:	4618      	mov	r0, r3
 8002058:	f000 f86a 	bl	8002130 <USART2_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 800205c:	79fa      	ldrb	r2, [r7, #7]
 800205e:	4613      	mov	r3, r2
 8002060:	015b      	lsls	r3, r3, #5
 8002062:	4413      	add	r3, r2
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	4a09      	ldr	r2, [pc, #36]	; (800208c <BSP_COM_Init+0x78>)
 8002068:	4413      	add	r3, r2
 800206a:	4618      	mov	r0, r3
 800206c:	f000 f810 	bl	8002090 <MX_USART2_UART_Init>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d002      	beq.n	800207c <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002076:	f06f 0303 	mvn.w	r3, #3
 800207a:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800207c:	68fb      	ldr	r3, [r7, #12]
}
 800207e:	4618      	mov	r0, r3
 8002080:	3710      	adds	r7, #16
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	20000008 	.word	0x20000008
 800208c:	20001a68 	.word	0x20001a68

08002090 <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8002098:	2300      	movs	r3, #0
 800209a:	73fb      	strb	r3, [r7, #15]
  huart->Instance = USART2;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4a15      	ldr	r2, [pc, #84]	; (80020f4 <MX_USART2_UART_Init+0x64>)
 80020a0:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020a8:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	220c      	movs	r2, #12
 80020c0:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2200      	movs	r2, #0
 80020cc:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	621a      	str	r2, [r3, #32]
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(huart) != HAL_OK)
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f006 f8ec 	bl	80082b8 <HAL_UART_Init>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <MX_USART2_UART_Init+0x5a>
  {
    ret = HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80020ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3710      	adds	r7, #16
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	40004400 	.word	0x40004400

080020f8 <__io_putchar>:
#if defined(__ICCARM__) || defined(__CC_ARM) /* For IAR and MDK-ARM */
 int fputc (int ch, FILE *f)
#else /* For GCC Toolchains */
 int __io_putchar (int ch)
#endif /* __GNUC__ */
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 8002100:	4b09      	ldr	r3, [pc, #36]	; (8002128 <__io_putchar+0x30>)
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	461a      	mov	r2, r3
 8002106:	4613      	mov	r3, r2
 8002108:	015b      	lsls	r3, r3, #5
 800210a:	4413      	add	r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	4a07      	ldr	r2, [pc, #28]	; (800212c <__io_putchar+0x34>)
 8002110:	1898      	adds	r0, r3, r2
 8002112:	1d39      	adds	r1, r7, #4
 8002114:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002118:	2201      	movs	r2, #1
 800211a:	f006 f91b 	bl	8008354 <HAL_UART_Transmit>
  return ch;
 800211e:	687b      	ldr	r3, [r7, #4]
}
 8002120:	4618      	mov	r0, r3
 8002122:	3708      	adds	r7, #8
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	20000524 	.word	0x20000524
 800212c:	20001a68 	.word	0x20001a68

08002130 <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b08a      	sub	sp, #40	; 0x28
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002138:	4b1d      	ldr	r3, [pc, #116]	; (80021b0 <USART2_MspInit+0x80>)
 800213a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213c:	4a1c      	ldr	r2, [pc, #112]	; (80021b0 <USART2_MspInit+0x80>)
 800213e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002142:	6413      	str	r3, [r2, #64]	; 0x40
 8002144:	4b1a      	ldr	r3, [pc, #104]	; (80021b0 <USART2_MspInit+0x80>)
 8002146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002148:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214c:	613b      	str	r3, [r7, #16]
 800214e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002150:	4b17      	ldr	r3, [pc, #92]	; (80021b0 <USART2_MspInit+0x80>)
 8002152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002154:	4a16      	ldr	r2, [pc, #88]	; (80021b0 <USART2_MspInit+0x80>)
 8002156:	f043 0308 	orr.w	r3, r3, #8
 800215a:	6313      	str	r3, [r2, #48]	; 0x30
 800215c:	4b14      	ldr	r3, [pc, #80]	; (80021b0 <USART2_MspInit+0x80>)
 800215e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002160:	f003 0308 	and.w	r3, r3, #8
 8002164:	60fb      	str	r3, [r7, #12]
 8002166:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 8002168:	2320      	movs	r3, #32
 800216a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216c:	2302      	movs	r3, #2
 800216e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002170:	2300      	movs	r3, #0
 8002172:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002174:	2303      	movs	r3, #3
 8002176:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 8002178:	2307      	movs	r3, #7
 800217a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 800217c:	f107 0314 	add.w	r3, r7, #20
 8002180:	4619      	mov	r1, r3
 8002182:	480c      	ldr	r0, [pc, #48]	; (80021b4 <USART2_MspInit+0x84>)
 8002184:	f001 fbde 	bl	8003944 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 8002188:	2340      	movs	r3, #64	; 0x40
 800218a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800218c:	2302      	movs	r3, #2
 800218e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002190:	2300      	movs	r3, #0
 8002192:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002194:	2303      	movs	r3, #3
 8002196:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 8002198:	2307      	movs	r3, #7
 800219a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 800219c:	f107 0314 	add.w	r3, r7, #20
 80021a0:	4619      	mov	r1, r3
 80021a2:	4804      	ldr	r0, [pc, #16]	; (80021b4 <USART2_MspInit+0x84>)
 80021a4:	f001 fbce 	bl	8003944 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 80021a8:	bf00      	nop
 80021aa:	3728      	adds	r7, #40	; 0x28
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	40023800 	.word	0x40023800
 80021b4:	40020c00 	.word	0x40020c00

080021b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021bc:	2003      	movs	r0, #3
 80021be:	f000 fbf9 	bl	80029b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021c2:	2000      	movs	r0, #0
 80021c4:	f000 f806 	bl	80021d4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80021c8:	f7ff fc26 	bl	8001a18 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	bd80      	pop	{r7, pc}
	...

080021d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021dc:	4b12      	ldr	r3, [pc, #72]	; (8002228 <HAL_InitTick+0x54>)
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	4b12      	ldr	r3, [pc, #72]	; (800222c <HAL_InitTick+0x58>)
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	4619      	mov	r1, r3
 80021e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80021ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80021f2:	4618      	mov	r0, r3
 80021f4:	f000 fc21 	bl	8002a3a <HAL_SYSTICK_Config>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e00e      	b.n	8002220 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2b0f      	cmp	r3, #15
 8002206:	d80a      	bhi.n	800221e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002208:	2200      	movs	r2, #0
 800220a:	6879      	ldr	r1, [r7, #4]
 800220c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002210:	f000 fbdb 	bl	80029ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002214:	4a06      	ldr	r2, [pc, #24]	; (8002230 <HAL_InitTick+0x5c>)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800221a:	2300      	movs	r3, #0
 800221c:	e000      	b.n	8002220 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
}
 8002220:	4618      	mov	r0, r3
 8002222:	3708      	adds	r7, #8
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	20000004 	.word	0x20000004
 800222c:	20000010 	.word	0x20000010
 8002230:	2000000c 	.word	0x2000000c

08002234 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002238:	4b06      	ldr	r3, [pc, #24]	; (8002254 <HAL_IncTick+0x20>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	461a      	mov	r2, r3
 800223e:	4b06      	ldr	r3, [pc, #24]	; (8002258 <HAL_IncTick+0x24>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4413      	add	r3, r2
 8002244:	4a04      	ldr	r2, [pc, #16]	; (8002258 <HAL_IncTick+0x24>)
 8002246:	6013      	str	r3, [r2, #0]
}
 8002248:	bf00      	nop
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	20000010 	.word	0x20000010
 8002258:	20001aec 	.word	0x20001aec

0800225c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  return uwTick;
 8002260:	4b03      	ldr	r3, [pc, #12]	; (8002270 <HAL_GetTick+0x14>)
 8002262:	681b      	ldr	r3, [r3, #0]
}
 8002264:	4618      	mov	r0, r3
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	20001aec 	.word	0x20001aec

08002274 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800227c:	f7ff ffee 	bl	800225c <HAL_GetTick>
 8002280:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800228c:	d005      	beq.n	800229a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800228e:	4b0a      	ldr	r3, [pc, #40]	; (80022b8 <HAL_Delay+0x44>)
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	461a      	mov	r2, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	4413      	add	r3, r2
 8002298:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800229a:	bf00      	nop
 800229c:	f7ff ffde 	bl	800225c <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	68fa      	ldr	r2, [r7, #12]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d8f7      	bhi.n	800229c <HAL_Delay+0x28>
  {
  }
}
 80022ac:	bf00      	nop
 80022ae:	bf00      	nop
 80022b0:	3710      	adds	r7, #16
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	20000010 	.word	0x20000010

080022bc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022c4:	2300      	movs	r3, #0
 80022c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d101      	bne.n	80022d2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e031      	b.n	8002336 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d109      	bne.n	80022ee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f7fe ff4e 	bl	800117c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f2:	f003 0310 	and.w	r3, r3, #16
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d116      	bne.n	8002328 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022fe:	4b10      	ldr	r3, [pc, #64]	; (8002340 <HAL_ADC_Init+0x84>)
 8002300:	4013      	ands	r3, r2
 8002302:	f043 0202 	orr.w	r2, r3, #2
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 f964 	bl	80025d8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231a:	f023 0303 	bic.w	r3, r3, #3
 800231e:	f043 0201 	orr.w	r2, r3, #1
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	641a      	str	r2, [r3, #64]	; 0x40
 8002326:	e001      	b.n	800232c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002334:	7bfb      	ldrb	r3, [r7, #15]
}
 8002336:	4618      	mov	r0, r3
 8002338:	3710      	adds	r7, #16
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	ffffeefd 	.word	0xffffeefd

08002344 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002344:	b480      	push	{r7}
 8002346:	b085      	sub	sp, #20
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800234e:	2300      	movs	r3, #0
 8002350:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002358:	2b01      	cmp	r3, #1
 800235a:	d101      	bne.n	8002360 <HAL_ADC_ConfigChannel+0x1c>
 800235c:	2302      	movs	r3, #2
 800235e:	e12a      	b.n	80025b6 <HAL_ADC_ConfigChannel+0x272>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2b09      	cmp	r3, #9
 800236e:	d93a      	bls.n	80023e6 <HAL_ADC_ConfigChannel+0xa2>
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002378:	d035      	beq.n	80023e6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	68d9      	ldr	r1, [r3, #12]
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	b29b      	uxth	r3, r3
 8002386:	461a      	mov	r2, r3
 8002388:	4613      	mov	r3, r2
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	4413      	add	r3, r2
 800238e:	3b1e      	subs	r3, #30
 8002390:	2207      	movs	r2, #7
 8002392:	fa02 f303 	lsl.w	r3, r2, r3
 8002396:	43da      	mvns	r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	400a      	ands	r2, r1
 800239e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a87      	ldr	r2, [pc, #540]	; (80025c4 <HAL_ADC_ConfigChannel+0x280>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d10a      	bne.n	80023c0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	68d9      	ldr	r1, [r3, #12]
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	061a      	lsls	r2, r3, #24
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	430a      	orrs	r2, r1
 80023bc:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023be:	e035      	b.n	800242c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	68d9      	ldr	r1, [r3, #12]
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	689a      	ldr	r2, [r3, #8]
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	4618      	mov	r0, r3
 80023d2:	4603      	mov	r3, r0
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	4403      	add	r3, r0
 80023d8:	3b1e      	subs	r3, #30
 80023da:	409a      	lsls	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	430a      	orrs	r2, r1
 80023e2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023e4:	e022      	b.n	800242c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	6919      	ldr	r1, [r3, #16]
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	461a      	mov	r2, r3
 80023f4:	4613      	mov	r3, r2
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	4413      	add	r3, r2
 80023fa:	2207      	movs	r2, #7
 80023fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002400:	43da      	mvns	r2, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	400a      	ands	r2, r1
 8002408:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	6919      	ldr	r1, [r3, #16]
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	689a      	ldr	r2, [r3, #8]
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	b29b      	uxth	r3, r3
 800241a:	4618      	mov	r0, r3
 800241c:	4603      	mov	r3, r0
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	4403      	add	r3, r0
 8002422:	409a      	lsls	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	430a      	orrs	r2, r1
 800242a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	2b06      	cmp	r3, #6
 8002432:	d824      	bhi.n	800247e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	685a      	ldr	r2, [r3, #4]
 800243e:	4613      	mov	r3, r2
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	4413      	add	r3, r2
 8002444:	3b05      	subs	r3, #5
 8002446:	221f      	movs	r2, #31
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	43da      	mvns	r2, r3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	400a      	ands	r2, r1
 8002454:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	b29b      	uxth	r3, r3
 8002462:	4618      	mov	r0, r3
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685a      	ldr	r2, [r3, #4]
 8002468:	4613      	mov	r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	4413      	add	r3, r2
 800246e:	3b05      	subs	r3, #5
 8002470:	fa00 f203 	lsl.w	r2, r0, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	430a      	orrs	r2, r1
 800247a:	635a      	str	r2, [r3, #52]	; 0x34
 800247c:	e04c      	b.n	8002518 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	2b0c      	cmp	r3, #12
 8002484:	d824      	bhi.n	80024d0 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685a      	ldr	r2, [r3, #4]
 8002490:	4613      	mov	r3, r2
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	4413      	add	r3, r2
 8002496:	3b23      	subs	r3, #35	; 0x23
 8002498:	221f      	movs	r2, #31
 800249a:	fa02 f303 	lsl.w	r3, r2, r3
 800249e:	43da      	mvns	r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	400a      	ands	r2, r1
 80024a6:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	4618      	mov	r0, r3
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	685a      	ldr	r2, [r3, #4]
 80024ba:	4613      	mov	r3, r2
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	4413      	add	r3, r2
 80024c0:	3b23      	subs	r3, #35	; 0x23
 80024c2:	fa00 f203 	lsl.w	r2, r0, r3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	430a      	orrs	r2, r1
 80024cc:	631a      	str	r2, [r3, #48]	; 0x30
 80024ce:	e023      	b.n	8002518 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685a      	ldr	r2, [r3, #4]
 80024da:	4613      	mov	r3, r2
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	4413      	add	r3, r2
 80024e0:	3b41      	subs	r3, #65	; 0x41
 80024e2:	221f      	movs	r2, #31
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	43da      	mvns	r2, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	400a      	ands	r2, r1
 80024f0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	4618      	mov	r0, r3
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685a      	ldr	r2, [r3, #4]
 8002504:	4613      	mov	r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	4413      	add	r3, r2
 800250a:	3b41      	subs	r3, #65	; 0x41
 800250c:	fa00 f203 	lsl.w	r2, r0, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	430a      	orrs	r2, r1
 8002516:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a2a      	ldr	r2, [pc, #168]	; (80025c8 <HAL_ADC_ConfigChannel+0x284>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d10a      	bne.n	8002538 <HAL_ADC_ConfigChannel+0x1f4>
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800252a:	d105      	bne.n	8002538 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800252c:	4b27      	ldr	r3, [pc, #156]	; (80025cc <HAL_ADC_ConfigChannel+0x288>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	4a26      	ldr	r2, [pc, #152]	; (80025cc <HAL_ADC_ConfigChannel+0x288>)
 8002532:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002536:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a22      	ldr	r2, [pc, #136]	; (80025c8 <HAL_ADC_ConfigChannel+0x284>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d109      	bne.n	8002556 <HAL_ADC_ConfigChannel+0x212>
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	2b12      	cmp	r3, #18
 8002548:	d105      	bne.n	8002556 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800254a:	4b20      	ldr	r3, [pc, #128]	; (80025cc <HAL_ADC_ConfigChannel+0x288>)
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	4a1f      	ldr	r2, [pc, #124]	; (80025cc <HAL_ADC_ConfigChannel+0x288>)
 8002550:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002554:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a1b      	ldr	r2, [pc, #108]	; (80025c8 <HAL_ADC_ConfigChannel+0x284>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d125      	bne.n	80025ac <HAL_ADC_ConfigChannel+0x268>
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a17      	ldr	r2, [pc, #92]	; (80025c4 <HAL_ADC_ConfigChannel+0x280>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d003      	beq.n	8002572 <HAL_ADC_ConfigChannel+0x22e>
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2b11      	cmp	r3, #17
 8002570:	d11c      	bne.n	80025ac <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002572:	4b16      	ldr	r3, [pc, #88]	; (80025cc <HAL_ADC_ConfigChannel+0x288>)
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	4a15      	ldr	r2, [pc, #84]	; (80025cc <HAL_ADC_ConfigChannel+0x288>)
 8002578:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800257c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a10      	ldr	r2, [pc, #64]	; (80025c4 <HAL_ADC_ConfigChannel+0x280>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d111      	bne.n	80025ac <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002588:	4b11      	ldr	r3, [pc, #68]	; (80025d0 <HAL_ADC_ConfigChannel+0x28c>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a11      	ldr	r2, [pc, #68]	; (80025d4 <HAL_ADC_ConfigChannel+0x290>)
 800258e:	fba2 2303 	umull	r2, r3, r2, r3
 8002592:	0c9a      	lsrs	r2, r3, #18
 8002594:	4613      	mov	r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	4413      	add	r3, r2
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800259e:	e002      	b.n	80025a6 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	3b01      	subs	r3, #1
 80025a4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d1f9      	bne.n	80025a0 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3714      	adds	r7, #20
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	10000012 	.word	0x10000012
 80025c8:	40012000 	.word	0x40012000
 80025cc:	40012300 	.word	0x40012300
 80025d0:	20000004 	.word	0x20000004
 80025d4:	431bde83 	.word	0x431bde83

080025d8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80025e0:	4b78      	ldr	r3, [pc, #480]	; (80027c4 <ADC_Init+0x1ec>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	4a77      	ldr	r2, [pc, #476]	; (80027c4 <ADC_Init+0x1ec>)
 80025e6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80025ea:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80025ec:	4b75      	ldr	r3, [pc, #468]	; (80027c4 <ADC_Init+0x1ec>)
 80025ee:	685a      	ldr	r2, [r3, #4]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	4973      	ldr	r1, [pc, #460]	; (80027c4 <ADC_Init+0x1ec>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	685a      	ldr	r2, [r3, #4]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002608:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	6859      	ldr	r1, [r3, #4]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	691b      	ldr	r3, [r3, #16]
 8002614:	021a      	lsls	r2, r3, #8
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	430a      	orrs	r2, r1
 800261c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	685a      	ldr	r2, [r3, #4]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800262c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	6859      	ldr	r1, [r3, #4]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	689a      	ldr	r2, [r3, #8]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	430a      	orrs	r2, r1
 800263e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	689a      	ldr	r2, [r3, #8]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800264e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	6899      	ldr	r1, [r3, #8]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	68da      	ldr	r2, [r3, #12]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	430a      	orrs	r2, r1
 8002660:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002666:	4a58      	ldr	r2, [pc, #352]	; (80027c8 <ADC_Init+0x1f0>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d022      	beq.n	80026b2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	689a      	ldr	r2, [r3, #8]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800267a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6899      	ldr	r1, [r3, #8]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	430a      	orrs	r2, r1
 800268c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	689a      	ldr	r2, [r3, #8]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800269c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	6899      	ldr	r1, [r3, #8]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	430a      	orrs	r2, r1
 80026ae:	609a      	str	r2, [r3, #8]
 80026b0:	e00f      	b.n	80026d2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	689a      	ldr	r2, [r3, #8]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80026c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	689a      	ldr	r2, [r3, #8]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80026d0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	689a      	ldr	r2, [r3, #8]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f022 0202 	bic.w	r2, r2, #2
 80026e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	6899      	ldr	r1, [r3, #8]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	699b      	ldr	r3, [r3, #24]
 80026ec:	005a      	lsls	r2, r3, #1
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	430a      	orrs	r2, r1
 80026f4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d01b      	beq.n	8002738 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	685a      	ldr	r2, [r3, #4]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800270e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	685a      	ldr	r2, [r3, #4]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800271e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	6859      	ldr	r1, [r3, #4]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272a:	3b01      	subs	r3, #1
 800272c:	035a      	lsls	r2, r3, #13
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	430a      	orrs	r2, r1
 8002734:	605a      	str	r2, [r3, #4]
 8002736:	e007      	b.n	8002748 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	685a      	ldr	r2, [r3, #4]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002746:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002756:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	69db      	ldr	r3, [r3, #28]
 8002762:	3b01      	subs	r3, #1
 8002764:	051a      	lsls	r2, r3, #20
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	430a      	orrs	r2, r1
 800276c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	689a      	ldr	r2, [r3, #8]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800277c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	6899      	ldr	r1, [r3, #8]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800278a:	025a      	lsls	r2, r3, #9
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	430a      	orrs	r2, r1
 8002792:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	689a      	ldr	r2, [r3, #8]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	6899      	ldr	r1, [r3, #8]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	695b      	ldr	r3, [r3, #20]
 80027ae:	029a      	lsls	r2, r3, #10
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	430a      	orrs	r2, r1
 80027b6:	609a      	str	r2, [r3, #8]
}
 80027b8:	bf00      	nop
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr
 80027c4:	40012300 	.word	0x40012300
 80027c8:	0f000001 	.word	0x0f000001

080027cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b085      	sub	sp, #20
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f003 0307 	and.w	r3, r3, #7
 80027da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027dc:	4b0b      	ldr	r3, [pc, #44]	; (800280c <__NVIC_SetPriorityGrouping+0x40>)
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027e2:	68ba      	ldr	r2, [r7, #8]
 80027e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027e8:	4013      	ands	r3, r2
 80027ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80027f4:	4b06      	ldr	r3, [pc, #24]	; (8002810 <__NVIC_SetPriorityGrouping+0x44>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027fa:	4a04      	ldr	r2, [pc, #16]	; (800280c <__NVIC_SetPriorityGrouping+0x40>)
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	60d3      	str	r3, [r2, #12]
}
 8002800:	bf00      	nop
 8002802:	3714      	adds	r7, #20
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr
 800280c:	e000ed00 	.word	0xe000ed00
 8002810:	05fa0000 	.word	0x05fa0000

08002814 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002818:	4b04      	ldr	r3, [pc, #16]	; (800282c <__NVIC_GetPriorityGrouping+0x18>)
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	0a1b      	lsrs	r3, r3, #8
 800281e:	f003 0307 	and.w	r3, r3, #7
}
 8002822:	4618      	mov	r0, r3
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr
 800282c:	e000ed00 	.word	0xe000ed00

08002830 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	4603      	mov	r3, r0
 8002838:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800283a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800283e:	2b00      	cmp	r3, #0
 8002840:	db0b      	blt.n	800285a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002842:	79fb      	ldrb	r3, [r7, #7]
 8002844:	f003 021f 	and.w	r2, r3, #31
 8002848:	4907      	ldr	r1, [pc, #28]	; (8002868 <__NVIC_EnableIRQ+0x38>)
 800284a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800284e:	095b      	lsrs	r3, r3, #5
 8002850:	2001      	movs	r0, #1
 8002852:	fa00 f202 	lsl.w	r2, r0, r2
 8002856:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800285a:	bf00      	nop
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	e000e100 	.word	0xe000e100

0800286c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	4603      	mov	r3, r0
 8002874:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800287a:	2b00      	cmp	r3, #0
 800287c:	db12      	blt.n	80028a4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800287e:	79fb      	ldrb	r3, [r7, #7]
 8002880:	f003 021f 	and.w	r2, r3, #31
 8002884:	490a      	ldr	r1, [pc, #40]	; (80028b0 <__NVIC_DisableIRQ+0x44>)
 8002886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800288a:	095b      	lsrs	r3, r3, #5
 800288c:	2001      	movs	r0, #1
 800288e:	fa00 f202 	lsl.w	r2, r0, r2
 8002892:	3320      	adds	r3, #32
 8002894:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002898:	f3bf 8f4f 	dsb	sy
}
 800289c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800289e:	f3bf 8f6f 	isb	sy
}
 80028a2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80028a4:	bf00      	nop
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr
 80028b0:	e000e100 	.word	0xe000e100

080028b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	4603      	mov	r3, r0
 80028bc:	6039      	str	r1, [r7, #0]
 80028be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	db0a      	blt.n	80028de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	b2da      	uxtb	r2, r3
 80028cc:	490c      	ldr	r1, [pc, #48]	; (8002900 <__NVIC_SetPriority+0x4c>)
 80028ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d2:	0112      	lsls	r2, r2, #4
 80028d4:	b2d2      	uxtb	r2, r2
 80028d6:	440b      	add	r3, r1
 80028d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028dc:	e00a      	b.n	80028f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	b2da      	uxtb	r2, r3
 80028e2:	4908      	ldr	r1, [pc, #32]	; (8002904 <__NVIC_SetPriority+0x50>)
 80028e4:	79fb      	ldrb	r3, [r7, #7]
 80028e6:	f003 030f 	and.w	r3, r3, #15
 80028ea:	3b04      	subs	r3, #4
 80028ec:	0112      	lsls	r2, r2, #4
 80028ee:	b2d2      	uxtb	r2, r2
 80028f0:	440b      	add	r3, r1
 80028f2:	761a      	strb	r2, [r3, #24]
}
 80028f4:	bf00      	nop
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr
 8002900:	e000e100 	.word	0xe000e100
 8002904:	e000ed00 	.word	0xe000ed00

08002908 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002908:	b480      	push	{r7}
 800290a:	b089      	sub	sp, #36	; 0x24
 800290c:	af00      	add	r7, sp, #0
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f003 0307 	and.w	r3, r3, #7
 800291a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	f1c3 0307 	rsb	r3, r3, #7
 8002922:	2b04      	cmp	r3, #4
 8002924:	bf28      	it	cs
 8002926:	2304      	movcs	r3, #4
 8002928:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	3304      	adds	r3, #4
 800292e:	2b06      	cmp	r3, #6
 8002930:	d902      	bls.n	8002938 <NVIC_EncodePriority+0x30>
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	3b03      	subs	r3, #3
 8002936:	e000      	b.n	800293a <NVIC_EncodePriority+0x32>
 8002938:	2300      	movs	r3, #0
 800293a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800293c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	fa02 f303 	lsl.w	r3, r2, r3
 8002946:	43da      	mvns	r2, r3
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	401a      	ands	r2, r3
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002950:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	fa01 f303 	lsl.w	r3, r1, r3
 800295a:	43d9      	mvns	r1, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002960:	4313      	orrs	r3, r2
         );
}
 8002962:	4618      	mov	r0, r3
 8002964:	3724      	adds	r7, #36	; 0x24
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
	...

08002970 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	3b01      	subs	r3, #1
 800297c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002980:	d301      	bcc.n	8002986 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002982:	2301      	movs	r3, #1
 8002984:	e00f      	b.n	80029a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002986:	4a0a      	ldr	r2, [pc, #40]	; (80029b0 <SysTick_Config+0x40>)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	3b01      	subs	r3, #1
 800298c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800298e:	210f      	movs	r1, #15
 8002990:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002994:	f7ff ff8e 	bl	80028b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002998:	4b05      	ldr	r3, [pc, #20]	; (80029b0 <SysTick_Config+0x40>)
 800299a:	2200      	movs	r2, #0
 800299c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800299e:	4b04      	ldr	r3, [pc, #16]	; (80029b0 <SysTick_Config+0x40>)
 80029a0:	2207      	movs	r2, #7
 80029a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3708      	adds	r7, #8
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	e000e010 	.word	0xe000e010

080029b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f7ff ff05 	bl	80027cc <__NVIC_SetPriorityGrouping>
}
 80029c2:	bf00      	nop
 80029c4:	3708      	adds	r7, #8
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}

080029ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029ca:	b580      	push	{r7, lr}
 80029cc:	b086      	sub	sp, #24
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	4603      	mov	r3, r0
 80029d2:	60b9      	str	r1, [r7, #8]
 80029d4:	607a      	str	r2, [r7, #4]
 80029d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80029d8:	2300      	movs	r3, #0
 80029da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029dc:	f7ff ff1a 	bl	8002814 <__NVIC_GetPriorityGrouping>
 80029e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	68b9      	ldr	r1, [r7, #8]
 80029e6:	6978      	ldr	r0, [r7, #20]
 80029e8:	f7ff ff8e 	bl	8002908 <NVIC_EncodePriority>
 80029ec:	4602      	mov	r2, r0
 80029ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029f2:	4611      	mov	r1, r2
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7ff ff5d 	bl	80028b4 <__NVIC_SetPriority>
}
 80029fa:	bf00      	nop
 80029fc:	3718      	adds	r7, #24
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b082      	sub	sp, #8
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	4603      	mov	r3, r0
 8002a0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7ff ff0d 	bl	8002830 <__NVIC_EnableIRQ>
}
 8002a16:	bf00      	nop
 8002a18:	3708      	adds	r7, #8
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b082      	sub	sp, #8
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	4603      	mov	r3, r0
 8002a26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002a28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7ff ff1d 	bl	800286c <__NVIC_DisableIRQ>
}
 8002a32:	bf00      	nop
 8002a34:	3708      	adds	r7, #8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	b082      	sub	sp, #8
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f7ff ff94 	bl	8002970 <SysTick_Config>
 8002a48:	4603      	mov	r3, r0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3708      	adds	r7, #8
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
	...

08002a54 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b086      	sub	sp, #24
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002a60:	f7ff fbfc 	bl	800225c <HAL_GetTick>
 8002a64:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d101      	bne.n	8002a70 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e099      	b.n	8002ba4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2202      	movs	r2, #2
 8002a7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f022 0201 	bic.w	r2, r2, #1
 8002a8e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a90:	e00f      	b.n	8002ab2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a92:	f7ff fbe3 	bl	800225c <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	2b05      	cmp	r3, #5
 8002a9e:	d908      	bls.n	8002ab2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2220      	movs	r2, #32
 8002aa4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2203      	movs	r2, #3
 8002aaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e078      	b.n	8002ba4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0301 	and.w	r3, r3, #1
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d1e8      	bne.n	8002a92 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ac8:	697a      	ldr	r2, [r7, #20]
 8002aca:	4b38      	ldr	r3, [pc, #224]	; (8002bac <HAL_DMA_Init+0x158>)
 8002acc:	4013      	ands	r3, r2
 8002ace:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685a      	ldr	r2, [r3, #4]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ade:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	691b      	ldr	r3, [r3, #16]
 8002ae4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002aea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002af6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6a1b      	ldr	r3, [r3, #32]
 8002afc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002afe:	697a      	ldr	r2, [r7, #20]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b08:	2b04      	cmp	r3, #4
 8002b0a:	d107      	bne.n	8002b1c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b14:	4313      	orrs	r3, r2
 8002b16:	697a      	ldr	r2, [r7, #20]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	697a      	ldr	r2, [r7, #20]
 8002b22:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	695b      	ldr	r3, [r3, #20]
 8002b2a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	f023 0307 	bic.w	r3, r3, #7
 8002b32:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b38:	697a      	ldr	r2, [r7, #20]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b42:	2b04      	cmp	r3, #4
 8002b44:	d117      	bne.n	8002b76 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b4a:	697a      	ldr	r2, [r7, #20]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d00e      	beq.n	8002b76 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f000 faf3 	bl	8003144 <DMA_CheckFifoParam>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d008      	beq.n	8002b76 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2240      	movs	r2, #64	; 0x40
 8002b68:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002b72:	2301      	movs	r3, #1
 8002b74:	e016      	b.n	8002ba4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	697a      	ldr	r2, [r7, #20]
 8002b7c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 faaa 	bl	80030d8 <DMA_CalcBaseAndBitshift>
 8002b84:	4603      	mov	r3, r0
 8002b86:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b8c:	223f      	movs	r2, #63	; 0x3f
 8002b8e:	409a      	lsls	r2, r3
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3718      	adds	r7, #24
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	e010803f 	.word	0xe010803f

08002bb0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b086      	sub	sp, #24
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	60b9      	str	r1, [r7, #8]
 8002bba:	607a      	str	r2, [r7, #4]
 8002bbc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d101      	bne.n	8002bd6 <HAL_DMA_Start_IT+0x26>
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	e048      	b.n	8002c68 <HAL_DMA_Start_IT+0xb8>
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d137      	bne.n	8002c5a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2202      	movs	r2, #2
 8002bee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	68b9      	ldr	r1, [r7, #8]
 8002bfe:	68f8      	ldr	r0, [r7, #12]
 8002c00:	f000 fa3c 	bl	800307c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c08:	223f      	movs	r2, #63	; 0x3f
 8002c0a:	409a      	lsls	r2, r3
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f042 0216 	orr.w	r2, r2, #22
 8002c1e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	695a      	ldr	r2, [r3, #20]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c2e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d007      	beq.n	8002c48 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f042 0208 	orr.w	r2, r2, #8
 8002c46:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f042 0201 	orr.w	r2, r2, #1
 8002c56:	601a      	str	r2, [r3, #0]
 8002c58:	e005      	b.n	8002c66 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002c62:	2302      	movs	r3, #2
 8002c64:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002c66:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3718      	adds	r7, #24
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c7c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002c7e:	f7ff faed 	bl	800225c <HAL_GetTick>
 8002c82:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d008      	beq.n	8002ca2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2280      	movs	r2, #128	; 0x80
 8002c94:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e052      	b.n	8002d48 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f022 0216 	bic.w	r2, r2, #22
 8002cb0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	695a      	ldr	r2, [r3, #20]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cc0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d103      	bne.n	8002cd2 <HAL_DMA_Abort+0x62>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d007      	beq.n	8002ce2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f022 0208 	bic.w	r2, r2, #8
 8002ce0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f022 0201 	bic.w	r2, r2, #1
 8002cf0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cf2:	e013      	b.n	8002d1c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002cf4:	f7ff fab2 	bl	800225c <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b05      	cmp	r3, #5
 8002d00:	d90c      	bls.n	8002d1c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2220      	movs	r2, #32
 8002d06:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2203      	movs	r2, #3
 8002d14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e015      	b.n	8002d48 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d1e4      	bne.n	8002cf4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d2e:	223f      	movs	r2, #63	; 0x3f
 8002d30:	409a      	lsls	r2, r3
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2201      	movs	r2, #1
 8002d42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002d46:	2300      	movs	r3, #0
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3710      	adds	r7, #16
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b086      	sub	sp, #24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002d5c:	4b92      	ldr	r3, [pc, #584]	; (8002fa8 <HAL_DMA_IRQHandler+0x258>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a92      	ldr	r2, [pc, #584]	; (8002fac <HAL_DMA_IRQHandler+0x25c>)
 8002d62:	fba2 2303 	umull	r2, r3, r2, r3
 8002d66:	0a9b      	lsrs	r3, r3, #10
 8002d68:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d6e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d7a:	2208      	movs	r2, #8
 8002d7c:	409a      	lsls	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	4013      	ands	r3, r2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d01a      	beq.n	8002dbc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0304 	and.w	r3, r3, #4
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d013      	beq.n	8002dbc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f022 0204 	bic.w	r2, r2, #4
 8002da2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002da8:	2208      	movs	r2, #8
 8002daa:	409a      	lsls	r2, r3
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002db4:	f043 0201 	orr.w	r2, r3, #1
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	409a      	lsls	r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d012      	beq.n	8002df2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	695b      	ldr	r3, [r3, #20]
 8002dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d00b      	beq.n	8002df2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dde:	2201      	movs	r2, #1
 8002de0:	409a      	lsls	r2, r3
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dea:	f043 0202 	orr.w	r2, r3, #2
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002df6:	2204      	movs	r2, #4
 8002df8:	409a      	lsls	r2, r3
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d012      	beq.n	8002e28 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0302 	and.w	r3, r3, #2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d00b      	beq.n	8002e28 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e14:	2204      	movs	r2, #4
 8002e16:	409a      	lsls	r2, r3
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e20:	f043 0204 	orr.w	r2, r3, #4
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e2c:	2210      	movs	r2, #16
 8002e2e:	409a      	lsls	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	4013      	ands	r3, r2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d043      	beq.n	8002ec0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0308 	and.w	r3, r3, #8
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d03c      	beq.n	8002ec0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e4a:	2210      	movs	r2, #16
 8002e4c:	409a      	lsls	r2, r3
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d018      	beq.n	8002e92 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d108      	bne.n	8002e80 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d024      	beq.n	8002ec0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	4798      	blx	r3
 8002e7e:	e01f      	b.n	8002ec0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d01b      	beq.n	8002ec0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	4798      	blx	r3
 8002e90:	e016      	b.n	8002ec0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d107      	bne.n	8002eb0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f022 0208 	bic.w	r2, r2, #8
 8002eae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d003      	beq.n	8002ec0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec4:	2220      	movs	r2, #32
 8002ec6:	409a      	lsls	r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	f000 808e 	beq.w	8002fee <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0310 	and.w	r3, r3, #16
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	f000 8086 	beq.w	8002fee <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee6:	2220      	movs	r2, #32
 8002ee8:	409a      	lsls	r2, r3
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b05      	cmp	r3, #5
 8002ef8:	d136      	bne.n	8002f68 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f022 0216 	bic.w	r2, r2, #22
 8002f08:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	695a      	ldr	r2, [r3, #20]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f18:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d103      	bne.n	8002f2a <HAL_DMA_IRQHandler+0x1da>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d007      	beq.n	8002f3a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f022 0208 	bic.w	r2, r2, #8
 8002f38:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f3e:	223f      	movs	r2, #63	; 0x3f
 8002f40:	409a      	lsls	r2, r3
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2201      	movs	r2, #1
 8002f52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d07d      	beq.n	800305a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	4798      	blx	r3
        }
        return;
 8002f66:	e078      	b.n	800305a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d01c      	beq.n	8002fb0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d108      	bne.n	8002f96 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d030      	beq.n	8002fee <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	4798      	blx	r3
 8002f94:	e02b      	b.n	8002fee <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d027      	beq.n	8002fee <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	4798      	blx	r3
 8002fa6:	e022      	b.n	8002fee <HAL_DMA_IRQHandler+0x29e>
 8002fa8:	20000004 	.word	0x20000004
 8002fac:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d10f      	bne.n	8002fde <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f022 0210 	bic.w	r2, r2, #16
 8002fcc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d003      	beq.n	8002fee <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d032      	beq.n	800305c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ffa:	f003 0301 	and.w	r3, r3, #1
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d022      	beq.n	8003048 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2205      	movs	r2, #5
 8003006:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f022 0201 	bic.w	r2, r2, #1
 8003018:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	3301      	adds	r3, #1
 800301e:	60bb      	str	r3, [r7, #8]
 8003020:	697a      	ldr	r2, [r7, #20]
 8003022:	429a      	cmp	r2, r3
 8003024:	d307      	bcc.n	8003036 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0301 	and.w	r3, r3, #1
 8003030:	2b00      	cmp	r3, #0
 8003032:	d1f2      	bne.n	800301a <HAL_DMA_IRQHandler+0x2ca>
 8003034:	e000      	b.n	8003038 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003036:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800304c:	2b00      	cmp	r3, #0
 800304e:	d005      	beq.n	800305c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	4798      	blx	r3
 8003058:	e000      	b.n	800305c <HAL_DMA_IRQHandler+0x30c>
        return;
 800305a:	bf00      	nop
    }
  }
}
 800305c:	3718      	adds	r7, #24
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop

08003064 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003070:	4618      	mov	r0, r3
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800307c:	b480      	push	{r7}
 800307e:	b085      	sub	sp, #20
 8003080:	af00      	add	r7, sp, #0
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	60b9      	str	r1, [r7, #8]
 8003086:	607a      	str	r2, [r7, #4]
 8003088:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003098:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	683a      	ldr	r2, [r7, #0]
 80030a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	2b40      	cmp	r3, #64	; 0x40
 80030a8:	d108      	bne.n	80030bc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68ba      	ldr	r2, [r7, #8]
 80030b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80030ba:	e007      	b.n	80030cc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	68ba      	ldr	r2, [r7, #8]
 80030c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	60da      	str	r2, [r3, #12]
}
 80030cc:	bf00      	nop
 80030ce:	3714      	adds	r7, #20
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80030d8:	b480      	push	{r7}
 80030da:	b085      	sub	sp, #20
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	3b10      	subs	r3, #16
 80030e8:	4a13      	ldr	r2, [pc, #76]	; (8003138 <DMA_CalcBaseAndBitshift+0x60>)
 80030ea:	fba2 2303 	umull	r2, r3, r2, r3
 80030ee:	091b      	lsrs	r3, r3, #4
 80030f0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80030f2:	4a12      	ldr	r2, [pc, #72]	; (800313c <DMA_CalcBaseAndBitshift+0x64>)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	4413      	add	r3, r2
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	461a      	mov	r2, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2b03      	cmp	r3, #3
 8003104:	d908      	bls.n	8003118 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	461a      	mov	r2, r3
 800310c:	4b0c      	ldr	r3, [pc, #48]	; (8003140 <DMA_CalcBaseAndBitshift+0x68>)
 800310e:	4013      	ands	r3, r2
 8003110:	1d1a      	adds	r2, r3, #4
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	659a      	str	r2, [r3, #88]	; 0x58
 8003116:	e006      	b.n	8003126 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	461a      	mov	r2, r3
 800311e:	4b08      	ldr	r3, [pc, #32]	; (8003140 <DMA_CalcBaseAndBitshift+0x68>)
 8003120:	4013      	ands	r3, r2
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800312a:	4618      	mov	r0, r3
 800312c:	3714      	adds	r7, #20
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	aaaaaaab 	.word	0xaaaaaaab
 800313c:	080136cc 	.word	0x080136cc
 8003140:	fffffc00 	.word	0xfffffc00

08003144 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003144:	b480      	push	{r7}
 8003146:	b085      	sub	sp, #20
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800314c:	2300      	movs	r3, #0
 800314e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003154:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d11f      	bne.n	800319e <DMA_CheckFifoParam+0x5a>
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	2b03      	cmp	r3, #3
 8003162:	d856      	bhi.n	8003212 <DMA_CheckFifoParam+0xce>
 8003164:	a201      	add	r2, pc, #4	; (adr r2, 800316c <DMA_CheckFifoParam+0x28>)
 8003166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800316a:	bf00      	nop
 800316c:	0800317d 	.word	0x0800317d
 8003170:	0800318f 	.word	0x0800318f
 8003174:	0800317d 	.word	0x0800317d
 8003178:	08003213 	.word	0x08003213
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003180:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d046      	beq.n	8003216 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800318c:	e043      	b.n	8003216 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003192:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003196:	d140      	bne.n	800321a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800319c:	e03d      	b.n	800321a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	699b      	ldr	r3, [r3, #24]
 80031a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031a6:	d121      	bne.n	80031ec <DMA_CheckFifoParam+0xa8>
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	2b03      	cmp	r3, #3
 80031ac:	d837      	bhi.n	800321e <DMA_CheckFifoParam+0xda>
 80031ae:	a201      	add	r2, pc, #4	; (adr r2, 80031b4 <DMA_CheckFifoParam+0x70>)
 80031b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031b4:	080031c5 	.word	0x080031c5
 80031b8:	080031cb 	.word	0x080031cb
 80031bc:	080031c5 	.word	0x080031c5
 80031c0:	080031dd 	.word	0x080031dd
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	73fb      	strb	r3, [r7, #15]
      break;
 80031c8:	e030      	b.n	800322c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d025      	beq.n	8003222 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031da:	e022      	b.n	8003222 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80031e4:	d11f      	bne.n	8003226 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80031ea:	e01c      	b.n	8003226 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d903      	bls.n	80031fa <DMA_CheckFifoParam+0xb6>
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	2b03      	cmp	r3, #3
 80031f6:	d003      	beq.n	8003200 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80031f8:	e018      	b.n	800322c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	73fb      	strb	r3, [r7, #15]
      break;
 80031fe:	e015      	b.n	800322c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003204:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d00e      	beq.n	800322a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	73fb      	strb	r3, [r7, #15]
      break;
 8003210:	e00b      	b.n	800322a <DMA_CheckFifoParam+0xe6>
      break;
 8003212:	bf00      	nop
 8003214:	e00a      	b.n	800322c <DMA_CheckFifoParam+0xe8>
      break;
 8003216:	bf00      	nop
 8003218:	e008      	b.n	800322c <DMA_CheckFifoParam+0xe8>
      break;
 800321a:	bf00      	nop
 800321c:	e006      	b.n	800322c <DMA_CheckFifoParam+0xe8>
      break;
 800321e:	bf00      	nop
 8003220:	e004      	b.n	800322c <DMA_CheckFifoParam+0xe8>
      break;
 8003222:	bf00      	nop
 8003224:	e002      	b.n	800322c <DMA_CheckFifoParam+0xe8>
      break;   
 8003226:	bf00      	nop
 8003228:	e000      	b.n	800322c <DMA_CheckFifoParam+0xe8>
      break;
 800322a:	bf00      	nop
    }
  } 
  
  return status; 
 800322c:	7bfb      	ldrb	r3, [r7, #15]
}
 800322e:	4618      	mov	r0, r3
 8003230:	3714      	adds	r7, #20
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop

0800323c <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800323c:	b480      	push	{r7}
 800323e:	b087      	sub	sp, #28
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	460b      	mov	r3, r1
 8003246:	607a      	str	r2, [r7, #4]
 8003248:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800324a:	2300      	movs	r3, #0
 800324c:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 800324e:	7afb      	ldrb	r3, [r7, #11]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d103      	bne.n	800325c <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	605a      	str	r2, [r3, #4]
      break;
 800325a:	e002      	b.n	8003262 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	75fb      	strb	r3, [r7, #23]
      break;
 8003260:	bf00      	nop
  }

  return status;
 8003262:	7dfb      	ldrb	r3, [r7, #23]
}
 8003264:	4618      	mov	r0, r3
 8003266:	371c      	adds	r7, #28
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d101      	bne.n	8003284 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e003      	b.n	800328c <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	683a      	ldr	r2, [r7, #0]
 8003288:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800328a:	2300      	movs	r3, #0
  }
}
 800328c:	4618      	mov	r0, r3
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b086      	sub	sp, #24
 800329c:	af00      	add	r7, sp, #0
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80032aa:	4b27      	ldr	r3, [pc, #156]	; (8003348 <HAL_FLASH_Program+0xb0>)
 80032ac:	7d1b      	ldrb	r3, [r3, #20]
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d101      	bne.n	80032b6 <HAL_FLASH_Program+0x1e>
 80032b2:	2302      	movs	r3, #2
 80032b4:	e043      	b.n	800333e <HAL_FLASH_Program+0xa6>
 80032b6:	4b24      	ldr	r3, [pc, #144]	; (8003348 <HAL_FLASH_Program+0xb0>)
 80032b8:	2201      	movs	r2, #1
 80032ba:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80032bc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80032c0:	f000 f912 	bl	80034e8 <FLASH_WaitForLastOperation>
 80032c4:	4603      	mov	r3, r0
 80032c6:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80032c8:	7dfb      	ldrb	r3, [r7, #23]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d133      	bne.n	8003336 <HAL_FLASH_Program+0x9e>
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2b03      	cmp	r3, #3
 80032d2:	d823      	bhi.n	800331c <HAL_FLASH_Program+0x84>
 80032d4:	a201      	add	r2, pc, #4	; (adr r2, 80032dc <HAL_FLASH_Program+0x44>)
 80032d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032da:	bf00      	nop
 80032dc:	080032ed 	.word	0x080032ed
 80032e0:	080032f9 	.word	0x080032f9
 80032e4:	08003305 	.word	0x08003305
 80032e8:	08003311 	.word	0x08003311
    switch(TypeProgram)
    {
      case FLASH_TYPEPROGRAM_BYTE :
      {
        /*Program byte (8-bit) at a specified address.*/
        FLASH_Program_Byte(Address, (uint8_t) Data);
 80032ec:	783b      	ldrb	r3, [r7, #0]
 80032ee:	4619      	mov	r1, r3
 80032f0:	68b8      	ldr	r0, [r7, #8]
 80032f2:	f000 f9bb 	bl	800366c <FLASH_Program_Byte>
        break;
 80032f6:	e012      	b.n	800331e <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_HALFWORD :
      {
        /*Program halfword (16-bit) at a specified address.*/
        FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80032f8:	883b      	ldrh	r3, [r7, #0]
 80032fa:	4619      	mov	r1, r3
 80032fc:	68b8      	ldr	r0, [r7, #8]
 80032fe:	f000 f98f 	bl	8003620 <FLASH_Program_HalfWord>
        break;
 8003302:	e00c      	b.n	800331e <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_WORD :
      {
        /*Program word (32-bit) at a specified address.*/
        FLASH_Program_Word(Address, (uint32_t) Data);
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	4619      	mov	r1, r3
 8003308:	68b8      	ldr	r0, [r7, #8]
 800330a:	f000 f963 	bl	80035d4 <FLASH_Program_Word>
        break;
 800330e:	e006      	b.n	800331e <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_DOUBLEWORD :
      {
        /*Program double word (64-bit) at a specified address.*/
        FLASH_Program_DoubleWord(Address, Data);
 8003310:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003314:	68b8      	ldr	r0, [r7, #8]
 8003316:	f000 f927 	bl	8003568 <FLASH_Program_DoubleWord>
        break;
 800331a:	e000      	b.n	800331e <HAL_FLASH_Program+0x86>
      }
      default :
        break;
 800331c:	bf00      	nop
    }
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800331e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003322:	f000 f8e1 	bl	80034e8 <FLASH_WaitForLastOperation>
 8003326:	4603      	mov	r3, r0
 8003328:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 800332a:	4b08      	ldr	r3, [pc, #32]	; (800334c <HAL_FLASH_Program+0xb4>)
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	4a07      	ldr	r2, [pc, #28]	; (800334c <HAL_FLASH_Program+0xb4>)
 8003330:	f023 0301 	bic.w	r3, r3, #1
 8003334:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003336:	4b04      	ldr	r3, [pc, #16]	; (8003348 <HAL_FLASH_Program+0xb0>)
 8003338:	2200      	movs	r2, #0
 800333a:	751a      	strb	r2, [r3, #20]

  return status;
 800333c:	7dfb      	ldrb	r3, [r7, #23]
}
 800333e:	4618      	mov	r0, r3
 8003340:	3718      	adds	r7, #24
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	20001af0 	.word	0x20001af0
 800334c:	40023c00 	.word	0x40023c00

08003350 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
  uint32_t temp = 0;
 8003356:	2300      	movs	r3, #0
 8003358:	607b      	str	r3, [r7, #4]
  
  /* If the program operation is completed, disable the PG Bit */
  FLASH->CR &= (~FLASH_CR_PG);
 800335a:	4b56      	ldr	r3, [pc, #344]	; (80034b4 <HAL_FLASH_IRQHandler+0x164>)
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	4a55      	ldr	r2, [pc, #340]	; (80034b4 <HAL_FLASH_IRQHandler+0x164>)
 8003360:	f023 0301 	bic.w	r3, r3, #1
 8003364:	6113      	str	r3, [r2, #16]

  /* If the erase operation is completed, disable the SER Bit */
  FLASH->CR &= (~FLASH_CR_SER);
 8003366:	4b53      	ldr	r3, [pc, #332]	; (80034b4 <HAL_FLASH_IRQHandler+0x164>)
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	4a52      	ldr	r2, [pc, #328]	; (80034b4 <HAL_FLASH_IRQHandler+0x164>)
 800336c:	f023 0302 	bic.w	r3, r3, #2
 8003370:	6113      	str	r3, [r2, #16]
  FLASH->CR &= SECTOR_MASK; 
 8003372:	4b50      	ldr	r3, [pc, #320]	; (80034b4 <HAL_FLASH_IRQHandler+0x164>)
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	4a4f      	ldr	r2, [pc, #316]	; (80034b4 <HAL_FLASH_IRQHandler+0x164>)
 8003378:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800337c:	6113      	str	r3, [r2, #16]

  /* if the erase operation is completed, disable the MER Bit */
  FLASH->CR &= (~FLASH_MER_BIT);
 800337e:	4b4d      	ldr	r3, [pc, #308]	; (80034b4 <HAL_FLASH_IRQHandler+0x164>)
 8003380:	691a      	ldr	r2, [r3, #16]
 8003382:	494c      	ldr	r1, [pc, #304]	; (80034b4 <HAL_FLASH_IRQHandler+0x164>)
 8003384:	4b4c      	ldr	r3, [pc, #304]	; (80034b8 <HAL_FLASH_IRQHandler+0x168>)
 8003386:	4013      	ands	r3, r2
 8003388:	610b      	str	r3, [r1, #16]

  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800338a:	4b4a      	ldr	r3, [pc, #296]	; (80034b4 <HAL_FLASH_IRQHandler+0x164>)
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	f003 0301 	and.w	r3, r3, #1
 8003392:	2b00      	cmp	r3, #0
 8003394:	d048      	beq.n	8003428 <HAL_FLASH_IRQHandler+0xd8>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003396:	4b47      	ldr	r3, [pc, #284]	; (80034b4 <HAL_FLASH_IRQHandler+0x164>)
 8003398:	2201      	movs	r2, #1
 800339a:	60da      	str	r2, [r3, #12]
    
    switch (pFlash.ProcedureOnGoing)
 800339c:	4b47      	ldr	r3, [pc, #284]	; (80034bc <HAL_FLASH_IRQHandler+0x16c>)
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	2b03      	cmp	r3, #3
 80033a4:	d037      	beq.n	8003416 <HAL_FLASH_IRQHandler+0xc6>
 80033a6:	2b03      	cmp	r3, #3
 80033a8:	dc40      	bgt.n	800342c <HAL_FLASH_IRQHandler+0xdc>
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d002      	beq.n	80033b4 <HAL_FLASH_IRQHandler+0x64>
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d02a      	beq.n	8003408 <HAL_FLASH_IRQHandler+0xb8>
        /* Programming procedure is completed */
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
        break;
      }
      default :
        break;
 80033b2:	e03b      	b.n	800342c <HAL_FLASH_IRQHandler+0xdc>
        pFlash.NbSectorsToErase--;
 80033b4:	4b41      	ldr	r3, [pc, #260]	; (80034bc <HAL_FLASH_IRQHandler+0x16c>)
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	3b01      	subs	r3, #1
 80033ba:	4a40      	ldr	r2, [pc, #256]	; (80034bc <HAL_FLASH_IRQHandler+0x16c>)
 80033bc:	6053      	str	r3, [r2, #4]
        if(pFlash.NbSectorsToErase != 0)
 80033be:	4b3f      	ldr	r3, [pc, #252]	; (80034bc <HAL_FLASH_IRQHandler+0x16c>)
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d013      	beq.n	80033ee <HAL_FLASH_IRQHandler+0x9e>
          temp = pFlash.Sector;
 80033c6:	4b3d      	ldr	r3, [pc, #244]	; (80034bc <HAL_FLASH_IRQHandler+0x16c>)
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	607b      	str	r3, [r7, #4]
          HAL_FLASH_EndOfOperationCallback(temp);
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f000 f877 	bl	80034c0 <HAL_FLASH_EndOfOperationCallback>
          temp = ++pFlash.Sector;
 80033d2:	4b3a      	ldr	r3, [pc, #232]	; (80034bc <HAL_FLASH_IRQHandler+0x16c>)
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	3301      	adds	r3, #1
 80033d8:	4a38      	ldr	r2, [pc, #224]	; (80034bc <HAL_FLASH_IRQHandler+0x16c>)
 80033da:	60d3      	str	r3, [r2, #12]
 80033dc:	607b      	str	r3, [r7, #4]
          FLASH_Erase_Sector(temp, pFlash.VoltageForErase);
 80033de:	4b37      	ldr	r3, [pc, #220]	; (80034bc <HAL_FLASH_IRQHandler+0x16c>)
 80033e0:	7a1b      	ldrb	r3, [r3, #8]
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	4619      	mov	r1, r3
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 fa5a 	bl	80038a0 <FLASH_Erase_Sector>
        break;
 80033ec:	e01f      	b.n	800342e <HAL_FLASH_IRQHandler+0xde>
          pFlash.Sector = temp = 0xFFFFFFFFU;
 80033ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80033f2:	607b      	str	r3, [r7, #4]
 80033f4:	4a31      	ldr	r2, [pc, #196]	; (80034bc <HAL_FLASH_IRQHandler+0x16c>)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	60d3      	str	r3, [r2, #12]
          HAL_FLASH_EndOfOperationCallback(temp);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 f860 	bl	80034c0 <HAL_FLASH_EndOfOperationCallback>
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8003400:	4b2e      	ldr	r3, [pc, #184]	; (80034bc <HAL_FLASH_IRQHandler+0x16c>)
 8003402:	2200      	movs	r2, #0
 8003404:	701a      	strb	r2, [r3, #0]
        break;
 8003406:	e012      	b.n	800342e <HAL_FLASH_IRQHandler+0xde>
        HAL_FLASH_EndOfOperationCallback(0);
 8003408:	2000      	movs	r0, #0
 800340a:	f000 f859 	bl	80034c0 <HAL_FLASH_EndOfOperationCallback>
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800340e:	4b2b      	ldr	r3, [pc, #172]	; (80034bc <HAL_FLASH_IRQHandler+0x16c>)
 8003410:	2200      	movs	r2, #0
 8003412:	701a      	strb	r2, [r3, #0]
        break;
 8003414:	e00b      	b.n	800342e <HAL_FLASH_IRQHandler+0xde>
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8003416:	4b29      	ldr	r3, [pc, #164]	; (80034bc <HAL_FLASH_IRQHandler+0x16c>)
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	4618      	mov	r0, r3
 800341c:	f000 f850 	bl	80034c0 <HAL_FLASH_EndOfOperationCallback>
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8003420:	4b26      	ldr	r3, [pc, #152]	; (80034bc <HAL_FLASH_IRQHandler+0x16c>)
 8003422:	2200      	movs	r2, #0
 8003424:	701a      	strb	r2, [r3, #0]
        break;
 8003426:	e002      	b.n	800342e <HAL_FLASH_IRQHandler+0xde>
    }
  }
 8003428:	bf00      	nop
 800342a:	e000      	b.n	800342e <HAL_FLASH_IRQHandler+0xde>
        break;
 800342c:	bf00      	nop
  
  /* Check FLASH operation error flags */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 800342e:	4b21      	ldr	r3, [pc, #132]	; (80034b4 <HAL_FLASH_IRQHandler+0x164>)
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8003436:	2b00      	cmp	r3, #0
 8003438:	d023      	beq.n	8003482 <HAL_FLASH_IRQHandler+0x132>
  {
    switch (pFlash.ProcedureOnGoing)
 800343a:	4b20      	ldr	r3, [pc, #128]	; (80034bc <HAL_FLASH_IRQHandler+0x16c>)
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	b2db      	uxtb	r3, r3
 8003440:	2b03      	cmp	r3, #3
 8003442:	d011      	beq.n	8003468 <HAL_FLASH_IRQHandler+0x118>
 8003444:	2b03      	cmp	r3, #3
 8003446:	dc13      	bgt.n	8003470 <HAL_FLASH_IRQHandler+0x120>
 8003448:	2b01      	cmp	r3, #1
 800344a:	d002      	beq.n	8003452 <HAL_FLASH_IRQHandler+0x102>
 800344c:	2b02      	cmp	r3, #2
 800344e:	d008      	beq.n	8003462 <HAL_FLASH_IRQHandler+0x112>
        /*return the faulty address*/
        temp = pFlash.Address;
        break;
      }
    default :
      break;
 8003450:	e00e      	b.n	8003470 <HAL_FLASH_IRQHandler+0x120>
        temp = pFlash.Sector;
 8003452:	4b1a      	ldr	r3, [pc, #104]	; (80034bc <HAL_FLASH_IRQHandler+0x16c>)
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	607b      	str	r3, [r7, #4]
        pFlash.Sector = 0xFFFFFFFFU;
 8003458:	4b18      	ldr	r3, [pc, #96]	; (80034bc <HAL_FLASH_IRQHandler+0x16c>)
 800345a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800345e:	60da      	str	r2, [r3, #12]
        break;
 8003460:	e007      	b.n	8003472 <HAL_FLASH_IRQHandler+0x122>
        temp = 0;
 8003462:	2300      	movs	r3, #0
 8003464:	607b      	str	r3, [r7, #4]
        break;
 8003466:	e004      	b.n	8003472 <HAL_FLASH_IRQHandler+0x122>
        temp = pFlash.Address;
 8003468:	4b14      	ldr	r3, [pc, #80]	; (80034bc <HAL_FLASH_IRQHandler+0x16c>)
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	607b      	str	r3, [r7, #4]
        break;
 800346e:	e000      	b.n	8003472 <HAL_FLASH_IRQHandler+0x122>
      break;
 8003470:	bf00      	nop
    }
    /*Save the Error code*/
    FLASH_SetErrorCode();
 8003472:	f000 f91f 	bl	80036b4 <FLASH_SetErrorCode>

    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(temp);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 f82c 	bl	80034d4 <HAL_FLASH_OperationErrorCallback>

    /*Stop the procedure ongoing */
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800347c:	4b0f      	ldr	r3, [pc, #60]	; (80034bc <HAL_FLASH_IRQHandler+0x16c>)
 800347e:	2200      	movs	r2, #0
 8003480:	701a      	strb	r2, [r3, #0]
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8003482:	4b0e      	ldr	r3, [pc, #56]	; (80034bc <HAL_FLASH_IRQHandler+0x16c>)
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	b2db      	uxtb	r3, r3
 8003488:	2b00      	cmp	r3, #0
 800348a:	d10e      	bne.n	80034aa <HAL_FLASH_IRQHandler+0x15a>
  {
    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 800348c:	4b09      	ldr	r3, [pc, #36]	; (80034b4 <HAL_FLASH_IRQHandler+0x164>)
 800348e:	691b      	ldr	r3, [r3, #16]
 8003490:	4a08      	ldr	r2, [pc, #32]	; (80034b4 <HAL_FLASH_IRQHandler+0x164>)
 8003492:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003496:	6113      	str	r3, [r2, #16]

    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 8003498:	4b06      	ldr	r3, [pc, #24]	; (80034b4 <HAL_FLASH_IRQHandler+0x164>)
 800349a:	691b      	ldr	r3, [r3, #16]
 800349c:	4a05      	ldr	r2, [pc, #20]	; (80034b4 <HAL_FLASH_IRQHandler+0x164>)
 800349e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80034a2:	6113      	str	r3, [r2, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 80034a4:	4b05      	ldr	r3, [pc, #20]	; (80034bc <HAL_FLASH_IRQHandler+0x16c>)
 80034a6:	2200      	movs	r2, #0
 80034a8:	751a      	strb	r2, [r3, #20]
  }
  
}
 80034aa:	bf00      	nop
 80034ac:	3708      	adds	r7, #8
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	40023c00 	.word	0x40023c00
 80034b8:	ffff7ffb 	.word	0xffff7ffb
 80034bc:	20001af0 	.word	0x20001af0

080034c0 <HAL_FLASH_EndOfOperationCallback>:
  *                 - Program      : Address which was selected for data program
  *                 - Mass Erase   : No return value expected
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
  */ 
}
 80034c8:	bf00      	nop
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <HAL_FLASH_OperationErrorCallback>:
  *                 - Program      : Address which was selected for data program
  *                 - Mass Erase   : No return value expected
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 80034dc:	bf00      	nop
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80034f0:	2300      	movs	r3, #0
 80034f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80034f4:	4b1a      	ldr	r3, [pc, #104]	; (8003560 <FLASH_WaitForLastOperation+0x78>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	619a      	str	r2, [r3, #24]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80034fa:	f7fe feaf 	bl	800225c <HAL_GetTick>
 80034fe:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003500:	e010      	b.n	8003524 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003508:	d00c      	beq.n	8003524 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d007      	beq.n	8003520 <FLASH_WaitForLastOperation+0x38>
 8003510:	f7fe fea4 	bl	800225c <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	429a      	cmp	r2, r3
 800351e:	d201      	bcs.n	8003524 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e019      	b.n	8003558 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003524:	4b0f      	ldr	r3, [pc, #60]	; (8003564 <FLASH_WaitForLastOperation+0x7c>)
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d1e8      	bne.n	8003502 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 8003530:	4b0c      	ldr	r3, [pc, #48]	; (8003564 <FLASH_WaitForLastOperation+0x7c>)
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8003538:	2b00      	cmp	r3, #0
 800353a:	d003      	beq.n	8003544 <FLASH_WaitForLastOperation+0x5c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800353c:	f000 f8ba 	bl	80036b4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e009      	b.n	8003558 <FLASH_WaitForLastOperation+0x70>
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8003544:	4b07      	ldr	r3, [pc, #28]	; (8003564 <FLASH_WaitForLastOperation+0x7c>)
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	f003 0301 	and.w	r3, r3, #1
 800354c:	2b00      	cmp	r3, #0
 800354e:	d002      	beq.n	8003556 <FLASH_WaitForLastOperation+0x6e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003550:	4b04      	ldr	r3, [pc, #16]	; (8003564 <FLASH_WaitForLastOperation+0x7c>)
 8003552:	2201      	movs	r2, #1
 8003554:	60da      	str	r2, [r3, #12]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8003556:	2300      	movs	r3, #0
  
}  
 8003558:	4618      	mov	r0, r3
 800355a:	3710      	adds	r7, #16
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}
 8003560:	20001af0 	.word	0x20001af0
 8003564:	40023c00 	.word	0x40023c00

08003568 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003568:	b480      	push	{r7}
 800356a:	b085      	sub	sp, #20
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8003574:	4b16      	ldr	r3, [pc, #88]	; (80035d0 <FLASH_Program_DoubleWord+0x68>)
 8003576:	691b      	ldr	r3, [r3, #16]
 8003578:	4a15      	ldr	r2, [pc, #84]	; (80035d0 <FLASH_Program_DoubleWord+0x68>)
 800357a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800357e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8003580:	4b13      	ldr	r3, [pc, #76]	; (80035d0 <FLASH_Program_DoubleWord+0x68>)
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	4a12      	ldr	r2, [pc, #72]	; (80035d0 <FLASH_Program_DoubleWord+0x68>)
 8003586:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800358a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800358c:	4b10      	ldr	r3, [pc, #64]	; (80035d0 <FLASH_Program_DoubleWord+0x68>)
 800358e:	691b      	ldr	r3, [r3, #16]
 8003590:	4a0f      	ldr	r2, [pc, #60]	; (80035d0 <FLASH_Program_DoubleWord+0x68>)
 8003592:	f043 0301 	orr.w	r3, r3, #1
 8003596:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	683a      	ldr	r2, [r7, #0]
 800359c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800359e:	f3bf 8f6f 	isb	sy
}
 80035a2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80035a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80035a8:	f04f 0200 	mov.w	r2, #0
 80035ac:	f04f 0300 	mov.w	r3, #0
 80035b0:	000a      	movs	r2, r1
 80035b2:	2300      	movs	r3, #0
 80035b4:	68f9      	ldr	r1, [r7, #12]
 80035b6:	3104      	adds	r1, #4
 80035b8:	4613      	mov	r3, r2
 80035ba:	600b      	str	r3, [r1, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80035bc:	f3bf 8f4f 	dsb	sy
}
 80035c0:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80035c2:	bf00      	nop
 80035c4:	3714      	adds	r7, #20
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	40023c00 	.word	0x40023c00

080035d4 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 80035de:	4b0f      	ldr	r3, [pc, #60]	; (800361c <FLASH_Program_Word+0x48>)
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	4a0e      	ldr	r2, [pc, #56]	; (800361c <FLASH_Program_Word+0x48>)
 80035e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035e8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80035ea:	4b0c      	ldr	r3, [pc, #48]	; (800361c <FLASH_Program_Word+0x48>)
 80035ec:	691b      	ldr	r3, [r3, #16]
 80035ee:	4a0b      	ldr	r2, [pc, #44]	; (800361c <FLASH_Program_Word+0x48>)
 80035f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035f4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80035f6:	4b09      	ldr	r3, [pc, #36]	; (800361c <FLASH_Program_Word+0x48>)
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	4a08      	ldr	r2, [pc, #32]	; (800361c <FLASH_Program_Word+0x48>)
 80035fc:	f043 0301 	orr.w	r3, r3, #1
 8003600:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	683a      	ldr	r2, [r7, #0]
 8003606:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8003608:	f3bf 8f4f 	dsb	sy
}
 800360c:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 800360e:	bf00      	nop
 8003610:	370c      	adds	r7, #12
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	40023c00 	.word	0x40023c00

08003620 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	460b      	mov	r3, r1
 800362a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 800362c:	4b0e      	ldr	r3, [pc, #56]	; (8003668 <FLASH_Program_HalfWord+0x48>)
 800362e:	691b      	ldr	r3, [r3, #16]
 8003630:	4a0d      	ldr	r2, [pc, #52]	; (8003668 <FLASH_Program_HalfWord+0x48>)
 8003632:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003636:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8003638:	4b0b      	ldr	r3, [pc, #44]	; (8003668 <FLASH_Program_HalfWord+0x48>)
 800363a:	691b      	ldr	r3, [r3, #16]
 800363c:	4a0a      	ldr	r2, [pc, #40]	; (8003668 <FLASH_Program_HalfWord+0x48>)
 800363e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003642:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003644:	4b08      	ldr	r3, [pc, #32]	; (8003668 <FLASH_Program_HalfWord+0x48>)
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	4a07      	ldr	r2, [pc, #28]	; (8003668 <FLASH_Program_HalfWord+0x48>)
 800364a:	f043 0301 	orr.w	r3, r3, #1
 800364e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	887a      	ldrh	r2, [r7, #2]
 8003654:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8003656:	f3bf 8f4f 	dsb	sy
}
 800365a:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
  
}
 800365c:	bf00      	nop
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr
 8003668:	40023c00 	.word	0x40023c00

0800366c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	460b      	mov	r3, r1
 8003676:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8003678:	4b0d      	ldr	r3, [pc, #52]	; (80036b0 <FLASH_Program_Byte+0x44>)
 800367a:	691b      	ldr	r3, [r3, #16]
 800367c:	4a0c      	ldr	r2, [pc, #48]	; (80036b0 <FLASH_Program_Byte+0x44>)
 800367e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003682:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8003684:	4b0a      	ldr	r3, [pc, #40]	; (80036b0 <FLASH_Program_Byte+0x44>)
 8003686:	4a0a      	ldr	r2, [pc, #40]	; (80036b0 <FLASH_Program_Byte+0x44>)
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800368c:	4b08      	ldr	r3, [pc, #32]	; (80036b0 <FLASH_Program_Byte+0x44>)
 800368e:	691b      	ldr	r3, [r3, #16]
 8003690:	4a07      	ldr	r2, [pc, #28]	; (80036b0 <FLASH_Program_Byte+0x44>)
 8003692:	f043 0301 	orr.w	r3, r3, #1
 8003696:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	78fa      	ldrb	r2, [r7, #3]
 800369c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800369e:	f3bf 8f4f 	dsb	sy
}
 80036a2:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80036a4:	bf00      	nop
 80036a6:	370c      	adds	r7, #12
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr
 80036b0:	40023c00 	.word	0x40023c00

080036b4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80036b4:	b480      	push	{r7}
 80036b6:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80036b8:	4b21      	ldr	r3, [pc, #132]	; (8003740 <FLASH_SetErrorCode+0x8c>)
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	f003 0302 	and.w	r3, r3, #2
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d005      	beq.n	80036d0 <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80036c4:	4b1f      	ldr	r3, [pc, #124]	; (8003744 <FLASH_SetErrorCode+0x90>)
 80036c6:	699b      	ldr	r3, [r3, #24]
 80036c8:	f043 0320 	orr.w	r3, r3, #32
 80036cc:	4a1d      	ldr	r2, [pc, #116]	; (8003744 <FLASH_SetErrorCode+0x90>)
 80036ce:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80036d0:	4b1b      	ldr	r3, [pc, #108]	; (8003740 <FLASH_SetErrorCode+0x8c>)
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	f003 0310 	and.w	r3, r3, #16
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d005      	beq.n	80036e8 <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80036dc:	4b19      	ldr	r3, [pc, #100]	; (8003744 <FLASH_SetErrorCode+0x90>)
 80036de:	699b      	ldr	r3, [r3, #24]
 80036e0:	f043 0310 	orr.w	r3, r3, #16
 80036e4:	4a17      	ldr	r2, [pc, #92]	; (8003744 <FLASH_SetErrorCode+0x90>)
 80036e6:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80036e8:	4b15      	ldr	r3, [pc, #84]	; (8003740 <FLASH_SetErrorCode+0x8c>)
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	f003 0320 	and.w	r3, r3, #32
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d005      	beq.n	8003700 <FLASH_SetErrorCode+0x4c>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80036f4:	4b13      	ldr	r3, [pc, #76]	; (8003744 <FLASH_SetErrorCode+0x90>)
 80036f6:	699b      	ldr	r3, [r3, #24]
 80036f8:	f043 0308 	orr.w	r3, r3, #8
 80036fc:	4a11      	ldr	r2, [pc, #68]	; (8003744 <FLASH_SetErrorCode+0x90>)
 80036fe:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8003700:	4b0f      	ldr	r3, [pc, #60]	; (8003740 <FLASH_SetErrorCode+0x8c>)
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003708:	2b00      	cmp	r3, #0
 800370a:	d005      	beq.n	8003718 <FLASH_SetErrorCode+0x64>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800370c:	4b0d      	ldr	r3, [pc, #52]	; (8003744 <FLASH_SetErrorCode+0x90>)
 800370e:	699b      	ldr	r3, [r3, #24]
 8003710:	f043 0304 	orr.w	r3, r3, #4
 8003714:	4a0b      	ldr	r2, [pc, #44]	; (8003744 <FLASH_SetErrorCode+0x90>)
 8003716:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 8003718:	4b09      	ldr	r3, [pc, #36]	; (8003740 <FLASH_SetErrorCode+0x8c>)
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003720:	2b00      	cmp	r3, #0
 8003722:	d005      	beq.n	8003730 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 8003724:	4b07      	ldr	r3, [pc, #28]	; (8003744 <FLASH_SetErrorCode+0x90>)
 8003726:	699b      	ldr	r3, [r3, #24]
 8003728:	f043 0302 	orr.w	r3, r3, #2
 800372c:	4a05      	ldr	r2, [pc, #20]	; (8003744 <FLASH_SetErrorCode+0x90>)
 800372e:	6193      	str	r3, [r2, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8003730:	4b03      	ldr	r3, [pc, #12]	; (8003740 <FLASH_SetErrorCode+0x8c>)
 8003732:	22f2      	movs	r2, #242	; 0xf2
 8003734:	60da      	str	r2, [r3, #12]
}
 8003736:	bf00      	nop
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr
 8003740:	40023c00 	.word	0x40023c00
 8003744:	20001af0 	.word	0x20001af0

08003748 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0;
 8003756:	2300      	movs	r3, #0
 8003758:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800375a:	4b30      	ldr	r3, [pc, #192]	; (800381c <HAL_FLASHEx_Erase+0xd4>)
 800375c:	7d1b      	ldrb	r3, [r3, #20]
 800375e:	2b01      	cmp	r3, #1
 8003760:	d101      	bne.n	8003766 <HAL_FLASHEx_Erase+0x1e>
 8003762:	2302      	movs	r3, #2
 8003764:	e056      	b.n	8003814 <HAL_FLASHEx_Erase+0xcc>
 8003766:	4b2d      	ldr	r3, [pc, #180]	; (800381c <HAL_FLASHEx_Erase+0xd4>)
 8003768:	2201      	movs	r2, #1
 800376a:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800376c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003770:	f7ff feba 	bl	80034e8 <FLASH_WaitForLastOperation>
 8003774:	4603      	mov	r3, r0
 8003776:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8003778:	7bfb      	ldrb	r3, [r7, #15]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d146      	bne.n	800380c <HAL_FLASHEx_Erase+0xc4>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003784:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2b01      	cmp	r3, #1
 800378c:	d115      	bne.n	80037ba <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
#if defined (FLASH_OPTCR_nDBANK)      
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	691b      	ldr	r3, [r3, #16]
 8003792:	b2da      	uxtb	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	4619      	mov	r1, r3
 800379a:	4610      	mov	r0, r2
 800379c:	f000 f844 	bl	8003828 <FLASH_MassErase>
#else
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange);      
#endif /* FLASH_OPTCR_nDBANK */
                      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80037a0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80037a4:	f7ff fea0 	bl	80034e8 <FLASH_WaitForLastOperation>
 80037a8:	4603      	mov	r3, r0
 80037aa:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80037ac:	4b1c      	ldr	r3, [pc, #112]	; (8003820 <HAL_FLASHEx_Erase+0xd8>)
 80037ae:	691a      	ldr	r2, [r3, #16]
 80037b0:	491b      	ldr	r1, [pc, #108]	; (8003820 <HAL_FLASHEx_Erase+0xd8>)
 80037b2:	4b1c      	ldr	r3, [pc, #112]	; (8003824 <HAL_FLASHEx_Erase+0xdc>)
 80037b4:	4013      	ands	r3, r2
 80037b6:	610b      	str	r3, [r1, #16]
 80037b8:	e028      	b.n	800380c <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	60bb      	str	r3, [r7, #8]
 80037c0:	e01c      	b.n	80037fc <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	4619      	mov	r1, r3
 80037ca:	68b8      	ldr	r0, [r7, #8]
 80037cc:	f000 f868 	bl	80038a0 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80037d0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80037d4:	f7ff fe88 	bl	80034e8 <FLASH_WaitForLastOperation>
 80037d8:	4603      	mov	r3, r0
 80037da:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER Bit and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 80037dc:	4b10      	ldr	r3, [pc, #64]	; (8003820 <HAL_FLASHEx_Erase+0xd8>)
 80037de:	691b      	ldr	r3, [r3, #16]
 80037e0:	4a0f      	ldr	r2, [pc, #60]	; (8003820 <HAL_FLASHEx_Erase+0xd8>)
 80037e2:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80037e6:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 80037e8:	7bfb      	ldrb	r3, [r7, #15]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d003      	beq.n	80037f6 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	68ba      	ldr	r2, [r7, #8]
 80037f2:	601a      	str	r2, [r3, #0]
          break;
 80037f4:	e00a      	b.n	800380c <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	3301      	adds	r3, #1
 80037fa:	60bb      	str	r3, [r7, #8]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	68da      	ldr	r2, [r3, #12]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	4413      	add	r3, r2
 8003806:	68ba      	ldr	r2, [r7, #8]
 8003808:	429a      	cmp	r2, r3
 800380a:	d3da      	bcc.n	80037c2 <HAL_FLASHEx_Erase+0x7a>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800380c:	4b03      	ldr	r3, [pc, #12]	; (800381c <HAL_FLASHEx_Erase+0xd4>)
 800380e:	2200      	movs	r2, #0
 8003810:	751a      	strb	r2, [r3, #20]

  return status;
 8003812:	7bfb      	ldrb	r3, [r7, #15]
}
 8003814:	4618      	mov	r0, r3
 8003816:	3710      	adds	r7, #16
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}
 800381c:	20001af0 	.word	0x20001af0
 8003820:	40023c00 	.word	0x40023c00
 8003824:	ffff7ffb 	.word	0xffff7ffb

08003828 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	4603      	mov	r3, r0
 8003830:	6039      	str	r1, [r7, #0]
 8003832:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  FLASH->CR &= CR_PSIZE_MASK;
 8003834:	4b19      	ldr	r3, [pc, #100]	; (800389c <FLASH_MassErase+0x74>)
 8003836:	691b      	ldr	r3, [r3, #16]
 8003838:	4a18      	ldr	r2, [pc, #96]	; (800389c <FLASH_MassErase+0x74>)
 800383a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800383e:	6113      	str	r3, [r2, #16]
  if(Banks == FLASH_BANK_BOTH)
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	2b03      	cmp	r3, #3
 8003844:	d107      	bne.n	8003856 <FLASH_MassErase+0x2e>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 8003846:	4b15      	ldr	r3, [pc, #84]	; (800389c <FLASH_MassErase+0x74>)
 8003848:	691a      	ldr	r2, [r3, #16]
 800384a:	4914      	ldr	r1, [pc, #80]	; (800389c <FLASH_MassErase+0x74>)
 800384c:	f248 0304 	movw	r3, #32772	; 0x8004
 8003850:	4313      	orrs	r3, r2
 8003852:	610b      	str	r3, [r1, #16]
 8003854:	e00f      	b.n	8003876 <FLASH_MassErase+0x4e>
  }
  else if(Banks == FLASH_BANK_2)
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	2b02      	cmp	r3, #2
 800385a:	d106      	bne.n	800386a <FLASH_MassErase+0x42>
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 800385c:	4b0f      	ldr	r3, [pc, #60]	; (800389c <FLASH_MassErase+0x74>)
 800385e:	691b      	ldr	r3, [r3, #16]
 8003860:	4a0e      	ldr	r2, [pc, #56]	; (800389c <FLASH_MassErase+0x74>)
 8003862:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003866:	6113      	str	r3, [r2, #16]
 8003868:	e005      	b.n	8003876 <FLASH_MassErase+0x4e>
  }
  else
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;    
 800386a:	4b0c      	ldr	r3, [pc, #48]	; (800389c <FLASH_MassErase+0x74>)
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	4a0b      	ldr	r2, [pc, #44]	; (800389c <FLASH_MassErase+0x74>)
 8003870:	f043 0304 	orr.w	r3, r3, #4
 8003874:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8);
 8003876:	4b09      	ldr	r3, [pc, #36]	; (800389c <FLASH_MassErase+0x74>)
 8003878:	691a      	ldr	r2, [r3, #16]
 800387a:	79fb      	ldrb	r3, [r7, #7]
 800387c:	021b      	lsls	r3, r3, #8
 800387e:	4313      	orrs	r3, r2
 8003880:	4a06      	ldr	r2, [pc, #24]	; (800389c <FLASH_MassErase+0x74>)
 8003882:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003886:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8003888:	f3bf 8f4f 	dsb	sy
}
 800388c:	bf00      	nop
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 800388e:	bf00      	nop
 8003890:	370c      	adds	r7, #12
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	40023c00 	.word	0x40023c00

080038a0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b085      	sub	sp, #20
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	460b      	mov	r3, r1
 80038aa:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0;
 80038ac:	2300      	movs	r3, #0
 80038ae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80038b0:	78fb      	ldrb	r3, [r7, #3]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d102      	bne.n	80038bc <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80038b6:	2300      	movs	r3, #0
 80038b8:	60fb      	str	r3, [r7, #12]
 80038ba:	e010      	b.n	80038de <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80038bc:	78fb      	ldrb	r3, [r7, #3]
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d103      	bne.n	80038ca <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80038c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038c6:	60fb      	str	r3, [r7, #12]
 80038c8:	e009      	b.n	80038de <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80038ca:	78fb      	ldrb	r3, [r7, #3]
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d103      	bne.n	80038d8 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80038d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80038d4:	60fb      	str	r3, [r7, #12]
 80038d6:	e002      	b.n	80038de <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80038d8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80038dc:	60fb      	str	r3, [r7, #12]
  }
  
  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if(Sector > FLASH_SECTOR_11) 
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2b0b      	cmp	r3, #11
 80038e2:	d902      	bls.n	80038ea <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	3304      	adds	r3, #4
 80038e8:	607b      	str	r3, [r7, #4]
  }  

  /* If the previous operation is completed, proceed to erase the sector */
  FLASH->CR &= CR_PSIZE_MASK;
 80038ea:	4b15      	ldr	r3, [pc, #84]	; (8003940 <FLASH_Erase_Sector+0xa0>)
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	4a14      	ldr	r2, [pc, #80]	; (8003940 <FLASH_Erase_Sector+0xa0>)
 80038f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038f4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80038f6:	4b12      	ldr	r3, [pc, #72]	; (8003940 <FLASH_Erase_Sector+0xa0>)
 80038f8:	691a      	ldr	r2, [r3, #16]
 80038fa:	4911      	ldr	r1, [pc, #68]	; (8003940 <FLASH_Erase_Sector+0xa0>)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	4313      	orrs	r3, r2
 8003900:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8003902:	4b0f      	ldr	r3, [pc, #60]	; (8003940 <FLASH_Erase_Sector+0xa0>)
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	4a0e      	ldr	r2, [pc, #56]	; (8003940 <FLASH_Erase_Sector+0xa0>)
 8003908:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800390c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800390e:	4b0c      	ldr	r3, [pc, #48]	; (8003940 <FLASH_Erase_Sector+0xa0>)
 8003910:	691a      	ldr	r2, [r3, #16]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	00db      	lsls	r3, r3, #3
 8003916:	4313      	orrs	r3, r2
 8003918:	4a09      	ldr	r2, [pc, #36]	; (8003940 <FLASH_Erase_Sector+0xa0>)
 800391a:	f043 0302 	orr.w	r3, r3, #2
 800391e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8003920:	4b07      	ldr	r3, [pc, #28]	; (8003940 <FLASH_Erase_Sector+0xa0>)
 8003922:	691b      	ldr	r3, [r3, #16]
 8003924:	4a06      	ldr	r2, [pc, #24]	; (8003940 <FLASH_Erase_Sector+0xa0>)
 8003926:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800392a:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 800392c:	f3bf 8f4f 	dsb	sy
}
 8003930:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8003932:	bf00      	nop
 8003934:	3714      	adds	r7, #20
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr
 800393e:	bf00      	nop
 8003940:	40023c00 	.word	0x40023c00

08003944 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003944:	b480      	push	{r7}
 8003946:	b089      	sub	sp, #36	; 0x24
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800394e:	2300      	movs	r3, #0
 8003950:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003952:	2300      	movs	r3, #0
 8003954:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003956:	2300      	movs	r3, #0
 8003958:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800395a:	2300      	movs	r3, #0
 800395c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800395e:	2300      	movs	r3, #0
 8003960:	61fb      	str	r3, [r7, #28]
 8003962:	e175      	b.n	8003c50 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003964:	2201      	movs	r2, #1
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	fa02 f303 	lsl.w	r3, r2, r3
 800396c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	697a      	ldr	r2, [r7, #20]
 8003974:	4013      	ands	r3, r2
 8003976:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003978:	693a      	ldr	r2, [r7, #16]
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	429a      	cmp	r2, r3
 800397e:	f040 8164 	bne.w	8003c4a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	2b01      	cmp	r3, #1
 8003988:	d00b      	beq.n	80039a2 <HAL_GPIO_Init+0x5e>
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	2b02      	cmp	r3, #2
 8003990:	d007      	beq.n	80039a2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003996:	2b11      	cmp	r3, #17
 8003998:	d003      	beq.n	80039a2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	2b12      	cmp	r3, #18
 80039a0:	d130      	bne.n	8003a04 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	005b      	lsls	r3, r3, #1
 80039ac:	2203      	movs	r2, #3
 80039ae:	fa02 f303 	lsl.w	r3, r2, r3
 80039b2:	43db      	mvns	r3, r3
 80039b4:	69ba      	ldr	r2, [r7, #24]
 80039b6:	4013      	ands	r3, r2
 80039b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	68da      	ldr	r2, [r3, #12]
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	005b      	lsls	r3, r3, #1
 80039c2:	fa02 f303 	lsl.w	r3, r2, r3
 80039c6:	69ba      	ldr	r2, [r7, #24]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	69ba      	ldr	r2, [r7, #24]
 80039d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80039d8:	2201      	movs	r2, #1
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	fa02 f303 	lsl.w	r3, r2, r3
 80039e0:	43db      	mvns	r3, r3
 80039e2:	69ba      	ldr	r2, [r7, #24]
 80039e4:	4013      	ands	r3, r2
 80039e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	091b      	lsrs	r3, r3, #4
 80039ee:	f003 0201 	and.w	r2, r3, #1
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	fa02 f303 	lsl.w	r3, r2, r3
 80039f8:	69ba      	ldr	r2, [r7, #24]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	69ba      	ldr	r2, [r7, #24]
 8003a02:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	005b      	lsls	r3, r3, #1
 8003a0e:	2203      	movs	r2, #3
 8003a10:	fa02 f303 	lsl.w	r3, r2, r3
 8003a14:	43db      	mvns	r3, r3
 8003a16:	69ba      	ldr	r2, [r7, #24]
 8003a18:	4013      	ands	r3, r2
 8003a1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	689a      	ldr	r2, [r3, #8]
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	005b      	lsls	r3, r3, #1
 8003a24:	fa02 f303 	lsl.w	r3, r2, r3
 8003a28:	69ba      	ldr	r2, [r7, #24]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	69ba      	ldr	r2, [r7, #24]
 8003a32:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d003      	beq.n	8003a44 <HAL_GPIO_Init+0x100>
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	2b12      	cmp	r3, #18
 8003a42:	d123      	bne.n	8003a8c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	08da      	lsrs	r2, r3, #3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	3208      	adds	r2, #8
 8003a4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	f003 0307 	and.w	r3, r3, #7
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	220f      	movs	r2, #15
 8003a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a60:	43db      	mvns	r3, r3
 8003a62:	69ba      	ldr	r2, [r7, #24]
 8003a64:	4013      	ands	r3, r2
 8003a66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	691a      	ldr	r2, [r3, #16]
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	f003 0307 	and.w	r3, r3, #7
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	fa02 f303 	lsl.w	r3, r2, r3
 8003a78:	69ba      	ldr	r2, [r7, #24]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	08da      	lsrs	r2, r3, #3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	3208      	adds	r2, #8
 8003a86:	69b9      	ldr	r1, [r7, #24]
 8003a88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	005b      	lsls	r3, r3, #1
 8003a96:	2203      	movs	r2, #3
 8003a98:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9c:	43db      	mvns	r3, r3
 8003a9e:	69ba      	ldr	r2, [r7, #24]
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f003 0203 	and.w	r2, r3, #3
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	005b      	lsls	r3, r3, #1
 8003ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	69ba      	ldr	r2, [r7, #24]
 8003abe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	f000 80be 	beq.w	8003c4a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ace:	4b66      	ldr	r3, [pc, #408]	; (8003c68 <HAL_GPIO_Init+0x324>)
 8003ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ad2:	4a65      	ldr	r2, [pc, #404]	; (8003c68 <HAL_GPIO_Init+0x324>)
 8003ad4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ad8:	6453      	str	r3, [r2, #68]	; 0x44
 8003ada:	4b63      	ldr	r3, [pc, #396]	; (8003c68 <HAL_GPIO_Init+0x324>)
 8003adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ade:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ae2:	60fb      	str	r3, [r7, #12]
 8003ae4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003ae6:	4a61      	ldr	r2, [pc, #388]	; (8003c6c <HAL_GPIO_Init+0x328>)
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	089b      	lsrs	r3, r3, #2
 8003aec:	3302      	adds	r3, #2
 8003aee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003af2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	f003 0303 	and.w	r3, r3, #3
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	220f      	movs	r2, #15
 8003afe:	fa02 f303 	lsl.w	r3, r2, r3
 8003b02:	43db      	mvns	r3, r3
 8003b04:	69ba      	ldr	r2, [r7, #24]
 8003b06:	4013      	ands	r3, r2
 8003b08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a58      	ldr	r2, [pc, #352]	; (8003c70 <HAL_GPIO_Init+0x32c>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d037      	beq.n	8003b82 <HAL_GPIO_Init+0x23e>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a57      	ldr	r2, [pc, #348]	; (8003c74 <HAL_GPIO_Init+0x330>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d031      	beq.n	8003b7e <HAL_GPIO_Init+0x23a>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a56      	ldr	r2, [pc, #344]	; (8003c78 <HAL_GPIO_Init+0x334>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d02b      	beq.n	8003b7a <HAL_GPIO_Init+0x236>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a55      	ldr	r2, [pc, #340]	; (8003c7c <HAL_GPIO_Init+0x338>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d025      	beq.n	8003b76 <HAL_GPIO_Init+0x232>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a54      	ldr	r2, [pc, #336]	; (8003c80 <HAL_GPIO_Init+0x33c>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d01f      	beq.n	8003b72 <HAL_GPIO_Init+0x22e>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a53      	ldr	r2, [pc, #332]	; (8003c84 <HAL_GPIO_Init+0x340>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d019      	beq.n	8003b6e <HAL_GPIO_Init+0x22a>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a52      	ldr	r2, [pc, #328]	; (8003c88 <HAL_GPIO_Init+0x344>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d013      	beq.n	8003b6a <HAL_GPIO_Init+0x226>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a51      	ldr	r2, [pc, #324]	; (8003c8c <HAL_GPIO_Init+0x348>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d00d      	beq.n	8003b66 <HAL_GPIO_Init+0x222>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a50      	ldr	r2, [pc, #320]	; (8003c90 <HAL_GPIO_Init+0x34c>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d007      	beq.n	8003b62 <HAL_GPIO_Init+0x21e>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a4f      	ldr	r2, [pc, #316]	; (8003c94 <HAL_GPIO_Init+0x350>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d101      	bne.n	8003b5e <HAL_GPIO_Init+0x21a>
 8003b5a:	2309      	movs	r3, #9
 8003b5c:	e012      	b.n	8003b84 <HAL_GPIO_Init+0x240>
 8003b5e:	230a      	movs	r3, #10
 8003b60:	e010      	b.n	8003b84 <HAL_GPIO_Init+0x240>
 8003b62:	2308      	movs	r3, #8
 8003b64:	e00e      	b.n	8003b84 <HAL_GPIO_Init+0x240>
 8003b66:	2307      	movs	r3, #7
 8003b68:	e00c      	b.n	8003b84 <HAL_GPIO_Init+0x240>
 8003b6a:	2306      	movs	r3, #6
 8003b6c:	e00a      	b.n	8003b84 <HAL_GPIO_Init+0x240>
 8003b6e:	2305      	movs	r3, #5
 8003b70:	e008      	b.n	8003b84 <HAL_GPIO_Init+0x240>
 8003b72:	2304      	movs	r3, #4
 8003b74:	e006      	b.n	8003b84 <HAL_GPIO_Init+0x240>
 8003b76:	2303      	movs	r3, #3
 8003b78:	e004      	b.n	8003b84 <HAL_GPIO_Init+0x240>
 8003b7a:	2302      	movs	r3, #2
 8003b7c:	e002      	b.n	8003b84 <HAL_GPIO_Init+0x240>
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e000      	b.n	8003b84 <HAL_GPIO_Init+0x240>
 8003b82:	2300      	movs	r3, #0
 8003b84:	69fa      	ldr	r2, [r7, #28]
 8003b86:	f002 0203 	and.w	r2, r2, #3
 8003b8a:	0092      	lsls	r2, r2, #2
 8003b8c:	4093      	lsls	r3, r2
 8003b8e:	69ba      	ldr	r2, [r7, #24]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003b94:	4935      	ldr	r1, [pc, #212]	; (8003c6c <HAL_GPIO_Init+0x328>)
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	089b      	lsrs	r3, r3, #2
 8003b9a:	3302      	adds	r3, #2
 8003b9c:	69ba      	ldr	r2, [r7, #24]
 8003b9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ba2:	4b3d      	ldr	r3, [pc, #244]	; (8003c98 <HAL_GPIO_Init+0x354>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	43db      	mvns	r3, r3
 8003bac:	69ba      	ldr	r2, [r7, #24]
 8003bae:	4013      	ands	r3, r2
 8003bb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d003      	beq.n	8003bc6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003bbe:	69ba      	ldr	r2, [r7, #24]
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003bc6:	4a34      	ldr	r2, [pc, #208]	; (8003c98 <HAL_GPIO_Init+0x354>)
 8003bc8:	69bb      	ldr	r3, [r7, #24]
 8003bca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003bcc:	4b32      	ldr	r3, [pc, #200]	; (8003c98 <HAL_GPIO_Init+0x354>)
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	43db      	mvns	r3, r3
 8003bd6:	69ba      	ldr	r2, [r7, #24]
 8003bd8:	4013      	ands	r3, r2
 8003bda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d003      	beq.n	8003bf0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003be8:	69ba      	ldr	r2, [r7, #24]
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003bf0:	4a29      	ldr	r2, [pc, #164]	; (8003c98 <HAL_GPIO_Init+0x354>)
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003bf6:	4b28      	ldr	r3, [pc, #160]	; (8003c98 <HAL_GPIO_Init+0x354>)
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	43db      	mvns	r3, r3
 8003c00:	69ba      	ldr	r2, [r7, #24]
 8003c02:	4013      	ands	r3, r2
 8003c04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d003      	beq.n	8003c1a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003c12:	69ba      	ldr	r2, [r7, #24]
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c1a:	4a1f      	ldr	r2, [pc, #124]	; (8003c98 <HAL_GPIO_Init+0x354>)
 8003c1c:	69bb      	ldr	r3, [r7, #24]
 8003c1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c20:	4b1d      	ldr	r3, [pc, #116]	; (8003c98 <HAL_GPIO_Init+0x354>)
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	43db      	mvns	r3, r3
 8003c2a:	69ba      	ldr	r2, [r7, #24]
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d003      	beq.n	8003c44 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003c3c:	69ba      	ldr	r2, [r7, #24]
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c44:	4a14      	ldr	r2, [pc, #80]	; (8003c98 <HAL_GPIO_Init+0x354>)
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	61fb      	str	r3, [r7, #28]
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	2b0f      	cmp	r3, #15
 8003c54:	f67f ae86 	bls.w	8003964 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003c58:	bf00      	nop
 8003c5a:	bf00      	nop
 8003c5c:	3724      	adds	r7, #36	; 0x24
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	40023800 	.word	0x40023800
 8003c6c:	40013800 	.word	0x40013800
 8003c70:	40020000 	.word	0x40020000
 8003c74:	40020400 	.word	0x40020400
 8003c78:	40020800 	.word	0x40020800
 8003c7c:	40020c00 	.word	0x40020c00
 8003c80:	40021000 	.word	0x40021000
 8003c84:	40021400 	.word	0x40021400
 8003c88:	40021800 	.word	0x40021800
 8003c8c:	40021c00 	.word	0x40021c00
 8003c90:	40022000 	.word	0x40022000
 8003c94:	40022400 	.word	0x40022400
 8003c98:	40013c00 	.word	0x40013c00

08003c9c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b087      	sub	sp, #28
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8003caa:	2300      	movs	r3, #0
 8003cac:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	617b      	str	r3, [r7, #20]
 8003cb6:	e0d9      	b.n	8003e6c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003cb8:	2201      	movs	r2, #1
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003cc2:	683a      	ldr	r2, [r7, #0]
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003cca:	68fa      	ldr	r2, [r7, #12]
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	f040 80c9 	bne.w	8003e66 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8003cd4:	4a6b      	ldr	r2, [pc, #428]	; (8003e84 <HAL_GPIO_DeInit+0x1e8>)
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	089b      	lsrs	r3, r3, #2
 8003cda:	3302      	adds	r3, #2
 8003cdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ce0:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	f003 0303 	and.w	r3, r3, #3
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	220f      	movs	r2, #15
 8003cec:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf0:	68ba      	ldr	r2, [r7, #8]
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a63      	ldr	r2, [pc, #396]	; (8003e88 <HAL_GPIO_DeInit+0x1ec>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d037      	beq.n	8003d6e <HAL_GPIO_DeInit+0xd2>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a62      	ldr	r2, [pc, #392]	; (8003e8c <HAL_GPIO_DeInit+0x1f0>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d031      	beq.n	8003d6a <HAL_GPIO_DeInit+0xce>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a61      	ldr	r2, [pc, #388]	; (8003e90 <HAL_GPIO_DeInit+0x1f4>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d02b      	beq.n	8003d66 <HAL_GPIO_DeInit+0xca>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a60      	ldr	r2, [pc, #384]	; (8003e94 <HAL_GPIO_DeInit+0x1f8>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d025      	beq.n	8003d62 <HAL_GPIO_DeInit+0xc6>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a5f      	ldr	r2, [pc, #380]	; (8003e98 <HAL_GPIO_DeInit+0x1fc>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d01f      	beq.n	8003d5e <HAL_GPIO_DeInit+0xc2>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a5e      	ldr	r2, [pc, #376]	; (8003e9c <HAL_GPIO_DeInit+0x200>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d019      	beq.n	8003d5a <HAL_GPIO_DeInit+0xbe>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a5d      	ldr	r2, [pc, #372]	; (8003ea0 <HAL_GPIO_DeInit+0x204>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d013      	beq.n	8003d56 <HAL_GPIO_DeInit+0xba>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a5c      	ldr	r2, [pc, #368]	; (8003ea4 <HAL_GPIO_DeInit+0x208>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d00d      	beq.n	8003d52 <HAL_GPIO_DeInit+0xb6>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a5b      	ldr	r2, [pc, #364]	; (8003ea8 <HAL_GPIO_DeInit+0x20c>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d007      	beq.n	8003d4e <HAL_GPIO_DeInit+0xb2>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a5a      	ldr	r2, [pc, #360]	; (8003eac <HAL_GPIO_DeInit+0x210>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d101      	bne.n	8003d4a <HAL_GPIO_DeInit+0xae>
 8003d46:	2309      	movs	r3, #9
 8003d48:	e012      	b.n	8003d70 <HAL_GPIO_DeInit+0xd4>
 8003d4a:	230a      	movs	r3, #10
 8003d4c:	e010      	b.n	8003d70 <HAL_GPIO_DeInit+0xd4>
 8003d4e:	2308      	movs	r3, #8
 8003d50:	e00e      	b.n	8003d70 <HAL_GPIO_DeInit+0xd4>
 8003d52:	2307      	movs	r3, #7
 8003d54:	e00c      	b.n	8003d70 <HAL_GPIO_DeInit+0xd4>
 8003d56:	2306      	movs	r3, #6
 8003d58:	e00a      	b.n	8003d70 <HAL_GPIO_DeInit+0xd4>
 8003d5a:	2305      	movs	r3, #5
 8003d5c:	e008      	b.n	8003d70 <HAL_GPIO_DeInit+0xd4>
 8003d5e:	2304      	movs	r3, #4
 8003d60:	e006      	b.n	8003d70 <HAL_GPIO_DeInit+0xd4>
 8003d62:	2303      	movs	r3, #3
 8003d64:	e004      	b.n	8003d70 <HAL_GPIO_DeInit+0xd4>
 8003d66:	2302      	movs	r3, #2
 8003d68:	e002      	b.n	8003d70 <HAL_GPIO_DeInit+0xd4>
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e000      	b.n	8003d70 <HAL_GPIO_DeInit+0xd4>
 8003d6e:	2300      	movs	r3, #0
 8003d70:	697a      	ldr	r2, [r7, #20]
 8003d72:	f002 0203 	and.w	r2, r2, #3
 8003d76:	0092      	lsls	r2, r2, #2
 8003d78:	4093      	lsls	r3, r2
 8003d7a:	68ba      	ldr	r2, [r7, #8]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d132      	bne.n	8003de6 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003d80:	4b4b      	ldr	r3, [pc, #300]	; (8003eb0 <HAL_GPIO_DeInit+0x214>)
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	43db      	mvns	r3, r3
 8003d88:	4949      	ldr	r1, [pc, #292]	; (8003eb0 <HAL_GPIO_DeInit+0x214>)
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003d8e:	4b48      	ldr	r3, [pc, #288]	; (8003eb0 <HAL_GPIO_DeInit+0x214>)
 8003d90:	685a      	ldr	r2, [r3, #4]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	43db      	mvns	r3, r3
 8003d96:	4946      	ldr	r1, [pc, #280]	; (8003eb0 <HAL_GPIO_DeInit+0x214>)
 8003d98:	4013      	ands	r3, r2
 8003d9a:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003d9c:	4b44      	ldr	r3, [pc, #272]	; (8003eb0 <HAL_GPIO_DeInit+0x214>)
 8003d9e:	689a      	ldr	r2, [r3, #8]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	43db      	mvns	r3, r3
 8003da4:	4942      	ldr	r1, [pc, #264]	; (8003eb0 <HAL_GPIO_DeInit+0x214>)
 8003da6:	4013      	ands	r3, r2
 8003da8:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003daa:	4b41      	ldr	r3, [pc, #260]	; (8003eb0 <HAL_GPIO_DeInit+0x214>)
 8003dac:	68da      	ldr	r2, [r3, #12]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	43db      	mvns	r3, r3
 8003db2:	493f      	ldr	r1, [pc, #252]	; (8003eb0 <HAL_GPIO_DeInit+0x214>)
 8003db4:	4013      	ands	r3, r2
 8003db6:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	f003 0303 	and.w	r3, r3, #3
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	220f      	movs	r2, #15
 8003dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8003dc8:	4a2e      	ldr	r2, [pc, #184]	; (8003e84 <HAL_GPIO_DeInit+0x1e8>)
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	089b      	lsrs	r3, r3, #2
 8003dce:	3302      	adds	r3, #2
 8003dd0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	43da      	mvns	r2, r3
 8003dd8:	482a      	ldr	r0, [pc, #168]	; (8003e84 <HAL_GPIO_DeInit+0x1e8>)
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	089b      	lsrs	r3, r3, #2
 8003dde:	400a      	ands	r2, r1
 8003de0:	3302      	adds	r3, #2
 8003de2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	005b      	lsls	r3, r3, #1
 8003dee:	2103      	movs	r1, #3
 8003df0:	fa01 f303 	lsl.w	r3, r1, r3
 8003df4:	43db      	mvns	r3, r3
 8003df6:	401a      	ands	r2, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	08da      	lsrs	r2, r3, #3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	3208      	adds	r2, #8
 8003e04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	f003 0307 	and.w	r3, r3, #7
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	220f      	movs	r2, #15
 8003e12:	fa02 f303 	lsl.w	r3, r2, r3
 8003e16:	43db      	mvns	r3, r3
 8003e18:	697a      	ldr	r2, [r7, #20]
 8003e1a:	08d2      	lsrs	r2, r2, #3
 8003e1c:	4019      	ands	r1, r3
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	3208      	adds	r2, #8
 8003e22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	68da      	ldr	r2, [r3, #12]
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	005b      	lsls	r3, r3, #1
 8003e2e:	2103      	movs	r1, #3
 8003e30:	fa01 f303 	lsl.w	r3, r1, r3
 8003e34:	43db      	mvns	r3, r3
 8003e36:	401a      	ands	r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	685a      	ldr	r2, [r3, #4]
 8003e40:	2101      	movs	r1, #1
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	fa01 f303 	lsl.w	r3, r1, r3
 8003e48:	43db      	mvns	r3, r3
 8003e4a:	401a      	ands	r2, r3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	689a      	ldr	r2, [r3, #8]
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	005b      	lsls	r3, r3, #1
 8003e58:	2103      	movs	r1, #3
 8003e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e5e:	43db      	mvns	r3, r3
 8003e60:	401a      	ands	r2, r3
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	3301      	adds	r3, #1
 8003e6a:	617b      	str	r3, [r7, #20]
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	2b0f      	cmp	r3, #15
 8003e70:	f67f af22 	bls.w	8003cb8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003e74:	bf00      	nop
 8003e76:	bf00      	nop
 8003e78:	371c      	adds	r7, #28
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop
 8003e84:	40013800 	.word	0x40013800
 8003e88:	40020000 	.word	0x40020000
 8003e8c:	40020400 	.word	0x40020400
 8003e90:	40020800 	.word	0x40020800
 8003e94:	40020c00 	.word	0x40020c00
 8003e98:	40021000 	.word	0x40021000
 8003e9c:	40021400 	.word	0x40021400
 8003ea0:	40021800 	.word	0x40021800
 8003ea4:	40021c00 	.word	0x40021c00
 8003ea8:	40022000 	.word	0x40022000
 8003eac:	40022400 	.word	0x40022400
 8003eb0:	40013c00 	.word	0x40013c00

08003eb4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b085      	sub	sp, #20
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	460b      	mov	r3, r1
 8003ebe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	691a      	ldr	r2, [r3, #16]
 8003ec4:	887b      	ldrh	r3, [r7, #2]
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d002      	beq.n	8003ed2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	73fb      	strb	r3, [r7, #15]
 8003ed0:	e001      	b.n	8003ed6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003ed6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3714      	adds	r7, #20
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	460b      	mov	r3, r1
 8003eee:	807b      	strh	r3, [r7, #2]
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ef4:	787b      	ldrb	r3, [r7, #1]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d003      	beq.n	8003f02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003efa:	887a      	ldrh	r2, [r7, #2]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003f00:	e003      	b.n	8003f0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003f02:	887b      	ldrh	r3, [r7, #2]
 8003f04:	041a      	lsls	r2, r3, #16
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	619a      	str	r2, [r3, #24]
}
 8003f0a:	bf00      	nop
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr

08003f16 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003f16:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f18:	b08f      	sub	sp, #60	; 0x3c
 8003f1a:	af0a      	add	r7, sp, #40	; 0x28
 8003f1c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d101      	bne.n	8003f28 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e116      	b.n	8004156 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d106      	bne.n	8003f48 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f00c f948 	bl	80101d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2203      	movs	r2, #3
 8003f4c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d102      	bne.n	8003f62 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4618      	mov	r0, r3
 8003f68:	f005 fbb9 	bl	80096de <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	603b      	str	r3, [r7, #0]
 8003f72:	687e      	ldr	r6, [r7, #4]
 8003f74:	466d      	mov	r5, sp
 8003f76:	f106 0410 	add.w	r4, r6, #16
 8003f7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f82:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003f86:	e885 0003 	stmia.w	r5, {r0, r1}
 8003f8a:	1d33      	adds	r3, r6, #4
 8003f8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f8e:	6838      	ldr	r0, [r7, #0]
 8003f90:	f005 fa9a 	bl	80094c8 <USB_CoreInit>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d005      	beq.n	8003fa6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2202      	movs	r2, #2
 8003f9e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e0d7      	b.n	8004156 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2100      	movs	r1, #0
 8003fac:	4618      	mov	r0, r3
 8003fae:	f005 fba7 	bl	8009700 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	73fb      	strb	r3, [r7, #15]
 8003fb6:	e04a      	b.n	800404e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003fb8:	7bfa      	ldrb	r2, [r7, #15]
 8003fba:	6879      	ldr	r1, [r7, #4]
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	00db      	lsls	r3, r3, #3
 8003fc0:	1a9b      	subs	r3, r3, r2
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	440b      	add	r3, r1
 8003fc6:	333d      	adds	r3, #61	; 0x3d
 8003fc8:	2201      	movs	r2, #1
 8003fca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003fcc:	7bfa      	ldrb	r2, [r7, #15]
 8003fce:	6879      	ldr	r1, [r7, #4]
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	00db      	lsls	r3, r3, #3
 8003fd4:	1a9b      	subs	r3, r3, r2
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	440b      	add	r3, r1
 8003fda:	333c      	adds	r3, #60	; 0x3c
 8003fdc:	7bfa      	ldrb	r2, [r7, #15]
 8003fde:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003fe0:	7bfa      	ldrb	r2, [r7, #15]
 8003fe2:	7bfb      	ldrb	r3, [r7, #15]
 8003fe4:	b298      	uxth	r0, r3
 8003fe6:	6879      	ldr	r1, [r7, #4]
 8003fe8:	4613      	mov	r3, r2
 8003fea:	00db      	lsls	r3, r3, #3
 8003fec:	1a9b      	subs	r3, r3, r2
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	440b      	add	r3, r1
 8003ff2:	3342      	adds	r3, #66	; 0x42
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003ff8:	7bfa      	ldrb	r2, [r7, #15]
 8003ffa:	6879      	ldr	r1, [r7, #4]
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	00db      	lsls	r3, r3, #3
 8004000:	1a9b      	subs	r3, r3, r2
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	440b      	add	r3, r1
 8004006:	333f      	adds	r3, #63	; 0x3f
 8004008:	2200      	movs	r2, #0
 800400a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800400c:	7bfa      	ldrb	r2, [r7, #15]
 800400e:	6879      	ldr	r1, [r7, #4]
 8004010:	4613      	mov	r3, r2
 8004012:	00db      	lsls	r3, r3, #3
 8004014:	1a9b      	subs	r3, r3, r2
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	440b      	add	r3, r1
 800401a:	3344      	adds	r3, #68	; 0x44
 800401c:	2200      	movs	r2, #0
 800401e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004020:	7bfa      	ldrb	r2, [r7, #15]
 8004022:	6879      	ldr	r1, [r7, #4]
 8004024:	4613      	mov	r3, r2
 8004026:	00db      	lsls	r3, r3, #3
 8004028:	1a9b      	subs	r3, r3, r2
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	440b      	add	r3, r1
 800402e:	3348      	adds	r3, #72	; 0x48
 8004030:	2200      	movs	r2, #0
 8004032:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004034:	7bfa      	ldrb	r2, [r7, #15]
 8004036:	6879      	ldr	r1, [r7, #4]
 8004038:	4613      	mov	r3, r2
 800403a:	00db      	lsls	r3, r3, #3
 800403c:	1a9b      	subs	r3, r3, r2
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	440b      	add	r3, r1
 8004042:	3350      	adds	r3, #80	; 0x50
 8004044:	2200      	movs	r2, #0
 8004046:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004048:	7bfb      	ldrb	r3, [r7, #15]
 800404a:	3301      	adds	r3, #1
 800404c:	73fb      	strb	r3, [r7, #15]
 800404e:	7bfa      	ldrb	r2, [r7, #15]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	429a      	cmp	r2, r3
 8004056:	d3af      	bcc.n	8003fb8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004058:	2300      	movs	r3, #0
 800405a:	73fb      	strb	r3, [r7, #15]
 800405c:	e044      	b.n	80040e8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800405e:	7bfa      	ldrb	r2, [r7, #15]
 8004060:	6879      	ldr	r1, [r7, #4]
 8004062:	4613      	mov	r3, r2
 8004064:	00db      	lsls	r3, r3, #3
 8004066:	1a9b      	subs	r3, r3, r2
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	440b      	add	r3, r1
 800406c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004070:	2200      	movs	r2, #0
 8004072:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004074:	7bfa      	ldrb	r2, [r7, #15]
 8004076:	6879      	ldr	r1, [r7, #4]
 8004078:	4613      	mov	r3, r2
 800407a:	00db      	lsls	r3, r3, #3
 800407c:	1a9b      	subs	r3, r3, r2
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	440b      	add	r3, r1
 8004082:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004086:	7bfa      	ldrb	r2, [r7, #15]
 8004088:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800408a:	7bfa      	ldrb	r2, [r7, #15]
 800408c:	6879      	ldr	r1, [r7, #4]
 800408e:	4613      	mov	r3, r2
 8004090:	00db      	lsls	r3, r3, #3
 8004092:	1a9b      	subs	r3, r3, r2
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	440b      	add	r3, r1
 8004098:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800409c:	2200      	movs	r2, #0
 800409e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80040a0:	7bfa      	ldrb	r2, [r7, #15]
 80040a2:	6879      	ldr	r1, [r7, #4]
 80040a4:	4613      	mov	r3, r2
 80040a6:	00db      	lsls	r3, r3, #3
 80040a8:	1a9b      	subs	r3, r3, r2
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	440b      	add	r3, r1
 80040ae:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80040b2:	2200      	movs	r2, #0
 80040b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80040b6:	7bfa      	ldrb	r2, [r7, #15]
 80040b8:	6879      	ldr	r1, [r7, #4]
 80040ba:	4613      	mov	r3, r2
 80040bc:	00db      	lsls	r3, r3, #3
 80040be:	1a9b      	subs	r3, r3, r2
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	440b      	add	r3, r1
 80040c4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80040c8:	2200      	movs	r2, #0
 80040ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80040cc:	7bfa      	ldrb	r2, [r7, #15]
 80040ce:	6879      	ldr	r1, [r7, #4]
 80040d0:	4613      	mov	r3, r2
 80040d2:	00db      	lsls	r3, r3, #3
 80040d4:	1a9b      	subs	r3, r3, r2
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	440b      	add	r3, r1
 80040da:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80040de:	2200      	movs	r2, #0
 80040e0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040e2:	7bfb      	ldrb	r3, [r7, #15]
 80040e4:	3301      	adds	r3, #1
 80040e6:	73fb      	strb	r3, [r7, #15]
 80040e8:	7bfa      	ldrb	r2, [r7, #15]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d3b5      	bcc.n	800405e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	603b      	str	r3, [r7, #0]
 80040f8:	687e      	ldr	r6, [r7, #4]
 80040fa:	466d      	mov	r5, sp
 80040fc:	f106 0410 	add.w	r4, r6, #16
 8004100:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004102:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004104:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004106:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004108:	e894 0003 	ldmia.w	r4, {r0, r1}
 800410c:	e885 0003 	stmia.w	r5, {r0, r1}
 8004110:	1d33      	adds	r3, r6, #4
 8004112:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004114:	6838      	ldr	r0, [r7, #0]
 8004116:	f005 fb1d 	bl	8009754 <USB_DevInit>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d005      	beq.n	800412c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2202      	movs	r2, #2
 8004124:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e014      	b.n	8004156 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004140:	2b01      	cmp	r3, #1
 8004142:	d102      	bne.n	800414a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f001 f881 	bl	800524c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4618      	mov	r0, r3
 8004150:	f006 fb75 	bl	800a83e <USB_DevDisconnect>

  return HAL_OK;
 8004154:	2300      	movs	r3, #0
}
 8004156:	4618      	mov	r0, r3
 8004158:	3714      	adds	r7, #20
 800415a:	46bd      	mov	sp, r7
 800415c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800415e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800415e:	b580      	push	{r7, lr}
 8004160:	b082      	sub	sp, #8
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800416c:	2b01      	cmp	r3, #1
 800416e:	d101      	bne.n	8004174 <HAL_PCD_Start+0x16>
 8004170:	2302      	movs	r3, #2
 8004172:	e012      	b.n	800419a <HAL_PCD_Start+0x3c>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_ENABLE(hpcd);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4618      	mov	r0, r3
 8004182:	f005 fa9b 	bl	80096bc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4618      	mov	r0, r3
 800418c:	f006 fb36 	bl	800a7fc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	3708      	adds	r7, #8
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}

080041a2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80041a2:	b590      	push	{r4, r7, lr}
 80041a4:	b08d      	sub	sp, #52	; 0x34
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041b0:	6a3b      	ldr	r3, [r7, #32]
 80041b2:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4618      	mov	r0, r3
 80041ba:	f006 fbf4 	bl	800a9a6 <USB_GetMode>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	f040 83ca 	bne.w	800495a <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4618      	mov	r0, r3
 80041cc:	f006 fb58 	bl	800a880 <USB_ReadInterrupts>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	f000 83c0 	beq.w	8004958 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4618      	mov	r0, r3
 80041de:	f006 fb4f 	bl	800a880 <USB_ReadInterrupts>
 80041e2:	4603      	mov	r3, r0
 80041e4:	f003 0302 	and.w	r3, r3, #2
 80041e8:	2b02      	cmp	r3, #2
 80041ea:	d107      	bne.n	80041fc <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	695a      	ldr	r2, [r3, #20]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f002 0202 	and.w	r2, r2, #2
 80041fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4618      	mov	r0, r3
 8004202:	f006 fb3d 	bl	800a880 <USB_ReadInterrupts>
 8004206:	4603      	mov	r3, r0
 8004208:	f003 0310 	and.w	r3, r3, #16
 800420c:	2b10      	cmp	r3, #16
 800420e:	d161      	bne.n	80042d4 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	699a      	ldr	r2, [r3, #24]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f022 0210 	bic.w	r2, r2, #16
 800421e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8004220:	6a3b      	ldr	r3, [r7, #32]
 8004222:	6a1b      	ldr	r3, [r3, #32]
 8004224:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	f003 020f 	and.w	r2, r3, #15
 800422c:	4613      	mov	r3, r2
 800422e:	00db      	lsls	r3, r3, #3
 8004230:	1a9b      	subs	r3, r3, r2
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	4413      	add	r3, r2
 800423c:	3304      	adds	r3, #4
 800423e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	0c5b      	lsrs	r3, r3, #17
 8004244:	f003 030f 	and.w	r3, r3, #15
 8004248:	2b02      	cmp	r3, #2
 800424a:	d124      	bne.n	8004296 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800424c:	69ba      	ldr	r2, [r7, #24]
 800424e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004252:	4013      	ands	r3, r2
 8004254:	2b00      	cmp	r3, #0
 8004256:	d035      	beq.n	80042c4 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	091b      	lsrs	r3, r3, #4
 8004260:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004262:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004266:	b29b      	uxth	r3, r3
 8004268:	461a      	mov	r2, r3
 800426a:	6a38      	ldr	r0, [r7, #32]
 800426c:	f006 f9a3 	bl	800a5b6 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	68da      	ldr	r2, [r3, #12]
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	091b      	lsrs	r3, r3, #4
 8004278:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800427c:	441a      	add	r2, r3
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	699a      	ldr	r2, [r3, #24]
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	091b      	lsrs	r3, r3, #4
 800428a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800428e:	441a      	add	r2, r3
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	619a      	str	r2, [r3, #24]
 8004294:	e016      	b.n	80042c4 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	0c5b      	lsrs	r3, r3, #17
 800429a:	f003 030f 	and.w	r3, r3, #15
 800429e:	2b06      	cmp	r3, #6
 80042a0:	d110      	bne.n	80042c4 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80042a8:	2208      	movs	r2, #8
 80042aa:	4619      	mov	r1, r3
 80042ac:	6a38      	ldr	r0, [r7, #32]
 80042ae:	f006 f982 	bl	800a5b6 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	699a      	ldr	r2, [r3, #24]
 80042b6:	69bb      	ldr	r3, [r7, #24]
 80042b8:	091b      	lsrs	r3, r3, #4
 80042ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80042be:	441a      	add	r2, r3
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	699a      	ldr	r2, [r3, #24]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f042 0210 	orr.w	r2, r2, #16
 80042d2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4618      	mov	r0, r3
 80042da:	f006 fad1 	bl	800a880 <USB_ReadInterrupts>
 80042de:	4603      	mov	r3, r0
 80042e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042e4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80042e8:	d16e      	bne.n	80043c8 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80042ea:	2300      	movs	r3, #0
 80042ec:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4618      	mov	r0, r3
 80042f4:	f006 fad7 	bl	800a8a6 <USB_ReadDevAllOutEpInterrupt>
 80042f8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80042fa:	e062      	b.n	80043c2 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80042fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042fe:	f003 0301 	and.w	r3, r3, #1
 8004302:	2b00      	cmp	r3, #0
 8004304:	d057      	beq.n	80043b6 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800430c:	b2d2      	uxtb	r2, r2
 800430e:	4611      	mov	r1, r2
 8004310:	4618      	mov	r0, r3
 8004312:	f006 fafc 	bl	800a90e <USB_ReadDevOutEPInterrupt>
 8004316:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	f003 0301 	and.w	r3, r3, #1
 800431e:	2b00      	cmp	r3, #0
 8004320:	d00c      	beq.n	800433c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004324:	015a      	lsls	r2, r3, #5
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	4413      	add	r3, r2
 800432a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800432e:	461a      	mov	r2, r3
 8004330:	2301      	movs	r3, #1
 8004332:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004334:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f000 fdde 	bl	8004ef8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	f003 0308 	and.w	r3, r3, #8
 8004342:	2b00      	cmp	r3, #0
 8004344:	d00c      	beq.n	8004360 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004348:	015a      	lsls	r2, r3, #5
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	4413      	add	r3, r2
 800434e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004352:	461a      	mov	r2, r3
 8004354:	2308      	movs	r3, #8
 8004356:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004358:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f000 fed8 	bl	8005110 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	f003 0310 	and.w	r3, r3, #16
 8004366:	2b00      	cmp	r3, #0
 8004368:	d008      	beq.n	800437c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800436a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436c:	015a      	lsls	r2, r3, #5
 800436e:	69fb      	ldr	r3, [r7, #28]
 8004370:	4413      	add	r3, r2
 8004372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004376:	461a      	mov	r2, r3
 8004378:	2310      	movs	r3, #16
 800437a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	f003 0320 	and.w	r3, r3, #32
 8004382:	2b00      	cmp	r3, #0
 8004384:	d008      	beq.n	8004398 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004388:	015a      	lsls	r2, r3, #5
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	4413      	add	r3, r2
 800438e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004392:	461a      	mov	r2, r3
 8004394:	2320      	movs	r3, #32
 8004396:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d009      	beq.n	80043b6 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80043a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a4:	015a      	lsls	r2, r3, #5
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	4413      	add	r3, r2
 80043aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ae:	461a      	mov	r2, r3
 80043b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80043b4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80043b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b8:	3301      	adds	r3, #1
 80043ba:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80043bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043be:	085b      	lsrs	r3, r3, #1
 80043c0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80043c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d199      	bne.n	80042fc <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4618      	mov	r0, r3
 80043ce:	f006 fa57 	bl	800a880 <USB_ReadInterrupts>
 80043d2:	4603      	mov	r3, r0
 80043d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043d8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80043dc:	f040 80c0 	bne.w	8004560 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4618      	mov	r0, r3
 80043e6:	f006 fa78 	bl	800a8da <USB_ReadDevAllInEpInterrupt>
 80043ea:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80043ec:	2300      	movs	r3, #0
 80043ee:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80043f0:	e0b2      	b.n	8004558 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80043f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f4:	f003 0301 	and.w	r3, r3, #1
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	f000 80a7 	beq.w	800454c <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004404:	b2d2      	uxtb	r2, r2
 8004406:	4611      	mov	r1, r2
 8004408:	4618      	mov	r0, r3
 800440a:	f006 fa9e 	bl	800a94a <USB_ReadDevInEPInterrupt>
 800440e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	2b00      	cmp	r3, #0
 8004418:	d057      	beq.n	80044ca <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800441a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441c:	f003 030f 	and.w	r3, r3, #15
 8004420:	2201      	movs	r2, #1
 8004422:	fa02 f303 	lsl.w	r3, r2, r3
 8004426:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800442e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	43db      	mvns	r3, r3
 8004434:	69f9      	ldr	r1, [r7, #28]
 8004436:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800443a:	4013      	ands	r3, r2
 800443c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800443e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004440:	015a      	lsls	r2, r3, #5
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	4413      	add	r3, r2
 8004446:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800444a:	461a      	mov	r2, r3
 800444c:	2301      	movs	r3, #1
 800444e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	691b      	ldr	r3, [r3, #16]
 8004454:	2b01      	cmp	r3, #1
 8004456:	d132      	bne.n	80044be <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004458:	6879      	ldr	r1, [r7, #4]
 800445a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800445c:	4613      	mov	r3, r2
 800445e:	00db      	lsls	r3, r3, #3
 8004460:	1a9b      	subs	r3, r3, r2
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	440b      	add	r3, r1
 8004466:	3348      	adds	r3, #72	; 0x48
 8004468:	6819      	ldr	r1, [r3, #0]
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800446e:	4613      	mov	r3, r2
 8004470:	00db      	lsls	r3, r3, #3
 8004472:	1a9b      	subs	r3, r3, r2
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	4403      	add	r3, r0
 8004478:	3344      	adds	r3, #68	; 0x44
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4419      	add	r1, r3
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004482:	4613      	mov	r3, r2
 8004484:	00db      	lsls	r3, r3, #3
 8004486:	1a9b      	subs	r3, r3, r2
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	4403      	add	r3, r0
 800448c:	3348      	adds	r3, #72	; 0x48
 800448e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004492:	2b00      	cmp	r3, #0
 8004494:	d113      	bne.n	80044be <HAL_PCD_IRQHandler+0x31c>
 8004496:	6879      	ldr	r1, [r7, #4]
 8004498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800449a:	4613      	mov	r3, r2
 800449c:	00db      	lsls	r3, r3, #3
 800449e:	1a9b      	subs	r3, r3, r2
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	440b      	add	r3, r1
 80044a4:	3350      	adds	r3, #80	; 0x50
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d108      	bne.n	80044be <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6818      	ldr	r0, [r3, #0]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80044b6:	461a      	mov	r2, r3
 80044b8:	2101      	movs	r1, #1
 80044ba:	f006 faa7 	bl	800aa0c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80044be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	4619      	mov	r1, r3
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f00b ff18 	bl	80102fa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	f003 0308 	and.w	r3, r3, #8
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d008      	beq.n	80044e6 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80044d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d6:	015a      	lsls	r2, r3, #5
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	4413      	add	r3, r2
 80044dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044e0:	461a      	mov	r2, r3
 80044e2:	2308      	movs	r3, #8
 80044e4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	f003 0310 	and.w	r3, r3, #16
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d008      	beq.n	8004502 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80044f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f2:	015a      	lsls	r2, r3, #5
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	4413      	add	r3, r2
 80044f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044fc:	461a      	mov	r2, r3
 80044fe:	2310      	movs	r3, #16
 8004500:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004508:	2b00      	cmp	r3, #0
 800450a:	d008      	beq.n	800451e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800450c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450e:	015a      	lsls	r2, r3, #5
 8004510:	69fb      	ldr	r3, [r7, #28]
 8004512:	4413      	add	r3, r2
 8004514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004518:	461a      	mov	r2, r3
 800451a:	2340      	movs	r3, #64	; 0x40
 800451c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	f003 0302 	and.w	r3, r3, #2
 8004524:	2b00      	cmp	r3, #0
 8004526:	d008      	beq.n	800453a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452a:	015a      	lsls	r2, r3, #5
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	4413      	add	r3, r2
 8004530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004534:	461a      	mov	r2, r3
 8004536:	2302      	movs	r3, #2
 8004538:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004540:	2b00      	cmp	r3, #0
 8004542:	d003      	beq.n	800454c <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004544:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 fc48 	bl	8004ddc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800454c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454e:	3301      	adds	r3, #1
 8004550:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004554:	085b      	lsrs	r3, r3, #1
 8004556:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800455a:	2b00      	cmp	r3, #0
 800455c:	f47f af49 	bne.w	80043f2 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4618      	mov	r0, r3
 8004566:	f006 f98b 	bl	800a880 <USB_ReadInterrupts>
 800456a:	4603      	mov	r3, r0
 800456c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004570:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004574:	d122      	bne.n	80045bc <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	69fa      	ldr	r2, [r7, #28]
 8004580:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004584:	f023 0301 	bic.w	r3, r3, #1
 8004588:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8004590:	2b01      	cmp	r3, #1
 8004592:	d108      	bne.n	80045a6 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800459c:	2100      	movs	r1, #0
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f00c f8fa 	bl	8010798 <HAL_PCDEx_LPM_Callback>
 80045a4:	e002      	b.n	80045ac <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f00b ff1e 	bl	80103e8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	695a      	ldr	r2, [r3, #20]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80045ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4618      	mov	r0, r3
 80045c2:	f006 f95d 	bl	800a880 <USB_ReadInterrupts>
 80045c6:	4603      	mov	r3, r0
 80045c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045d0:	d112      	bne.n	80045f8 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	f003 0301 	and.w	r3, r3, #1
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d102      	bne.n	80045e8 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f00b feda 	bl	801039c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	695a      	ldr	r2, [r3, #20]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80045f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4618      	mov	r0, r3
 80045fe:	f006 f93f 	bl	800a880 <USB_ReadInterrupts>
 8004602:	4603      	mov	r3, r0
 8004604:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004608:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800460c:	d121      	bne.n	8004652 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	695a      	ldr	r2, [r3, #20]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800461c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8004624:	2b00      	cmp	r3, #0
 8004626:	d111      	bne.n	800464c <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004636:	089b      	lsrs	r3, r3, #2
 8004638:	f003 020f 	and.w	r2, r3, #15
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004642:	2101      	movs	r1, #1
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f00c f8a7 	bl	8010798 <HAL_PCDEx_LPM_Callback>
 800464a:	e002      	b.n	8004652 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f00b fea5 	bl	801039c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4618      	mov	r0, r3
 8004658:	f006 f912 	bl	800a880 <USB_ReadInterrupts>
 800465c:	4603      	mov	r3, r0
 800465e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004662:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004666:	f040 80c7 	bne.w	80047f8 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	69fa      	ldr	r2, [r7, #28]
 8004674:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004678:	f023 0301 	bic.w	r3, r3, #1
 800467c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	2110      	movs	r1, #16
 8004684:	4618      	mov	r0, r3
 8004686:	f005 f9d3 	bl	8009a30 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800468a:	2300      	movs	r3, #0
 800468c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800468e:	e056      	b.n	800473e <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004692:	015a      	lsls	r2, r3, #5
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	4413      	add	r3, r2
 8004698:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800469c:	461a      	mov	r2, r3
 800469e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80046a2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80046a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046a6:	015a      	lsls	r2, r3, #5
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	4413      	add	r3, r2
 80046ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046b4:	0151      	lsls	r1, r2, #5
 80046b6:	69fa      	ldr	r2, [r7, #28]
 80046b8:	440a      	add	r2, r1
 80046ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80046c2:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80046c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046c6:	015a      	lsls	r2, r3, #5
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	4413      	add	r3, r2
 80046cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046d4:	0151      	lsls	r1, r2, #5
 80046d6:	69fa      	ldr	r2, [r7, #28]
 80046d8:	440a      	add	r2, r1
 80046da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80046e2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80046e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046e6:	015a      	lsls	r2, r3, #5
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	4413      	add	r3, r2
 80046ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046f0:	461a      	mov	r2, r3
 80046f2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80046f6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80046f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046fa:	015a      	lsls	r2, r3, #5
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	4413      	add	r3, r2
 8004700:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004708:	0151      	lsls	r1, r2, #5
 800470a:	69fa      	ldr	r2, [r7, #28]
 800470c:	440a      	add	r2, r1
 800470e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004712:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004716:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800471a:	015a      	lsls	r2, r3, #5
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	4413      	add	r3, r2
 8004720:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004728:	0151      	lsls	r1, r2, #5
 800472a:	69fa      	ldr	r2, [r7, #28]
 800472c:	440a      	add	r2, r1
 800472e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004732:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004736:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800473a:	3301      	adds	r3, #1
 800473c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004744:	429a      	cmp	r2, r3
 8004746:	d3a3      	bcc.n	8004690 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800474e:	69db      	ldr	r3, [r3, #28]
 8004750:	69fa      	ldr	r2, [r7, #28]
 8004752:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004756:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800475a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004760:	2b00      	cmp	r3, #0
 8004762:	d016      	beq.n	8004792 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800476a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800476e:	69fa      	ldr	r2, [r7, #28]
 8004770:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004774:	f043 030b 	orr.w	r3, r3, #11
 8004778:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004784:	69fa      	ldr	r2, [r7, #28]
 8004786:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800478a:	f043 030b 	orr.w	r3, r3, #11
 800478e:	6453      	str	r3, [r2, #68]	; 0x44
 8004790:	e015      	b.n	80047be <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004798:	695a      	ldr	r2, [r3, #20]
 800479a:	69fb      	ldr	r3, [r7, #28]
 800479c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047a0:	4619      	mov	r1, r3
 80047a2:	f242 032b 	movw	r3, #8235	; 0x202b
 80047a6:	4313      	orrs	r3, r2
 80047a8:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	69fa      	ldr	r2, [r7, #28]
 80047b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047b8:	f043 030b 	orr.w	r3, r3, #11
 80047bc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	69fa      	ldr	r2, [r7, #28]
 80047c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047cc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80047d0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6818      	ldr	r0, [r3, #0]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	691b      	ldr	r3, [r3, #16]
 80047da:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80047e2:	461a      	mov	r2, r3
 80047e4:	f006 f912 	bl	800aa0c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	695a      	ldr	r2, [r3, #20]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80047f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4618      	mov	r0, r3
 80047fe:	f006 f83f 	bl	800a880 <USB_ReadInterrupts>
 8004802:	4603      	mov	r3, r0
 8004804:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004808:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800480c:	d124      	bne.n	8004858 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4618      	mov	r0, r3
 8004814:	f006 f8d6 	bl	800a9c4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4618      	mov	r0, r3
 800481e:	f005 f968 	bl	8009af2 <USB_GetDevSpeed>
 8004822:	4603      	mov	r3, r0
 8004824:	461a      	mov	r2, r3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681c      	ldr	r4, [r3, #0]
 800482e:	f001 fe3d 	bl	80064ac <HAL_RCC_GetHCLKFreq>
 8004832:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004838:	b2db      	uxtb	r3, r3
 800483a:	461a      	mov	r2, r3
 800483c:	4620      	mov	r0, r4
 800483e:	f004 fe9b 	bl	8009578 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f00b fd81 	bl	801034a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	695a      	ldr	r2, [r3, #20]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004856:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4618      	mov	r0, r3
 800485e:	f006 f80f 	bl	800a880 <USB_ReadInterrupts>
 8004862:	4603      	mov	r3, r0
 8004864:	f003 0308 	and.w	r3, r3, #8
 8004868:	2b08      	cmp	r3, #8
 800486a:	d10a      	bne.n	8004882 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f00b fd5e 	bl	801032e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	695a      	ldr	r2, [r3, #20]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f002 0208 	and.w	r2, r2, #8
 8004880:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4618      	mov	r0, r3
 8004888:	f005 fffa 	bl	800a880 <USB_ReadInterrupts>
 800488c:	4603      	mov	r3, r0
 800488e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004892:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004896:	d10f      	bne.n	80048b8 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004898:	2300      	movs	r3, #0
 800489a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800489c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	4619      	mov	r1, r3
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f00b fdc0 	bl	8010428 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	695a      	ldr	r2, [r3, #20]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80048b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4618      	mov	r0, r3
 80048be:	f005 ffdf 	bl	800a880 <USB_ReadInterrupts>
 80048c2:	4603      	mov	r3, r0
 80048c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80048cc:	d10f      	bne.n	80048ee <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80048ce:	2300      	movs	r3, #0
 80048d0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80048d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	4619      	mov	r1, r3
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f00b fd93 	bl	8010404 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	695a      	ldr	r2, [r3, #20]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80048ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4618      	mov	r0, r3
 80048f4:	f005 ffc4 	bl	800a880 <USB_ReadInterrupts>
 80048f8:	4603      	mov	r3, r0
 80048fa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80048fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004902:	d10a      	bne.n	800491a <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f00b fda1 	bl	801044c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	695a      	ldr	r2, [r3, #20]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004918:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4618      	mov	r0, r3
 8004920:	f005 ffae 	bl	800a880 <USB_ReadInterrupts>
 8004924:	4603      	mov	r3, r0
 8004926:	f003 0304 	and.w	r3, r3, #4
 800492a:	2b04      	cmp	r3, #4
 800492c:	d115      	bne.n	800495a <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004936:	69bb      	ldr	r3, [r7, #24]
 8004938:	f003 0304 	and.w	r3, r3, #4
 800493c:	2b00      	cmp	r3, #0
 800493e:	d002      	beq.n	8004946 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f00b fd91 	bl	8010468 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	6859      	ldr	r1, [r3, #4]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	69ba      	ldr	r2, [r7, #24]
 8004952:	430a      	orrs	r2, r1
 8004954:	605a      	str	r2, [r3, #4]
 8004956:	e000      	b.n	800495a <HAL_PCD_IRQHandler+0x7b8>
      return;
 8004958:	bf00      	nop
    }
  }
}
 800495a:	3734      	adds	r7, #52	; 0x34
 800495c:	46bd      	mov	sp, r7
 800495e:	bd90      	pop	{r4, r7, pc}

08004960 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b082      	sub	sp, #8
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	460b      	mov	r3, r1
 800496a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004972:	2b01      	cmp	r3, #1
 8004974:	d101      	bne.n	800497a <HAL_PCD_SetAddress+0x1a>
 8004976:	2302      	movs	r3, #2
 8004978:	e013      	b.n	80049a2 <HAL_PCD_SetAddress+0x42>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2201      	movs	r2, #1
 800497e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	78fa      	ldrb	r2, [r7, #3]
 8004986:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	78fa      	ldrb	r2, [r7, #3]
 8004990:	4611      	mov	r1, r2
 8004992:	4618      	mov	r0, r3
 8004994:	f005 ff0c 	bl	800a7b0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2200      	movs	r2, #0
 800499c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80049a0:	2300      	movs	r3, #0
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3708      	adds	r7, #8
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}

080049aa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80049aa:	b580      	push	{r7, lr}
 80049ac:	b084      	sub	sp, #16
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	6078      	str	r0, [r7, #4]
 80049b2:	4608      	mov	r0, r1
 80049b4:	4611      	mov	r1, r2
 80049b6:	461a      	mov	r2, r3
 80049b8:	4603      	mov	r3, r0
 80049ba:	70fb      	strb	r3, [r7, #3]
 80049bc:	460b      	mov	r3, r1
 80049be:	803b      	strh	r3, [r7, #0]
 80049c0:	4613      	mov	r3, r2
 80049c2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80049c4:	2300      	movs	r3, #0
 80049c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80049c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	da0f      	bge.n	80049f0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049d0:	78fb      	ldrb	r3, [r7, #3]
 80049d2:	f003 020f 	and.w	r2, r3, #15
 80049d6:	4613      	mov	r3, r2
 80049d8:	00db      	lsls	r3, r3, #3
 80049da:	1a9b      	subs	r3, r3, r2
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	3338      	adds	r3, #56	; 0x38
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	4413      	add	r3, r2
 80049e4:	3304      	adds	r3, #4
 80049e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2201      	movs	r2, #1
 80049ec:	705a      	strb	r2, [r3, #1]
 80049ee:	e00f      	b.n	8004a10 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80049f0:	78fb      	ldrb	r3, [r7, #3]
 80049f2:	f003 020f 	and.w	r2, r3, #15
 80049f6:	4613      	mov	r3, r2
 80049f8:	00db      	lsls	r3, r3, #3
 80049fa:	1a9b      	subs	r3, r3, r2
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	4413      	add	r3, r2
 8004a06:	3304      	adds	r3, #4
 8004a08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004a10:	78fb      	ldrb	r3, [r7, #3]
 8004a12:	f003 030f 	and.w	r3, r3, #15
 8004a16:	b2da      	uxtb	r2, r3
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004a1c:	883a      	ldrh	r2, [r7, #0]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	78ba      	ldrb	r2, [r7, #2]
 8004a26:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	785b      	ldrb	r3, [r3, #1]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d004      	beq.n	8004a3a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	b29a      	uxth	r2, r3
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004a3a:	78bb      	ldrb	r3, [r7, #2]
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	d102      	bne.n	8004a46 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2200      	movs	r2, #0
 8004a44:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d101      	bne.n	8004a54 <HAL_PCD_EP_Open+0xaa>
 8004a50:	2302      	movs	r3, #2
 8004a52:	e00e      	b.n	8004a72 <HAL_PCD_EP_Open+0xc8>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68f9      	ldr	r1, [r7, #12]
 8004a62:	4618      	mov	r0, r3
 8004a64:	f005 f86a 	bl	8009b3c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8004a70:	7afb      	ldrb	r3, [r7, #11]
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3710      	adds	r7, #16
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}

08004a7a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a7a:	b580      	push	{r7, lr}
 8004a7c:	b084      	sub	sp, #16
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
 8004a82:	460b      	mov	r3, r1
 8004a84:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004a86:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	da0f      	bge.n	8004aae <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a8e:	78fb      	ldrb	r3, [r7, #3]
 8004a90:	f003 020f 	and.w	r2, r3, #15
 8004a94:	4613      	mov	r3, r2
 8004a96:	00db      	lsls	r3, r3, #3
 8004a98:	1a9b      	subs	r3, r3, r2
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	3338      	adds	r3, #56	; 0x38
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	4413      	add	r3, r2
 8004aa2:	3304      	adds	r3, #4
 8004aa4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	705a      	strb	r2, [r3, #1]
 8004aac:	e00f      	b.n	8004ace <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004aae:	78fb      	ldrb	r3, [r7, #3]
 8004ab0:	f003 020f 	and.w	r2, r3, #15
 8004ab4:	4613      	mov	r3, r2
 8004ab6:	00db      	lsls	r3, r3, #3
 8004ab8:	1a9b      	subs	r3, r3, r2
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	4413      	add	r3, r2
 8004ac4:	3304      	adds	r3, #4
 8004ac6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2200      	movs	r2, #0
 8004acc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004ace:	78fb      	ldrb	r3, [r7, #3]
 8004ad0:	f003 030f 	and.w	r3, r3, #15
 8004ad4:	b2da      	uxtb	r2, r3
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d101      	bne.n	8004ae8 <HAL_PCD_EP_Close+0x6e>
 8004ae4:	2302      	movs	r3, #2
 8004ae6:	e00e      	b.n	8004b06 <HAL_PCD_EP_Close+0x8c>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68f9      	ldr	r1, [r7, #12]
 8004af6:	4618      	mov	r0, r3
 8004af8:	f005 f8a8 	bl	8009c4c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3710      	adds	r7, #16
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}

08004b0e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004b0e:	b580      	push	{r7, lr}
 8004b10:	b086      	sub	sp, #24
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	60f8      	str	r0, [r7, #12]
 8004b16:	607a      	str	r2, [r7, #4]
 8004b18:	603b      	str	r3, [r7, #0]
 8004b1a:	460b      	mov	r3, r1
 8004b1c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b1e:	7afb      	ldrb	r3, [r7, #11]
 8004b20:	f003 020f 	and.w	r2, r3, #15
 8004b24:	4613      	mov	r3, r2
 8004b26:	00db      	lsls	r3, r3, #3
 8004b28:	1a9b      	subs	r3, r3, r2
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004b30:	68fa      	ldr	r2, [r7, #12]
 8004b32:	4413      	add	r3, r2
 8004b34:	3304      	adds	r3, #4
 8004b36:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	683a      	ldr	r2, [r7, #0]
 8004b42:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	2200      	movs	r2, #0
 8004b48:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b50:	7afb      	ldrb	r3, [r7, #11]
 8004b52:	f003 030f 	and.w	r3, r3, #15
 8004b56:	b2da      	uxtb	r2, r3
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	691b      	ldr	r3, [r3, #16]
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d102      	bne.n	8004b6a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004b6a:	7afb      	ldrb	r3, [r7, #11]
 8004b6c:	f003 030f 	and.w	r3, r3, #15
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d109      	bne.n	8004b88 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6818      	ldr	r0, [r3, #0]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	691b      	ldr	r3, [r3, #16]
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	461a      	mov	r2, r3
 8004b80:	6979      	ldr	r1, [r7, #20]
 8004b82:	f005 fb8b 	bl	800a29c <USB_EP0StartXfer>
 8004b86:	e008      	b.n	8004b9a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6818      	ldr	r0, [r3, #0]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	461a      	mov	r2, r3
 8004b94:	6979      	ldr	r1, [r7, #20]
 8004b96:	f005 f935 	bl	8009e04 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004b9a:	2300      	movs	r3, #0
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3718      	adds	r7, #24
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b083      	sub	sp, #12
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	460b      	mov	r3, r1
 8004bae:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004bb0:	78fb      	ldrb	r3, [r7, #3]
 8004bb2:	f003 020f 	and.w	r2, r3, #15
 8004bb6:	6879      	ldr	r1, [r7, #4]
 8004bb8:	4613      	mov	r3, r2
 8004bba:	00db      	lsls	r3, r3, #3
 8004bbc:	1a9b      	subs	r3, r3, r2
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	440b      	add	r3, r1
 8004bc2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004bc6:	681b      	ldr	r3, [r3, #0]
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	370c      	adds	r7, #12
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr

08004bd4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b086      	sub	sp, #24
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	607a      	str	r2, [r7, #4]
 8004bde:	603b      	str	r3, [r7, #0]
 8004be0:	460b      	mov	r3, r1
 8004be2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004be4:	7afb      	ldrb	r3, [r7, #11]
 8004be6:	f003 020f 	and.w	r2, r3, #15
 8004bea:	4613      	mov	r3, r2
 8004bec:	00db      	lsls	r3, r3, #3
 8004bee:	1a9b      	subs	r3, r3, r2
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	3338      	adds	r3, #56	; 0x38
 8004bf4:	68fa      	ldr	r2, [r7, #12]
 8004bf6:	4413      	add	r3, r2
 8004bf8:	3304      	adds	r3, #4
 8004bfa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	683a      	ldr	r2, [r7, #0]
 8004c06:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	2201      	movs	r2, #1
 8004c12:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c14:	7afb      	ldrb	r3, [r7, #11]
 8004c16:	f003 030f 	and.w	r3, r3, #15
 8004c1a:	b2da      	uxtb	r2, r3
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	691b      	ldr	r3, [r3, #16]
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d102      	bne.n	8004c2e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004c2e:	7afb      	ldrb	r3, [r7, #11]
 8004c30:	f003 030f 	and.w	r3, r3, #15
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d109      	bne.n	8004c4c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	6818      	ldr	r0, [r3, #0]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	691b      	ldr	r3, [r3, #16]
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	461a      	mov	r2, r3
 8004c44:	6979      	ldr	r1, [r7, #20]
 8004c46:	f005 fb29 	bl	800a29c <USB_EP0StartXfer>
 8004c4a:	e008      	b.n	8004c5e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6818      	ldr	r0, [r3, #0]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	461a      	mov	r2, r3
 8004c58:	6979      	ldr	r1, [r7, #20]
 8004c5a:	f005 f8d3 	bl	8009e04 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004c5e:	2300      	movs	r3, #0
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3718      	adds	r7, #24
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	460b      	mov	r3, r1
 8004c72:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004c74:	78fb      	ldrb	r3, [r7, #3]
 8004c76:	f003 020f 	and.w	r2, r3, #15
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d901      	bls.n	8004c86 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e050      	b.n	8004d28 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004c86:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	da0f      	bge.n	8004cae <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c8e:	78fb      	ldrb	r3, [r7, #3]
 8004c90:	f003 020f 	and.w	r2, r3, #15
 8004c94:	4613      	mov	r3, r2
 8004c96:	00db      	lsls	r3, r3, #3
 8004c98:	1a9b      	subs	r3, r3, r2
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	3338      	adds	r3, #56	; 0x38
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	4413      	add	r3, r2
 8004ca2:	3304      	adds	r3, #4
 8004ca4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2201      	movs	r2, #1
 8004caa:	705a      	strb	r2, [r3, #1]
 8004cac:	e00d      	b.n	8004cca <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004cae:	78fa      	ldrb	r2, [r7, #3]
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	00db      	lsls	r3, r3, #3
 8004cb4:	1a9b      	subs	r3, r3, r2
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	4413      	add	r3, r2
 8004cc0:	3304      	adds	r3, #4
 8004cc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2201      	movs	r2, #1
 8004cce:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004cd0:	78fb      	ldrb	r3, [r7, #3]
 8004cd2:	f003 030f 	and.w	r3, r3, #15
 8004cd6:	b2da      	uxtb	r2, r3
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d101      	bne.n	8004cea <HAL_PCD_EP_SetStall+0x82>
 8004ce6:	2302      	movs	r3, #2
 8004ce8:	e01e      	b.n	8004d28 <HAL_PCD_EP_SetStall+0xc0>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2201      	movs	r2, #1
 8004cee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68f9      	ldr	r1, [r7, #12]
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f005 fc85 	bl	800a608 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004cfe:	78fb      	ldrb	r3, [r7, #3]
 8004d00:	f003 030f 	and.w	r3, r3, #15
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d10a      	bne.n	8004d1e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6818      	ldr	r0, [r3, #0]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	691b      	ldr	r3, [r3, #16]
 8004d10:	b2d9      	uxtb	r1, r3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004d18:	461a      	mov	r2, r3
 8004d1a:	f005 fe77 	bl	800aa0c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004d26:	2300      	movs	r3, #0
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3710      	adds	r7, #16
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}

08004d30 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b084      	sub	sp, #16
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	460b      	mov	r3, r1
 8004d3a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004d3c:	78fb      	ldrb	r3, [r7, #3]
 8004d3e:	f003 020f 	and.w	r2, r3, #15
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d901      	bls.n	8004d4e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e042      	b.n	8004dd4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004d4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	da0f      	bge.n	8004d76 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d56:	78fb      	ldrb	r3, [r7, #3]
 8004d58:	f003 020f 	and.w	r2, r3, #15
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	00db      	lsls	r3, r3, #3
 8004d60:	1a9b      	subs	r3, r3, r2
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	3338      	adds	r3, #56	; 0x38
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	4413      	add	r3, r2
 8004d6a:	3304      	adds	r3, #4
 8004d6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2201      	movs	r2, #1
 8004d72:	705a      	strb	r2, [r3, #1]
 8004d74:	e00f      	b.n	8004d96 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d76:	78fb      	ldrb	r3, [r7, #3]
 8004d78:	f003 020f 	and.w	r2, r3, #15
 8004d7c:	4613      	mov	r3, r2
 8004d7e:	00db      	lsls	r3, r3, #3
 8004d80:	1a9b      	subs	r3, r3, r2
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	4413      	add	r3, r2
 8004d8c:	3304      	adds	r3, #4
 8004d8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2200      	movs	r2, #0
 8004d94:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d9c:	78fb      	ldrb	r3, [r7, #3]
 8004d9e:	f003 030f 	and.w	r3, r3, #15
 8004da2:	b2da      	uxtb	r2, r3
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d101      	bne.n	8004db6 <HAL_PCD_EP_ClrStall+0x86>
 8004db2:	2302      	movs	r3, #2
 8004db4:	e00e      	b.n	8004dd4 <HAL_PCD_EP_ClrStall+0xa4>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2201      	movs	r2, #1
 8004dba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	68f9      	ldr	r1, [r7, #12]
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f005 fc8d 	bl	800a6e4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004dd2:	2300      	movs	r3, #0
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3710      	adds	r7, #16
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b08a      	sub	sp, #40	; 0x28
 8004de0:	af02      	add	r7, sp, #8
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004df0:	683a      	ldr	r2, [r7, #0]
 8004df2:	4613      	mov	r3, r2
 8004df4:	00db      	lsls	r3, r3, #3
 8004df6:	1a9b      	subs	r3, r3, r2
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	3338      	adds	r3, #56	; 0x38
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	4413      	add	r3, r2
 8004e00:	3304      	adds	r3, #4
 8004e02:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	699a      	ldr	r2, [r3, #24]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	695b      	ldr	r3, [r3, #20]
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d901      	bls.n	8004e14 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	e06c      	b.n	8004eee <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	695a      	ldr	r2, [r3, #20]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	699b      	ldr	r3, [r3, #24]
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	69fa      	ldr	r2, [r7, #28]
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d902      	bls.n	8004e30 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	3303      	adds	r3, #3
 8004e34:	089b      	lsrs	r3, r3, #2
 8004e36:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004e38:	e02b      	b.n	8004e92 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	695a      	ldr	r2, [r3, #20]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	699b      	ldr	r3, [r3, #24]
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	69fa      	ldr	r2, [r7, #28]
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d902      	bls.n	8004e56 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	3303      	adds	r3, #3
 8004e5a:	089b      	lsrs	r3, r3, #2
 8004e5c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	68d9      	ldr	r1, [r3, #12]
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	b2da      	uxtb	r2, r3
 8004e66:	69fb      	ldr	r3, [r7, #28]
 8004e68:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	9300      	str	r3, [sp, #0]
 8004e72:	4603      	mov	r3, r0
 8004e74:	6978      	ldr	r0, [r7, #20]
 8004e76:	f005 fb69 	bl	800a54c <USB_WritePacket>

    ep->xfer_buff  += len;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	68da      	ldr	r2, [r3, #12]
 8004e7e:	69fb      	ldr	r3, [r7, #28]
 8004e80:	441a      	add	r2, r3
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	699a      	ldr	r2, [r3, #24]
 8004e8a:	69fb      	ldr	r3, [r7, #28]
 8004e8c:	441a      	add	r2, r3
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	015a      	lsls	r2, r3, #5
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	4413      	add	r3, r2
 8004e9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e9e:	699b      	ldr	r3, [r3, #24]
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	69ba      	ldr	r2, [r7, #24]
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d809      	bhi.n	8004ebc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	699a      	ldr	r2, [r3, #24]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d203      	bcs.n	8004ebc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	695b      	ldr	r3, [r3, #20]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d1be      	bne.n	8004e3a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	695a      	ldr	r2, [r3, #20]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	699b      	ldr	r3, [r3, #24]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d811      	bhi.n	8004eec <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	f003 030f 	and.w	r3, r3, #15
 8004ece:	2201      	movs	r2, #1
 8004ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004edc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	43db      	mvns	r3, r3
 8004ee2:	6939      	ldr	r1, [r7, #16]
 8004ee4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ee8:	4013      	ands	r3, r2
 8004eea:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3720      	adds	r7, #32
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
	...

08004ef8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b086      	sub	sp, #24
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	333c      	adds	r3, #60	; 0x3c
 8004f10:	3304      	adds	r3, #4
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	015a      	lsls	r2, r3, #5
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	4413      	add	r3, r2
 8004f1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	f040 80a0 	bne.w	8005070 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	f003 0308 	and.w	r3, r3, #8
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d015      	beq.n	8004f66 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	4a72      	ldr	r2, [pc, #456]	; (8005108 <PCD_EP_OutXfrComplete_int+0x210>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	f240 80dd 	bls.w	80050fe <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	f000 80d7 	beq.w	80050fe <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	015a      	lsls	r2, r3, #5
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	4413      	add	r3, r2
 8004f58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f62:	6093      	str	r3, [r2, #8]
 8004f64:	e0cb      	b.n	80050fe <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	f003 0320 	and.w	r3, r3, #32
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d009      	beq.n	8004f84 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	015a      	lsls	r2, r3, #5
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	4413      	add	r3, r2
 8004f78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	2320      	movs	r3, #32
 8004f80:	6093      	str	r3, [r2, #8]
 8004f82:	e0bc      	b.n	80050fe <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	f040 80b7 	bne.w	80050fe <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	4a5d      	ldr	r2, [pc, #372]	; (8005108 <PCD_EP_OutXfrComplete_int+0x210>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d90f      	bls.n	8004fb8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d00a      	beq.n	8004fb8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	015a      	lsls	r2, r3, #5
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	4413      	add	r3, r2
 8004faa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fae:	461a      	mov	r2, r3
 8004fb0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fb4:	6093      	str	r3, [r2, #8]
 8004fb6:	e0a2      	b.n	80050fe <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004fb8:	6879      	ldr	r1, [r7, #4]
 8004fba:	683a      	ldr	r2, [r7, #0]
 8004fbc:	4613      	mov	r3, r2
 8004fbe:	00db      	lsls	r3, r3, #3
 8004fc0:	1a9b      	subs	r3, r3, r2
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	440b      	add	r3, r1
 8004fc6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004fca:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	0159      	lsls	r1, r3, #5
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	440b      	add	r3, r1
 8004fd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8004fde:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	683a      	ldr	r2, [r7, #0]
 8004fe4:	4613      	mov	r3, r2
 8004fe6:	00db      	lsls	r3, r3, #3
 8004fe8:	1a9b      	subs	r3, r3, r2
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	4403      	add	r3, r0
 8004fee:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004ff2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004ff4:	6879      	ldr	r1, [r7, #4]
 8004ff6:	683a      	ldr	r2, [r7, #0]
 8004ff8:	4613      	mov	r3, r2
 8004ffa:	00db      	lsls	r3, r3, #3
 8004ffc:	1a9b      	subs	r3, r3, r2
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	440b      	add	r3, r1
 8005002:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005006:	6819      	ldr	r1, [r3, #0]
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	683a      	ldr	r2, [r7, #0]
 800500c:	4613      	mov	r3, r2
 800500e:	00db      	lsls	r3, r3, #3
 8005010:	1a9b      	subs	r3, r3, r2
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	4403      	add	r3, r0
 8005016:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4419      	add	r1, r3
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	683a      	ldr	r2, [r7, #0]
 8005022:	4613      	mov	r3, r2
 8005024:	00db      	lsls	r3, r3, #3
 8005026:	1a9b      	subs	r3, r3, r2
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	4403      	add	r3, r0
 800502c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005030:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d114      	bne.n	8005062 <PCD_EP_OutXfrComplete_int+0x16a>
 8005038:	6879      	ldr	r1, [r7, #4]
 800503a:	683a      	ldr	r2, [r7, #0]
 800503c:	4613      	mov	r3, r2
 800503e:	00db      	lsls	r3, r3, #3
 8005040:	1a9b      	subs	r3, r3, r2
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	440b      	add	r3, r1
 8005046:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d108      	bne.n	8005062 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6818      	ldr	r0, [r3, #0]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800505a:	461a      	mov	r2, r3
 800505c:	2101      	movs	r1, #1
 800505e:	f005 fcd5 	bl	800aa0c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	b2db      	uxtb	r3, r3
 8005066:	4619      	mov	r1, r3
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f00b f92b 	bl	80102c4 <HAL_PCD_DataOutStageCallback>
 800506e:	e046      	b.n	80050fe <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	4a26      	ldr	r2, [pc, #152]	; (800510c <PCD_EP_OutXfrComplete_int+0x214>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d124      	bne.n	80050c2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800507e:	2b00      	cmp	r3, #0
 8005080:	d00a      	beq.n	8005098 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	015a      	lsls	r2, r3, #5
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	4413      	add	r3, r2
 800508a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800508e:	461a      	mov	r2, r3
 8005090:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005094:	6093      	str	r3, [r2, #8]
 8005096:	e032      	b.n	80050fe <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	f003 0320 	and.w	r3, r3, #32
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d008      	beq.n	80050b4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	015a      	lsls	r2, r3, #5
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	4413      	add	r3, r2
 80050aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050ae:	461a      	mov	r2, r3
 80050b0:	2320      	movs	r3, #32
 80050b2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	4619      	mov	r1, r3
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f00b f902 	bl	80102c4 <HAL_PCD_DataOutStageCallback>
 80050c0:	e01d      	b.n	80050fe <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d114      	bne.n	80050f2 <PCD_EP_OutXfrComplete_int+0x1fa>
 80050c8:	6879      	ldr	r1, [r7, #4]
 80050ca:	683a      	ldr	r2, [r7, #0]
 80050cc:	4613      	mov	r3, r2
 80050ce:	00db      	lsls	r3, r3, #3
 80050d0:	1a9b      	subs	r3, r3, r2
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	440b      	add	r3, r1
 80050d6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d108      	bne.n	80050f2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6818      	ldr	r0, [r3, #0]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80050ea:	461a      	mov	r2, r3
 80050ec:	2100      	movs	r1, #0
 80050ee:	f005 fc8d 	bl	800aa0c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	4619      	mov	r1, r3
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f00b f8e3 	bl	80102c4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80050fe:	2300      	movs	r3, #0
}
 8005100:	4618      	mov	r0, r3
 8005102:	3718      	adds	r7, #24
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}
 8005108:	4f54300a 	.word	0x4f54300a
 800510c:	4f54310a 	.word	0x4f54310a

08005110 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b086      	sub	sp, #24
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	333c      	adds	r3, #60	; 0x3c
 8005128:	3304      	adds	r3, #4
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	015a      	lsls	r2, r3, #5
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	4413      	add	r3, r2
 8005136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	4a15      	ldr	r2, [pc, #84]	; (8005198 <PCD_EP_OutSetupPacket_int+0x88>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d90e      	bls.n	8005164 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800514c:	2b00      	cmp	r3, #0
 800514e:	d009      	beq.n	8005164 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	015a      	lsls	r2, r3, #5
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	4413      	add	r3, r2
 8005158:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800515c:	461a      	mov	r2, r3
 800515e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005162:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f00b f89b 	bl	80102a0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	4a0a      	ldr	r2, [pc, #40]	; (8005198 <PCD_EP_OutSetupPacket_int+0x88>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d90c      	bls.n	800518c <PCD_EP_OutSetupPacket_int+0x7c>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	2b01      	cmp	r3, #1
 8005178:	d108      	bne.n	800518c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6818      	ldr	r0, [r3, #0]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005184:	461a      	mov	r2, r3
 8005186:	2101      	movs	r1, #1
 8005188:	f005 fc40 	bl	800aa0c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800518c:	2300      	movs	r3, #0
}
 800518e:	4618      	mov	r0, r3
 8005190:	3718      	adds	r7, #24
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}
 8005196:	bf00      	nop
 8005198:	4f54300a 	.word	0x4f54300a

0800519c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800519c:	b480      	push	{r7}
 800519e:	b085      	sub	sp, #20
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	460b      	mov	r3, r1
 80051a6:	70fb      	strb	r3, [r7, #3]
 80051a8:	4613      	mov	r3, r2
 80051aa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80051b4:	78fb      	ldrb	r3, [r7, #3]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d107      	bne.n	80051ca <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80051ba:	883b      	ldrh	r3, [r7, #0]
 80051bc:	0419      	lsls	r1, r3, #16
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	68ba      	ldr	r2, [r7, #8]
 80051c4:	430a      	orrs	r2, r1
 80051c6:	629a      	str	r2, [r3, #40]	; 0x28
 80051c8:	e028      	b.n	800521c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051d0:	0c1b      	lsrs	r3, r3, #16
 80051d2:	68ba      	ldr	r2, [r7, #8]
 80051d4:	4413      	add	r3, r2
 80051d6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80051d8:	2300      	movs	r3, #0
 80051da:	73fb      	strb	r3, [r7, #15]
 80051dc:	e00d      	b.n	80051fa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	7bfb      	ldrb	r3, [r7, #15]
 80051e4:	3340      	adds	r3, #64	; 0x40
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	4413      	add	r3, r2
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	0c1b      	lsrs	r3, r3, #16
 80051ee:	68ba      	ldr	r2, [r7, #8]
 80051f0:	4413      	add	r3, r2
 80051f2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80051f4:	7bfb      	ldrb	r3, [r7, #15]
 80051f6:	3301      	adds	r3, #1
 80051f8:	73fb      	strb	r3, [r7, #15]
 80051fa:	7bfa      	ldrb	r2, [r7, #15]
 80051fc:	78fb      	ldrb	r3, [r7, #3]
 80051fe:	3b01      	subs	r3, #1
 8005200:	429a      	cmp	r2, r3
 8005202:	d3ec      	bcc.n	80051de <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005204:	883b      	ldrh	r3, [r7, #0]
 8005206:	0418      	lsls	r0, r3, #16
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6819      	ldr	r1, [r3, #0]
 800520c:	78fb      	ldrb	r3, [r7, #3]
 800520e:	3b01      	subs	r3, #1
 8005210:	68ba      	ldr	r2, [r7, #8]
 8005212:	4302      	orrs	r2, r0
 8005214:	3340      	adds	r3, #64	; 0x40
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	440b      	add	r3, r1
 800521a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800521c:	2300      	movs	r3, #0
}
 800521e:	4618      	mov	r0, r3
 8005220:	3714      	adds	r7, #20
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr

0800522a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800522a:	b480      	push	{r7}
 800522c:	b083      	sub	sp, #12
 800522e:	af00      	add	r7, sp, #0
 8005230:	6078      	str	r0, [r7, #4]
 8005232:	460b      	mov	r3, r1
 8005234:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	887a      	ldrh	r2, [r7, #2]
 800523c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800523e:	2300      	movs	r3, #0
}
 8005240:	4618      	mov	r0, r3
 8005242:	370c      	adds	r7, #12
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr

0800524c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800524c:	b480      	push	{r7}
 800524e:	b085      	sub	sp, #20
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2201      	movs	r2, #1
 800525e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	699b      	ldr	r3, [r3, #24]
 800526e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800527a:	4b05      	ldr	r3, [pc, #20]	; (8005290 <HAL_PCDEx_ActivateLPM+0x44>)
 800527c:	4313      	orrs	r3, r2
 800527e:	68fa      	ldr	r2, [r7, #12]
 8005280:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005282:	2300      	movs	r3, #0
}
 8005284:	4618      	mov	r0, r3
 8005286:	3714      	adds	r7, #20
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr
 8005290:	10000003 	.word	0x10000003

08005294 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005294:	b480      	push	{r7}
 8005296:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005298:	4b05      	ldr	r3, [pc, #20]	; (80052b0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a04      	ldr	r2, [pc, #16]	; (80052b0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800529e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052a2:	6013      	str	r3, [r2, #0]
}
 80052a4:	bf00      	nop
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr
 80052ae:	bf00      	nop
 80052b0:	40007000 	.word	0x40007000

080052b4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b082      	sub	sp, #8
 80052b8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80052ba:	2300      	movs	r3, #0
 80052bc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80052be:	4b23      	ldr	r3, [pc, #140]	; (800534c <HAL_PWREx_EnableOverDrive+0x98>)
 80052c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c2:	4a22      	ldr	r2, [pc, #136]	; (800534c <HAL_PWREx_EnableOverDrive+0x98>)
 80052c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052c8:	6413      	str	r3, [r2, #64]	; 0x40
 80052ca:	4b20      	ldr	r3, [pc, #128]	; (800534c <HAL_PWREx_EnableOverDrive+0x98>)
 80052cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052d2:	603b      	str	r3, [r7, #0]
 80052d4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80052d6:	4b1e      	ldr	r3, [pc, #120]	; (8005350 <HAL_PWREx_EnableOverDrive+0x9c>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a1d      	ldr	r2, [pc, #116]	; (8005350 <HAL_PWREx_EnableOverDrive+0x9c>)
 80052dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052e0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80052e2:	f7fc ffbb 	bl	800225c <HAL_GetTick>
 80052e6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80052e8:	e009      	b.n	80052fe <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80052ea:	f7fc ffb7 	bl	800225c <HAL_GetTick>
 80052ee:	4602      	mov	r2, r0
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	1ad3      	subs	r3, r2, r3
 80052f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052f8:	d901      	bls.n	80052fe <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e022      	b.n	8005344 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80052fe:	4b14      	ldr	r3, [pc, #80]	; (8005350 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005306:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800530a:	d1ee      	bne.n	80052ea <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800530c:	4b10      	ldr	r3, [pc, #64]	; (8005350 <HAL_PWREx_EnableOverDrive+0x9c>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a0f      	ldr	r2, [pc, #60]	; (8005350 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005312:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005316:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005318:	f7fc ffa0 	bl	800225c <HAL_GetTick>
 800531c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800531e:	e009      	b.n	8005334 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005320:	f7fc ff9c 	bl	800225c <HAL_GetTick>
 8005324:	4602      	mov	r2, r0
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	1ad3      	subs	r3, r2, r3
 800532a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800532e:	d901      	bls.n	8005334 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005330:	2303      	movs	r3, #3
 8005332:	e007      	b.n	8005344 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005334:	4b06      	ldr	r3, [pc, #24]	; (8005350 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800533c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005340:	d1ee      	bne.n	8005320 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005342:	2300      	movs	r3, #0
}
 8005344:	4618      	mov	r0, r3
 8005346:	3708      	adds	r7, #8
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}
 800534c:	40023800 	.word	0x40023800
 8005350:	40007000 	.word	0x40007000

08005354 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b086      	sub	sp, #24
 8005358:	af02      	add	r7, sp, #8
 800535a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800535c:	f7fc ff7e 	bl	800225c <HAL_GetTick>
 8005360:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d101      	bne.n	800536c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	e067      	b.n	800543c <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005372:	b2db      	uxtb	r3, r3
 8005374:	2b00      	cmp	r3, #0
 8005376:	d10b      	bne.n	8005390 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f7fc fa45 	bl	8001810 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8005386:	f241 3188 	movw	r1, #5000	; 0x1388
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 fa62 	bl	8005854 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	3b01      	subs	r3, #1
 80053a0:	021a      	lsls	r2, r3, #8
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	430a      	orrs	r2, r1
 80053a8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053ae:	9300      	str	r3, [sp, #0]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2200      	movs	r2, #0
 80053b4:	2120      	movs	r1, #32
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f000 fa5a 	bl	8005870 <QSPI_WaitFlagStateUntilTimeout>
 80053bc:	4603      	mov	r3, r0
 80053be:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80053c0:	7afb      	ldrb	r3, [r7, #11]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d135      	bne.n	8005432 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	4b1d      	ldr	r3, [pc, #116]	; (8005444 <HAL_QSPI_Init+0xf0>)
 80053ce:	4013      	ands	r3, r2
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	6852      	ldr	r2, [r2, #4]
 80053d4:	0611      	lsls	r1, r2, #24
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	68d2      	ldr	r2, [r2, #12]
 80053da:	4311      	orrs	r1, r2
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	69d2      	ldr	r2, [r2, #28]
 80053e0:	4311      	orrs	r1, r2
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	6a12      	ldr	r2, [r2, #32]
 80053e6:	4311      	orrs	r1, r2
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	6812      	ldr	r2, [r2, #0]
 80053ec:	430b      	orrs	r3, r1
 80053ee:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	685a      	ldr	r2, [r3, #4]
 80053f6:	4b14      	ldr	r3, [pc, #80]	; (8005448 <HAL_QSPI_Init+0xf4>)
 80053f8:	4013      	ands	r3, r2
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	6912      	ldr	r2, [r2, #16]
 80053fe:	0411      	lsls	r1, r2, #16
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	6952      	ldr	r2, [r2, #20]
 8005404:	4311      	orrs	r1, r2
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	6992      	ldr	r2, [r2, #24]
 800540a:	4311      	orrs	r1, r2
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	6812      	ldr	r2, [r2, #0]
 8005410:	430b      	orrs	r3, r1
 8005412:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f042 0201 	orr.w	r2, r2, #1
 8005422:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2201      	movs	r2, #1
 800542e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800543a:	7afb      	ldrb	r3, [r7, #11]
}
 800543c:	4618      	mov	r0, r3
 800543e:	3710      	adds	r7, #16
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}
 8005444:	00ffff2f 	.word	0x00ffff2f
 8005448:	ffe0f8fe 	.word	0xffe0f8fe

0800544c <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b088      	sub	sp, #32
 8005450:	af02      	add	r7, sp, #8
 8005452:	60f8      	str	r0, [r7, #12]
 8005454:	60b9      	str	r1, [r7, #8]
 8005456:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005458:	f7fc ff00 	bl	800225c <HAL_GetTick>
 800545c:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005464:	b2db      	uxtb	r3, r3
 8005466:	2b01      	cmp	r3, #1
 8005468:	d101      	bne.n	800546e <HAL_QSPI_Command+0x22>
 800546a:	2302      	movs	r3, #2
 800546c:	e048      	b.n	8005500 <HAL_QSPI_Command+0xb4>
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2201      	movs	r2, #1
 8005472:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800547c:	b2db      	uxtb	r3, r3
 800547e:	2b01      	cmp	r3, #1
 8005480:	d137      	bne.n	80054f2 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2200      	movs	r2, #0
 8005486:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2202      	movs	r2, #2
 800548c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	9300      	str	r3, [sp, #0]
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	2200      	movs	r2, #0
 8005498:	2120      	movs	r1, #32
 800549a:	68f8      	ldr	r0, [r7, #12]
 800549c:	f000 f9e8 	bl	8005870 <QSPI_WaitFlagStateUntilTimeout>
 80054a0:	4603      	mov	r3, r0
 80054a2:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 80054a4:	7dfb      	ldrb	r3, [r7, #23]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d125      	bne.n	80054f6 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80054aa:	2200      	movs	r2, #0
 80054ac:	68b9      	ldr	r1, [r7, #8]
 80054ae:	68f8      	ldr	r0, [r7, #12]
 80054b0:	f000 fa15 	bl	80058de <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d115      	bne.n	80054e8 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	9300      	str	r3, [sp, #0]
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	2201      	movs	r2, #1
 80054c4:	2102      	movs	r1, #2
 80054c6:	68f8      	ldr	r0, [r7, #12]
 80054c8:	f000 f9d2 	bl	8005870 <QSPI_WaitFlagStateUntilTimeout>
 80054cc:	4603      	mov	r3, r0
 80054ce:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 80054d0:	7dfb      	ldrb	r3, [r7, #23]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d10f      	bne.n	80054f6 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	2202      	movs	r2, #2
 80054dc:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2201      	movs	r2, #1
 80054e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80054e6:	e006      	b.n	80054f6 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80054f0:	e001      	b.n	80054f6 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 80054f2:	2302      	movs	r3, #2
 80054f4:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80054fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005500:	4618      	mov	r0, r3
 8005502:	3718      	adds	r7, #24
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <HAL_QSPI_Transmit>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b08a      	sub	sp, #40	; 0x28
 800550c:	af02      	add	r7, sp, #8
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	60b9      	str	r1, [r7, #8]
 8005512:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005514:	2300      	movs	r3, #0
 8005516:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8005518:	f7fc fea0 	bl	800225c <HAL_GetTick>
 800551c:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	3320      	adds	r3, #32
 8005524:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800552c:	b2db      	uxtb	r3, r3
 800552e:	2b01      	cmp	r3, #1
 8005530:	d101      	bne.n	8005536 <HAL_QSPI_Transmit+0x2e>
 8005532:	2302      	movs	r3, #2
 8005534:	e076      	b.n	8005624 <HAL_QSPI_Transmit+0x11c>
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2201      	movs	r2, #1
 800553a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005544:	b2db      	uxtb	r3, r3
 8005546:	2b01      	cmp	r3, #1
 8005548:	d165      	bne.n	8005616 <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2200      	movs	r2, #0
 800554e:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d056      	beq.n	8005604 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2212      	movs	r2, #18
 800555a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	691b      	ldr	r3, [r3, #16]
 8005564:	1c5a      	adds	r2, r3, #1
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	691b      	ldr	r3, [r3, #16]
 8005570:	1c5a      	adds	r2, r3, #1
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	68ba      	ldr	r2, [r7, #8]
 800557a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	695a      	ldr	r2, [r3, #20]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800558a:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 800558c:	e01b      	b.n	80055c6 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	9300      	str	r3, [sp, #0]
 8005592:	69bb      	ldr	r3, [r7, #24]
 8005594:	2201      	movs	r2, #1
 8005596:	2104      	movs	r1, #4
 8005598:	68f8      	ldr	r0, [r7, #12]
 800559a:	f000 f969 	bl	8005870 <QSPI_WaitFlagStateUntilTimeout>
 800559e:	4603      	mov	r3, r0
 80055a0:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 80055a2:	7ffb      	ldrb	r3, [r7, #31]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d113      	bne.n	80055d0 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ac:	781a      	ldrb	r2, [r3, #0]
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b6:	1c5a      	adds	r2, r3, #1
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c0:	1e5a      	subs	r2, r3, #1
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d1df      	bne.n	800558e <HAL_QSPI_Transmit+0x86>
 80055ce:	e000      	b.n	80055d2 <HAL_QSPI_Transmit+0xca>
          break;
 80055d0:	bf00      	nop
      }

      if (status == HAL_OK)
 80055d2:	7ffb      	ldrb	r3, [r7, #31]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d110      	bne.n	80055fa <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	9300      	str	r3, [sp, #0]
 80055dc:	69bb      	ldr	r3, [r7, #24]
 80055de:	2201      	movs	r2, #1
 80055e0:	2102      	movs	r1, #2
 80055e2:	68f8      	ldr	r0, [r7, #12]
 80055e4:	f000 f944 	bl	8005870 <QSPI_WaitFlagStateUntilTimeout>
 80055e8:	4603      	mov	r3, r0
 80055ea:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 80055ec:	7ffb      	ldrb	r3, [r7, #31]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d103      	bne.n	80055fa <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	2202      	movs	r2, #2
 80055f8:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2201      	movs	r2, #1
 80055fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005602:	e00a      	b.n	800561a <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005608:	f043 0208 	orr.w	r2, r3, #8
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	77fb      	strb	r3, [r7, #31]
 8005614:	e001      	b.n	800561a <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 8005616:	2302      	movs	r3, #2
 8005618:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2200      	movs	r2, #0
 800561e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8005622:	7ffb      	ldrb	r3, [r7, #31]
}
 8005624:	4618      	mov	r0, r3
 8005626:	3720      	adds	r7, #32
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}

0800562c <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b08a      	sub	sp, #40	; 0x28
 8005630:	af02      	add	r7, sp, #8
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005638:	2300      	movs	r3, #0
 800563a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800563c:	f7fc fe0e 	bl	800225c <HAL_GetTick>
 8005640:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	699b      	ldr	r3, [r3, #24]
 8005648:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	3320      	adds	r3, #32
 8005650:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005658:	b2db      	uxtb	r3, r3
 800565a:	2b01      	cmp	r3, #1
 800565c:	d101      	bne.n	8005662 <HAL_QSPI_Receive+0x36>
 800565e:	2302      	movs	r3, #2
 8005660:	e07d      	b.n	800575e <HAL_QSPI_Receive+0x132>
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2201      	movs	r2, #1
 8005666:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005670:	b2db      	uxtb	r3, r3
 8005672:	2b01      	cmp	r3, #1
 8005674:	d16c      	bne.n	8005750 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2200      	movs	r2, #0
 800567a:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d05d      	beq.n	800573e <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2222      	movs	r2, #34	; 0x22
 8005686:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	691b      	ldr	r3, [r3, #16]
 8005690:	1c5a      	adds	r2, r3, #1
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	691b      	ldr	r3, [r3, #16]
 800569c:	1c5a      	adds	r2, r3, #1
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	68ba      	ldr	r2, [r7, #8]
 80056a6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	695b      	ldr	r3, [r3, #20]
 80056ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80056ba:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	697a      	ldr	r2, [r7, #20]
 80056c2:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 80056c4:	e01c      	b.n	8005700 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	9300      	str	r3, [sp, #0]
 80056ca:	69bb      	ldr	r3, [r7, #24]
 80056cc:	2201      	movs	r2, #1
 80056ce:	2106      	movs	r1, #6
 80056d0:	68f8      	ldr	r0, [r7, #12]
 80056d2:	f000 f8cd 	bl	8005870 <QSPI_WaitFlagStateUntilTimeout>
 80056d6:	4603      	mov	r3, r0
 80056d8:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 80056da:	7ffb      	ldrb	r3, [r7, #31]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d114      	bne.n	800570a <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e4:	693a      	ldr	r2, [r7, #16]
 80056e6:	7812      	ldrb	r2, [r2, #0]
 80056e8:	b2d2      	uxtb	r2, r2
 80056ea:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056f0:	1c5a      	adds	r2, r3, #1
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056fa:	1e5a      	subs	r2, r3, #1
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005704:	2b00      	cmp	r3, #0
 8005706:	d1de      	bne.n	80056c6 <HAL_QSPI_Receive+0x9a>
 8005708:	e000      	b.n	800570c <HAL_QSPI_Receive+0xe0>
          break;
 800570a:	bf00      	nop
      }

      if (status == HAL_OK)
 800570c:	7ffb      	ldrb	r3, [r7, #31]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d110      	bne.n	8005734 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	9300      	str	r3, [sp, #0]
 8005716:	69bb      	ldr	r3, [r7, #24]
 8005718:	2201      	movs	r2, #1
 800571a:	2102      	movs	r1, #2
 800571c:	68f8      	ldr	r0, [r7, #12]
 800571e:	f000 f8a7 	bl	8005870 <QSPI_WaitFlagStateUntilTimeout>
 8005722:	4603      	mov	r3, r0
 8005724:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8005726:	7ffb      	ldrb	r3, [r7, #31]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d103      	bne.n	8005734 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	2202      	movs	r2, #2
 8005732:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800573c:	e00a      	b.n	8005754 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005742:	f043 0208 	orr.w	r2, r3, #8
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	77fb      	strb	r3, [r7, #31]
 800574e:	e001      	b.n	8005754 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 8005750:	2302      	movs	r3, #2
 8005752:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2200      	movs	r2, #0
 8005758:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800575c:	7ffb      	ldrb	r3, [r7, #31]
}
 800575e:	4618      	mov	r0, r3
 8005760:	3720      	adds	r7, #32
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}

08005766 <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8005766:	b580      	push	{r7, lr}
 8005768:	b088      	sub	sp, #32
 800576a:	af02      	add	r7, sp, #8
 800576c:	60f8      	str	r0, [r7, #12]
 800576e:	60b9      	str	r1, [r7, #8]
 8005770:	607a      	str	r2, [r7, #4]
 8005772:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005774:	f7fc fd72 	bl	800225c <HAL_GetTick>
 8005778:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005780:	b2db      	uxtb	r3, r3
 8005782:	2b01      	cmp	r3, #1
 8005784:	d101      	bne.n	800578a <HAL_QSPI_AutoPolling+0x24>
 8005786:	2302      	movs	r3, #2
 8005788:	e060      	b.n	800584c <HAL_QSPI_AutoPolling+0xe6>
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2201      	movs	r2, #1
 800578e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005798:	b2db      	uxtb	r3, r3
 800579a:	2b01      	cmp	r3, #1
 800579c:	d14f      	bne.n	800583e <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2200      	movs	r2, #0
 80057a2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2242      	movs	r2, #66	; 0x42
 80057a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	9300      	str	r3, [sp, #0]
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	2200      	movs	r2, #0
 80057b4:	2120      	movs	r1, #32
 80057b6:	68f8      	ldr	r0, [r7, #12]
 80057b8:	f000 f85a 	bl	8005870 <QSPI_WaitFlagStateUntilTimeout>
 80057bc:	4603      	mov	r3, r0
 80057be:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 80057c0:	7dfb      	ldrb	r3, [r7, #23]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d13d      	bne.n	8005842 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	6812      	ldr	r2, [r2, #0]
 80057ce:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	6852      	ldr	r2, [r2, #4]
 80057d8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	687a      	ldr	r2, [r7, #4]
 80057e0:	6892      	ldr	r2, [r2, #8]
 80057e2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	691b      	ldr	r3, [r3, #16]
 80057f2:	431a      	orrs	r2, r3
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80057fc:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	68da      	ldr	r2, [r3, #12]
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8005806:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800580a:	68b9      	ldr	r1, [r7, #8]
 800580c:	68f8      	ldr	r0, [r7, #12]
 800580e:	f000 f866 	bl	80058de <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	9300      	str	r3, [sp, #0]
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	2201      	movs	r2, #1
 800581a:	2108      	movs	r1, #8
 800581c:	68f8      	ldr	r0, [r7, #12]
 800581e:	f000 f827 	bl	8005870 <QSPI_WaitFlagStateUntilTimeout>
 8005822:	4603      	mov	r3, r0
 8005824:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8005826:	7dfb      	ldrb	r3, [r7, #23]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d10a      	bne.n	8005842 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	2208      	movs	r2, #8
 8005832:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800583c:	e001      	b.n	8005842 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800583e:	2302      	movs	r3, #2
 8005840:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2200      	movs	r2, #0
 8005846:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800584a:	7dfb      	ldrb	r3, [r7, #23]
}
 800584c:	4618      	mov	r0, r3
 800584e:	3718      	adds	r7, #24
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}

08005854 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005854:	b480      	push	{r7}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	683a      	ldr	r2, [r7, #0]
 8005862:	649a      	str	r2, [r3, #72]	; 0x48
}
 8005864:	bf00      	nop
 8005866:	370c      	adds	r7, #12
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr

08005870 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b084      	sub	sp, #16
 8005874:	af00      	add	r7, sp, #0
 8005876:	60f8      	str	r0, [r7, #12]
 8005878:	60b9      	str	r1, [r7, #8]
 800587a:	603b      	str	r3, [r7, #0]
 800587c:	4613      	mov	r3, r2
 800587e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005880:	e01a      	b.n	80058b8 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005882:	69bb      	ldr	r3, [r7, #24]
 8005884:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005888:	d016      	beq.n	80058b8 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800588a:	f7fc fce7 	bl	800225c <HAL_GetTick>
 800588e:	4602      	mov	r2, r0
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	1ad3      	subs	r3, r2, r3
 8005894:	69ba      	ldr	r2, [r7, #24]
 8005896:	429a      	cmp	r2, r3
 8005898:	d302      	bcc.n	80058a0 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800589a:	69bb      	ldr	r3, [r7, #24]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d10b      	bne.n	80058b8 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2204      	movs	r2, #4
 80058a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058ac:	f043 0201 	orr.w	r2, r3, #1
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	e00e      	b.n	80058d6 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	689a      	ldr	r2, [r3, #8]
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	4013      	ands	r3, r2
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	bf14      	ite	ne
 80058c6:	2301      	movne	r3, #1
 80058c8:	2300      	moveq	r3, #0
 80058ca:	b2db      	uxtb	r3, r3
 80058cc:	461a      	mov	r2, r3
 80058ce:	79fb      	ldrb	r3, [r7, #7]
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d1d6      	bne.n	8005882 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80058d4:	2300      	movs	r3, #0
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3710      	adds	r7, #16
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}

080058de <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 80058de:	b480      	push	{r7}
 80058e0:	b085      	sub	sp, #20
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	60f8      	str	r0, [r7, #12]
 80058e6:	60b9      	str	r1, [r7, #8]
 80058e8:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d009      	beq.n	8005906 <QSPI_Config+0x28>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80058f8:	d005      	beq.n	8005906 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	3a01      	subs	r2, #1
 8005904:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	699b      	ldr	r3, [r3, #24]
 800590a:	2b00      	cmp	r3, #0
 800590c:	f000 80b9 	beq.w	8005a82 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	6a1b      	ldr	r3, [r3, #32]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d05f      	beq.n	80059d8 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	68ba      	ldr	r2, [r7, #8]
 800591e:	6892      	ldr	r2, [r2, #8]
 8005920:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	69db      	ldr	r3, [r3, #28]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d031      	beq.n	800598e <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005932:	431a      	orrs	r2, r3
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005938:	431a      	orrs	r2, r3
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593e:	431a      	orrs	r2, r3
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	695b      	ldr	r3, [r3, #20]
 8005944:	049b      	lsls	r3, r3, #18
 8005946:	431a      	orrs	r2, r3
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	691b      	ldr	r3, [r3, #16]
 800594c:	431a      	orrs	r2, r3
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	6a1b      	ldr	r3, [r3, #32]
 8005952:	431a      	orrs	r2, r3
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	431a      	orrs	r2, r3
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	69db      	ldr	r3, [r3, #28]
 800595e:	431a      	orrs	r2, r3
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	699b      	ldr	r3, [r3, #24]
 8005964:	431a      	orrs	r2, r3
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	ea42 0103 	orr.w	r1, r2, r3
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	430a      	orrs	r2, r1
 8005976:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800597e:	f000 812e 	beq.w	8005bde <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	68ba      	ldr	r2, [r7, #8]
 8005988:	6852      	ldr	r2, [r2, #4]
 800598a:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800598c:	e127      	b.n	8005bde <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005996:	431a      	orrs	r2, r3
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800599c:	431a      	orrs	r2, r3
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a2:	431a      	orrs	r2, r3
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	695b      	ldr	r3, [r3, #20]
 80059a8:	049b      	lsls	r3, r3, #18
 80059aa:	431a      	orrs	r2, r3
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	691b      	ldr	r3, [r3, #16]
 80059b0:	431a      	orrs	r2, r3
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	6a1b      	ldr	r3, [r3, #32]
 80059b6:	431a      	orrs	r2, r3
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	69db      	ldr	r3, [r3, #28]
 80059bc:	431a      	orrs	r2, r3
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	699b      	ldr	r3, [r3, #24]
 80059c2:	431a      	orrs	r2, r3
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	ea42 0103 	orr.w	r1, r2, r3
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	430a      	orrs	r2, r1
 80059d4:	615a      	str	r2, [r3, #20]
}
 80059d6:	e102      	b.n	8005bde <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	69db      	ldr	r3, [r3, #28]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d02e      	beq.n	8005a3e <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059e8:	431a      	orrs	r2, r3
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ee:	431a      	orrs	r2, r3
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f4:	431a      	orrs	r2, r3
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	695b      	ldr	r3, [r3, #20]
 80059fa:	049b      	lsls	r3, r3, #18
 80059fc:	431a      	orrs	r2, r3
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	6a1b      	ldr	r3, [r3, #32]
 8005a02:	431a      	orrs	r2, r3
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	431a      	orrs	r2, r3
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	69db      	ldr	r3, [r3, #28]
 8005a0e:	431a      	orrs	r2, r3
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	699b      	ldr	r3, [r3, #24]
 8005a14:	431a      	orrs	r2, r3
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	ea42 0103 	orr.w	r1, r2, r3
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	430a      	orrs	r2, r1
 8005a26:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005a2e:	f000 80d6 	beq.w	8005bde <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	68ba      	ldr	r2, [r7, #8]
 8005a38:	6852      	ldr	r2, [r2, #4]
 8005a3a:	619a      	str	r2, [r3, #24]
}
 8005a3c:	e0cf      	b.n	8005bde <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a46:	431a      	orrs	r2, r3
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a4c:	431a      	orrs	r2, r3
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a52:	431a      	orrs	r2, r3
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	695b      	ldr	r3, [r3, #20]
 8005a58:	049b      	lsls	r3, r3, #18
 8005a5a:	431a      	orrs	r2, r3
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	6a1b      	ldr	r3, [r3, #32]
 8005a60:	431a      	orrs	r2, r3
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	69db      	ldr	r3, [r3, #28]
 8005a66:	431a      	orrs	r2, r3
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	699b      	ldr	r3, [r3, #24]
 8005a6c:	431a      	orrs	r2, r3
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	ea42 0103 	orr.w	r1, r2, r3
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	687a      	ldr	r2, [r7, #4]
 8005a7c:	430a      	orrs	r2, r1
 8005a7e:	615a      	str	r2, [r3, #20]
}
 8005a80:	e0ad      	b.n	8005bde <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	6a1b      	ldr	r3, [r3, #32]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d058      	beq.n	8005b3c <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	68ba      	ldr	r2, [r7, #8]
 8005a90:	6892      	ldr	r2, [r2, #8]
 8005a92:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	69db      	ldr	r3, [r3, #28]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d02d      	beq.n	8005af8 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aa4:	431a      	orrs	r2, r3
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aaa:	431a      	orrs	r2, r3
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab0:	431a      	orrs	r2, r3
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	695b      	ldr	r3, [r3, #20]
 8005ab6:	049b      	lsls	r3, r3, #18
 8005ab8:	431a      	orrs	r2, r3
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	691b      	ldr	r3, [r3, #16]
 8005abe:	431a      	orrs	r2, r3
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	6a1b      	ldr	r3, [r3, #32]
 8005ac4:	431a      	orrs	r2, r3
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	68db      	ldr	r3, [r3, #12]
 8005aca:	431a      	orrs	r2, r3
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	69db      	ldr	r3, [r3, #28]
 8005ad0:	431a      	orrs	r2, r3
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	699b      	ldr	r3, [r3, #24]
 8005ad6:	ea42 0103 	orr.w	r1, r2, r3
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	430a      	orrs	r2, r1
 8005ae2:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005aea:	d078      	beq.n	8005bde <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	68ba      	ldr	r2, [r7, #8]
 8005af2:	6852      	ldr	r2, [r2, #4]
 8005af4:	619a      	str	r2, [r3, #24]
}
 8005af6:	e072      	b.n	8005bde <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b00:	431a      	orrs	r2, r3
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b06:	431a      	orrs	r2, r3
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0c:	431a      	orrs	r2, r3
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	695b      	ldr	r3, [r3, #20]
 8005b12:	049b      	lsls	r3, r3, #18
 8005b14:	431a      	orrs	r2, r3
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	691b      	ldr	r3, [r3, #16]
 8005b1a:	431a      	orrs	r2, r3
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	6a1b      	ldr	r3, [r3, #32]
 8005b20:	431a      	orrs	r2, r3
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	69db      	ldr	r3, [r3, #28]
 8005b26:	431a      	orrs	r2, r3
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	699b      	ldr	r3, [r3, #24]
 8005b2c:	ea42 0103 	orr.w	r1, r2, r3
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	430a      	orrs	r2, r1
 8005b38:	615a      	str	r2, [r3, #20]
}
 8005b3a:	e050      	b.n	8005bde <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	69db      	ldr	r3, [r3, #28]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d02a      	beq.n	8005b9a <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b4c:	431a      	orrs	r2, r3
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b52:	431a      	orrs	r2, r3
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b58:	431a      	orrs	r2, r3
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	695b      	ldr	r3, [r3, #20]
 8005b5e:	049b      	lsls	r3, r3, #18
 8005b60:	431a      	orrs	r2, r3
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	6a1b      	ldr	r3, [r3, #32]
 8005b66:	431a      	orrs	r2, r3
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	431a      	orrs	r2, r3
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	69db      	ldr	r3, [r3, #28]
 8005b72:	431a      	orrs	r2, r3
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	699b      	ldr	r3, [r3, #24]
 8005b78:	ea42 0103 	orr.w	r1, r2, r3
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	430a      	orrs	r2, r1
 8005b84:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005b8c:	d027      	beq.n	8005bde <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	68ba      	ldr	r2, [r7, #8]
 8005b94:	6852      	ldr	r2, [r2, #4]
 8005b96:	619a      	str	r2, [r3, #24]
}
 8005b98:	e021      	b.n	8005bde <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d01d      	beq.n	8005bde <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005baa:	431a      	orrs	r2, r3
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bb0:	431a      	orrs	r2, r3
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb6:	431a      	orrs	r2, r3
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	695b      	ldr	r3, [r3, #20]
 8005bbc:	049b      	lsls	r3, r3, #18
 8005bbe:	431a      	orrs	r2, r3
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	6a1b      	ldr	r3, [r3, #32]
 8005bc4:	431a      	orrs	r2, r3
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	69db      	ldr	r3, [r3, #28]
 8005bca:	431a      	orrs	r2, r3
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	699b      	ldr	r3, [r3, #24]
 8005bd0:	ea42 0103 	orr.w	r1, r2, r3
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	430a      	orrs	r2, r1
 8005bdc:	615a      	str	r2, [r3, #20]
}
 8005bde:	bf00      	nop
 8005be0:	3714      	adds	r7, #20
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr
	...

08005bec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b086      	sub	sp, #24
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d101      	bne.n	8005c02 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e29b      	b.n	800613a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f003 0301 	and.w	r3, r3, #1
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	f000 8087 	beq.w	8005d1e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005c10:	4b96      	ldr	r3, [pc, #600]	; (8005e6c <HAL_RCC_OscConfig+0x280>)
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	f003 030c 	and.w	r3, r3, #12
 8005c18:	2b04      	cmp	r3, #4
 8005c1a:	d00c      	beq.n	8005c36 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c1c:	4b93      	ldr	r3, [pc, #588]	; (8005e6c <HAL_RCC_OscConfig+0x280>)
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	f003 030c 	and.w	r3, r3, #12
 8005c24:	2b08      	cmp	r3, #8
 8005c26:	d112      	bne.n	8005c4e <HAL_RCC_OscConfig+0x62>
 8005c28:	4b90      	ldr	r3, [pc, #576]	; (8005e6c <HAL_RCC_OscConfig+0x280>)
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c34:	d10b      	bne.n	8005c4e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c36:	4b8d      	ldr	r3, [pc, #564]	; (8005e6c <HAL_RCC_OscConfig+0x280>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d06c      	beq.n	8005d1c <HAL_RCC_OscConfig+0x130>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d168      	bne.n	8005d1c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e275      	b.n	800613a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c56:	d106      	bne.n	8005c66 <HAL_RCC_OscConfig+0x7a>
 8005c58:	4b84      	ldr	r3, [pc, #528]	; (8005e6c <HAL_RCC_OscConfig+0x280>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a83      	ldr	r2, [pc, #524]	; (8005e6c <HAL_RCC_OscConfig+0x280>)
 8005c5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c62:	6013      	str	r3, [r2, #0]
 8005c64:	e02e      	b.n	8005cc4 <HAL_RCC_OscConfig+0xd8>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d10c      	bne.n	8005c88 <HAL_RCC_OscConfig+0x9c>
 8005c6e:	4b7f      	ldr	r3, [pc, #508]	; (8005e6c <HAL_RCC_OscConfig+0x280>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a7e      	ldr	r2, [pc, #504]	; (8005e6c <HAL_RCC_OscConfig+0x280>)
 8005c74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c78:	6013      	str	r3, [r2, #0]
 8005c7a:	4b7c      	ldr	r3, [pc, #496]	; (8005e6c <HAL_RCC_OscConfig+0x280>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a7b      	ldr	r2, [pc, #492]	; (8005e6c <HAL_RCC_OscConfig+0x280>)
 8005c80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c84:	6013      	str	r3, [r2, #0]
 8005c86:	e01d      	b.n	8005cc4 <HAL_RCC_OscConfig+0xd8>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c90:	d10c      	bne.n	8005cac <HAL_RCC_OscConfig+0xc0>
 8005c92:	4b76      	ldr	r3, [pc, #472]	; (8005e6c <HAL_RCC_OscConfig+0x280>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a75      	ldr	r2, [pc, #468]	; (8005e6c <HAL_RCC_OscConfig+0x280>)
 8005c98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c9c:	6013      	str	r3, [r2, #0]
 8005c9e:	4b73      	ldr	r3, [pc, #460]	; (8005e6c <HAL_RCC_OscConfig+0x280>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a72      	ldr	r2, [pc, #456]	; (8005e6c <HAL_RCC_OscConfig+0x280>)
 8005ca4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ca8:	6013      	str	r3, [r2, #0]
 8005caa:	e00b      	b.n	8005cc4 <HAL_RCC_OscConfig+0xd8>
 8005cac:	4b6f      	ldr	r3, [pc, #444]	; (8005e6c <HAL_RCC_OscConfig+0x280>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a6e      	ldr	r2, [pc, #440]	; (8005e6c <HAL_RCC_OscConfig+0x280>)
 8005cb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cb6:	6013      	str	r3, [r2, #0]
 8005cb8:	4b6c      	ldr	r3, [pc, #432]	; (8005e6c <HAL_RCC_OscConfig+0x280>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a6b      	ldr	r2, [pc, #428]	; (8005e6c <HAL_RCC_OscConfig+0x280>)
 8005cbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005cc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d013      	beq.n	8005cf4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ccc:	f7fc fac6 	bl	800225c <HAL_GetTick>
 8005cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cd2:	e008      	b.n	8005ce6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005cd4:	f7fc fac2 	bl	800225c <HAL_GetTick>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	1ad3      	subs	r3, r2, r3
 8005cde:	2b64      	cmp	r3, #100	; 0x64
 8005ce0:	d901      	bls.n	8005ce6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005ce2:	2303      	movs	r3, #3
 8005ce4:	e229      	b.n	800613a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ce6:	4b61      	ldr	r3, [pc, #388]	; (8005e6c <HAL_RCC_OscConfig+0x280>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d0f0      	beq.n	8005cd4 <HAL_RCC_OscConfig+0xe8>
 8005cf2:	e014      	b.n	8005d1e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cf4:	f7fc fab2 	bl	800225c <HAL_GetTick>
 8005cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005cfa:	e008      	b.n	8005d0e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005cfc:	f7fc faae 	bl	800225c <HAL_GetTick>
 8005d00:	4602      	mov	r2, r0
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	1ad3      	subs	r3, r2, r3
 8005d06:	2b64      	cmp	r3, #100	; 0x64
 8005d08:	d901      	bls.n	8005d0e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005d0a:	2303      	movs	r3, #3
 8005d0c:	e215      	b.n	800613a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d0e:	4b57      	ldr	r3, [pc, #348]	; (8005e6c <HAL_RCC_OscConfig+0x280>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d1f0      	bne.n	8005cfc <HAL_RCC_OscConfig+0x110>
 8005d1a:	e000      	b.n	8005d1e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f003 0302 	and.w	r3, r3, #2
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d069      	beq.n	8005dfe <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005d2a:	4b50      	ldr	r3, [pc, #320]	; (8005e6c <HAL_RCC_OscConfig+0x280>)
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	f003 030c 	and.w	r3, r3, #12
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d00b      	beq.n	8005d4e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d36:	4b4d      	ldr	r3, [pc, #308]	; (8005e6c <HAL_RCC_OscConfig+0x280>)
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	f003 030c 	and.w	r3, r3, #12
 8005d3e:	2b08      	cmp	r3, #8
 8005d40:	d11c      	bne.n	8005d7c <HAL_RCC_OscConfig+0x190>
 8005d42:	4b4a      	ldr	r3, [pc, #296]	; (8005e6c <HAL_RCC_OscConfig+0x280>)
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d116      	bne.n	8005d7c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d4e:	4b47      	ldr	r3, [pc, #284]	; (8005e6c <HAL_RCC_OscConfig+0x280>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f003 0302 	and.w	r3, r3, #2
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d005      	beq.n	8005d66 <HAL_RCC_OscConfig+0x17a>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	68db      	ldr	r3, [r3, #12]
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d001      	beq.n	8005d66 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	e1e9      	b.n	800613a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d66:	4b41      	ldr	r3, [pc, #260]	; (8005e6c <HAL_RCC_OscConfig+0x280>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	691b      	ldr	r3, [r3, #16]
 8005d72:	00db      	lsls	r3, r3, #3
 8005d74:	493d      	ldr	r1, [pc, #244]	; (8005e6c <HAL_RCC_OscConfig+0x280>)
 8005d76:	4313      	orrs	r3, r2
 8005d78:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d7a:	e040      	b.n	8005dfe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d023      	beq.n	8005dcc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d84:	4b39      	ldr	r3, [pc, #228]	; (8005e6c <HAL_RCC_OscConfig+0x280>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a38      	ldr	r2, [pc, #224]	; (8005e6c <HAL_RCC_OscConfig+0x280>)
 8005d8a:	f043 0301 	orr.w	r3, r3, #1
 8005d8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d90:	f7fc fa64 	bl	800225c <HAL_GetTick>
 8005d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d96:	e008      	b.n	8005daa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d98:	f7fc fa60 	bl	800225c <HAL_GetTick>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	1ad3      	subs	r3, r2, r3
 8005da2:	2b02      	cmp	r3, #2
 8005da4:	d901      	bls.n	8005daa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005da6:	2303      	movs	r3, #3
 8005da8:	e1c7      	b.n	800613a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005daa:	4b30      	ldr	r3, [pc, #192]	; (8005e6c <HAL_RCC_OscConfig+0x280>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f003 0302 	and.w	r3, r3, #2
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d0f0      	beq.n	8005d98 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005db6:	4b2d      	ldr	r3, [pc, #180]	; (8005e6c <HAL_RCC_OscConfig+0x280>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	691b      	ldr	r3, [r3, #16]
 8005dc2:	00db      	lsls	r3, r3, #3
 8005dc4:	4929      	ldr	r1, [pc, #164]	; (8005e6c <HAL_RCC_OscConfig+0x280>)
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	600b      	str	r3, [r1, #0]
 8005dca:	e018      	b.n	8005dfe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005dcc:	4b27      	ldr	r3, [pc, #156]	; (8005e6c <HAL_RCC_OscConfig+0x280>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a26      	ldr	r2, [pc, #152]	; (8005e6c <HAL_RCC_OscConfig+0x280>)
 8005dd2:	f023 0301 	bic.w	r3, r3, #1
 8005dd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dd8:	f7fc fa40 	bl	800225c <HAL_GetTick>
 8005ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005dde:	e008      	b.n	8005df2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005de0:	f7fc fa3c 	bl	800225c <HAL_GetTick>
 8005de4:	4602      	mov	r2, r0
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	2b02      	cmp	r3, #2
 8005dec:	d901      	bls.n	8005df2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005dee:	2303      	movs	r3, #3
 8005df0:	e1a3      	b.n	800613a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005df2:	4b1e      	ldr	r3, [pc, #120]	; (8005e6c <HAL_RCC_OscConfig+0x280>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f003 0302 	and.w	r3, r3, #2
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d1f0      	bne.n	8005de0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f003 0308 	and.w	r3, r3, #8
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d038      	beq.n	8005e7c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	695b      	ldr	r3, [r3, #20]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d019      	beq.n	8005e46 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e12:	4b16      	ldr	r3, [pc, #88]	; (8005e6c <HAL_RCC_OscConfig+0x280>)
 8005e14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e16:	4a15      	ldr	r2, [pc, #84]	; (8005e6c <HAL_RCC_OscConfig+0x280>)
 8005e18:	f043 0301 	orr.w	r3, r3, #1
 8005e1c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e1e:	f7fc fa1d 	bl	800225c <HAL_GetTick>
 8005e22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e24:	e008      	b.n	8005e38 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e26:	f7fc fa19 	bl	800225c <HAL_GetTick>
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	1ad3      	subs	r3, r2, r3
 8005e30:	2b02      	cmp	r3, #2
 8005e32:	d901      	bls.n	8005e38 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005e34:	2303      	movs	r3, #3
 8005e36:	e180      	b.n	800613a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e38:	4b0c      	ldr	r3, [pc, #48]	; (8005e6c <HAL_RCC_OscConfig+0x280>)
 8005e3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e3c:	f003 0302 	and.w	r3, r3, #2
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d0f0      	beq.n	8005e26 <HAL_RCC_OscConfig+0x23a>
 8005e44:	e01a      	b.n	8005e7c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e46:	4b09      	ldr	r3, [pc, #36]	; (8005e6c <HAL_RCC_OscConfig+0x280>)
 8005e48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e4a:	4a08      	ldr	r2, [pc, #32]	; (8005e6c <HAL_RCC_OscConfig+0x280>)
 8005e4c:	f023 0301 	bic.w	r3, r3, #1
 8005e50:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e52:	f7fc fa03 	bl	800225c <HAL_GetTick>
 8005e56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e58:	e00a      	b.n	8005e70 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e5a:	f7fc f9ff 	bl	800225c <HAL_GetTick>
 8005e5e:	4602      	mov	r2, r0
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	1ad3      	subs	r3, r2, r3
 8005e64:	2b02      	cmp	r3, #2
 8005e66:	d903      	bls.n	8005e70 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005e68:	2303      	movs	r3, #3
 8005e6a:	e166      	b.n	800613a <HAL_RCC_OscConfig+0x54e>
 8005e6c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e70:	4b92      	ldr	r3, [pc, #584]	; (80060bc <HAL_RCC_OscConfig+0x4d0>)
 8005e72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e74:	f003 0302 	and.w	r3, r3, #2
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d1ee      	bne.n	8005e5a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f003 0304 	and.w	r3, r3, #4
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	f000 80a4 	beq.w	8005fd2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e8a:	4b8c      	ldr	r3, [pc, #560]	; (80060bc <HAL_RCC_OscConfig+0x4d0>)
 8005e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d10d      	bne.n	8005eb2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e96:	4b89      	ldr	r3, [pc, #548]	; (80060bc <HAL_RCC_OscConfig+0x4d0>)
 8005e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e9a:	4a88      	ldr	r2, [pc, #544]	; (80060bc <HAL_RCC_OscConfig+0x4d0>)
 8005e9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ea0:	6413      	str	r3, [r2, #64]	; 0x40
 8005ea2:	4b86      	ldr	r3, [pc, #536]	; (80060bc <HAL_RCC_OscConfig+0x4d0>)
 8005ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005eaa:	60bb      	str	r3, [r7, #8]
 8005eac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005eb2:	4b83      	ldr	r3, [pc, #524]	; (80060c0 <HAL_RCC_OscConfig+0x4d4>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d118      	bne.n	8005ef0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005ebe:	4b80      	ldr	r3, [pc, #512]	; (80060c0 <HAL_RCC_OscConfig+0x4d4>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a7f      	ldr	r2, [pc, #508]	; (80060c0 <HAL_RCC_OscConfig+0x4d4>)
 8005ec4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ec8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005eca:	f7fc f9c7 	bl	800225c <HAL_GetTick>
 8005ece:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ed0:	e008      	b.n	8005ee4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ed2:	f7fc f9c3 	bl	800225c <HAL_GetTick>
 8005ed6:	4602      	mov	r2, r0
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	1ad3      	subs	r3, r2, r3
 8005edc:	2b64      	cmp	r3, #100	; 0x64
 8005ede:	d901      	bls.n	8005ee4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005ee0:	2303      	movs	r3, #3
 8005ee2:	e12a      	b.n	800613a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ee4:	4b76      	ldr	r3, [pc, #472]	; (80060c0 <HAL_RCC_OscConfig+0x4d4>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d0f0      	beq.n	8005ed2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d106      	bne.n	8005f06 <HAL_RCC_OscConfig+0x31a>
 8005ef8:	4b70      	ldr	r3, [pc, #448]	; (80060bc <HAL_RCC_OscConfig+0x4d0>)
 8005efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005efc:	4a6f      	ldr	r2, [pc, #444]	; (80060bc <HAL_RCC_OscConfig+0x4d0>)
 8005efe:	f043 0301 	orr.w	r3, r3, #1
 8005f02:	6713      	str	r3, [r2, #112]	; 0x70
 8005f04:	e02d      	b.n	8005f62 <HAL_RCC_OscConfig+0x376>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d10c      	bne.n	8005f28 <HAL_RCC_OscConfig+0x33c>
 8005f0e:	4b6b      	ldr	r3, [pc, #428]	; (80060bc <HAL_RCC_OscConfig+0x4d0>)
 8005f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f12:	4a6a      	ldr	r2, [pc, #424]	; (80060bc <HAL_RCC_OscConfig+0x4d0>)
 8005f14:	f023 0301 	bic.w	r3, r3, #1
 8005f18:	6713      	str	r3, [r2, #112]	; 0x70
 8005f1a:	4b68      	ldr	r3, [pc, #416]	; (80060bc <HAL_RCC_OscConfig+0x4d0>)
 8005f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f1e:	4a67      	ldr	r2, [pc, #412]	; (80060bc <HAL_RCC_OscConfig+0x4d0>)
 8005f20:	f023 0304 	bic.w	r3, r3, #4
 8005f24:	6713      	str	r3, [r2, #112]	; 0x70
 8005f26:	e01c      	b.n	8005f62 <HAL_RCC_OscConfig+0x376>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	2b05      	cmp	r3, #5
 8005f2e:	d10c      	bne.n	8005f4a <HAL_RCC_OscConfig+0x35e>
 8005f30:	4b62      	ldr	r3, [pc, #392]	; (80060bc <HAL_RCC_OscConfig+0x4d0>)
 8005f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f34:	4a61      	ldr	r2, [pc, #388]	; (80060bc <HAL_RCC_OscConfig+0x4d0>)
 8005f36:	f043 0304 	orr.w	r3, r3, #4
 8005f3a:	6713      	str	r3, [r2, #112]	; 0x70
 8005f3c:	4b5f      	ldr	r3, [pc, #380]	; (80060bc <HAL_RCC_OscConfig+0x4d0>)
 8005f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f40:	4a5e      	ldr	r2, [pc, #376]	; (80060bc <HAL_RCC_OscConfig+0x4d0>)
 8005f42:	f043 0301 	orr.w	r3, r3, #1
 8005f46:	6713      	str	r3, [r2, #112]	; 0x70
 8005f48:	e00b      	b.n	8005f62 <HAL_RCC_OscConfig+0x376>
 8005f4a:	4b5c      	ldr	r3, [pc, #368]	; (80060bc <HAL_RCC_OscConfig+0x4d0>)
 8005f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f4e:	4a5b      	ldr	r2, [pc, #364]	; (80060bc <HAL_RCC_OscConfig+0x4d0>)
 8005f50:	f023 0301 	bic.w	r3, r3, #1
 8005f54:	6713      	str	r3, [r2, #112]	; 0x70
 8005f56:	4b59      	ldr	r3, [pc, #356]	; (80060bc <HAL_RCC_OscConfig+0x4d0>)
 8005f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f5a:	4a58      	ldr	r2, [pc, #352]	; (80060bc <HAL_RCC_OscConfig+0x4d0>)
 8005f5c:	f023 0304 	bic.w	r3, r3, #4
 8005f60:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d015      	beq.n	8005f96 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f6a:	f7fc f977 	bl	800225c <HAL_GetTick>
 8005f6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f70:	e00a      	b.n	8005f88 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f72:	f7fc f973 	bl	800225c <HAL_GetTick>
 8005f76:	4602      	mov	r2, r0
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	1ad3      	subs	r3, r2, r3
 8005f7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d901      	bls.n	8005f88 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005f84:	2303      	movs	r3, #3
 8005f86:	e0d8      	b.n	800613a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f88:	4b4c      	ldr	r3, [pc, #304]	; (80060bc <HAL_RCC_OscConfig+0x4d0>)
 8005f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f8c:	f003 0302 	and.w	r3, r3, #2
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d0ee      	beq.n	8005f72 <HAL_RCC_OscConfig+0x386>
 8005f94:	e014      	b.n	8005fc0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f96:	f7fc f961 	bl	800225c <HAL_GetTick>
 8005f9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f9c:	e00a      	b.n	8005fb4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f9e:	f7fc f95d 	bl	800225c <HAL_GetTick>
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	1ad3      	subs	r3, r2, r3
 8005fa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d901      	bls.n	8005fb4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005fb0:	2303      	movs	r3, #3
 8005fb2:	e0c2      	b.n	800613a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fb4:	4b41      	ldr	r3, [pc, #260]	; (80060bc <HAL_RCC_OscConfig+0x4d0>)
 8005fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fb8:	f003 0302 	and.w	r3, r3, #2
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d1ee      	bne.n	8005f9e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005fc0:	7dfb      	ldrb	r3, [r7, #23]
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d105      	bne.n	8005fd2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fc6:	4b3d      	ldr	r3, [pc, #244]	; (80060bc <HAL_RCC_OscConfig+0x4d0>)
 8005fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fca:	4a3c      	ldr	r2, [pc, #240]	; (80060bc <HAL_RCC_OscConfig+0x4d0>)
 8005fcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fd0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	699b      	ldr	r3, [r3, #24]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	f000 80ae 	beq.w	8006138 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005fdc:	4b37      	ldr	r3, [pc, #220]	; (80060bc <HAL_RCC_OscConfig+0x4d0>)
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	f003 030c 	and.w	r3, r3, #12
 8005fe4:	2b08      	cmp	r3, #8
 8005fe6:	d06d      	beq.n	80060c4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	699b      	ldr	r3, [r3, #24]
 8005fec:	2b02      	cmp	r3, #2
 8005fee:	d14b      	bne.n	8006088 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ff0:	4b32      	ldr	r3, [pc, #200]	; (80060bc <HAL_RCC_OscConfig+0x4d0>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a31      	ldr	r2, [pc, #196]	; (80060bc <HAL_RCC_OscConfig+0x4d0>)
 8005ff6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ffa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ffc:	f7fc f92e 	bl	800225c <HAL_GetTick>
 8006000:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006002:	e008      	b.n	8006016 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006004:	f7fc f92a 	bl	800225c <HAL_GetTick>
 8006008:	4602      	mov	r2, r0
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	1ad3      	subs	r3, r2, r3
 800600e:	2b02      	cmp	r3, #2
 8006010:	d901      	bls.n	8006016 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006012:	2303      	movs	r3, #3
 8006014:	e091      	b.n	800613a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006016:	4b29      	ldr	r3, [pc, #164]	; (80060bc <HAL_RCC_OscConfig+0x4d0>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800601e:	2b00      	cmp	r3, #0
 8006020:	d1f0      	bne.n	8006004 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	69da      	ldr	r2, [r3, #28]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6a1b      	ldr	r3, [r3, #32]
 800602a:	431a      	orrs	r2, r3
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006030:	019b      	lsls	r3, r3, #6
 8006032:	431a      	orrs	r2, r3
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006038:	085b      	lsrs	r3, r3, #1
 800603a:	3b01      	subs	r3, #1
 800603c:	041b      	lsls	r3, r3, #16
 800603e:	431a      	orrs	r2, r3
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006044:	061b      	lsls	r3, r3, #24
 8006046:	431a      	orrs	r2, r3
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800604c:	071b      	lsls	r3, r3, #28
 800604e:	491b      	ldr	r1, [pc, #108]	; (80060bc <HAL_RCC_OscConfig+0x4d0>)
 8006050:	4313      	orrs	r3, r2
 8006052:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006054:	4b19      	ldr	r3, [pc, #100]	; (80060bc <HAL_RCC_OscConfig+0x4d0>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a18      	ldr	r2, [pc, #96]	; (80060bc <HAL_RCC_OscConfig+0x4d0>)
 800605a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800605e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006060:	f7fc f8fc 	bl	800225c <HAL_GetTick>
 8006064:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006066:	e008      	b.n	800607a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006068:	f7fc f8f8 	bl	800225c <HAL_GetTick>
 800606c:	4602      	mov	r2, r0
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	1ad3      	subs	r3, r2, r3
 8006072:	2b02      	cmp	r3, #2
 8006074:	d901      	bls.n	800607a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8006076:	2303      	movs	r3, #3
 8006078:	e05f      	b.n	800613a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800607a:	4b10      	ldr	r3, [pc, #64]	; (80060bc <HAL_RCC_OscConfig+0x4d0>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006082:	2b00      	cmp	r3, #0
 8006084:	d0f0      	beq.n	8006068 <HAL_RCC_OscConfig+0x47c>
 8006086:	e057      	b.n	8006138 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006088:	4b0c      	ldr	r3, [pc, #48]	; (80060bc <HAL_RCC_OscConfig+0x4d0>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a0b      	ldr	r2, [pc, #44]	; (80060bc <HAL_RCC_OscConfig+0x4d0>)
 800608e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006092:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006094:	f7fc f8e2 	bl	800225c <HAL_GetTick>
 8006098:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800609a:	e008      	b.n	80060ae <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800609c:	f7fc f8de 	bl	800225c <HAL_GetTick>
 80060a0:	4602      	mov	r2, r0
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	1ad3      	subs	r3, r2, r3
 80060a6:	2b02      	cmp	r3, #2
 80060a8:	d901      	bls.n	80060ae <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80060aa:	2303      	movs	r3, #3
 80060ac:	e045      	b.n	800613a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060ae:	4b03      	ldr	r3, [pc, #12]	; (80060bc <HAL_RCC_OscConfig+0x4d0>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d1f0      	bne.n	800609c <HAL_RCC_OscConfig+0x4b0>
 80060ba:	e03d      	b.n	8006138 <HAL_RCC_OscConfig+0x54c>
 80060bc:	40023800 	.word	0x40023800
 80060c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80060c4:	4b1f      	ldr	r3, [pc, #124]	; (8006144 <HAL_RCC_OscConfig+0x558>)
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	699b      	ldr	r3, [r3, #24]
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d030      	beq.n	8006134 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060dc:	429a      	cmp	r2, r3
 80060de:	d129      	bne.n	8006134 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d122      	bne.n	8006134 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80060ee:	68fa      	ldr	r2, [r7, #12]
 80060f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80060f4:	4013      	ands	r3, r2
 80060f6:	687a      	ldr	r2, [r7, #4]
 80060f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80060fa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d119      	bne.n	8006134 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800610a:	085b      	lsrs	r3, r3, #1
 800610c:	3b01      	subs	r3, #1
 800610e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006110:	429a      	cmp	r2, r3
 8006112:	d10f      	bne.n	8006134 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800611e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006120:	429a      	cmp	r2, r3
 8006122:	d107      	bne.n	8006134 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800612e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006130:	429a      	cmp	r2, r3
 8006132:	d001      	beq.n	8006138 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8006134:	2301      	movs	r3, #1
 8006136:	e000      	b.n	800613a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8006138:	2300      	movs	r3, #0
}
 800613a:	4618      	mov	r0, r3
 800613c:	3718      	adds	r7, #24
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
 8006142:	bf00      	nop
 8006144:	40023800 	.word	0x40023800

08006148 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b084      	sub	sp, #16
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
 8006150:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006152:	2300      	movs	r3, #0
 8006154:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d101      	bne.n	8006160 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800615c:	2301      	movs	r3, #1
 800615e:	e0d0      	b.n	8006302 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006160:	4b6a      	ldr	r3, [pc, #424]	; (800630c <HAL_RCC_ClockConfig+0x1c4>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f003 030f 	and.w	r3, r3, #15
 8006168:	683a      	ldr	r2, [r7, #0]
 800616a:	429a      	cmp	r2, r3
 800616c:	d910      	bls.n	8006190 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800616e:	4b67      	ldr	r3, [pc, #412]	; (800630c <HAL_RCC_ClockConfig+0x1c4>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f023 020f 	bic.w	r2, r3, #15
 8006176:	4965      	ldr	r1, [pc, #404]	; (800630c <HAL_RCC_ClockConfig+0x1c4>)
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	4313      	orrs	r3, r2
 800617c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800617e:	4b63      	ldr	r3, [pc, #396]	; (800630c <HAL_RCC_ClockConfig+0x1c4>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f003 030f 	and.w	r3, r3, #15
 8006186:	683a      	ldr	r2, [r7, #0]
 8006188:	429a      	cmp	r2, r3
 800618a:	d001      	beq.n	8006190 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	e0b8      	b.n	8006302 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f003 0302 	and.w	r3, r3, #2
 8006198:	2b00      	cmp	r3, #0
 800619a:	d020      	beq.n	80061de <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f003 0304 	and.w	r3, r3, #4
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d005      	beq.n	80061b4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80061a8:	4b59      	ldr	r3, [pc, #356]	; (8006310 <HAL_RCC_ClockConfig+0x1c8>)
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	4a58      	ldr	r2, [pc, #352]	; (8006310 <HAL_RCC_ClockConfig+0x1c8>)
 80061ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80061b2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f003 0308 	and.w	r3, r3, #8
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d005      	beq.n	80061cc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80061c0:	4b53      	ldr	r3, [pc, #332]	; (8006310 <HAL_RCC_ClockConfig+0x1c8>)
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	4a52      	ldr	r2, [pc, #328]	; (8006310 <HAL_RCC_ClockConfig+0x1c8>)
 80061c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80061ca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061cc:	4b50      	ldr	r3, [pc, #320]	; (8006310 <HAL_RCC_ClockConfig+0x1c8>)
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	494d      	ldr	r1, [pc, #308]	; (8006310 <HAL_RCC_ClockConfig+0x1c8>)
 80061da:	4313      	orrs	r3, r2
 80061dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f003 0301 	and.w	r3, r3, #1
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d040      	beq.n	800626c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d107      	bne.n	8006202 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061f2:	4b47      	ldr	r3, [pc, #284]	; (8006310 <HAL_RCC_ClockConfig+0x1c8>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d115      	bne.n	800622a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	e07f      	b.n	8006302 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	2b02      	cmp	r3, #2
 8006208:	d107      	bne.n	800621a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800620a:	4b41      	ldr	r3, [pc, #260]	; (8006310 <HAL_RCC_ClockConfig+0x1c8>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006212:	2b00      	cmp	r3, #0
 8006214:	d109      	bne.n	800622a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	e073      	b.n	8006302 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800621a:	4b3d      	ldr	r3, [pc, #244]	; (8006310 <HAL_RCC_ClockConfig+0x1c8>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f003 0302 	and.w	r3, r3, #2
 8006222:	2b00      	cmp	r3, #0
 8006224:	d101      	bne.n	800622a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006226:	2301      	movs	r3, #1
 8006228:	e06b      	b.n	8006302 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800622a:	4b39      	ldr	r3, [pc, #228]	; (8006310 <HAL_RCC_ClockConfig+0x1c8>)
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	f023 0203 	bic.w	r2, r3, #3
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	4936      	ldr	r1, [pc, #216]	; (8006310 <HAL_RCC_ClockConfig+0x1c8>)
 8006238:	4313      	orrs	r3, r2
 800623a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800623c:	f7fc f80e 	bl	800225c <HAL_GetTick>
 8006240:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006242:	e00a      	b.n	800625a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006244:	f7fc f80a 	bl	800225c <HAL_GetTick>
 8006248:	4602      	mov	r2, r0
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	1ad3      	subs	r3, r2, r3
 800624e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006252:	4293      	cmp	r3, r2
 8006254:	d901      	bls.n	800625a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006256:	2303      	movs	r3, #3
 8006258:	e053      	b.n	8006302 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800625a:	4b2d      	ldr	r3, [pc, #180]	; (8006310 <HAL_RCC_ClockConfig+0x1c8>)
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	f003 020c 	and.w	r2, r3, #12
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	009b      	lsls	r3, r3, #2
 8006268:	429a      	cmp	r2, r3
 800626a:	d1eb      	bne.n	8006244 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800626c:	4b27      	ldr	r3, [pc, #156]	; (800630c <HAL_RCC_ClockConfig+0x1c4>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f003 030f 	and.w	r3, r3, #15
 8006274:	683a      	ldr	r2, [r7, #0]
 8006276:	429a      	cmp	r2, r3
 8006278:	d210      	bcs.n	800629c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800627a:	4b24      	ldr	r3, [pc, #144]	; (800630c <HAL_RCC_ClockConfig+0x1c4>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f023 020f 	bic.w	r2, r3, #15
 8006282:	4922      	ldr	r1, [pc, #136]	; (800630c <HAL_RCC_ClockConfig+0x1c4>)
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	4313      	orrs	r3, r2
 8006288:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800628a:	4b20      	ldr	r3, [pc, #128]	; (800630c <HAL_RCC_ClockConfig+0x1c4>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f003 030f 	and.w	r3, r3, #15
 8006292:	683a      	ldr	r2, [r7, #0]
 8006294:	429a      	cmp	r2, r3
 8006296:	d001      	beq.n	800629c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006298:	2301      	movs	r3, #1
 800629a:	e032      	b.n	8006302 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f003 0304 	and.w	r3, r3, #4
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d008      	beq.n	80062ba <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80062a8:	4b19      	ldr	r3, [pc, #100]	; (8006310 <HAL_RCC_ClockConfig+0x1c8>)
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	68db      	ldr	r3, [r3, #12]
 80062b4:	4916      	ldr	r1, [pc, #88]	; (8006310 <HAL_RCC_ClockConfig+0x1c8>)
 80062b6:	4313      	orrs	r3, r2
 80062b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f003 0308 	and.w	r3, r3, #8
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d009      	beq.n	80062da <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80062c6:	4b12      	ldr	r3, [pc, #72]	; (8006310 <HAL_RCC_ClockConfig+0x1c8>)
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	691b      	ldr	r3, [r3, #16]
 80062d2:	00db      	lsls	r3, r3, #3
 80062d4:	490e      	ldr	r1, [pc, #56]	; (8006310 <HAL_RCC_ClockConfig+0x1c8>)
 80062d6:	4313      	orrs	r3, r2
 80062d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80062da:	f000 f831 	bl	8006340 <HAL_RCC_GetSysClockFreq>
 80062de:	4602      	mov	r2, r0
 80062e0:	4b0b      	ldr	r3, [pc, #44]	; (8006310 <HAL_RCC_ClockConfig+0x1c8>)
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	091b      	lsrs	r3, r3, #4
 80062e6:	f003 030f 	and.w	r3, r3, #15
 80062ea:	490a      	ldr	r1, [pc, #40]	; (8006314 <HAL_RCC_ClockConfig+0x1cc>)
 80062ec:	5ccb      	ldrb	r3, [r1, r3]
 80062ee:	fa22 f303 	lsr.w	r3, r2, r3
 80062f2:	4a09      	ldr	r2, [pc, #36]	; (8006318 <HAL_RCC_ClockConfig+0x1d0>)
 80062f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80062f6:	4b09      	ldr	r3, [pc, #36]	; (800631c <HAL_RCC_ClockConfig+0x1d4>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4618      	mov	r0, r3
 80062fc:	f7fb ff6a 	bl	80021d4 <HAL_InitTick>

  return HAL_OK;
 8006300:	2300      	movs	r3, #0
}
 8006302:	4618      	mov	r0, r3
 8006304:	3710      	adds	r7, #16
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}
 800630a:	bf00      	nop
 800630c:	40023c00 	.word	0x40023c00
 8006310:	40023800 	.word	0x40023800
 8006314:	080136b4 	.word	0x080136b4
 8006318:	20000004 	.word	0x20000004
 800631c:	2000000c 	.word	0x2000000c

08006320 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M7 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8006320:	b480      	push	{r7}
 8006322:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 8006324:	4b05      	ldr	r3, [pc, #20]	; (800633c <HAL_RCC_EnableCSS+0x1c>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a04      	ldr	r2, [pc, #16]	; (800633c <HAL_RCC_EnableCSS+0x1c>)
 800632a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800632e:	6013      	str	r3, [r2, #0]
}
 8006330:	bf00      	nop
 8006332:	46bd      	mov	sp, r7
 8006334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006338:	4770      	bx	lr
 800633a:	bf00      	nop
 800633c:	40023800 	.word	0x40023800

08006340 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006340:	b5b0      	push	{r4, r5, r7, lr}
 8006342:	b084      	sub	sp, #16
 8006344:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006346:	2100      	movs	r1, #0
 8006348:	6079      	str	r1, [r7, #4]
 800634a:	2100      	movs	r1, #0
 800634c:	60f9      	str	r1, [r7, #12]
 800634e:	2100      	movs	r1, #0
 8006350:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8006352:	2100      	movs	r1, #0
 8006354:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006356:	4952      	ldr	r1, [pc, #328]	; (80064a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8006358:	6889      	ldr	r1, [r1, #8]
 800635a:	f001 010c 	and.w	r1, r1, #12
 800635e:	2908      	cmp	r1, #8
 8006360:	d00d      	beq.n	800637e <HAL_RCC_GetSysClockFreq+0x3e>
 8006362:	2908      	cmp	r1, #8
 8006364:	f200 8094 	bhi.w	8006490 <HAL_RCC_GetSysClockFreq+0x150>
 8006368:	2900      	cmp	r1, #0
 800636a:	d002      	beq.n	8006372 <HAL_RCC_GetSysClockFreq+0x32>
 800636c:	2904      	cmp	r1, #4
 800636e:	d003      	beq.n	8006378 <HAL_RCC_GetSysClockFreq+0x38>
 8006370:	e08e      	b.n	8006490 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006372:	4b4c      	ldr	r3, [pc, #304]	; (80064a4 <HAL_RCC_GetSysClockFreq+0x164>)
 8006374:	60bb      	str	r3, [r7, #8]
      break;
 8006376:	e08e      	b.n	8006496 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006378:	4b4b      	ldr	r3, [pc, #300]	; (80064a8 <HAL_RCC_GetSysClockFreq+0x168>)
 800637a:	60bb      	str	r3, [r7, #8]
      break;
 800637c:	e08b      	b.n	8006496 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800637e:	4948      	ldr	r1, [pc, #288]	; (80064a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8006380:	6849      	ldr	r1, [r1, #4]
 8006382:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8006386:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006388:	4945      	ldr	r1, [pc, #276]	; (80064a0 <HAL_RCC_GetSysClockFreq+0x160>)
 800638a:	6849      	ldr	r1, [r1, #4]
 800638c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8006390:	2900      	cmp	r1, #0
 8006392:	d024      	beq.n	80063de <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006394:	4942      	ldr	r1, [pc, #264]	; (80064a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8006396:	6849      	ldr	r1, [r1, #4]
 8006398:	0989      	lsrs	r1, r1, #6
 800639a:	4608      	mov	r0, r1
 800639c:	f04f 0100 	mov.w	r1, #0
 80063a0:	f240 14ff 	movw	r4, #511	; 0x1ff
 80063a4:	f04f 0500 	mov.w	r5, #0
 80063a8:	ea00 0204 	and.w	r2, r0, r4
 80063ac:	ea01 0305 	and.w	r3, r1, r5
 80063b0:	493d      	ldr	r1, [pc, #244]	; (80064a8 <HAL_RCC_GetSysClockFreq+0x168>)
 80063b2:	fb01 f003 	mul.w	r0, r1, r3
 80063b6:	2100      	movs	r1, #0
 80063b8:	fb01 f102 	mul.w	r1, r1, r2
 80063bc:	1844      	adds	r4, r0, r1
 80063be:	493a      	ldr	r1, [pc, #232]	; (80064a8 <HAL_RCC_GetSysClockFreq+0x168>)
 80063c0:	fba2 0101 	umull	r0, r1, r2, r1
 80063c4:	1863      	adds	r3, r4, r1
 80063c6:	4619      	mov	r1, r3
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	461a      	mov	r2, r3
 80063cc:	f04f 0300 	mov.w	r3, #0
 80063d0:	f7fa f95a 	bl	8000688 <__aeabi_uldivmod>
 80063d4:	4602      	mov	r2, r0
 80063d6:	460b      	mov	r3, r1
 80063d8:	4613      	mov	r3, r2
 80063da:	60fb      	str	r3, [r7, #12]
 80063dc:	e04a      	b.n	8006474 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80063de:	4b30      	ldr	r3, [pc, #192]	; (80064a0 <HAL_RCC_GetSysClockFreq+0x160>)
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	099b      	lsrs	r3, r3, #6
 80063e4:	461a      	mov	r2, r3
 80063e6:	f04f 0300 	mov.w	r3, #0
 80063ea:	f240 10ff 	movw	r0, #511	; 0x1ff
 80063ee:	f04f 0100 	mov.w	r1, #0
 80063f2:	ea02 0400 	and.w	r4, r2, r0
 80063f6:	ea03 0501 	and.w	r5, r3, r1
 80063fa:	4620      	mov	r0, r4
 80063fc:	4629      	mov	r1, r5
 80063fe:	f04f 0200 	mov.w	r2, #0
 8006402:	f04f 0300 	mov.w	r3, #0
 8006406:	014b      	lsls	r3, r1, #5
 8006408:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800640c:	0142      	lsls	r2, r0, #5
 800640e:	4610      	mov	r0, r2
 8006410:	4619      	mov	r1, r3
 8006412:	1b00      	subs	r0, r0, r4
 8006414:	eb61 0105 	sbc.w	r1, r1, r5
 8006418:	f04f 0200 	mov.w	r2, #0
 800641c:	f04f 0300 	mov.w	r3, #0
 8006420:	018b      	lsls	r3, r1, #6
 8006422:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006426:	0182      	lsls	r2, r0, #6
 8006428:	1a12      	subs	r2, r2, r0
 800642a:	eb63 0301 	sbc.w	r3, r3, r1
 800642e:	f04f 0000 	mov.w	r0, #0
 8006432:	f04f 0100 	mov.w	r1, #0
 8006436:	00d9      	lsls	r1, r3, #3
 8006438:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800643c:	00d0      	lsls	r0, r2, #3
 800643e:	4602      	mov	r2, r0
 8006440:	460b      	mov	r3, r1
 8006442:	1912      	adds	r2, r2, r4
 8006444:	eb45 0303 	adc.w	r3, r5, r3
 8006448:	f04f 0000 	mov.w	r0, #0
 800644c:	f04f 0100 	mov.w	r1, #0
 8006450:	0299      	lsls	r1, r3, #10
 8006452:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006456:	0290      	lsls	r0, r2, #10
 8006458:	4602      	mov	r2, r0
 800645a:	460b      	mov	r3, r1
 800645c:	4610      	mov	r0, r2
 800645e:	4619      	mov	r1, r3
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	461a      	mov	r2, r3
 8006464:	f04f 0300 	mov.w	r3, #0
 8006468:	f7fa f90e 	bl	8000688 <__aeabi_uldivmod>
 800646c:	4602      	mov	r2, r0
 800646e:	460b      	mov	r3, r1
 8006470:	4613      	mov	r3, r2
 8006472:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006474:	4b0a      	ldr	r3, [pc, #40]	; (80064a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	0c1b      	lsrs	r3, r3, #16
 800647a:	f003 0303 	and.w	r3, r3, #3
 800647e:	3301      	adds	r3, #1
 8006480:	005b      	lsls	r3, r3, #1
 8006482:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8006484:	68fa      	ldr	r2, [r7, #12]
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	fbb2 f3f3 	udiv	r3, r2, r3
 800648c:	60bb      	str	r3, [r7, #8]
      break;
 800648e:	e002      	b.n	8006496 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006490:	4b04      	ldr	r3, [pc, #16]	; (80064a4 <HAL_RCC_GetSysClockFreq+0x164>)
 8006492:	60bb      	str	r3, [r7, #8]
      break;
 8006494:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006496:	68bb      	ldr	r3, [r7, #8]
}
 8006498:	4618      	mov	r0, r3
 800649a:	3710      	adds	r7, #16
 800649c:	46bd      	mov	sp, r7
 800649e:	bdb0      	pop	{r4, r5, r7, pc}
 80064a0:	40023800 	.word	0x40023800
 80064a4:	00f42400 	.word	0x00f42400
 80064a8:	017d7840 	.word	0x017d7840

080064ac <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80064ac:	b480      	push	{r7}
 80064ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80064b0:	4b03      	ldr	r3, [pc, #12]	; (80064c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80064b2:	681b      	ldr	r3, [r3, #0]
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr
 80064be:	bf00      	nop
 80064c0:	20000004 	.word	0x20000004

080064c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80064c8:	f7ff fff0 	bl	80064ac <HAL_RCC_GetHCLKFreq>
 80064cc:	4602      	mov	r2, r0
 80064ce:	4b05      	ldr	r3, [pc, #20]	; (80064e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	0a9b      	lsrs	r3, r3, #10
 80064d4:	f003 0307 	and.w	r3, r3, #7
 80064d8:	4903      	ldr	r1, [pc, #12]	; (80064e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80064da:	5ccb      	ldrb	r3, [r1, r3]
 80064dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	bd80      	pop	{r7, pc}
 80064e4:	40023800 	.word	0x40023800
 80064e8:	080136c4 	.word	0x080136c4

080064ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80064f0:	f7ff ffdc 	bl	80064ac <HAL_RCC_GetHCLKFreq>
 80064f4:	4602      	mov	r2, r0
 80064f6:	4b05      	ldr	r3, [pc, #20]	; (800650c <HAL_RCC_GetPCLK2Freq+0x20>)
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	0b5b      	lsrs	r3, r3, #13
 80064fc:	f003 0307 	and.w	r3, r3, #7
 8006500:	4903      	ldr	r1, [pc, #12]	; (8006510 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006502:	5ccb      	ldrb	r3, [r1, r3]
 8006504:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006508:	4618      	mov	r0, r3
 800650a:	bd80      	pop	{r7, pc}
 800650c:	40023800 	.word	0x40023800
 8006510:	080136c4 	.word	0x080136c4

08006514 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8006518:	4b06      	ldr	r3, [pc, #24]	; (8006534 <HAL_RCC_NMI_IRQHandler+0x20>)
 800651a:	68db      	ldr	r3, [r3, #12]
 800651c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006520:	2b80      	cmp	r3, #128	; 0x80
 8006522:	d104      	bne.n	800652e <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8006524:	f000 f80a 	bl	800653c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8006528:	4b03      	ldr	r3, [pc, #12]	; (8006538 <HAL_RCC_NMI_IRQHandler+0x24>)
 800652a:	2280      	movs	r2, #128	; 0x80
 800652c:	701a      	strb	r2, [r3, #0]
  }
}
 800652e:	bf00      	nop
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop
 8006534:	40023800 	.word	0x40023800
 8006538:	4002380e 	.word	0x4002380e

0800653c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800653c:	b480      	push	{r7}
 800653e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8006540:	bf00      	nop
 8006542:	46bd      	mov	sp, r7
 8006544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006548:	4770      	bx	lr
	...

0800654c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b088      	sub	sp, #32
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006554:	2300      	movs	r3, #0
 8006556:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006558:	2300      	movs	r3, #0
 800655a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800655c:	2300      	movs	r3, #0
 800655e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006560:	2300      	movs	r3, #0
 8006562:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006564:	2300      	movs	r3, #0
 8006566:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f003 0301 	and.w	r3, r3, #1
 8006570:	2b00      	cmp	r3, #0
 8006572:	d012      	beq.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006574:	4b69      	ldr	r3, [pc, #420]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	4a68      	ldr	r2, [pc, #416]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800657a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800657e:	6093      	str	r3, [r2, #8]
 8006580:	4b66      	ldr	r3, [pc, #408]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006582:	689a      	ldr	r2, [r3, #8]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006588:	4964      	ldr	r1, [pc, #400]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800658a:	4313      	orrs	r3, r2
 800658c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006592:	2b00      	cmp	r3, #0
 8006594:	d101      	bne.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006596:	2301      	movs	r3, #1
 8006598:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d017      	beq.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80065a6:	4b5d      	ldr	r3, [pc, #372]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065b4:	4959      	ldr	r1, [pc, #356]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065b6:	4313      	orrs	r3, r2
 80065b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065c4:	d101      	bne.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80065c6:	2301      	movs	r3, #1
 80065c8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d101      	bne.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80065d2:	2301      	movs	r3, #1
 80065d4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d017      	beq.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80065e2:	4b4e      	ldr	r3, [pc, #312]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065e8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065f0:	494a      	ldr	r1, [pc, #296]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065f2:	4313      	orrs	r3, r2
 80065f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006600:	d101      	bne.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006602:	2301      	movs	r3, #1
 8006604:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800660a:	2b00      	cmp	r3, #0
 800660c:	d101      	bne.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800660e:	2301      	movs	r3, #1
 8006610:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800661a:	2b00      	cmp	r3, #0
 800661c:	d001      	beq.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800661e:	2301      	movs	r3, #1
 8006620:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f003 0320 	and.w	r3, r3, #32
 800662a:	2b00      	cmp	r3, #0
 800662c:	f000 808b 	beq.w	8006746 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006630:	4b3a      	ldr	r3, [pc, #232]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006634:	4a39      	ldr	r2, [pc, #228]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006636:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800663a:	6413      	str	r3, [r2, #64]	; 0x40
 800663c:	4b37      	ldr	r3, [pc, #220]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800663e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006640:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006644:	60bb      	str	r3, [r7, #8]
 8006646:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006648:	4b35      	ldr	r3, [pc, #212]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a34      	ldr	r2, [pc, #208]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800664e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006652:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006654:	f7fb fe02 	bl	800225c <HAL_GetTick>
 8006658:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800665a:	e008      	b.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800665c:	f7fb fdfe 	bl	800225c <HAL_GetTick>
 8006660:	4602      	mov	r2, r0
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	1ad3      	subs	r3, r2, r3
 8006666:	2b64      	cmp	r3, #100	; 0x64
 8006668:	d901      	bls.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800666a:	2303      	movs	r3, #3
 800666c:	e38f      	b.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800666e:	4b2c      	ldr	r3, [pc, #176]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006676:	2b00      	cmp	r3, #0
 8006678:	d0f0      	beq.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800667a:	4b28      	ldr	r3, [pc, #160]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800667c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800667e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006682:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d035      	beq.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800668e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006692:	693a      	ldr	r2, [r7, #16]
 8006694:	429a      	cmp	r2, r3
 8006696:	d02e      	beq.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006698:	4b20      	ldr	r3, [pc, #128]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800669a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800669c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066a0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80066a2:	4b1e      	ldr	r3, [pc, #120]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066a6:	4a1d      	ldr	r2, [pc, #116]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066ac:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80066ae:	4b1b      	ldr	r3, [pc, #108]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066b2:	4a1a      	ldr	r2, [pc, #104]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066b8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80066ba:	4a18      	ldr	r2, [pc, #96]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80066c0:	4b16      	ldr	r3, [pc, #88]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066c4:	f003 0301 	and.w	r3, r3, #1
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d114      	bne.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066cc:	f7fb fdc6 	bl	800225c <HAL_GetTick>
 80066d0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066d2:	e00a      	b.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066d4:	f7fb fdc2 	bl	800225c <HAL_GetTick>
 80066d8:	4602      	mov	r2, r0
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	1ad3      	subs	r3, r2, r3
 80066de:	f241 3288 	movw	r2, #5000	; 0x1388
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d901      	bls.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80066e6:	2303      	movs	r3, #3
 80066e8:	e351      	b.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066ea:	4b0c      	ldr	r3, [pc, #48]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066ee:	f003 0302 	and.w	r3, r3, #2
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d0ee      	beq.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006702:	d111      	bne.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006704:	4b05      	ldr	r3, [pc, #20]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006706:	689b      	ldr	r3, [r3, #8]
 8006708:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006710:	4b04      	ldr	r3, [pc, #16]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006712:	400b      	ands	r3, r1
 8006714:	4901      	ldr	r1, [pc, #4]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006716:	4313      	orrs	r3, r2
 8006718:	608b      	str	r3, [r1, #8]
 800671a:	e00b      	b.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800671c:	40023800 	.word	0x40023800
 8006720:	40007000 	.word	0x40007000
 8006724:	0ffffcff 	.word	0x0ffffcff
 8006728:	4bb3      	ldr	r3, [pc, #716]	; (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	4ab2      	ldr	r2, [pc, #712]	; (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800672e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006732:	6093      	str	r3, [r2, #8]
 8006734:	4bb0      	ldr	r3, [pc, #704]	; (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006736:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800673c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006740:	49ad      	ldr	r1, [pc, #692]	; (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006742:	4313      	orrs	r3, r2
 8006744:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f003 0310 	and.w	r3, r3, #16
 800674e:	2b00      	cmp	r3, #0
 8006750:	d010      	beq.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006752:	4ba9      	ldr	r3, [pc, #676]	; (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006754:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006758:	4aa7      	ldr	r2, [pc, #668]	; (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800675a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800675e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006762:	4ba5      	ldr	r3, [pc, #660]	; (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006764:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800676c:	49a2      	ldr	r1, [pc, #648]	; (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800676e:	4313      	orrs	r3, r2
 8006770:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800677c:	2b00      	cmp	r3, #0
 800677e:	d00a      	beq.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006780:	4b9d      	ldr	r3, [pc, #628]	; (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006786:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800678e:	499a      	ldr	r1, [pc, #616]	; (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006790:	4313      	orrs	r3, r2
 8006792:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d00a      	beq.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80067a2:	4b95      	ldr	r3, [pc, #596]	; (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80067a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067a8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067b0:	4991      	ldr	r1, [pc, #580]	; (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80067b2:	4313      	orrs	r3, r2
 80067b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d00a      	beq.n	80067da <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80067c4:	4b8c      	ldr	r3, [pc, #560]	; (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80067c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067d2:	4989      	ldr	r1, [pc, #548]	; (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80067d4:	4313      	orrs	r3, r2
 80067d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d00a      	beq.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80067e6:	4b84      	ldr	r3, [pc, #528]	; (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80067e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067ec:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067f4:	4980      	ldr	r1, [pc, #512]	; (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80067f6:	4313      	orrs	r3, r2
 80067f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006804:	2b00      	cmp	r3, #0
 8006806:	d00a      	beq.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006808:	4b7b      	ldr	r3, [pc, #492]	; (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800680a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800680e:	f023 0203 	bic.w	r2, r3, #3
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006816:	4978      	ldr	r1, [pc, #480]	; (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006818:	4313      	orrs	r3, r2
 800681a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006826:	2b00      	cmp	r3, #0
 8006828:	d00a      	beq.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800682a:	4b73      	ldr	r3, [pc, #460]	; (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800682c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006830:	f023 020c 	bic.w	r2, r3, #12
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006838:	496f      	ldr	r1, [pc, #444]	; (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800683a:	4313      	orrs	r3, r2
 800683c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006848:	2b00      	cmp	r3, #0
 800684a:	d00a      	beq.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800684c:	4b6a      	ldr	r3, [pc, #424]	; (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800684e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006852:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800685a:	4967      	ldr	r1, [pc, #412]	; (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800685c:	4313      	orrs	r3, r2
 800685e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800686a:	2b00      	cmp	r3, #0
 800686c:	d00a      	beq.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800686e:	4b62      	ldr	r3, [pc, #392]	; (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006870:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006874:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800687c:	495e      	ldr	r1, [pc, #376]	; (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800687e:	4313      	orrs	r3, r2
 8006880:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800688c:	2b00      	cmp	r3, #0
 800688e:	d00a      	beq.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006890:	4b59      	ldr	r3, [pc, #356]	; (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006896:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800689e:	4956      	ldr	r1, [pc, #344]	; (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80068a0:	4313      	orrs	r3, r2
 80068a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d00a      	beq.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80068b2:	4b51      	ldr	r3, [pc, #324]	; (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80068b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068b8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068c0:	494d      	ldr	r1, [pc, #308]	; (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80068c2:	4313      	orrs	r3, r2
 80068c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d00a      	beq.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80068d4:	4b48      	ldr	r3, [pc, #288]	; (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80068d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068da:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068e2:	4945      	ldr	r1, [pc, #276]	; (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80068e4:	4313      	orrs	r3, r2
 80068e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d00a      	beq.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80068f6:	4b40      	ldr	r3, [pc, #256]	; (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80068f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068fc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006904:	493c      	ldr	r1, [pc, #240]	; (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006906:	4313      	orrs	r3, r2
 8006908:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006914:	2b00      	cmp	r3, #0
 8006916:	d00a      	beq.n	800692e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006918:	4b37      	ldr	r3, [pc, #220]	; (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800691a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800691e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006926:	4934      	ldr	r1, [pc, #208]	; (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006928:	4313      	orrs	r3, r2
 800692a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006936:	2b00      	cmp	r3, #0
 8006938:	d011      	beq.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800693a:	4b2f      	ldr	r3, [pc, #188]	; (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800693c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006940:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006948:	492b      	ldr	r1, [pc, #172]	; (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800694a:	4313      	orrs	r3, r2
 800694c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006954:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006958:	d101      	bne.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800695a:	2301      	movs	r3, #1
 800695c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f003 0308 	and.w	r3, r3, #8
 8006966:	2b00      	cmp	r3, #0
 8006968:	d001      	beq.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800696a:	2301      	movs	r3, #1
 800696c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006976:	2b00      	cmp	r3, #0
 8006978:	d00a      	beq.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800697a:	4b1f      	ldr	r3, [pc, #124]	; (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800697c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006980:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006988:	491b      	ldr	r1, [pc, #108]	; (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800698a:	4313      	orrs	r3, r2
 800698c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006998:	2b00      	cmp	r3, #0
 800699a:	d00b      	beq.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800699c:	4b16      	ldr	r3, [pc, #88]	; (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800699e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069a2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069ac:	4912      	ldr	r1, [pc, #72]	; (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80069ae:	4313      	orrs	r3, r2
 80069b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d00b      	beq.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80069c0:	4b0d      	ldr	r3, [pc, #52]	; (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80069c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069c6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069d0:	4909      	ldr	r1, [pc, #36]	; (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80069d2:	4313      	orrs	r3, r2
 80069d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d00f      	beq.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80069e4:	4b04      	ldr	r3, [pc, #16]	; (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80069e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069ea:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069f4:	e002      	b.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80069f6:	bf00      	nop
 80069f8:	40023800 	.word	0x40023800
 80069fc:	4986      	ldr	r1, [pc, #536]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80069fe:	4313      	orrs	r3, r2
 8006a00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d00b      	beq.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006a10:	4b81      	ldr	r3, [pc, #516]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006a12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a16:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a20:	497d      	ldr	r1, [pc, #500]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006a22:	4313      	orrs	r3, r2
 8006a24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006a28:	69fb      	ldr	r3, [r7, #28]
 8006a2a:	2b01      	cmp	r3, #1
 8006a2c:	d006      	beq.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	f000 80d6 	beq.w	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006a3c:	4b76      	ldr	r3, [pc, #472]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a75      	ldr	r2, [pc, #468]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006a42:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006a46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a48:	f7fb fc08 	bl	800225c <HAL_GetTick>
 8006a4c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006a4e:	e008      	b.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006a50:	f7fb fc04 	bl	800225c <HAL_GetTick>
 8006a54:	4602      	mov	r2, r0
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	1ad3      	subs	r3, r2, r3
 8006a5a:	2b64      	cmp	r3, #100	; 0x64
 8006a5c:	d901      	bls.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006a5e:	2303      	movs	r3, #3
 8006a60:	e195      	b.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006a62:	4b6d      	ldr	r3, [pc, #436]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d1f0      	bne.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f003 0301 	and.w	r3, r3, #1
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d021      	beq.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x572>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d11d      	bne.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006a82:	4b65      	ldr	r3, [pc, #404]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006a84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a88:	0c1b      	lsrs	r3, r3, #16
 8006a8a:	f003 0303 	and.w	r3, r3, #3
 8006a8e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006a90:	4b61      	ldr	r3, [pc, #388]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006a92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a96:	0e1b      	lsrs	r3, r3, #24
 8006a98:	f003 030f 	and.w	r3, r3, #15
 8006a9c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	019a      	lsls	r2, r3, #6
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	041b      	lsls	r3, r3, #16
 8006aa8:	431a      	orrs	r2, r3
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	061b      	lsls	r3, r3, #24
 8006aae:	431a      	orrs	r2, r3
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	071b      	lsls	r3, r3, #28
 8006ab6:	4958      	ldr	r1, [pc, #352]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d004      	beq.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ace:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ad2:	d00a      	beq.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d02e      	beq.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ae8:	d129      	bne.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006aea:	4b4b      	ldr	r3, [pc, #300]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006aec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006af0:	0c1b      	lsrs	r3, r3, #16
 8006af2:	f003 0303 	and.w	r3, r3, #3
 8006af6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006af8:	4b47      	ldr	r3, [pc, #284]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006afa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006afe:	0f1b      	lsrs	r3, r3, #28
 8006b00:	f003 0307 	and.w	r3, r3, #7
 8006b04:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	019a      	lsls	r2, r3, #6
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	041b      	lsls	r3, r3, #16
 8006b10:	431a      	orrs	r2, r3
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	68db      	ldr	r3, [r3, #12]
 8006b16:	061b      	lsls	r3, r3, #24
 8006b18:	431a      	orrs	r2, r3
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	071b      	lsls	r3, r3, #28
 8006b1e:	493e      	ldr	r1, [pc, #248]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006b20:	4313      	orrs	r3, r2
 8006b22:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006b26:	4b3c      	ldr	r3, [pc, #240]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006b28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b2c:	f023 021f 	bic.w	r2, r3, #31
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b34:	3b01      	subs	r3, #1
 8006b36:	4938      	ldr	r1, [pc, #224]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d01d      	beq.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006b4a:	4b33      	ldr	r3, [pc, #204]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006b4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b50:	0e1b      	lsrs	r3, r3, #24
 8006b52:	f003 030f 	and.w	r3, r3, #15
 8006b56:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006b58:	4b2f      	ldr	r3, [pc, #188]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006b5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b5e:	0f1b      	lsrs	r3, r3, #28
 8006b60:	f003 0307 	and.w	r3, r3, #7
 8006b64:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	019a      	lsls	r2, r3, #6
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	691b      	ldr	r3, [r3, #16]
 8006b70:	041b      	lsls	r3, r3, #16
 8006b72:	431a      	orrs	r2, r3
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	061b      	lsls	r3, r3, #24
 8006b78:	431a      	orrs	r2, r3
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	071b      	lsls	r3, r3, #28
 8006b7e:	4926      	ldr	r1, [pc, #152]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006b80:	4313      	orrs	r3, r2
 8006b82:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d011      	beq.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	019a      	lsls	r2, r3, #6
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	691b      	ldr	r3, [r3, #16]
 8006b9c:	041b      	lsls	r3, r3, #16
 8006b9e:	431a      	orrs	r2, r3
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	68db      	ldr	r3, [r3, #12]
 8006ba4:	061b      	lsls	r3, r3, #24
 8006ba6:	431a      	orrs	r2, r3
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	689b      	ldr	r3, [r3, #8]
 8006bac:	071b      	lsls	r3, r3, #28
 8006bae:	491a      	ldr	r1, [pc, #104]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006bb6:	4b18      	ldr	r3, [pc, #96]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a17      	ldr	r2, [pc, #92]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006bbc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006bc0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bc2:	f7fb fb4b 	bl	800225c <HAL_GetTick>
 8006bc6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006bc8:	e008      	b.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006bca:	f7fb fb47 	bl	800225c <HAL_GetTick>
 8006bce:	4602      	mov	r2, r0
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	1ad3      	subs	r3, r2, r3
 8006bd4:	2b64      	cmp	r3, #100	; 0x64
 8006bd6:	d901      	bls.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006bd8:	2303      	movs	r3, #3
 8006bda:	e0d8      	b.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006bdc:	4b0e      	ldr	r3, [pc, #56]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d0f0      	beq.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006be8:	69bb      	ldr	r3, [r7, #24]
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	f040 80ce 	bne.w	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006bf0:	4b09      	ldr	r3, [pc, #36]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a08      	ldr	r2, [pc, #32]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006bf6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006bfa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bfc:	f7fb fb2e 	bl	800225c <HAL_GetTick>
 8006c00:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006c02:	e00b      	b.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006c04:	f7fb fb2a 	bl	800225c <HAL_GetTick>
 8006c08:	4602      	mov	r2, r0
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	1ad3      	subs	r3, r2, r3
 8006c0e:	2b64      	cmp	r3, #100	; 0x64
 8006c10:	d904      	bls.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c12:	2303      	movs	r3, #3
 8006c14:	e0bb      	b.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8006c16:	bf00      	nop
 8006c18:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006c1c:	4b5e      	ldr	r3, [pc, #376]	; (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c28:	d0ec      	beq.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d003      	beq.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d009      	beq.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d02e      	beq.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d12a      	bne.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006c52:	4b51      	ldr	r3, [pc, #324]	; (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c58:	0c1b      	lsrs	r3, r3, #16
 8006c5a:	f003 0303 	and.w	r3, r3, #3
 8006c5e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006c60:	4b4d      	ldr	r3, [pc, #308]	; (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c66:	0f1b      	lsrs	r3, r3, #28
 8006c68:	f003 0307 	and.w	r3, r3, #7
 8006c6c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	695b      	ldr	r3, [r3, #20]
 8006c72:	019a      	lsls	r2, r3, #6
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	041b      	lsls	r3, r3, #16
 8006c78:	431a      	orrs	r2, r3
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	699b      	ldr	r3, [r3, #24]
 8006c7e:	061b      	lsls	r3, r3, #24
 8006c80:	431a      	orrs	r2, r3
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	071b      	lsls	r3, r3, #28
 8006c86:	4944      	ldr	r1, [pc, #272]	; (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006c8e:	4b42      	ldr	r3, [pc, #264]	; (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006c90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c94:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c9c:	3b01      	subs	r3, #1
 8006c9e:	021b      	lsls	r3, r3, #8
 8006ca0:	493d      	ldr	r1, [pc, #244]	; (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d022      	beq.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006cb8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006cbc:	d11d      	bne.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006cbe:	4b36      	ldr	r3, [pc, #216]	; (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cc4:	0e1b      	lsrs	r3, r3, #24
 8006cc6:	f003 030f 	and.w	r3, r3, #15
 8006cca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006ccc:	4b32      	ldr	r3, [pc, #200]	; (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cd2:	0f1b      	lsrs	r3, r3, #28
 8006cd4:	f003 0307 	and.w	r3, r3, #7
 8006cd8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	695b      	ldr	r3, [r3, #20]
 8006cde:	019a      	lsls	r2, r3, #6
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6a1b      	ldr	r3, [r3, #32]
 8006ce4:	041b      	lsls	r3, r3, #16
 8006ce6:	431a      	orrs	r2, r3
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	061b      	lsls	r3, r3, #24
 8006cec:	431a      	orrs	r2, r3
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	071b      	lsls	r3, r3, #28
 8006cf2:	4929      	ldr	r1, [pc, #164]	; (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f003 0308 	and.w	r3, r3, #8
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d028      	beq.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006d06:	4b24      	ldr	r3, [pc, #144]	; (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d0c:	0e1b      	lsrs	r3, r3, #24
 8006d0e:	f003 030f 	and.w	r3, r3, #15
 8006d12:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006d14:	4b20      	ldr	r3, [pc, #128]	; (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d1a:	0c1b      	lsrs	r3, r3, #16
 8006d1c:	f003 0303 	and.w	r3, r3, #3
 8006d20:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	695b      	ldr	r3, [r3, #20]
 8006d26:	019a      	lsls	r2, r3, #6
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	041b      	lsls	r3, r3, #16
 8006d2c:	431a      	orrs	r2, r3
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	061b      	lsls	r3, r3, #24
 8006d32:	431a      	orrs	r2, r3
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	69db      	ldr	r3, [r3, #28]
 8006d38:	071b      	lsls	r3, r3, #28
 8006d3a:	4917      	ldr	r1, [pc, #92]	; (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006d42:	4b15      	ldr	r3, [pc, #84]	; (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006d44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d48:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d50:	4911      	ldr	r1, [pc, #68]	; (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006d52:	4313      	orrs	r3, r2
 8006d54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006d58:	4b0f      	ldr	r3, [pc, #60]	; (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a0e      	ldr	r2, [pc, #56]	; (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006d5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d64:	f7fb fa7a 	bl	800225c <HAL_GetTick>
 8006d68:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006d6a:	e008      	b.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006d6c:	f7fb fa76 	bl	800225c <HAL_GetTick>
 8006d70:	4602      	mov	r2, r0
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	1ad3      	subs	r3, r2, r3
 8006d76:	2b64      	cmp	r3, #100	; 0x64
 8006d78:	d901      	bls.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006d7a:	2303      	movs	r3, #3
 8006d7c:	e007      	b.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006d7e:	4b06      	ldr	r3, [pc, #24]	; (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d8a:	d1ef      	bne.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8006d8c:	2300      	movs	r3, #0
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3720      	adds	r7, #32
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}
 8006d96:	bf00      	nop
 8006d98:	40023800 	.word	0x40023800

08006d9c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b084      	sub	sp, #16
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d101      	bne.n	8006dae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006daa:	2301      	movs	r3, #1
 8006dac:	e09d      	b.n	8006eea <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d108      	bne.n	8006dc8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006dbe:	d009      	beq.n	8006dd4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	61da      	str	r2, [r3, #28]
 8006dc6:	e005      	b.n	8006dd4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006de0:	b2db      	uxtb	r3, r3
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d106      	bne.n	8006df4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2200      	movs	r2, #0
 8006dea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f7fa fdce 	bl	8001990 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2202      	movs	r2, #2
 8006df8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	681a      	ldr	r2, [r3, #0]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e0a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	68db      	ldr	r3, [r3, #12]
 8006e10:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006e14:	d902      	bls.n	8006e1c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006e16:	2300      	movs	r3, #0
 8006e18:	60fb      	str	r3, [r7, #12]
 8006e1a:	e002      	b.n	8006e22 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006e1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006e20:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	68db      	ldr	r3, [r3, #12]
 8006e26:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006e2a:	d007      	beq.n	8006e3c <HAL_SPI_Init+0xa0>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	68db      	ldr	r3, [r3, #12]
 8006e30:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006e34:	d002      	beq.n	8006e3c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006e4c:	431a      	orrs	r2, r3
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	691b      	ldr	r3, [r3, #16]
 8006e52:	f003 0302 	and.w	r3, r3, #2
 8006e56:	431a      	orrs	r2, r3
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	695b      	ldr	r3, [r3, #20]
 8006e5c:	f003 0301 	and.w	r3, r3, #1
 8006e60:	431a      	orrs	r2, r3
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	699b      	ldr	r3, [r3, #24]
 8006e66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e6a:	431a      	orrs	r2, r3
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	69db      	ldr	r3, [r3, #28]
 8006e70:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e74:	431a      	orrs	r2, r3
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6a1b      	ldr	r3, [r3, #32]
 8006e7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e7e:	ea42 0103 	orr.w	r1, r2, r3
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e86:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	430a      	orrs	r2, r1
 8006e90:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	699b      	ldr	r3, [r3, #24]
 8006e96:	0c1b      	lsrs	r3, r3, #16
 8006e98:	f003 0204 	and.w	r2, r3, #4
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea0:	f003 0310 	and.w	r3, r3, #16
 8006ea4:	431a      	orrs	r2, r3
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eaa:	f003 0308 	and.w	r3, r3, #8
 8006eae:	431a      	orrs	r2, r3
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	68db      	ldr	r3, [r3, #12]
 8006eb4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006eb8:	ea42 0103 	orr.w	r1, r2, r3
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	430a      	orrs	r2, r1
 8006ec8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	69da      	ldr	r2, [r3, #28]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ed8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2200      	movs	r2, #0
 8006ede:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006ee8:	2300      	movs	r3, #0
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3710      	adds	r7, #16
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}

08006ef2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006ef2:	b580      	push	{r7, lr}
 8006ef4:	b08a      	sub	sp, #40	; 0x28
 8006ef6:	af00      	add	r7, sp, #0
 8006ef8:	60f8      	str	r0, [r7, #12]
 8006efa:	60b9      	str	r1, [r7, #8]
 8006efc:	607a      	str	r2, [r7, #4]
 8006efe:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006f00:	2301      	movs	r3, #1
 8006f02:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006f04:	2300      	movs	r3, #0
 8006f06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d101      	bne.n	8006f18 <HAL_SPI_TransmitReceive+0x26>
 8006f14:	2302      	movs	r3, #2
 8006f16:	e1fb      	b.n	8007310 <HAL_SPI_TransmitReceive+0x41e>
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f20:	f7fb f99c 	bl	800225c <HAL_GetTick>
 8006f24:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006f2c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006f34:	887b      	ldrh	r3, [r7, #2]
 8006f36:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006f38:	887b      	ldrh	r3, [r7, #2]
 8006f3a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006f3c:	7efb      	ldrb	r3, [r7, #27]
 8006f3e:	2b01      	cmp	r3, #1
 8006f40:	d00e      	beq.n	8006f60 <HAL_SPI_TransmitReceive+0x6e>
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f48:	d106      	bne.n	8006f58 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	689b      	ldr	r3, [r3, #8]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d102      	bne.n	8006f58 <HAL_SPI_TransmitReceive+0x66>
 8006f52:	7efb      	ldrb	r3, [r7, #27]
 8006f54:	2b04      	cmp	r3, #4
 8006f56:	d003      	beq.n	8006f60 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006f58:	2302      	movs	r3, #2
 8006f5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006f5e:	e1cd      	b.n	80072fc <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d005      	beq.n	8006f72 <HAL_SPI_TransmitReceive+0x80>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d002      	beq.n	8006f72 <HAL_SPI_TransmitReceive+0x80>
 8006f6c:	887b      	ldrh	r3, [r7, #2]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d103      	bne.n	8006f7a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006f72:	2301      	movs	r3, #1
 8006f74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006f78:	e1c0      	b.n	80072fc <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006f80:	b2db      	uxtb	r3, r3
 8006f82:	2b04      	cmp	r3, #4
 8006f84:	d003      	beq.n	8006f8e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2205      	movs	r2, #5
 8006f8a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2200      	movs	r2, #0
 8006f92:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	687a      	ldr	r2, [r7, #4]
 8006f98:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	887a      	ldrh	r2, [r7, #2]
 8006f9e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	887a      	ldrh	r2, [r7, #2]
 8006fa6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	68ba      	ldr	r2, [r7, #8]
 8006fae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	887a      	ldrh	r2, [r7, #2]
 8006fb4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	887a      	ldrh	r2, [r7, #2]
 8006fba:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	68db      	ldr	r3, [r3, #12]
 8006fcc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006fd0:	d802      	bhi.n	8006fd8 <HAL_SPI_TransmitReceive+0xe6>
 8006fd2:	8a3b      	ldrh	r3, [r7, #16]
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d908      	bls.n	8006fea <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	685a      	ldr	r2, [r3, #4]
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006fe6:	605a      	str	r2, [r3, #4]
 8006fe8:	e007      	b.n	8006ffa <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	685a      	ldr	r2, [r3, #4]
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006ff8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007004:	2b40      	cmp	r3, #64	; 0x40
 8007006:	d007      	beq.n	8007018 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	681a      	ldr	r2, [r3, #0]
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007016:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	68db      	ldr	r3, [r3, #12]
 800701c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007020:	d97c      	bls.n	800711c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d002      	beq.n	8007030 <HAL_SPI_TransmitReceive+0x13e>
 800702a:	8a7b      	ldrh	r3, [r7, #18]
 800702c:	2b01      	cmp	r3, #1
 800702e:	d169      	bne.n	8007104 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007034:	881a      	ldrh	r2, [r3, #0]
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007040:	1c9a      	adds	r2, r3, #2
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800704a:	b29b      	uxth	r3, r3
 800704c:	3b01      	subs	r3, #1
 800704e:	b29a      	uxth	r2, r3
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007054:	e056      	b.n	8007104 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	f003 0302 	and.w	r3, r3, #2
 8007060:	2b02      	cmp	r3, #2
 8007062:	d11b      	bne.n	800709c <HAL_SPI_TransmitReceive+0x1aa>
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007068:	b29b      	uxth	r3, r3
 800706a:	2b00      	cmp	r3, #0
 800706c:	d016      	beq.n	800709c <HAL_SPI_TransmitReceive+0x1aa>
 800706e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007070:	2b01      	cmp	r3, #1
 8007072:	d113      	bne.n	800709c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007078:	881a      	ldrh	r2, [r3, #0]
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007084:	1c9a      	adds	r2, r3, #2
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800708e:	b29b      	uxth	r3, r3
 8007090:	3b01      	subs	r3, #1
 8007092:	b29a      	uxth	r2, r3
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007098:	2300      	movs	r3, #0
 800709a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	f003 0301 	and.w	r3, r3, #1
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	d11c      	bne.n	80070e4 <HAL_SPI_TransmitReceive+0x1f2>
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80070b0:	b29b      	uxth	r3, r3
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d016      	beq.n	80070e4 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	68da      	ldr	r2, [r3, #12]
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070c0:	b292      	uxth	r2, r2
 80070c2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070c8:	1c9a      	adds	r2, r3, #2
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80070d4:	b29b      	uxth	r3, r3
 80070d6:	3b01      	subs	r3, #1
 80070d8:	b29a      	uxth	r2, r3
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80070e0:	2301      	movs	r3, #1
 80070e2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80070e4:	f7fb f8ba 	bl	800225c <HAL_GetTick>
 80070e8:	4602      	mov	r2, r0
 80070ea:	69fb      	ldr	r3, [r7, #28]
 80070ec:	1ad3      	subs	r3, r2, r3
 80070ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070f0:	429a      	cmp	r2, r3
 80070f2:	d807      	bhi.n	8007104 <HAL_SPI_TransmitReceive+0x212>
 80070f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070fa:	d003      	beq.n	8007104 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80070fc:	2303      	movs	r3, #3
 80070fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007102:	e0fb      	b.n	80072fc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007108:	b29b      	uxth	r3, r3
 800710a:	2b00      	cmp	r3, #0
 800710c:	d1a3      	bne.n	8007056 <HAL_SPI_TransmitReceive+0x164>
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007114:	b29b      	uxth	r3, r3
 8007116:	2b00      	cmp	r3, #0
 8007118:	d19d      	bne.n	8007056 <HAL_SPI_TransmitReceive+0x164>
 800711a:	e0df      	b.n	80072dc <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d003      	beq.n	800712c <HAL_SPI_TransmitReceive+0x23a>
 8007124:	8a7b      	ldrh	r3, [r7, #18]
 8007126:	2b01      	cmp	r3, #1
 8007128:	f040 80cb 	bne.w	80072c2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007130:	b29b      	uxth	r3, r3
 8007132:	2b01      	cmp	r3, #1
 8007134:	d912      	bls.n	800715c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800713a:	881a      	ldrh	r2, [r3, #0]
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007146:	1c9a      	adds	r2, r3, #2
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007150:	b29b      	uxth	r3, r3
 8007152:	3b02      	subs	r3, #2
 8007154:	b29a      	uxth	r2, r3
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	87da      	strh	r2, [r3, #62]	; 0x3e
 800715a:	e0b2      	b.n	80072c2 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	330c      	adds	r3, #12
 8007166:	7812      	ldrb	r2, [r2, #0]
 8007168:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800716e:	1c5a      	adds	r2, r3, #1
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007178:	b29b      	uxth	r3, r3
 800717a:	3b01      	subs	r3, #1
 800717c:	b29a      	uxth	r2, r3
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007182:	e09e      	b.n	80072c2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	f003 0302 	and.w	r3, r3, #2
 800718e:	2b02      	cmp	r3, #2
 8007190:	d134      	bne.n	80071fc <HAL_SPI_TransmitReceive+0x30a>
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007196:	b29b      	uxth	r3, r3
 8007198:	2b00      	cmp	r3, #0
 800719a:	d02f      	beq.n	80071fc <HAL_SPI_TransmitReceive+0x30a>
 800719c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800719e:	2b01      	cmp	r3, #1
 80071a0:	d12c      	bne.n	80071fc <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	2b01      	cmp	r3, #1
 80071aa:	d912      	bls.n	80071d2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071b0:	881a      	ldrh	r2, [r3, #0]
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071bc:	1c9a      	adds	r2, r3, #2
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071c6:	b29b      	uxth	r3, r3
 80071c8:	3b02      	subs	r3, #2
 80071ca:	b29a      	uxth	r2, r3
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	87da      	strh	r2, [r3, #62]	; 0x3e
 80071d0:	e012      	b.n	80071f8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	330c      	adds	r3, #12
 80071dc:	7812      	ldrb	r2, [r2, #0]
 80071de:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071e4:	1c5a      	adds	r2, r3, #1
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071ee:	b29b      	uxth	r3, r3
 80071f0:	3b01      	subs	r3, #1
 80071f2:	b29a      	uxth	r2, r3
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80071f8:	2300      	movs	r3, #0
 80071fa:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	689b      	ldr	r3, [r3, #8]
 8007202:	f003 0301 	and.w	r3, r3, #1
 8007206:	2b01      	cmp	r3, #1
 8007208:	d148      	bne.n	800729c <HAL_SPI_TransmitReceive+0x3aa>
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007210:	b29b      	uxth	r3, r3
 8007212:	2b00      	cmp	r3, #0
 8007214:	d042      	beq.n	800729c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800721c:	b29b      	uxth	r3, r3
 800721e:	2b01      	cmp	r3, #1
 8007220:	d923      	bls.n	800726a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	68da      	ldr	r2, [r3, #12]
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800722c:	b292      	uxth	r2, r2
 800722e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007234:	1c9a      	adds	r2, r3, #2
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007240:	b29b      	uxth	r3, r3
 8007242:	3b02      	subs	r3, #2
 8007244:	b29a      	uxth	r2, r3
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007252:	b29b      	uxth	r3, r3
 8007254:	2b01      	cmp	r3, #1
 8007256:	d81f      	bhi.n	8007298 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	685a      	ldr	r2, [r3, #4]
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007266:	605a      	str	r2, [r3, #4]
 8007268:	e016      	b.n	8007298 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f103 020c 	add.w	r2, r3, #12
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007276:	7812      	ldrb	r2, [r2, #0]
 8007278:	b2d2      	uxtb	r2, r2
 800727a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007280:	1c5a      	adds	r2, r3, #1
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800728c:	b29b      	uxth	r3, r3
 800728e:	3b01      	subs	r3, #1
 8007290:	b29a      	uxth	r2, r3
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007298:	2301      	movs	r3, #1
 800729a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800729c:	f7fa ffde 	bl	800225c <HAL_GetTick>
 80072a0:	4602      	mov	r2, r0
 80072a2:	69fb      	ldr	r3, [r7, #28]
 80072a4:	1ad3      	subs	r3, r2, r3
 80072a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072a8:	429a      	cmp	r2, r3
 80072aa:	d803      	bhi.n	80072b4 <HAL_SPI_TransmitReceive+0x3c2>
 80072ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80072b2:	d102      	bne.n	80072ba <HAL_SPI_TransmitReceive+0x3c8>
 80072b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d103      	bne.n	80072c2 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80072ba:	2303      	movs	r3, #3
 80072bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80072c0:	e01c      	b.n	80072fc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	f47f af5b 	bne.w	8007184 <HAL_SPI_TransmitReceive+0x292>
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	f47f af54 	bne.w	8007184 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80072dc:	69fa      	ldr	r2, [r7, #28]
 80072de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80072e0:	68f8      	ldr	r0, [r7, #12]
 80072e2:	f000 f941 	bl	8007568 <SPI_EndRxTxTransaction>
 80072e6:	4603      	mov	r3, r0
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d006      	beq.n	80072fa <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80072ec:	2301      	movs	r3, #1
 80072ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	2220      	movs	r2, #32
 80072f6:	661a      	str	r2, [r3, #96]	; 0x60
 80072f8:	e000      	b.n	80072fc <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80072fa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	2201      	movs	r2, #1
 8007300:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2200      	movs	r2, #0
 8007308:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800730c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8007310:	4618      	mov	r0, r3
 8007312:	3728      	adds	r7, #40	; 0x28
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}

08007318 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007318:	b480      	push	{r7}
 800731a:	b083      	sub	sp, #12
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007326:	b2db      	uxtb	r3, r3
}
 8007328:	4618      	mov	r0, r3
 800732a:	370c      	adds	r7, #12
 800732c:	46bd      	mov	sp, r7
 800732e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007332:	4770      	bx	lr

08007334 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b088      	sub	sp, #32
 8007338:	af00      	add	r7, sp, #0
 800733a:	60f8      	str	r0, [r7, #12]
 800733c:	60b9      	str	r1, [r7, #8]
 800733e:	603b      	str	r3, [r7, #0]
 8007340:	4613      	mov	r3, r2
 8007342:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007344:	f7fa ff8a 	bl	800225c <HAL_GetTick>
 8007348:	4602      	mov	r2, r0
 800734a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800734c:	1a9b      	subs	r3, r3, r2
 800734e:	683a      	ldr	r2, [r7, #0]
 8007350:	4413      	add	r3, r2
 8007352:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007354:	f7fa ff82 	bl	800225c <HAL_GetTick>
 8007358:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800735a:	4b39      	ldr	r3, [pc, #228]	; (8007440 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	015b      	lsls	r3, r3, #5
 8007360:	0d1b      	lsrs	r3, r3, #20
 8007362:	69fa      	ldr	r2, [r7, #28]
 8007364:	fb02 f303 	mul.w	r3, r2, r3
 8007368:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800736a:	e054      	b.n	8007416 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007372:	d050      	beq.n	8007416 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007374:	f7fa ff72 	bl	800225c <HAL_GetTick>
 8007378:	4602      	mov	r2, r0
 800737a:	69bb      	ldr	r3, [r7, #24]
 800737c:	1ad3      	subs	r3, r2, r3
 800737e:	69fa      	ldr	r2, [r7, #28]
 8007380:	429a      	cmp	r2, r3
 8007382:	d902      	bls.n	800738a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007384:	69fb      	ldr	r3, [r7, #28]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d13d      	bne.n	8007406 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	685a      	ldr	r2, [r3, #4]
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007398:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80073a2:	d111      	bne.n	80073c8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	689b      	ldr	r3, [r3, #8]
 80073a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073ac:	d004      	beq.n	80073b8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	689b      	ldr	r3, [r3, #8]
 80073b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073b6:	d107      	bne.n	80073c8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	681a      	ldr	r2, [r3, #0]
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073d0:	d10f      	bne.n	80073f2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	681a      	ldr	r2, [r3, #0]
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80073e0:	601a      	str	r2, [r3, #0]
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	681a      	ldr	r2, [r3, #0]
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80073f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2201      	movs	r2, #1
 80073f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2200      	movs	r2, #0
 80073fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007402:	2303      	movs	r3, #3
 8007404:	e017      	b.n	8007436 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d101      	bne.n	8007410 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800740c:	2300      	movs	r3, #0
 800740e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	3b01      	subs	r3, #1
 8007414:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	689a      	ldr	r2, [r3, #8]
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	4013      	ands	r3, r2
 8007420:	68ba      	ldr	r2, [r7, #8]
 8007422:	429a      	cmp	r2, r3
 8007424:	bf0c      	ite	eq
 8007426:	2301      	moveq	r3, #1
 8007428:	2300      	movne	r3, #0
 800742a:	b2db      	uxtb	r3, r3
 800742c:	461a      	mov	r2, r3
 800742e:	79fb      	ldrb	r3, [r7, #7]
 8007430:	429a      	cmp	r2, r3
 8007432:	d19b      	bne.n	800736c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007434:	2300      	movs	r3, #0
}
 8007436:	4618      	mov	r0, r3
 8007438:	3720      	adds	r7, #32
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}
 800743e:	bf00      	nop
 8007440:	20000004 	.word	0x20000004

08007444 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b088      	sub	sp, #32
 8007448:	af00      	add	r7, sp, #0
 800744a:	60f8      	str	r0, [r7, #12]
 800744c:	60b9      	str	r1, [r7, #8]
 800744e:	607a      	str	r2, [r7, #4]
 8007450:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007452:	f7fa ff03 	bl	800225c <HAL_GetTick>
 8007456:	4602      	mov	r2, r0
 8007458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800745a:	1a9b      	subs	r3, r3, r2
 800745c:	683a      	ldr	r2, [r7, #0]
 800745e:	4413      	add	r3, r2
 8007460:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007462:	f7fa fefb 	bl	800225c <HAL_GetTick>
 8007466:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007468:	4b3e      	ldr	r3, [pc, #248]	; (8007564 <SPI_WaitFifoStateUntilTimeout+0x120>)
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	4613      	mov	r3, r2
 800746e:	009b      	lsls	r3, r3, #2
 8007470:	4413      	add	r3, r2
 8007472:	00da      	lsls	r2, r3, #3
 8007474:	1ad3      	subs	r3, r2, r3
 8007476:	0d1b      	lsrs	r3, r3, #20
 8007478:	69fa      	ldr	r2, [r7, #28]
 800747a:	fb02 f303 	mul.w	r3, r2, r3
 800747e:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8007480:	e062      	b.n	8007548 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007488:	d109      	bne.n	800749e <SPI_WaitFifoStateUntilTimeout+0x5a>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d106      	bne.n	800749e <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	330c      	adds	r3, #12
 8007496:	781b      	ldrb	r3, [r3, #0]
 8007498:	b2db      	uxtb	r3, r3
 800749a:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 800749c:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074a4:	d050      	beq.n	8007548 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80074a6:	f7fa fed9 	bl	800225c <HAL_GetTick>
 80074aa:	4602      	mov	r2, r0
 80074ac:	69bb      	ldr	r3, [r7, #24]
 80074ae:	1ad3      	subs	r3, r2, r3
 80074b0:	69fa      	ldr	r2, [r7, #28]
 80074b2:	429a      	cmp	r2, r3
 80074b4:	d902      	bls.n	80074bc <SPI_WaitFifoStateUntilTimeout+0x78>
 80074b6:	69fb      	ldr	r3, [r7, #28]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d13d      	bne.n	8007538 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	685a      	ldr	r2, [r3, #4]
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80074ca:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	685b      	ldr	r3, [r3, #4]
 80074d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80074d4:	d111      	bne.n	80074fa <SPI_WaitFifoStateUntilTimeout+0xb6>
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	689b      	ldr	r3, [r3, #8]
 80074da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074de:	d004      	beq.n	80074ea <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	689b      	ldr	r3, [r3, #8]
 80074e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074e8:	d107      	bne.n	80074fa <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	681a      	ldr	r2, [r3, #0]
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074f8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007502:	d10f      	bne.n	8007524 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	681a      	ldr	r2, [r3, #0]
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007512:	601a      	str	r2, [r3, #0]
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	681a      	ldr	r2, [r3, #0]
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007522:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	2201      	movs	r2, #1
 8007528:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2200      	movs	r2, #0
 8007530:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007534:	2303      	movs	r3, #3
 8007536:	e010      	b.n	800755a <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d101      	bne.n	8007542 <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 800753e:	2300      	movs	r3, #0
 8007540:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	3b01      	subs	r3, #1
 8007546:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	689a      	ldr	r2, [r3, #8]
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	4013      	ands	r3, r2
 8007552:	687a      	ldr	r2, [r7, #4]
 8007554:	429a      	cmp	r2, r3
 8007556:	d194      	bne.n	8007482 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8007558:	2300      	movs	r3, #0
}
 800755a:	4618      	mov	r0, r3
 800755c:	3720      	adds	r7, #32
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}
 8007562:	bf00      	nop
 8007564:	20000004 	.word	0x20000004

08007568 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b086      	sub	sp, #24
 800756c:	af02      	add	r7, sp, #8
 800756e:	60f8      	str	r0, [r7, #12]
 8007570:	60b9      	str	r1, [r7, #8]
 8007572:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	9300      	str	r3, [sp, #0]
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	2200      	movs	r2, #0
 800757c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007580:	68f8      	ldr	r0, [r7, #12]
 8007582:	f7ff ff5f 	bl	8007444 <SPI_WaitFifoStateUntilTimeout>
 8007586:	4603      	mov	r3, r0
 8007588:	2b00      	cmp	r3, #0
 800758a:	d007      	beq.n	800759c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007590:	f043 0220 	orr.w	r2, r3, #32
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007598:	2303      	movs	r3, #3
 800759a:	e027      	b.n	80075ec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	9300      	str	r3, [sp, #0]
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	2200      	movs	r2, #0
 80075a4:	2180      	movs	r1, #128	; 0x80
 80075a6:	68f8      	ldr	r0, [r7, #12]
 80075a8:	f7ff fec4 	bl	8007334 <SPI_WaitFlagStateUntilTimeout>
 80075ac:	4603      	mov	r3, r0
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d007      	beq.n	80075c2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075b6:	f043 0220 	orr.w	r2, r3, #32
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80075be:	2303      	movs	r3, #3
 80075c0:	e014      	b.n	80075ec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	9300      	str	r3, [sp, #0]
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	2200      	movs	r2, #0
 80075ca:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80075ce:	68f8      	ldr	r0, [r7, #12]
 80075d0:	f7ff ff38 	bl	8007444 <SPI_WaitFifoStateUntilTimeout>
 80075d4:	4603      	mov	r3, r0
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d007      	beq.n	80075ea <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075de:	f043 0220 	orr.w	r2, r3, #32
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80075e6:	2303      	movs	r3, #3
 80075e8:	e000      	b.n	80075ec <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80075ea:	2300      	movs	r3, #0
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3710      	adds	r7, #16
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}

080075f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b082      	sub	sp, #8
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d101      	bne.n	8007606 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007602:	2301      	movs	r3, #1
 8007604:	e049      	b.n	800769a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800760c:	b2db      	uxtb	r3, r3
 800760e:	2b00      	cmp	r3, #0
 8007610:	d106      	bne.n	8007620 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2200      	movs	r2, #0
 8007616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f7fa fba8 	bl	8001d70 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2202      	movs	r2, #2
 8007624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681a      	ldr	r2, [r3, #0]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	3304      	adds	r3, #4
 8007630:	4619      	mov	r1, r3
 8007632:	4610      	mov	r0, r2
 8007634:	f000 fa96 	bl	8007b64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2201      	movs	r2, #1
 800763c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2201      	movs	r2, #1
 8007644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2201      	movs	r2, #1
 800764c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2201      	movs	r2, #1
 8007654:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2201      	movs	r2, #1
 800765c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2201      	movs	r2, #1
 8007664:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2201      	movs	r2, #1
 800766c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2201      	movs	r2, #1
 8007674:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2201      	movs	r2, #1
 800767c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2201      	movs	r2, #1
 8007684:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2201      	movs	r2, #1
 800768c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2201      	movs	r2, #1
 8007694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007698:	2300      	movs	r3, #0
}
 800769a:	4618      	mov	r0, r3
 800769c:	3708      	adds	r7, #8
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}

080076a2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80076a2:	b580      	push	{r7, lr}
 80076a4:	b082      	sub	sp, #8
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	691b      	ldr	r3, [r3, #16]
 80076b0:	f003 0302 	and.w	r3, r3, #2
 80076b4:	2b02      	cmp	r3, #2
 80076b6:	d122      	bne.n	80076fe <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	68db      	ldr	r3, [r3, #12]
 80076be:	f003 0302 	and.w	r3, r3, #2
 80076c2:	2b02      	cmp	r3, #2
 80076c4:	d11b      	bne.n	80076fe <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f06f 0202 	mvn.w	r2, #2
 80076ce:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2201      	movs	r2, #1
 80076d4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	699b      	ldr	r3, [r3, #24]
 80076dc:	f003 0303 	and.w	r3, r3, #3
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d003      	beq.n	80076ec <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f000 fa1f 	bl	8007b28 <HAL_TIM_IC_CaptureCallback>
 80076ea:	e005      	b.n	80076f8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f000 fa11 	bl	8007b14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f000 fa22 	bl	8007b3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2200      	movs	r2, #0
 80076fc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	691b      	ldr	r3, [r3, #16]
 8007704:	f003 0304 	and.w	r3, r3, #4
 8007708:	2b04      	cmp	r3, #4
 800770a:	d122      	bne.n	8007752 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	68db      	ldr	r3, [r3, #12]
 8007712:	f003 0304 	and.w	r3, r3, #4
 8007716:	2b04      	cmp	r3, #4
 8007718:	d11b      	bne.n	8007752 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f06f 0204 	mvn.w	r2, #4
 8007722:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2202      	movs	r2, #2
 8007728:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	699b      	ldr	r3, [r3, #24]
 8007730:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007734:	2b00      	cmp	r3, #0
 8007736:	d003      	beq.n	8007740 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f000 f9f5 	bl	8007b28 <HAL_TIM_IC_CaptureCallback>
 800773e:	e005      	b.n	800774c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f000 f9e7 	bl	8007b14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f000 f9f8 	bl	8007b3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2200      	movs	r2, #0
 8007750:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	691b      	ldr	r3, [r3, #16]
 8007758:	f003 0308 	and.w	r3, r3, #8
 800775c:	2b08      	cmp	r3, #8
 800775e:	d122      	bne.n	80077a6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	68db      	ldr	r3, [r3, #12]
 8007766:	f003 0308 	and.w	r3, r3, #8
 800776a:	2b08      	cmp	r3, #8
 800776c:	d11b      	bne.n	80077a6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f06f 0208 	mvn.w	r2, #8
 8007776:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2204      	movs	r2, #4
 800777c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	69db      	ldr	r3, [r3, #28]
 8007784:	f003 0303 	and.w	r3, r3, #3
 8007788:	2b00      	cmp	r3, #0
 800778a:	d003      	beq.n	8007794 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f000 f9cb 	bl	8007b28 <HAL_TIM_IC_CaptureCallback>
 8007792:	e005      	b.n	80077a0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f000 f9bd 	bl	8007b14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f000 f9ce 	bl	8007b3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2200      	movs	r2, #0
 80077a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	691b      	ldr	r3, [r3, #16]
 80077ac:	f003 0310 	and.w	r3, r3, #16
 80077b0:	2b10      	cmp	r3, #16
 80077b2:	d122      	bne.n	80077fa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	68db      	ldr	r3, [r3, #12]
 80077ba:	f003 0310 	and.w	r3, r3, #16
 80077be:	2b10      	cmp	r3, #16
 80077c0:	d11b      	bne.n	80077fa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f06f 0210 	mvn.w	r2, #16
 80077ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2208      	movs	r2, #8
 80077d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	69db      	ldr	r3, [r3, #28]
 80077d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d003      	beq.n	80077e8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f000 f9a1 	bl	8007b28 <HAL_TIM_IC_CaptureCallback>
 80077e6:	e005      	b.n	80077f4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f000 f993 	bl	8007b14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f000 f9a4 	bl	8007b3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2200      	movs	r2, #0
 80077f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	691b      	ldr	r3, [r3, #16]
 8007800:	f003 0301 	and.w	r3, r3, #1
 8007804:	2b01      	cmp	r3, #1
 8007806:	d10e      	bne.n	8007826 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	68db      	ldr	r3, [r3, #12]
 800780e:	f003 0301 	and.w	r3, r3, #1
 8007812:	2b01      	cmp	r3, #1
 8007814:	d107      	bne.n	8007826 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f06f 0201 	mvn.w	r2, #1
 800781e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f000 f96d 	bl	8007b00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	691b      	ldr	r3, [r3, #16]
 800782c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007830:	2b80      	cmp	r3, #128	; 0x80
 8007832:	d10e      	bne.n	8007852 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	68db      	ldr	r3, [r3, #12]
 800783a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800783e:	2b80      	cmp	r3, #128	; 0x80
 8007840:	d107      	bne.n	8007852 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800784a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f000 fd1f 	bl	8008290 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	691b      	ldr	r3, [r3, #16]
 8007858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800785c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007860:	d10e      	bne.n	8007880 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	68db      	ldr	r3, [r3, #12]
 8007868:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800786c:	2b80      	cmp	r3, #128	; 0x80
 800786e:	d107      	bne.n	8007880 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007878:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f000 fd12 	bl	80082a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	691b      	ldr	r3, [r3, #16]
 8007886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800788a:	2b40      	cmp	r3, #64	; 0x40
 800788c:	d10e      	bne.n	80078ac <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	68db      	ldr	r3, [r3, #12]
 8007894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007898:	2b40      	cmp	r3, #64	; 0x40
 800789a:	d107      	bne.n	80078ac <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80078a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f000 f952 	bl	8007b50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	691b      	ldr	r3, [r3, #16]
 80078b2:	f003 0320 	and.w	r3, r3, #32
 80078b6:	2b20      	cmp	r3, #32
 80078b8:	d10e      	bne.n	80078d8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	68db      	ldr	r3, [r3, #12]
 80078c0:	f003 0320 	and.w	r3, r3, #32
 80078c4:	2b20      	cmp	r3, #32
 80078c6:	d107      	bne.n	80078d8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f06f 0220 	mvn.w	r2, #32
 80078d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f000 fcd2 	bl	800827c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80078d8:	bf00      	nop
 80078da:	3708      	adds	r7, #8
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}

080078e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b084      	sub	sp, #16
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	60f8      	str	r0, [r7, #12]
 80078e8:	60b9      	str	r1, [r7, #8]
 80078ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d101      	bne.n	80078fa <HAL_TIM_PWM_ConfigChannel+0x1a>
 80078f6:	2302      	movs	r3, #2
 80078f8:	e0fd      	b.n	8007af6 <HAL_TIM_PWM_ConfigChannel+0x216>
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	2201      	movs	r2, #1
 80078fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2b14      	cmp	r3, #20
 8007906:	f200 80f0 	bhi.w	8007aea <HAL_TIM_PWM_ConfigChannel+0x20a>
 800790a:	a201      	add	r2, pc, #4	; (adr r2, 8007910 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800790c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007910:	08007965 	.word	0x08007965
 8007914:	08007aeb 	.word	0x08007aeb
 8007918:	08007aeb 	.word	0x08007aeb
 800791c:	08007aeb 	.word	0x08007aeb
 8007920:	080079a5 	.word	0x080079a5
 8007924:	08007aeb 	.word	0x08007aeb
 8007928:	08007aeb 	.word	0x08007aeb
 800792c:	08007aeb 	.word	0x08007aeb
 8007930:	080079e7 	.word	0x080079e7
 8007934:	08007aeb 	.word	0x08007aeb
 8007938:	08007aeb 	.word	0x08007aeb
 800793c:	08007aeb 	.word	0x08007aeb
 8007940:	08007a27 	.word	0x08007a27
 8007944:	08007aeb 	.word	0x08007aeb
 8007948:	08007aeb 	.word	0x08007aeb
 800794c:	08007aeb 	.word	0x08007aeb
 8007950:	08007a69 	.word	0x08007a69
 8007954:	08007aeb 	.word	0x08007aeb
 8007958:	08007aeb 	.word	0x08007aeb
 800795c:	08007aeb 	.word	0x08007aeb
 8007960:	08007aa9 	.word	0x08007aa9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	68b9      	ldr	r1, [r7, #8]
 800796a:	4618      	mov	r0, r3
 800796c:	f000 f99a 	bl	8007ca4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	699a      	ldr	r2, [r3, #24]
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f042 0208 	orr.w	r2, r2, #8
 800797e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	699a      	ldr	r2, [r3, #24]
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f022 0204 	bic.w	r2, r2, #4
 800798e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	6999      	ldr	r1, [r3, #24]
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	691a      	ldr	r2, [r3, #16]
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	430a      	orrs	r2, r1
 80079a0:	619a      	str	r2, [r3, #24]
      break;
 80079a2:	e0a3      	b.n	8007aec <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	68b9      	ldr	r1, [r7, #8]
 80079aa:	4618      	mov	r0, r3
 80079ac:	f000 f9ec 	bl	8007d88 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	699a      	ldr	r2, [r3, #24]
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80079be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	699a      	ldr	r2, [r3, #24]
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	6999      	ldr	r1, [r3, #24]
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	691b      	ldr	r3, [r3, #16]
 80079da:	021a      	lsls	r2, r3, #8
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	430a      	orrs	r2, r1
 80079e2:	619a      	str	r2, [r3, #24]
      break;
 80079e4:	e082      	b.n	8007aec <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	68b9      	ldr	r1, [r7, #8]
 80079ec:	4618      	mov	r0, r3
 80079ee:	f000 fa43 	bl	8007e78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	69da      	ldr	r2, [r3, #28]
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f042 0208 	orr.w	r2, r2, #8
 8007a00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	69da      	ldr	r2, [r3, #28]
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f022 0204 	bic.w	r2, r2, #4
 8007a10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	69d9      	ldr	r1, [r3, #28]
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	691a      	ldr	r2, [r3, #16]
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	430a      	orrs	r2, r1
 8007a22:	61da      	str	r2, [r3, #28]
      break;
 8007a24:	e062      	b.n	8007aec <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	68b9      	ldr	r1, [r7, #8]
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f000 fa99 	bl	8007f64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	69da      	ldr	r2, [r3, #28]
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	69da      	ldr	r2, [r3, #28]
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	69d9      	ldr	r1, [r3, #28]
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	691b      	ldr	r3, [r3, #16]
 8007a5c:	021a      	lsls	r2, r3, #8
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	430a      	orrs	r2, r1
 8007a64:	61da      	str	r2, [r3, #28]
      break;
 8007a66:	e041      	b.n	8007aec <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	68b9      	ldr	r1, [r7, #8]
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f000 fad0 	bl	8008014 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f042 0208 	orr.w	r2, r2, #8
 8007a82:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f022 0204 	bic.w	r2, r2, #4
 8007a92:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	691a      	ldr	r2, [r3, #16]
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	430a      	orrs	r2, r1
 8007aa4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007aa6:	e021      	b.n	8007aec <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	68b9      	ldr	r1, [r7, #8]
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f000 fb02 	bl	80080b8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ac2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ad2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	691b      	ldr	r3, [r3, #16]
 8007ade:	021a      	lsls	r2, r3, #8
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	430a      	orrs	r2, r1
 8007ae6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007ae8:	e000      	b.n	8007aec <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8007aea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2200      	movs	r2, #0
 8007af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007af4:	2300      	movs	r3, #0
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3710      	adds	r7, #16
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}
 8007afe:	bf00      	nop

08007b00 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b083      	sub	sp, #12
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007b08:	bf00      	nop
 8007b0a:	370c      	adds	r7, #12
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr

08007b14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b083      	sub	sp, #12
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007b1c:	bf00      	nop
 8007b1e:	370c      	adds	r7, #12
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr

08007b28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b083      	sub	sp, #12
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007b30:	bf00      	nop
 8007b32:	370c      	adds	r7, #12
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr

08007b3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b083      	sub	sp, #12
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007b44:	bf00      	nop
 8007b46:	370c      	adds	r7, #12
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4e:	4770      	bx	lr

08007b50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b083      	sub	sp, #12
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007b58:	bf00      	nop
 8007b5a:	370c      	adds	r7, #12
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b62:	4770      	bx	lr

08007b64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b085      	sub	sp, #20
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
 8007b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	4a40      	ldr	r2, [pc, #256]	; (8007c78 <TIM_Base_SetConfig+0x114>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d013      	beq.n	8007ba4 <TIM_Base_SetConfig+0x40>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b82:	d00f      	beq.n	8007ba4 <TIM_Base_SetConfig+0x40>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	4a3d      	ldr	r2, [pc, #244]	; (8007c7c <TIM_Base_SetConfig+0x118>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d00b      	beq.n	8007ba4 <TIM_Base_SetConfig+0x40>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	4a3c      	ldr	r2, [pc, #240]	; (8007c80 <TIM_Base_SetConfig+0x11c>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d007      	beq.n	8007ba4 <TIM_Base_SetConfig+0x40>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	4a3b      	ldr	r2, [pc, #236]	; (8007c84 <TIM_Base_SetConfig+0x120>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d003      	beq.n	8007ba4 <TIM_Base_SetConfig+0x40>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	4a3a      	ldr	r2, [pc, #232]	; (8007c88 <TIM_Base_SetConfig+0x124>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d108      	bne.n	8007bb6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007baa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	68fa      	ldr	r2, [r7, #12]
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	4a2f      	ldr	r2, [pc, #188]	; (8007c78 <TIM_Base_SetConfig+0x114>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d02b      	beq.n	8007c16 <TIM_Base_SetConfig+0xb2>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bc4:	d027      	beq.n	8007c16 <TIM_Base_SetConfig+0xb2>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	4a2c      	ldr	r2, [pc, #176]	; (8007c7c <TIM_Base_SetConfig+0x118>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d023      	beq.n	8007c16 <TIM_Base_SetConfig+0xb2>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	4a2b      	ldr	r2, [pc, #172]	; (8007c80 <TIM_Base_SetConfig+0x11c>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d01f      	beq.n	8007c16 <TIM_Base_SetConfig+0xb2>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	4a2a      	ldr	r2, [pc, #168]	; (8007c84 <TIM_Base_SetConfig+0x120>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d01b      	beq.n	8007c16 <TIM_Base_SetConfig+0xb2>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	4a29      	ldr	r2, [pc, #164]	; (8007c88 <TIM_Base_SetConfig+0x124>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d017      	beq.n	8007c16 <TIM_Base_SetConfig+0xb2>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	4a28      	ldr	r2, [pc, #160]	; (8007c8c <TIM_Base_SetConfig+0x128>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d013      	beq.n	8007c16 <TIM_Base_SetConfig+0xb2>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	4a27      	ldr	r2, [pc, #156]	; (8007c90 <TIM_Base_SetConfig+0x12c>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d00f      	beq.n	8007c16 <TIM_Base_SetConfig+0xb2>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	4a26      	ldr	r2, [pc, #152]	; (8007c94 <TIM_Base_SetConfig+0x130>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d00b      	beq.n	8007c16 <TIM_Base_SetConfig+0xb2>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	4a25      	ldr	r2, [pc, #148]	; (8007c98 <TIM_Base_SetConfig+0x134>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d007      	beq.n	8007c16 <TIM_Base_SetConfig+0xb2>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	4a24      	ldr	r2, [pc, #144]	; (8007c9c <TIM_Base_SetConfig+0x138>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d003      	beq.n	8007c16 <TIM_Base_SetConfig+0xb2>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	4a23      	ldr	r2, [pc, #140]	; (8007ca0 <TIM_Base_SetConfig+0x13c>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d108      	bne.n	8007c28 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	68db      	ldr	r3, [r3, #12]
 8007c22:	68fa      	ldr	r2, [r7, #12]
 8007c24:	4313      	orrs	r3, r2
 8007c26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	695b      	ldr	r3, [r3, #20]
 8007c32:	4313      	orrs	r3, r2
 8007c34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	68fa      	ldr	r2, [r7, #12]
 8007c3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	689a      	ldr	r2, [r3, #8]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	681a      	ldr	r2, [r3, #0]
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	4a0a      	ldr	r2, [pc, #40]	; (8007c78 <TIM_Base_SetConfig+0x114>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d003      	beq.n	8007c5c <TIM_Base_SetConfig+0xf8>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	4a0c      	ldr	r2, [pc, #48]	; (8007c88 <TIM_Base_SetConfig+0x124>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d103      	bne.n	8007c64 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	691a      	ldr	r2, [r3, #16]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2201      	movs	r2, #1
 8007c68:	615a      	str	r2, [r3, #20]
}
 8007c6a:	bf00      	nop
 8007c6c:	3714      	adds	r7, #20
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c74:	4770      	bx	lr
 8007c76:	bf00      	nop
 8007c78:	40010000 	.word	0x40010000
 8007c7c:	40000400 	.word	0x40000400
 8007c80:	40000800 	.word	0x40000800
 8007c84:	40000c00 	.word	0x40000c00
 8007c88:	40010400 	.word	0x40010400
 8007c8c:	40014000 	.word	0x40014000
 8007c90:	40014400 	.word	0x40014400
 8007c94:	40014800 	.word	0x40014800
 8007c98:	40001800 	.word	0x40001800
 8007c9c:	40001c00 	.word	0x40001c00
 8007ca0:	40002000 	.word	0x40002000

08007ca4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b087      	sub	sp, #28
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6a1b      	ldr	r3, [r3, #32]
 8007cb2:	f023 0201 	bic.w	r2, r3, #1
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6a1b      	ldr	r3, [r3, #32]
 8007cbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	699b      	ldr	r3, [r3, #24]
 8007cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007ccc:	68fa      	ldr	r2, [r7, #12]
 8007cce:	4b2b      	ldr	r3, [pc, #172]	; (8007d7c <TIM_OC1_SetConfig+0xd8>)
 8007cd0:	4013      	ands	r3, r2
 8007cd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f023 0303 	bic.w	r3, r3, #3
 8007cda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	68fa      	ldr	r2, [r7, #12]
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	f023 0302 	bic.w	r3, r3, #2
 8007cec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	689b      	ldr	r3, [r3, #8]
 8007cf2:	697a      	ldr	r2, [r7, #20]
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	4a21      	ldr	r2, [pc, #132]	; (8007d80 <TIM_OC1_SetConfig+0xdc>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d003      	beq.n	8007d08 <TIM_OC1_SetConfig+0x64>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	4a20      	ldr	r2, [pc, #128]	; (8007d84 <TIM_OC1_SetConfig+0xe0>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d10c      	bne.n	8007d22 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	f023 0308 	bic.w	r3, r3, #8
 8007d0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	68db      	ldr	r3, [r3, #12]
 8007d14:	697a      	ldr	r2, [r7, #20]
 8007d16:	4313      	orrs	r3, r2
 8007d18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	f023 0304 	bic.w	r3, r3, #4
 8007d20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	4a16      	ldr	r2, [pc, #88]	; (8007d80 <TIM_OC1_SetConfig+0xdc>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d003      	beq.n	8007d32 <TIM_OC1_SetConfig+0x8e>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	4a15      	ldr	r2, [pc, #84]	; (8007d84 <TIM_OC1_SetConfig+0xe0>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d111      	bne.n	8007d56 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007d40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	695b      	ldr	r3, [r3, #20]
 8007d46:	693a      	ldr	r2, [r7, #16]
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	699b      	ldr	r3, [r3, #24]
 8007d50:	693a      	ldr	r2, [r7, #16]
 8007d52:	4313      	orrs	r3, r2
 8007d54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	693a      	ldr	r2, [r7, #16]
 8007d5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	68fa      	ldr	r2, [r7, #12]
 8007d60:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	685a      	ldr	r2, [r3, #4]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	697a      	ldr	r2, [r7, #20]
 8007d6e:	621a      	str	r2, [r3, #32]
}
 8007d70:	bf00      	nop
 8007d72:	371c      	adds	r7, #28
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr
 8007d7c:	fffeff8f 	.word	0xfffeff8f
 8007d80:	40010000 	.word	0x40010000
 8007d84:	40010400 	.word	0x40010400

08007d88 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b087      	sub	sp, #28
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
 8007d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6a1b      	ldr	r3, [r3, #32]
 8007d96:	f023 0210 	bic.w	r2, r3, #16
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6a1b      	ldr	r3, [r3, #32]
 8007da2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	685b      	ldr	r3, [r3, #4]
 8007da8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	699b      	ldr	r3, [r3, #24]
 8007dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007db0:	68fa      	ldr	r2, [r7, #12]
 8007db2:	4b2e      	ldr	r3, [pc, #184]	; (8007e6c <TIM_OC2_SetConfig+0xe4>)
 8007db4:	4013      	ands	r3, r2
 8007db6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007dbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	021b      	lsls	r3, r3, #8
 8007dc6:	68fa      	ldr	r2, [r7, #12]
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007dcc:	697b      	ldr	r3, [r7, #20]
 8007dce:	f023 0320 	bic.w	r3, r3, #32
 8007dd2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	689b      	ldr	r3, [r3, #8]
 8007dd8:	011b      	lsls	r3, r3, #4
 8007dda:	697a      	ldr	r2, [r7, #20]
 8007ddc:	4313      	orrs	r3, r2
 8007dde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	4a23      	ldr	r2, [pc, #140]	; (8007e70 <TIM_OC2_SetConfig+0xe8>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d003      	beq.n	8007df0 <TIM_OC2_SetConfig+0x68>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	4a22      	ldr	r2, [pc, #136]	; (8007e74 <TIM_OC2_SetConfig+0xec>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d10d      	bne.n	8007e0c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007df6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	68db      	ldr	r3, [r3, #12]
 8007dfc:	011b      	lsls	r3, r3, #4
 8007dfe:	697a      	ldr	r2, [r7, #20]
 8007e00:	4313      	orrs	r3, r2
 8007e02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e0a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	4a18      	ldr	r2, [pc, #96]	; (8007e70 <TIM_OC2_SetConfig+0xe8>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d003      	beq.n	8007e1c <TIM_OC2_SetConfig+0x94>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	4a17      	ldr	r2, [pc, #92]	; (8007e74 <TIM_OC2_SetConfig+0xec>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d113      	bne.n	8007e44 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007e1c:	693b      	ldr	r3, [r7, #16]
 8007e1e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007e22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007e2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	695b      	ldr	r3, [r3, #20]
 8007e30:	009b      	lsls	r3, r3, #2
 8007e32:	693a      	ldr	r2, [r7, #16]
 8007e34:	4313      	orrs	r3, r2
 8007e36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	699b      	ldr	r3, [r3, #24]
 8007e3c:	009b      	lsls	r3, r3, #2
 8007e3e:	693a      	ldr	r2, [r7, #16]
 8007e40:	4313      	orrs	r3, r2
 8007e42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	693a      	ldr	r2, [r7, #16]
 8007e48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	68fa      	ldr	r2, [r7, #12]
 8007e4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	685a      	ldr	r2, [r3, #4]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	697a      	ldr	r2, [r7, #20]
 8007e5c:	621a      	str	r2, [r3, #32]
}
 8007e5e:	bf00      	nop
 8007e60:	371c      	adds	r7, #28
 8007e62:	46bd      	mov	sp, r7
 8007e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e68:	4770      	bx	lr
 8007e6a:	bf00      	nop
 8007e6c:	feff8fff 	.word	0xfeff8fff
 8007e70:	40010000 	.word	0x40010000
 8007e74:	40010400 	.word	0x40010400

08007e78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b087      	sub	sp, #28
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
 8007e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6a1b      	ldr	r3, [r3, #32]
 8007e86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6a1b      	ldr	r3, [r3, #32]
 8007e92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	685b      	ldr	r3, [r3, #4]
 8007e98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	69db      	ldr	r3, [r3, #28]
 8007e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007ea0:	68fa      	ldr	r2, [r7, #12]
 8007ea2:	4b2d      	ldr	r3, [pc, #180]	; (8007f58 <TIM_OC3_SetConfig+0xe0>)
 8007ea4:	4013      	ands	r3, r2
 8007ea6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	f023 0303 	bic.w	r3, r3, #3
 8007eae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	68fa      	ldr	r2, [r7, #12]
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007ec0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	689b      	ldr	r3, [r3, #8]
 8007ec6:	021b      	lsls	r3, r3, #8
 8007ec8:	697a      	ldr	r2, [r7, #20]
 8007eca:	4313      	orrs	r3, r2
 8007ecc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	4a22      	ldr	r2, [pc, #136]	; (8007f5c <TIM_OC3_SetConfig+0xe4>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d003      	beq.n	8007ede <TIM_OC3_SetConfig+0x66>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	4a21      	ldr	r2, [pc, #132]	; (8007f60 <TIM_OC3_SetConfig+0xe8>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d10d      	bne.n	8007efa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007ee4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	68db      	ldr	r3, [r3, #12]
 8007eea:	021b      	lsls	r3, r3, #8
 8007eec:	697a      	ldr	r2, [r7, #20]
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007ef8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	4a17      	ldr	r2, [pc, #92]	; (8007f5c <TIM_OC3_SetConfig+0xe4>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d003      	beq.n	8007f0a <TIM_OC3_SetConfig+0x92>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	4a16      	ldr	r2, [pc, #88]	; (8007f60 <TIM_OC3_SetConfig+0xe8>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d113      	bne.n	8007f32 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007f18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	695b      	ldr	r3, [r3, #20]
 8007f1e:	011b      	lsls	r3, r3, #4
 8007f20:	693a      	ldr	r2, [r7, #16]
 8007f22:	4313      	orrs	r3, r2
 8007f24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	699b      	ldr	r3, [r3, #24]
 8007f2a:	011b      	lsls	r3, r3, #4
 8007f2c:	693a      	ldr	r2, [r7, #16]
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	693a      	ldr	r2, [r7, #16]
 8007f36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	68fa      	ldr	r2, [r7, #12]
 8007f3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	685a      	ldr	r2, [r3, #4]
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	697a      	ldr	r2, [r7, #20]
 8007f4a:	621a      	str	r2, [r3, #32]
}
 8007f4c:	bf00      	nop
 8007f4e:	371c      	adds	r7, #28
 8007f50:	46bd      	mov	sp, r7
 8007f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f56:	4770      	bx	lr
 8007f58:	fffeff8f 	.word	0xfffeff8f
 8007f5c:	40010000 	.word	0x40010000
 8007f60:	40010400 	.word	0x40010400

08007f64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f64:	b480      	push	{r7}
 8007f66:	b087      	sub	sp, #28
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
 8007f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6a1b      	ldr	r3, [r3, #32]
 8007f72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6a1b      	ldr	r3, [r3, #32]
 8007f7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	69db      	ldr	r3, [r3, #28]
 8007f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007f8c:	68fa      	ldr	r2, [r7, #12]
 8007f8e:	4b1e      	ldr	r3, [pc, #120]	; (8008008 <TIM_OC4_SetConfig+0xa4>)
 8007f90:	4013      	ands	r3, r2
 8007f92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	021b      	lsls	r3, r3, #8
 8007fa2:	68fa      	ldr	r2, [r7, #12]
 8007fa4:	4313      	orrs	r3, r2
 8007fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007fae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	689b      	ldr	r3, [r3, #8]
 8007fb4:	031b      	lsls	r3, r3, #12
 8007fb6:	693a      	ldr	r2, [r7, #16]
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	4a13      	ldr	r2, [pc, #76]	; (800800c <TIM_OC4_SetConfig+0xa8>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d003      	beq.n	8007fcc <TIM_OC4_SetConfig+0x68>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	4a12      	ldr	r2, [pc, #72]	; (8008010 <TIM_OC4_SetConfig+0xac>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d109      	bne.n	8007fe0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007fd2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	695b      	ldr	r3, [r3, #20]
 8007fd8:	019b      	lsls	r3, r3, #6
 8007fda:	697a      	ldr	r2, [r7, #20]
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	697a      	ldr	r2, [r7, #20]
 8007fe4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	68fa      	ldr	r2, [r7, #12]
 8007fea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	685a      	ldr	r2, [r3, #4]
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	693a      	ldr	r2, [r7, #16]
 8007ff8:	621a      	str	r2, [r3, #32]
}
 8007ffa:	bf00      	nop
 8007ffc:	371c      	adds	r7, #28
 8007ffe:	46bd      	mov	sp, r7
 8008000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008004:	4770      	bx	lr
 8008006:	bf00      	nop
 8008008:	feff8fff 	.word	0xfeff8fff
 800800c:	40010000 	.word	0x40010000
 8008010:	40010400 	.word	0x40010400

08008014 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008014:	b480      	push	{r7}
 8008016:	b087      	sub	sp, #28
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
 800801c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6a1b      	ldr	r3, [r3, #32]
 8008022:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6a1b      	ldr	r3, [r3, #32]
 800802e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800803a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800803c:	68fa      	ldr	r2, [r7, #12]
 800803e:	4b1b      	ldr	r3, [pc, #108]	; (80080ac <TIM_OC5_SetConfig+0x98>)
 8008040:	4013      	ands	r3, r2
 8008042:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	68fa      	ldr	r2, [r7, #12]
 800804a:	4313      	orrs	r3, r2
 800804c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008054:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	689b      	ldr	r3, [r3, #8]
 800805a:	041b      	lsls	r3, r3, #16
 800805c:	693a      	ldr	r2, [r7, #16]
 800805e:	4313      	orrs	r3, r2
 8008060:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	4a12      	ldr	r2, [pc, #72]	; (80080b0 <TIM_OC5_SetConfig+0x9c>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d003      	beq.n	8008072 <TIM_OC5_SetConfig+0x5e>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	4a11      	ldr	r2, [pc, #68]	; (80080b4 <TIM_OC5_SetConfig+0xa0>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d109      	bne.n	8008086 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008078:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	695b      	ldr	r3, [r3, #20]
 800807e:	021b      	lsls	r3, r3, #8
 8008080:	697a      	ldr	r2, [r7, #20]
 8008082:	4313      	orrs	r3, r2
 8008084:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	697a      	ldr	r2, [r7, #20]
 800808a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	68fa      	ldr	r2, [r7, #12]
 8008090:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	685a      	ldr	r2, [r3, #4]
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	693a      	ldr	r2, [r7, #16]
 800809e:	621a      	str	r2, [r3, #32]
}
 80080a0:	bf00      	nop
 80080a2:	371c      	adds	r7, #28
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr
 80080ac:	fffeff8f 	.word	0xfffeff8f
 80080b0:	40010000 	.word	0x40010000
 80080b4:	40010400 	.word	0x40010400

080080b8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b087      	sub	sp, #28
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
 80080c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6a1b      	ldr	r3, [r3, #32]
 80080c6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6a1b      	ldr	r3, [r3, #32]
 80080d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80080e0:	68fa      	ldr	r2, [r7, #12]
 80080e2:	4b1c      	ldr	r3, [pc, #112]	; (8008154 <TIM_OC6_SetConfig+0x9c>)
 80080e4:	4013      	ands	r3, r2
 80080e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	021b      	lsls	r3, r3, #8
 80080ee:	68fa      	ldr	r2, [r7, #12]
 80080f0:	4313      	orrs	r3, r2
 80080f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80080fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	689b      	ldr	r3, [r3, #8]
 8008100:	051b      	lsls	r3, r3, #20
 8008102:	693a      	ldr	r2, [r7, #16]
 8008104:	4313      	orrs	r3, r2
 8008106:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	4a13      	ldr	r2, [pc, #76]	; (8008158 <TIM_OC6_SetConfig+0xa0>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d003      	beq.n	8008118 <TIM_OC6_SetConfig+0x60>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	4a12      	ldr	r2, [pc, #72]	; (800815c <TIM_OC6_SetConfig+0xa4>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d109      	bne.n	800812c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800811e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	695b      	ldr	r3, [r3, #20]
 8008124:	029b      	lsls	r3, r3, #10
 8008126:	697a      	ldr	r2, [r7, #20]
 8008128:	4313      	orrs	r3, r2
 800812a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	697a      	ldr	r2, [r7, #20]
 8008130:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	68fa      	ldr	r2, [r7, #12]
 8008136:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	685a      	ldr	r2, [r3, #4]
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	693a      	ldr	r2, [r7, #16]
 8008144:	621a      	str	r2, [r3, #32]
}
 8008146:	bf00      	nop
 8008148:	371c      	adds	r7, #28
 800814a:	46bd      	mov	sp, r7
 800814c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008150:	4770      	bx	lr
 8008152:	bf00      	nop
 8008154:	feff8fff 	.word	0xfeff8fff
 8008158:	40010000 	.word	0x40010000
 800815c:	40010400 	.word	0x40010400

08008160 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008160:	b480      	push	{r7}
 8008162:	b085      	sub	sp, #20
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
 8008168:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008170:	2b01      	cmp	r3, #1
 8008172:	d101      	bne.n	8008178 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008174:	2302      	movs	r3, #2
 8008176:	e06d      	b.n	8008254 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2201      	movs	r2, #1
 800817c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2202      	movs	r2, #2
 8008184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	685b      	ldr	r3, [r3, #4]
 800818e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	689b      	ldr	r3, [r3, #8]
 8008196:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a30      	ldr	r2, [pc, #192]	; (8008260 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d004      	beq.n	80081ac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4a2f      	ldr	r2, [pc, #188]	; (8008264 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d108      	bne.n	80081be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80081b2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	68fa      	ldr	r2, [r7, #12]
 80081ba:	4313      	orrs	r3, r2
 80081bc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081c4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	68fa      	ldr	r2, [r7, #12]
 80081cc:	4313      	orrs	r3, r2
 80081ce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	68fa      	ldr	r2, [r7, #12]
 80081d6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4a20      	ldr	r2, [pc, #128]	; (8008260 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d022      	beq.n	8008228 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081ea:	d01d      	beq.n	8008228 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a1d      	ldr	r2, [pc, #116]	; (8008268 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d018      	beq.n	8008228 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4a1c      	ldr	r2, [pc, #112]	; (800826c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d013      	beq.n	8008228 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4a1a      	ldr	r2, [pc, #104]	; (8008270 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d00e      	beq.n	8008228 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4a15      	ldr	r2, [pc, #84]	; (8008264 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d009      	beq.n	8008228 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a16      	ldr	r2, [pc, #88]	; (8008274 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d004      	beq.n	8008228 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4a15      	ldr	r2, [pc, #84]	; (8008278 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d10c      	bne.n	8008242 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800822e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	689b      	ldr	r3, [r3, #8]
 8008234:	68ba      	ldr	r2, [r7, #8]
 8008236:	4313      	orrs	r3, r2
 8008238:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	68ba      	ldr	r2, [r7, #8]
 8008240:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2201      	movs	r2, #1
 8008246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2200      	movs	r2, #0
 800824e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008252:	2300      	movs	r3, #0
}
 8008254:	4618      	mov	r0, r3
 8008256:	3714      	adds	r7, #20
 8008258:	46bd      	mov	sp, r7
 800825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825e:	4770      	bx	lr
 8008260:	40010000 	.word	0x40010000
 8008264:	40010400 	.word	0x40010400
 8008268:	40000400 	.word	0x40000400
 800826c:	40000800 	.word	0x40000800
 8008270:	40000c00 	.word	0x40000c00
 8008274:	40014000 	.word	0x40014000
 8008278:	40001800 	.word	0x40001800

0800827c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800827c:	b480      	push	{r7}
 800827e:	b083      	sub	sp, #12
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008284:	bf00      	nop
 8008286:	370c      	adds	r7, #12
 8008288:	46bd      	mov	sp, r7
 800828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828e:	4770      	bx	lr

08008290 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008290:	b480      	push	{r7}
 8008292:	b083      	sub	sp, #12
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008298:	bf00      	nop
 800829a:	370c      	adds	r7, #12
 800829c:	46bd      	mov	sp, r7
 800829e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a2:	4770      	bx	lr

080082a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80082a4:	b480      	push	{r7}
 80082a6:	b083      	sub	sp, #12
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80082ac:	bf00      	nop
 80082ae:	370c      	adds	r7, #12
 80082b0:	46bd      	mov	sp, r7
 80082b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b6:	4770      	bx	lr

080082b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b082      	sub	sp, #8
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d101      	bne.n	80082ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80082c6:	2301      	movs	r3, #1
 80082c8:	e040      	b.n	800834c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d106      	bne.n	80082e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2200      	movs	r2, #0
 80082d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f7f9 fdda 	bl	8001e94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2224      	movs	r2, #36	; 0x24
 80082e4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	681a      	ldr	r2, [r3, #0]
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f022 0201 	bic.w	r2, r2, #1
 80082f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f000 fb50 	bl	800899c <UART_SetConfig>
 80082fc:	4603      	mov	r3, r0
 80082fe:	2b01      	cmp	r3, #1
 8008300:	d101      	bne.n	8008306 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008302:	2301      	movs	r3, #1
 8008304:	e022      	b.n	800834c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800830a:	2b00      	cmp	r3, #0
 800830c:	d002      	beq.n	8008314 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f000 fda6 	bl	8008e60 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	685a      	ldr	r2, [r3, #4]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008322:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	689a      	ldr	r2, [r3, #8]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008332:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	681a      	ldr	r2, [r3, #0]
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f042 0201 	orr.w	r2, r2, #1
 8008342:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f000 fe2d 	bl	8008fa4 <UART_CheckIdleState>
 800834a:	4603      	mov	r3, r0
}
 800834c:	4618      	mov	r0, r3
 800834e:	3708      	adds	r7, #8
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}

08008354 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b08a      	sub	sp, #40	; 0x28
 8008358:	af02      	add	r7, sp, #8
 800835a:	60f8      	str	r0, [r7, #12]
 800835c:	60b9      	str	r1, [r7, #8]
 800835e:	603b      	str	r3, [r7, #0]
 8008360:	4613      	mov	r3, r2
 8008362:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008368:	2b20      	cmp	r3, #32
 800836a:	f040 8081 	bne.w	8008470 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d002      	beq.n	800837a <HAL_UART_Transmit+0x26>
 8008374:	88fb      	ldrh	r3, [r7, #6]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d101      	bne.n	800837e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800837a:	2301      	movs	r3, #1
 800837c:	e079      	b.n	8008472 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008384:	2b01      	cmp	r3, #1
 8008386:	d101      	bne.n	800838c <HAL_UART_Transmit+0x38>
 8008388:	2302      	movs	r3, #2
 800838a:	e072      	b.n	8008472 <HAL_UART_Transmit+0x11e>
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	2201      	movs	r2, #1
 8008390:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	2200      	movs	r2, #0
 8008398:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	2221      	movs	r2, #33	; 0x21
 80083a0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80083a2:	f7f9 ff5b 	bl	800225c <HAL_GetTick>
 80083a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	88fa      	ldrh	r2, [r7, #6]
 80083ac:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	88fa      	ldrh	r2, [r7, #6]
 80083b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	689b      	ldr	r3, [r3, #8]
 80083bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083c0:	d108      	bne.n	80083d4 <HAL_UART_Transmit+0x80>
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	691b      	ldr	r3, [r3, #16]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d104      	bne.n	80083d4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80083ca:	2300      	movs	r3, #0
 80083cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	61bb      	str	r3, [r7, #24]
 80083d2:	e003      	b.n	80083dc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80083d8:	2300      	movs	r3, #0
 80083da:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	2200      	movs	r2, #0
 80083e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80083e4:	e02c      	b.n	8008440 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	9300      	str	r3, [sp, #0]
 80083ea:	697b      	ldr	r3, [r7, #20]
 80083ec:	2200      	movs	r2, #0
 80083ee:	2180      	movs	r1, #128	; 0x80
 80083f0:	68f8      	ldr	r0, [r7, #12]
 80083f2:	f000 fe20 	bl	8009036 <UART_WaitOnFlagUntilTimeout>
 80083f6:	4603      	mov	r3, r0
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d001      	beq.n	8008400 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80083fc:	2303      	movs	r3, #3
 80083fe:	e038      	b.n	8008472 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8008400:	69fb      	ldr	r3, [r7, #28]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d10b      	bne.n	800841e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008406:	69bb      	ldr	r3, [r7, #24]
 8008408:	881b      	ldrh	r3, [r3, #0]
 800840a:	461a      	mov	r2, r3
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008414:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008416:	69bb      	ldr	r3, [r7, #24]
 8008418:	3302      	adds	r3, #2
 800841a:	61bb      	str	r3, [r7, #24]
 800841c:	e007      	b.n	800842e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800841e:	69fb      	ldr	r3, [r7, #28]
 8008420:	781a      	ldrb	r2, [r3, #0]
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008428:	69fb      	ldr	r3, [r7, #28]
 800842a:	3301      	adds	r3, #1
 800842c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008434:	b29b      	uxth	r3, r3
 8008436:	3b01      	subs	r3, #1
 8008438:	b29a      	uxth	r2, r3
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008446:	b29b      	uxth	r3, r3
 8008448:	2b00      	cmp	r3, #0
 800844a:	d1cc      	bne.n	80083e6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	9300      	str	r3, [sp, #0]
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	2200      	movs	r2, #0
 8008454:	2140      	movs	r1, #64	; 0x40
 8008456:	68f8      	ldr	r0, [r7, #12]
 8008458:	f000 fded 	bl	8009036 <UART_WaitOnFlagUntilTimeout>
 800845c:	4603      	mov	r3, r0
 800845e:	2b00      	cmp	r3, #0
 8008460:	d001      	beq.n	8008466 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8008462:	2303      	movs	r3, #3
 8008464:	e005      	b.n	8008472 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	2220      	movs	r2, #32
 800846a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800846c:	2300      	movs	r3, #0
 800846e:	e000      	b.n	8008472 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8008470:	2302      	movs	r3, #2
  }
}
 8008472:	4618      	mov	r0, r3
 8008474:	3720      	adds	r7, #32
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}

0800847a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800847a:	b580      	push	{r7, lr}
 800847c:	b08a      	sub	sp, #40	; 0x28
 800847e:	af02      	add	r7, sp, #8
 8008480:	60f8      	str	r0, [r7, #12]
 8008482:	60b9      	str	r1, [r7, #8]
 8008484:	603b      	str	r3, [r7, #0]
 8008486:	4613      	mov	r3, r2
 8008488:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800848e:	2b20      	cmp	r3, #32
 8008490:	f040 80be 	bne.w	8008610 <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d002      	beq.n	80084a0 <HAL_UART_Receive+0x26>
 800849a:	88fb      	ldrh	r3, [r7, #6]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d101      	bne.n	80084a4 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80084a0:	2301      	movs	r3, #1
 80084a2:	e0b6      	b.n	8008612 <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80084aa:	2b01      	cmp	r3, #1
 80084ac:	d101      	bne.n	80084b2 <HAL_UART_Receive+0x38>
 80084ae:	2302      	movs	r3, #2
 80084b0:	e0af      	b.n	8008612 <HAL_UART_Receive+0x198>
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	2201      	movs	r2, #1
 80084b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	2200      	movs	r2, #0
 80084be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	2222      	movs	r2, #34	; 0x22
 80084c6:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	2200      	movs	r2, #0
 80084cc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80084ce:	f7f9 fec5 	bl	800225c <HAL_GetTick>
 80084d2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	88fa      	ldrh	r2, [r7, #6]
 80084d8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	88fa      	ldrh	r2, [r7, #6]
 80084e0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	689b      	ldr	r3, [r3, #8]
 80084e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084ec:	d10e      	bne.n	800850c <HAL_UART_Receive+0x92>
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	691b      	ldr	r3, [r3, #16]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d105      	bne.n	8008502 <HAL_UART_Receive+0x88>
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	f240 12ff 	movw	r2, #511	; 0x1ff
 80084fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008500:	e02d      	b.n	800855e <HAL_UART_Receive+0xe4>
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	22ff      	movs	r2, #255	; 0xff
 8008506:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800850a:	e028      	b.n	800855e <HAL_UART_Receive+0xe4>
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	689b      	ldr	r3, [r3, #8]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d10d      	bne.n	8008530 <HAL_UART_Receive+0xb6>
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	691b      	ldr	r3, [r3, #16]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d104      	bne.n	8008526 <HAL_UART_Receive+0xac>
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	22ff      	movs	r2, #255	; 0xff
 8008520:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008524:	e01b      	b.n	800855e <HAL_UART_Receive+0xe4>
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	227f      	movs	r2, #127	; 0x7f
 800852a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800852e:	e016      	b.n	800855e <HAL_UART_Receive+0xe4>
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	689b      	ldr	r3, [r3, #8]
 8008534:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008538:	d10d      	bne.n	8008556 <HAL_UART_Receive+0xdc>
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	691b      	ldr	r3, [r3, #16]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d104      	bne.n	800854c <HAL_UART_Receive+0xd2>
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	227f      	movs	r2, #127	; 0x7f
 8008546:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800854a:	e008      	b.n	800855e <HAL_UART_Receive+0xe4>
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	223f      	movs	r2, #63	; 0x3f
 8008550:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008554:	e003      	b.n	800855e <HAL_UART_Receive+0xe4>
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	2200      	movs	r2, #0
 800855a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008564:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	689b      	ldr	r3, [r3, #8]
 800856a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800856e:	d108      	bne.n	8008582 <HAL_UART_Receive+0x108>
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	691b      	ldr	r3, [r3, #16]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d104      	bne.n	8008582 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8008578:	2300      	movs	r3, #0
 800857a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	61bb      	str	r3, [r7, #24]
 8008580:	e003      	b.n	800858a <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008586:	2300      	movs	r3, #0
 8008588:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	2200      	movs	r2, #0
 800858e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8008592:	e032      	b.n	80085fa <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	9300      	str	r3, [sp, #0]
 8008598:	697b      	ldr	r3, [r7, #20]
 800859a:	2200      	movs	r2, #0
 800859c:	2120      	movs	r1, #32
 800859e:	68f8      	ldr	r0, [r7, #12]
 80085a0:	f000 fd49 	bl	8009036 <UART_WaitOnFlagUntilTimeout>
 80085a4:	4603      	mov	r3, r0
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d001      	beq.n	80085ae <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80085aa:	2303      	movs	r3, #3
 80085ac:	e031      	b.n	8008612 <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 80085ae:	69fb      	ldr	r3, [r7, #28]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d10c      	bne.n	80085ce <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ba:	b29a      	uxth	r2, r3
 80085bc:	8a7b      	ldrh	r3, [r7, #18]
 80085be:	4013      	ands	r3, r2
 80085c0:	b29a      	uxth	r2, r3
 80085c2:	69bb      	ldr	r3, [r7, #24]
 80085c4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80085c6:	69bb      	ldr	r3, [r7, #24]
 80085c8:	3302      	adds	r3, #2
 80085ca:	61bb      	str	r3, [r7, #24]
 80085cc:	e00c      	b.n	80085e8 <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085d4:	b2da      	uxtb	r2, r3
 80085d6:	8a7b      	ldrh	r3, [r7, #18]
 80085d8:	b2db      	uxtb	r3, r3
 80085da:	4013      	ands	r3, r2
 80085dc:	b2da      	uxtb	r2, r3
 80085de:	69fb      	ldr	r3, [r7, #28]
 80085e0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80085e2:	69fb      	ldr	r3, [r7, #28]
 80085e4:	3301      	adds	r3, #1
 80085e6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80085ee:	b29b      	uxth	r3, r3
 80085f0:	3b01      	subs	r3, #1
 80085f2:	b29a      	uxth	r2, r3
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008600:	b29b      	uxth	r3, r3
 8008602:	2b00      	cmp	r3, #0
 8008604:	d1c6      	bne.n	8008594 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	2220      	movs	r2, #32
 800860a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800860c:	2300      	movs	r3, #0
 800860e:	e000      	b.n	8008612 <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 8008610:	2302      	movs	r3, #2
  }
}
 8008612:	4618      	mov	r0, r3
 8008614:	3720      	adds	r7, #32
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}
	...

0800861c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800861c:	b480      	push	{r7}
 800861e:	b085      	sub	sp, #20
 8008620:	af00      	add	r7, sp, #0
 8008622:	60f8      	str	r0, [r7, #12]
 8008624:	60b9      	str	r1, [r7, #8]
 8008626:	4613      	mov	r3, r2
 8008628:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800862e:	2b20      	cmp	r3, #32
 8008630:	d145      	bne.n	80086be <HAL_UART_Transmit_IT+0xa2>
  {
    if ((pData == NULL) || (Size == 0U))
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d002      	beq.n	800863e <HAL_UART_Transmit_IT+0x22>
 8008638:	88fb      	ldrh	r3, [r7, #6]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d101      	bne.n	8008642 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800863e:	2301      	movs	r3, #1
 8008640:	e03e      	b.n	80086c0 <HAL_UART_Transmit_IT+0xa4>
    }

    __HAL_LOCK(huart);
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008648:	2b01      	cmp	r3, #1
 800864a:	d101      	bne.n	8008650 <HAL_UART_Transmit_IT+0x34>
 800864c:	2302      	movs	r3, #2
 800864e:	e037      	b.n	80086c0 <HAL_UART_Transmit_IT+0xa4>
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	2201      	movs	r2, #1
 8008654:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	68ba      	ldr	r2, [r7, #8]
 800865c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	88fa      	ldrh	r2, [r7, #6]
 8008662:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	88fa      	ldrh	r2, [r7, #6]
 800866a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	2200      	movs	r2, #0
 8008672:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	2200      	movs	r2, #0
 8008678:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	2221      	movs	r2, #33	; 0x21
 8008680:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	689b      	ldr	r3, [r3, #8]
 8008686:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800868a:	d107      	bne.n	800869c <HAL_UART_Transmit_IT+0x80>
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	691b      	ldr	r3, [r3, #16]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d103      	bne.n	800869c <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	4a0d      	ldr	r2, [pc, #52]	; (80086cc <HAL_UART_Transmit_IT+0xb0>)
 8008698:	669a      	str	r2, [r3, #104]	; 0x68
 800869a:	e002      	b.n	80086a2 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	4a0c      	ldr	r2, [pc, #48]	; (80086d0 <HAL_UART_Transmit_IT+0xb4>)
 80086a0:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	2200      	movs	r2, #0
 80086a6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	681a      	ldr	r2, [r3, #0]
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80086b8:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80086ba:	2300      	movs	r3, #0
 80086bc:	e000      	b.n	80086c0 <HAL_UART_Transmit_IT+0xa4>
  }
  else
  {
    return HAL_BUSY;
 80086be:	2302      	movs	r3, #2
  }
}
 80086c0:	4618      	mov	r0, r3
 80086c2:	3714      	adds	r7, #20
 80086c4:	46bd      	mov	sp, r7
 80086c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ca:	4770      	bx	lr
 80086cc:	0800944b 	.word	0x0800944b
 80086d0:	080093d9 	.word	0x080093d9

080086d4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b084      	sub	sp, #16
 80086d8:	af00      	add	r7, sp, #0
 80086da:	60f8      	str	r0, [r7, #12]
 80086dc:	60b9      	str	r1, [r7, #8]
 80086de:	4613      	mov	r3, r2
 80086e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086e6:	2b20      	cmp	r3, #32
 80086e8:	d12c      	bne.n	8008744 <HAL_UART_Receive_DMA+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d002      	beq.n	80086f6 <HAL_UART_Receive_DMA+0x22>
 80086f0:	88fb      	ldrh	r3, [r7, #6]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d101      	bne.n	80086fa <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 80086f6:	2301      	movs	r3, #1
 80086f8:	e025      	b.n	8008746 <HAL_UART_Receive_DMA+0x72>
    }

    __HAL_LOCK(huart);
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008700:	2b01      	cmp	r3, #1
 8008702:	d101      	bne.n	8008708 <HAL_UART_Receive_DMA+0x34>
 8008704:	2302      	movs	r3, #2
 8008706:	e01e      	b.n	8008746 <HAL_UART_Receive_DMA+0x72>
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	2201      	movs	r2, #1
 800870c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	2200      	movs	r2, #0
 8008714:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	685b      	ldr	r3, [r3, #4]
 800871c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008720:	2b00      	cmp	r3, #0
 8008722:	d007      	beq.n	8008734 <HAL_UART_Receive_DMA+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	681a      	ldr	r2, [r3, #0]
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8008732:	601a      	str	r2, [r3, #0]
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008734:	88fb      	ldrh	r3, [r7, #6]
 8008736:	461a      	mov	r2, r3
 8008738:	68b9      	ldr	r1, [r7, #8]
 800873a:	68f8      	ldr	r0, [r7, #12]
 800873c:	f000 fcf8 	bl	8009130 <UART_Start_Receive_DMA>
 8008740:	4603      	mov	r3, r0
 8008742:	e000      	b.n	8008746 <HAL_UART_Receive_DMA+0x72>
  }
  else
  {
    return HAL_BUSY;
 8008744:	2302      	movs	r3, #2
  }
}
 8008746:	4618      	mov	r0, r3
 8008748:	3710      	adds	r7, #16
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}

0800874e <HAL_UART_DMAPause>:
  * @brief Pause the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart)
{
 800874e:	b480      	push	{r7}
 8008750:	b085      	sub	sp, #20
 8008752:	af00      	add	r7, sp, #0
 8008754:	6078      	str	r0, [r7, #4]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800875a:	60fb      	str	r3, [r7, #12]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008760:	60bb      	str	r3, [r7, #8]

  __HAL_LOCK(huart);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008768:	2b01      	cmp	r3, #1
 800876a:	d101      	bne.n	8008770 <HAL_UART_DMAPause+0x22>
 800876c:	2302      	movs	r3, #2
 800876e:	e03c      	b.n	80087ea <HAL_UART_DMAPause+0x9c>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2201      	movs	r2, #1
 8008774:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	689b      	ldr	r3, [r3, #8]
 800877e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008782:	2b80      	cmp	r3, #128	; 0x80
 8008784:	d10a      	bne.n	800879c <HAL_UART_DMAPause+0x4e>
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	2b21      	cmp	r3, #33	; 0x21
 800878a:	d107      	bne.n	800879c <HAL_UART_DMAPause+0x4e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    /* Disable the UART DMA Tx request */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	689a      	ldr	r2, [r3, #8]
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800879a:	609a      	str	r2, [r3, #8]
  }
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	689b      	ldr	r3, [r3, #8]
 80087a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087a6:	2b40      	cmp	r3, #64	; 0x40
 80087a8:	d11a      	bne.n	80087e0 <HAL_UART_DMAPause+0x92>
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	2b22      	cmp	r3, #34	; 0x22
 80087ae:	d117      	bne.n	80087e0 <HAL_UART_DMAPause+0x92>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	681a      	ldr	r2, [r3, #0]
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80087be:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	689a      	ldr	r2, [r3, #8]
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f022 0201 	bic.w	r2, r2, #1
 80087ce:	609a      	str	r2, [r3, #8]

    /* Disable the UART DMA Rx request */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	689a      	ldr	r2, [r3, #8]
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80087de:	609a      	str	r2, [r3, #8]
  }

  __HAL_UNLOCK(huart);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2200      	movs	r2, #0
 80087e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80087e8:	2300      	movs	r3, #0
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	3714      	adds	r7, #20
 80087ee:	46bd      	mov	sp, r7
 80087f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f4:	4770      	bx	lr

080087f6 <HAL_UART_DMAResume>:
  * @brief Resume the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
{
 80087f6:	b480      	push	{r7}
 80087f8:	b083      	sub	sp, #12
 80087fa:	af00      	add	r7, sp, #0
 80087fc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008804:	2b01      	cmp	r3, #1
 8008806:	d101      	bne.n	800880c <HAL_UART_DMAResume+0x16>
 8008808:	2302      	movs	r3, #2
 800880a:	e034      	b.n	8008876 <HAL_UART_DMAResume+0x80>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2201      	movs	r2, #1
 8008810:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008818:	2b21      	cmp	r3, #33	; 0x21
 800881a:	d107      	bne.n	800882c <HAL_UART_DMAResume+0x36>
  {
    /* Enable the UART DMA Tx request */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	689a      	ldr	r2, [r3, #8]
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800882a:	609a      	str	r2, [r3, #8]
  }
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008830:	2b22      	cmp	r3, #34	; 0x22
 8008832:	d11b      	bne.n	800886c <HAL_UART_DMAResume+0x76>
  {
    /* Clear the Overrun flag before resuming the Rx transfer */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	2208      	movs	r2, #8
 800883a:	621a      	str	r2, [r3, #32]

    /* Re-enable PE and ERR (Frame error, noise error, overrun error) interrupts */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	681a      	ldr	r2, [r3, #0]
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800884a:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	689a      	ldr	r2, [r3, #8]
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f042 0201 	orr.w	r2, r2, #1
 800885a:	609a      	str	r2, [r3, #8]

    /* Enable the UART DMA Rx request */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	689a      	ldr	r2, [r3, #8]
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800886a:	609a      	str	r2, [r3, #8]
  }

  __HAL_UNLOCK(huart);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2200      	movs	r2, #0
 8008870:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008874:	2300      	movs	r3, #0
}
 8008876:	4618      	mov	r0, r3
 8008878:	370c      	adds	r7, #12
 800887a:	46bd      	mov	sp, r7
 800887c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008880:	4770      	bx	lr

08008882 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8008882:	b580      	push	{r7, lr}
 8008884:	b084      	sub	sp, #16
 8008886:	af00      	add	r7, sp, #0
 8008888:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800888e:	60fb      	str	r3, [r7, #12]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008894:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	689b      	ldr	r3, [r3, #8]
 800889c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088a0:	2b80      	cmp	r3, #128	; 0x80
 80088a2:	d127      	bne.n	80088f4 <HAL_UART_DMAStop+0x72>
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	2b21      	cmp	r3, #33	; 0x21
 80088a8:	d124      	bne.n	80088f4 <HAL_UART_DMAStop+0x72>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	689a      	ldr	r2, [r3, #8]
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80088b8:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d015      	beq.n	80088ee <HAL_UART_DMAStop+0x6c>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088c6:	4618      	mov	r0, r3
 80088c8:	f7fa f9d2 	bl	8002c70 <HAL_DMA_Abort>
 80088cc:	4603      	mov	r3, r0
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d00d      	beq.n	80088ee <HAL_UART_DMAStop+0x6c>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088d6:	4618      	mov	r0, r3
 80088d8:	f7fa fbc4 	bl	8003064 <HAL_DMA_GetError>
 80088dc:	4603      	mov	r3, r0
 80088de:	2b20      	cmp	r3, #32
 80088e0:	d105      	bne.n	80088ee <HAL_UART_DMAStop+0x6c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2210      	movs	r2, #16
 80088e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80088ea:	2303      	movs	r3, #3
 80088ec:	e032      	b.n	8008954 <HAL_UART_DMAStop+0xd2>
        }
      }
    }

    UART_EndTxTransfer(huart);
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f000 fc8a 	bl	8009208 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	689b      	ldr	r3, [r3, #8]
 80088fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088fe:	2b40      	cmp	r3, #64	; 0x40
 8008900:	d127      	bne.n	8008952 <HAL_UART_DMAStop+0xd0>
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	2b22      	cmp	r3, #34	; 0x22
 8008906:	d124      	bne.n	8008952 <HAL_UART_DMAStop+0xd0>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	689a      	ldr	r2, [r3, #8]
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008916:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800891c:	2b00      	cmp	r3, #0
 800891e:	d015      	beq.n	800894c <HAL_UART_DMAStop+0xca>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008924:	4618      	mov	r0, r3
 8008926:	f7fa f9a3 	bl	8002c70 <HAL_DMA_Abort>
 800892a:	4603      	mov	r3, r0
 800892c:	2b00      	cmp	r3, #0
 800892e:	d00d      	beq.n	800894c <HAL_UART_DMAStop+0xca>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008934:	4618      	mov	r0, r3
 8008936:	f7fa fb95 	bl	8003064 <HAL_DMA_GetError>
 800893a:	4603      	mov	r3, r0
 800893c:	2b20      	cmp	r3, #32
 800893e:	d105      	bne.n	800894c <HAL_UART_DMAStop+0xca>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2210      	movs	r2, #16
 8008944:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008948:	2303      	movs	r3, #3
 800894a:	e003      	b.n	8008954 <HAL_UART_DMAStop+0xd2>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f000 fc70 	bl	8009232 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8008952:	2300      	movs	r3, #0
}
 8008954:	4618      	mov	r0, r3
 8008956:	3710      	adds	r7, #16
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}

0800895c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800895c:	b480      	push	{r7}
 800895e:	b083      	sub	sp, #12
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008964:	bf00      	nop
 8008966:	370c      	adds	r7, #12
 8008968:	46bd      	mov	sp, r7
 800896a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896e:	4770      	bx	lr

08008970 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008970:	b480      	push	{r7}
 8008972:	b083      	sub	sp, #12
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008978:	bf00      	nop
 800897a:	370c      	adds	r7, #12
 800897c:	46bd      	mov	sp, r7
 800897e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008982:	4770      	bx	lr

08008984 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008984:	b480      	push	{r7}
 8008986:	b083      	sub	sp, #12
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
 800898c:	460b      	mov	r3, r1
 800898e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008990:	bf00      	nop
 8008992:	370c      	adds	r7, #12
 8008994:	46bd      	mov	sp, r7
 8008996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899a:	4770      	bx	lr

0800899c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b088      	sub	sp, #32
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80089a4:	2300      	movs	r3, #0
 80089a6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	689a      	ldr	r2, [r3, #8]
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	691b      	ldr	r3, [r3, #16]
 80089b0:	431a      	orrs	r2, r3
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	695b      	ldr	r3, [r3, #20]
 80089b6:	431a      	orrs	r2, r3
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	69db      	ldr	r3, [r3, #28]
 80089bc:	4313      	orrs	r3, r2
 80089be:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	681a      	ldr	r2, [r3, #0]
 80089c6:	4ba7      	ldr	r3, [pc, #668]	; (8008c64 <UART_SetConfig+0x2c8>)
 80089c8:	4013      	ands	r3, r2
 80089ca:	687a      	ldr	r2, [r7, #4]
 80089cc:	6812      	ldr	r2, [r2, #0]
 80089ce:	6979      	ldr	r1, [r7, #20]
 80089d0:	430b      	orrs	r3, r1
 80089d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	685b      	ldr	r3, [r3, #4]
 80089da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	68da      	ldr	r2, [r3, #12]
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	430a      	orrs	r2, r1
 80089e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	699b      	ldr	r3, [r3, #24]
 80089ee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6a1b      	ldr	r3, [r3, #32]
 80089f4:	697a      	ldr	r2, [r7, #20]
 80089f6:	4313      	orrs	r3, r2
 80089f8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	689b      	ldr	r3, [r3, #8]
 8008a00:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	697a      	ldr	r2, [r7, #20]
 8008a0a:	430a      	orrs	r2, r1
 8008a0c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	4a95      	ldr	r2, [pc, #596]	; (8008c68 <UART_SetConfig+0x2cc>)
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d120      	bne.n	8008a5a <UART_SetConfig+0xbe>
 8008a18:	4b94      	ldr	r3, [pc, #592]	; (8008c6c <UART_SetConfig+0x2d0>)
 8008a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a1e:	f003 0303 	and.w	r3, r3, #3
 8008a22:	2b03      	cmp	r3, #3
 8008a24:	d816      	bhi.n	8008a54 <UART_SetConfig+0xb8>
 8008a26:	a201      	add	r2, pc, #4	; (adr r2, 8008a2c <UART_SetConfig+0x90>)
 8008a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a2c:	08008a3d 	.word	0x08008a3d
 8008a30:	08008a49 	.word	0x08008a49
 8008a34:	08008a43 	.word	0x08008a43
 8008a38:	08008a4f 	.word	0x08008a4f
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	77fb      	strb	r3, [r7, #31]
 8008a40:	e14f      	b.n	8008ce2 <UART_SetConfig+0x346>
 8008a42:	2302      	movs	r3, #2
 8008a44:	77fb      	strb	r3, [r7, #31]
 8008a46:	e14c      	b.n	8008ce2 <UART_SetConfig+0x346>
 8008a48:	2304      	movs	r3, #4
 8008a4a:	77fb      	strb	r3, [r7, #31]
 8008a4c:	e149      	b.n	8008ce2 <UART_SetConfig+0x346>
 8008a4e:	2308      	movs	r3, #8
 8008a50:	77fb      	strb	r3, [r7, #31]
 8008a52:	e146      	b.n	8008ce2 <UART_SetConfig+0x346>
 8008a54:	2310      	movs	r3, #16
 8008a56:	77fb      	strb	r3, [r7, #31]
 8008a58:	e143      	b.n	8008ce2 <UART_SetConfig+0x346>
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	4a84      	ldr	r2, [pc, #528]	; (8008c70 <UART_SetConfig+0x2d4>)
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d132      	bne.n	8008aca <UART_SetConfig+0x12e>
 8008a64:	4b81      	ldr	r3, [pc, #516]	; (8008c6c <UART_SetConfig+0x2d0>)
 8008a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a6a:	f003 030c 	and.w	r3, r3, #12
 8008a6e:	2b0c      	cmp	r3, #12
 8008a70:	d828      	bhi.n	8008ac4 <UART_SetConfig+0x128>
 8008a72:	a201      	add	r2, pc, #4	; (adr r2, 8008a78 <UART_SetConfig+0xdc>)
 8008a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a78:	08008aad 	.word	0x08008aad
 8008a7c:	08008ac5 	.word	0x08008ac5
 8008a80:	08008ac5 	.word	0x08008ac5
 8008a84:	08008ac5 	.word	0x08008ac5
 8008a88:	08008ab9 	.word	0x08008ab9
 8008a8c:	08008ac5 	.word	0x08008ac5
 8008a90:	08008ac5 	.word	0x08008ac5
 8008a94:	08008ac5 	.word	0x08008ac5
 8008a98:	08008ab3 	.word	0x08008ab3
 8008a9c:	08008ac5 	.word	0x08008ac5
 8008aa0:	08008ac5 	.word	0x08008ac5
 8008aa4:	08008ac5 	.word	0x08008ac5
 8008aa8:	08008abf 	.word	0x08008abf
 8008aac:	2300      	movs	r3, #0
 8008aae:	77fb      	strb	r3, [r7, #31]
 8008ab0:	e117      	b.n	8008ce2 <UART_SetConfig+0x346>
 8008ab2:	2302      	movs	r3, #2
 8008ab4:	77fb      	strb	r3, [r7, #31]
 8008ab6:	e114      	b.n	8008ce2 <UART_SetConfig+0x346>
 8008ab8:	2304      	movs	r3, #4
 8008aba:	77fb      	strb	r3, [r7, #31]
 8008abc:	e111      	b.n	8008ce2 <UART_SetConfig+0x346>
 8008abe:	2308      	movs	r3, #8
 8008ac0:	77fb      	strb	r3, [r7, #31]
 8008ac2:	e10e      	b.n	8008ce2 <UART_SetConfig+0x346>
 8008ac4:	2310      	movs	r3, #16
 8008ac6:	77fb      	strb	r3, [r7, #31]
 8008ac8:	e10b      	b.n	8008ce2 <UART_SetConfig+0x346>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	4a69      	ldr	r2, [pc, #420]	; (8008c74 <UART_SetConfig+0x2d8>)
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d120      	bne.n	8008b16 <UART_SetConfig+0x17a>
 8008ad4:	4b65      	ldr	r3, [pc, #404]	; (8008c6c <UART_SetConfig+0x2d0>)
 8008ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ada:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008ade:	2b30      	cmp	r3, #48	; 0x30
 8008ae0:	d013      	beq.n	8008b0a <UART_SetConfig+0x16e>
 8008ae2:	2b30      	cmp	r3, #48	; 0x30
 8008ae4:	d814      	bhi.n	8008b10 <UART_SetConfig+0x174>
 8008ae6:	2b20      	cmp	r3, #32
 8008ae8:	d009      	beq.n	8008afe <UART_SetConfig+0x162>
 8008aea:	2b20      	cmp	r3, #32
 8008aec:	d810      	bhi.n	8008b10 <UART_SetConfig+0x174>
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d002      	beq.n	8008af8 <UART_SetConfig+0x15c>
 8008af2:	2b10      	cmp	r3, #16
 8008af4:	d006      	beq.n	8008b04 <UART_SetConfig+0x168>
 8008af6:	e00b      	b.n	8008b10 <UART_SetConfig+0x174>
 8008af8:	2300      	movs	r3, #0
 8008afa:	77fb      	strb	r3, [r7, #31]
 8008afc:	e0f1      	b.n	8008ce2 <UART_SetConfig+0x346>
 8008afe:	2302      	movs	r3, #2
 8008b00:	77fb      	strb	r3, [r7, #31]
 8008b02:	e0ee      	b.n	8008ce2 <UART_SetConfig+0x346>
 8008b04:	2304      	movs	r3, #4
 8008b06:	77fb      	strb	r3, [r7, #31]
 8008b08:	e0eb      	b.n	8008ce2 <UART_SetConfig+0x346>
 8008b0a:	2308      	movs	r3, #8
 8008b0c:	77fb      	strb	r3, [r7, #31]
 8008b0e:	e0e8      	b.n	8008ce2 <UART_SetConfig+0x346>
 8008b10:	2310      	movs	r3, #16
 8008b12:	77fb      	strb	r3, [r7, #31]
 8008b14:	e0e5      	b.n	8008ce2 <UART_SetConfig+0x346>
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	4a57      	ldr	r2, [pc, #348]	; (8008c78 <UART_SetConfig+0x2dc>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d120      	bne.n	8008b62 <UART_SetConfig+0x1c6>
 8008b20:	4b52      	ldr	r3, [pc, #328]	; (8008c6c <UART_SetConfig+0x2d0>)
 8008b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b26:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008b2a:	2bc0      	cmp	r3, #192	; 0xc0
 8008b2c:	d013      	beq.n	8008b56 <UART_SetConfig+0x1ba>
 8008b2e:	2bc0      	cmp	r3, #192	; 0xc0
 8008b30:	d814      	bhi.n	8008b5c <UART_SetConfig+0x1c0>
 8008b32:	2b80      	cmp	r3, #128	; 0x80
 8008b34:	d009      	beq.n	8008b4a <UART_SetConfig+0x1ae>
 8008b36:	2b80      	cmp	r3, #128	; 0x80
 8008b38:	d810      	bhi.n	8008b5c <UART_SetConfig+0x1c0>
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d002      	beq.n	8008b44 <UART_SetConfig+0x1a8>
 8008b3e:	2b40      	cmp	r3, #64	; 0x40
 8008b40:	d006      	beq.n	8008b50 <UART_SetConfig+0x1b4>
 8008b42:	e00b      	b.n	8008b5c <UART_SetConfig+0x1c0>
 8008b44:	2300      	movs	r3, #0
 8008b46:	77fb      	strb	r3, [r7, #31]
 8008b48:	e0cb      	b.n	8008ce2 <UART_SetConfig+0x346>
 8008b4a:	2302      	movs	r3, #2
 8008b4c:	77fb      	strb	r3, [r7, #31]
 8008b4e:	e0c8      	b.n	8008ce2 <UART_SetConfig+0x346>
 8008b50:	2304      	movs	r3, #4
 8008b52:	77fb      	strb	r3, [r7, #31]
 8008b54:	e0c5      	b.n	8008ce2 <UART_SetConfig+0x346>
 8008b56:	2308      	movs	r3, #8
 8008b58:	77fb      	strb	r3, [r7, #31]
 8008b5a:	e0c2      	b.n	8008ce2 <UART_SetConfig+0x346>
 8008b5c:	2310      	movs	r3, #16
 8008b5e:	77fb      	strb	r3, [r7, #31]
 8008b60:	e0bf      	b.n	8008ce2 <UART_SetConfig+0x346>
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	4a45      	ldr	r2, [pc, #276]	; (8008c7c <UART_SetConfig+0x2e0>)
 8008b68:	4293      	cmp	r3, r2
 8008b6a:	d125      	bne.n	8008bb8 <UART_SetConfig+0x21c>
 8008b6c:	4b3f      	ldr	r3, [pc, #252]	; (8008c6c <UART_SetConfig+0x2d0>)
 8008b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b7a:	d017      	beq.n	8008bac <UART_SetConfig+0x210>
 8008b7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b80:	d817      	bhi.n	8008bb2 <UART_SetConfig+0x216>
 8008b82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b86:	d00b      	beq.n	8008ba0 <UART_SetConfig+0x204>
 8008b88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b8c:	d811      	bhi.n	8008bb2 <UART_SetConfig+0x216>
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d003      	beq.n	8008b9a <UART_SetConfig+0x1fe>
 8008b92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b96:	d006      	beq.n	8008ba6 <UART_SetConfig+0x20a>
 8008b98:	e00b      	b.n	8008bb2 <UART_SetConfig+0x216>
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	77fb      	strb	r3, [r7, #31]
 8008b9e:	e0a0      	b.n	8008ce2 <UART_SetConfig+0x346>
 8008ba0:	2302      	movs	r3, #2
 8008ba2:	77fb      	strb	r3, [r7, #31]
 8008ba4:	e09d      	b.n	8008ce2 <UART_SetConfig+0x346>
 8008ba6:	2304      	movs	r3, #4
 8008ba8:	77fb      	strb	r3, [r7, #31]
 8008baa:	e09a      	b.n	8008ce2 <UART_SetConfig+0x346>
 8008bac:	2308      	movs	r3, #8
 8008bae:	77fb      	strb	r3, [r7, #31]
 8008bb0:	e097      	b.n	8008ce2 <UART_SetConfig+0x346>
 8008bb2:	2310      	movs	r3, #16
 8008bb4:	77fb      	strb	r3, [r7, #31]
 8008bb6:	e094      	b.n	8008ce2 <UART_SetConfig+0x346>
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	4a30      	ldr	r2, [pc, #192]	; (8008c80 <UART_SetConfig+0x2e4>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d125      	bne.n	8008c0e <UART_SetConfig+0x272>
 8008bc2:	4b2a      	ldr	r3, [pc, #168]	; (8008c6c <UART_SetConfig+0x2d0>)
 8008bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008bc8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008bcc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008bd0:	d017      	beq.n	8008c02 <UART_SetConfig+0x266>
 8008bd2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008bd6:	d817      	bhi.n	8008c08 <UART_SetConfig+0x26c>
 8008bd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008bdc:	d00b      	beq.n	8008bf6 <UART_SetConfig+0x25a>
 8008bde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008be2:	d811      	bhi.n	8008c08 <UART_SetConfig+0x26c>
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d003      	beq.n	8008bf0 <UART_SetConfig+0x254>
 8008be8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008bec:	d006      	beq.n	8008bfc <UART_SetConfig+0x260>
 8008bee:	e00b      	b.n	8008c08 <UART_SetConfig+0x26c>
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	77fb      	strb	r3, [r7, #31]
 8008bf4:	e075      	b.n	8008ce2 <UART_SetConfig+0x346>
 8008bf6:	2302      	movs	r3, #2
 8008bf8:	77fb      	strb	r3, [r7, #31]
 8008bfa:	e072      	b.n	8008ce2 <UART_SetConfig+0x346>
 8008bfc:	2304      	movs	r3, #4
 8008bfe:	77fb      	strb	r3, [r7, #31]
 8008c00:	e06f      	b.n	8008ce2 <UART_SetConfig+0x346>
 8008c02:	2308      	movs	r3, #8
 8008c04:	77fb      	strb	r3, [r7, #31]
 8008c06:	e06c      	b.n	8008ce2 <UART_SetConfig+0x346>
 8008c08:	2310      	movs	r3, #16
 8008c0a:	77fb      	strb	r3, [r7, #31]
 8008c0c:	e069      	b.n	8008ce2 <UART_SetConfig+0x346>
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	4a1c      	ldr	r2, [pc, #112]	; (8008c84 <UART_SetConfig+0x2e8>)
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d137      	bne.n	8008c88 <UART_SetConfig+0x2ec>
 8008c18:	4b14      	ldr	r3, [pc, #80]	; (8008c6c <UART_SetConfig+0x2d0>)
 8008c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c1e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008c22:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008c26:	d017      	beq.n	8008c58 <UART_SetConfig+0x2bc>
 8008c28:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008c2c:	d817      	bhi.n	8008c5e <UART_SetConfig+0x2c2>
 8008c2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c32:	d00b      	beq.n	8008c4c <UART_SetConfig+0x2b0>
 8008c34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c38:	d811      	bhi.n	8008c5e <UART_SetConfig+0x2c2>
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d003      	beq.n	8008c46 <UART_SetConfig+0x2aa>
 8008c3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c42:	d006      	beq.n	8008c52 <UART_SetConfig+0x2b6>
 8008c44:	e00b      	b.n	8008c5e <UART_SetConfig+0x2c2>
 8008c46:	2300      	movs	r3, #0
 8008c48:	77fb      	strb	r3, [r7, #31]
 8008c4a:	e04a      	b.n	8008ce2 <UART_SetConfig+0x346>
 8008c4c:	2302      	movs	r3, #2
 8008c4e:	77fb      	strb	r3, [r7, #31]
 8008c50:	e047      	b.n	8008ce2 <UART_SetConfig+0x346>
 8008c52:	2304      	movs	r3, #4
 8008c54:	77fb      	strb	r3, [r7, #31]
 8008c56:	e044      	b.n	8008ce2 <UART_SetConfig+0x346>
 8008c58:	2308      	movs	r3, #8
 8008c5a:	77fb      	strb	r3, [r7, #31]
 8008c5c:	e041      	b.n	8008ce2 <UART_SetConfig+0x346>
 8008c5e:	2310      	movs	r3, #16
 8008c60:	77fb      	strb	r3, [r7, #31]
 8008c62:	e03e      	b.n	8008ce2 <UART_SetConfig+0x346>
 8008c64:	efff69f3 	.word	0xefff69f3
 8008c68:	40011000 	.word	0x40011000
 8008c6c:	40023800 	.word	0x40023800
 8008c70:	40004400 	.word	0x40004400
 8008c74:	40004800 	.word	0x40004800
 8008c78:	40004c00 	.word	0x40004c00
 8008c7c:	40005000 	.word	0x40005000
 8008c80:	40011400 	.word	0x40011400
 8008c84:	40007800 	.word	0x40007800
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	4a71      	ldr	r2, [pc, #452]	; (8008e54 <UART_SetConfig+0x4b8>)
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d125      	bne.n	8008cde <UART_SetConfig+0x342>
 8008c92:	4b71      	ldr	r3, [pc, #452]	; (8008e58 <UART_SetConfig+0x4bc>)
 8008c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c98:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008c9c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008ca0:	d017      	beq.n	8008cd2 <UART_SetConfig+0x336>
 8008ca2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008ca6:	d817      	bhi.n	8008cd8 <UART_SetConfig+0x33c>
 8008ca8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008cac:	d00b      	beq.n	8008cc6 <UART_SetConfig+0x32a>
 8008cae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008cb2:	d811      	bhi.n	8008cd8 <UART_SetConfig+0x33c>
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d003      	beq.n	8008cc0 <UART_SetConfig+0x324>
 8008cb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008cbc:	d006      	beq.n	8008ccc <UART_SetConfig+0x330>
 8008cbe:	e00b      	b.n	8008cd8 <UART_SetConfig+0x33c>
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	77fb      	strb	r3, [r7, #31]
 8008cc4:	e00d      	b.n	8008ce2 <UART_SetConfig+0x346>
 8008cc6:	2302      	movs	r3, #2
 8008cc8:	77fb      	strb	r3, [r7, #31]
 8008cca:	e00a      	b.n	8008ce2 <UART_SetConfig+0x346>
 8008ccc:	2304      	movs	r3, #4
 8008cce:	77fb      	strb	r3, [r7, #31]
 8008cd0:	e007      	b.n	8008ce2 <UART_SetConfig+0x346>
 8008cd2:	2308      	movs	r3, #8
 8008cd4:	77fb      	strb	r3, [r7, #31]
 8008cd6:	e004      	b.n	8008ce2 <UART_SetConfig+0x346>
 8008cd8:	2310      	movs	r3, #16
 8008cda:	77fb      	strb	r3, [r7, #31]
 8008cdc:	e001      	b.n	8008ce2 <UART_SetConfig+0x346>
 8008cde:	2310      	movs	r3, #16
 8008ce0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	69db      	ldr	r3, [r3, #28]
 8008ce6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008cea:	d15b      	bne.n	8008da4 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8008cec:	7ffb      	ldrb	r3, [r7, #31]
 8008cee:	2b08      	cmp	r3, #8
 8008cf0:	d827      	bhi.n	8008d42 <UART_SetConfig+0x3a6>
 8008cf2:	a201      	add	r2, pc, #4	; (adr r2, 8008cf8 <UART_SetConfig+0x35c>)
 8008cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cf8:	08008d1d 	.word	0x08008d1d
 8008cfc:	08008d25 	.word	0x08008d25
 8008d00:	08008d2d 	.word	0x08008d2d
 8008d04:	08008d43 	.word	0x08008d43
 8008d08:	08008d33 	.word	0x08008d33
 8008d0c:	08008d43 	.word	0x08008d43
 8008d10:	08008d43 	.word	0x08008d43
 8008d14:	08008d43 	.word	0x08008d43
 8008d18:	08008d3b 	.word	0x08008d3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d1c:	f7fd fbd2 	bl	80064c4 <HAL_RCC_GetPCLK1Freq>
 8008d20:	61b8      	str	r0, [r7, #24]
        break;
 8008d22:	e013      	b.n	8008d4c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008d24:	f7fd fbe2 	bl	80064ec <HAL_RCC_GetPCLK2Freq>
 8008d28:	61b8      	str	r0, [r7, #24]
        break;
 8008d2a:	e00f      	b.n	8008d4c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008d2c:	4b4b      	ldr	r3, [pc, #300]	; (8008e5c <UART_SetConfig+0x4c0>)
 8008d2e:	61bb      	str	r3, [r7, #24]
        break;
 8008d30:	e00c      	b.n	8008d4c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008d32:	f7fd fb05 	bl	8006340 <HAL_RCC_GetSysClockFreq>
 8008d36:	61b8      	str	r0, [r7, #24]
        break;
 8008d38:	e008      	b.n	8008d4c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d3e:	61bb      	str	r3, [r7, #24]
        break;
 8008d40:	e004      	b.n	8008d4c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8008d42:	2300      	movs	r3, #0
 8008d44:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008d46:	2301      	movs	r3, #1
 8008d48:	77bb      	strb	r3, [r7, #30]
        break;
 8008d4a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008d4c:	69bb      	ldr	r3, [r7, #24]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d074      	beq.n	8008e3c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008d52:	69bb      	ldr	r3, [r7, #24]
 8008d54:	005a      	lsls	r2, r3, #1
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	685b      	ldr	r3, [r3, #4]
 8008d5a:	085b      	lsrs	r3, r3, #1
 8008d5c:	441a      	add	r2, r3
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	685b      	ldr	r3, [r3, #4]
 8008d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d66:	b29b      	uxth	r3, r3
 8008d68:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008d6a:	693b      	ldr	r3, [r7, #16]
 8008d6c:	2b0f      	cmp	r3, #15
 8008d6e:	d916      	bls.n	8008d9e <UART_SetConfig+0x402>
 8008d70:	693b      	ldr	r3, [r7, #16]
 8008d72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d76:	d212      	bcs.n	8008d9e <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008d78:	693b      	ldr	r3, [r7, #16]
 8008d7a:	b29b      	uxth	r3, r3
 8008d7c:	f023 030f 	bic.w	r3, r3, #15
 8008d80:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008d82:	693b      	ldr	r3, [r7, #16]
 8008d84:	085b      	lsrs	r3, r3, #1
 8008d86:	b29b      	uxth	r3, r3
 8008d88:	f003 0307 	and.w	r3, r3, #7
 8008d8c:	b29a      	uxth	r2, r3
 8008d8e:	89fb      	ldrh	r3, [r7, #14]
 8008d90:	4313      	orrs	r3, r2
 8008d92:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	89fa      	ldrh	r2, [r7, #14]
 8008d9a:	60da      	str	r2, [r3, #12]
 8008d9c:	e04e      	b.n	8008e3c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8008d9e:	2301      	movs	r3, #1
 8008da0:	77bb      	strb	r3, [r7, #30]
 8008da2:	e04b      	b.n	8008e3c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008da4:	7ffb      	ldrb	r3, [r7, #31]
 8008da6:	2b08      	cmp	r3, #8
 8008da8:	d827      	bhi.n	8008dfa <UART_SetConfig+0x45e>
 8008daa:	a201      	add	r2, pc, #4	; (adr r2, 8008db0 <UART_SetConfig+0x414>)
 8008dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008db0:	08008dd5 	.word	0x08008dd5
 8008db4:	08008ddd 	.word	0x08008ddd
 8008db8:	08008de5 	.word	0x08008de5
 8008dbc:	08008dfb 	.word	0x08008dfb
 8008dc0:	08008deb 	.word	0x08008deb
 8008dc4:	08008dfb 	.word	0x08008dfb
 8008dc8:	08008dfb 	.word	0x08008dfb
 8008dcc:	08008dfb 	.word	0x08008dfb
 8008dd0:	08008df3 	.word	0x08008df3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008dd4:	f7fd fb76 	bl	80064c4 <HAL_RCC_GetPCLK1Freq>
 8008dd8:	61b8      	str	r0, [r7, #24]
        break;
 8008dda:	e013      	b.n	8008e04 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008ddc:	f7fd fb86 	bl	80064ec <HAL_RCC_GetPCLK2Freq>
 8008de0:	61b8      	str	r0, [r7, #24]
        break;
 8008de2:	e00f      	b.n	8008e04 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008de4:	4b1d      	ldr	r3, [pc, #116]	; (8008e5c <UART_SetConfig+0x4c0>)
 8008de6:	61bb      	str	r3, [r7, #24]
        break;
 8008de8:	e00c      	b.n	8008e04 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008dea:	f7fd faa9 	bl	8006340 <HAL_RCC_GetSysClockFreq>
 8008dee:	61b8      	str	r0, [r7, #24]
        break;
 8008df0:	e008      	b.n	8008e04 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008df2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008df6:	61bb      	str	r3, [r7, #24]
        break;
 8008df8:	e004      	b.n	8008e04 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008dfe:	2301      	movs	r3, #1
 8008e00:	77bb      	strb	r3, [r7, #30]
        break;
 8008e02:	bf00      	nop
    }

    if (pclk != 0U)
 8008e04:	69bb      	ldr	r3, [r7, #24]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d018      	beq.n	8008e3c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	685b      	ldr	r3, [r3, #4]
 8008e0e:	085a      	lsrs	r2, r3, #1
 8008e10:	69bb      	ldr	r3, [r7, #24]
 8008e12:	441a      	add	r2, r3
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	685b      	ldr	r3, [r3, #4]
 8008e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e1c:	b29b      	uxth	r3, r3
 8008e1e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e20:	693b      	ldr	r3, [r7, #16]
 8008e22:	2b0f      	cmp	r3, #15
 8008e24:	d908      	bls.n	8008e38 <UART_SetConfig+0x49c>
 8008e26:	693b      	ldr	r3, [r7, #16]
 8008e28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e2c:	d204      	bcs.n	8008e38 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	693a      	ldr	r2, [r7, #16]
 8008e34:	60da      	str	r2, [r3, #12]
 8008e36:	e001      	b.n	8008e3c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8008e38:	2301      	movs	r3, #1
 8008e3a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2200      	movs	r2, #0
 8008e46:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008e48:	7fbb      	ldrb	r3, [r7, #30]
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3720      	adds	r7, #32
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}
 8008e52:	bf00      	nop
 8008e54:	40007c00 	.word	0x40007c00
 8008e58:	40023800 	.word	0x40023800
 8008e5c:	00f42400 	.word	0x00f42400

08008e60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008e60:	b480      	push	{r7}
 8008e62:	b083      	sub	sp, #12
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e6c:	f003 0301 	and.w	r3, r3, #1
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d00a      	beq.n	8008e8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	685b      	ldr	r3, [r3, #4]
 8008e7a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	430a      	orrs	r2, r1
 8008e88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e8e:	f003 0302 	and.w	r3, r3, #2
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d00a      	beq.n	8008eac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	685b      	ldr	r3, [r3, #4]
 8008e9c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	430a      	orrs	r2, r1
 8008eaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eb0:	f003 0304 	and.w	r3, r3, #4
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d00a      	beq.n	8008ece <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	685b      	ldr	r3, [r3, #4]
 8008ebe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	430a      	orrs	r2, r1
 8008ecc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ed2:	f003 0308 	and.w	r3, r3, #8
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d00a      	beq.n	8008ef0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	685b      	ldr	r3, [r3, #4]
 8008ee0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	430a      	orrs	r2, r1
 8008eee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ef4:	f003 0310 	and.w	r3, r3, #16
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d00a      	beq.n	8008f12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	689b      	ldr	r3, [r3, #8]
 8008f02:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	430a      	orrs	r2, r1
 8008f10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f16:	f003 0320 	and.w	r3, r3, #32
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d00a      	beq.n	8008f34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	689b      	ldr	r3, [r3, #8]
 8008f24:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	430a      	orrs	r2, r1
 8008f32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d01a      	beq.n	8008f76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	685b      	ldr	r3, [r3, #4]
 8008f46:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	430a      	orrs	r2, r1
 8008f54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f5e:	d10a      	bne.n	8008f76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	685b      	ldr	r3, [r3, #4]
 8008f66:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	430a      	orrs	r2, r1
 8008f74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d00a      	beq.n	8008f98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	685b      	ldr	r3, [r3, #4]
 8008f88:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	430a      	orrs	r2, r1
 8008f96:	605a      	str	r2, [r3, #4]
  }
}
 8008f98:	bf00      	nop
 8008f9a:	370c      	adds	r7, #12
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa2:	4770      	bx	lr

08008fa4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b086      	sub	sp, #24
 8008fa8:	af02      	add	r7, sp, #8
 8008faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2200      	movs	r2, #0
 8008fb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008fb4:	f7f9 f952 	bl	800225c <HAL_GetTick>
 8008fb8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f003 0308 	and.w	r3, r3, #8
 8008fc4:	2b08      	cmp	r3, #8
 8008fc6:	d10e      	bne.n	8008fe6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008fc8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008fcc:	9300      	str	r3, [sp, #0]
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f000 f82d 	bl	8009036 <UART_WaitOnFlagUntilTimeout>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d001      	beq.n	8008fe6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008fe2:	2303      	movs	r3, #3
 8008fe4:	e023      	b.n	800902e <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f003 0304 	and.w	r3, r3, #4
 8008ff0:	2b04      	cmp	r3, #4
 8008ff2:	d10e      	bne.n	8009012 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ff4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008ff8:	9300      	str	r3, [sp, #0]
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f000 f817 	bl	8009036 <UART_WaitOnFlagUntilTimeout>
 8009008:	4603      	mov	r3, r0
 800900a:	2b00      	cmp	r3, #0
 800900c:	d001      	beq.n	8009012 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800900e:	2303      	movs	r3, #3
 8009010:	e00d      	b.n	800902e <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2220      	movs	r2, #32
 8009016:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2220      	movs	r2, #32
 800901c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2200      	movs	r2, #0
 8009022:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2200      	movs	r2, #0
 8009028:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800902c:	2300      	movs	r3, #0
}
 800902e:	4618      	mov	r0, r3
 8009030:	3710      	adds	r7, #16
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}

08009036 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009036:	b580      	push	{r7, lr}
 8009038:	b084      	sub	sp, #16
 800903a:	af00      	add	r7, sp, #0
 800903c:	60f8      	str	r0, [r7, #12]
 800903e:	60b9      	str	r1, [r7, #8]
 8009040:	603b      	str	r3, [r7, #0]
 8009042:	4613      	mov	r3, r2
 8009044:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009046:	e05e      	b.n	8009106 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009048:	69bb      	ldr	r3, [r7, #24]
 800904a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800904e:	d05a      	beq.n	8009106 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009050:	f7f9 f904 	bl	800225c <HAL_GetTick>
 8009054:	4602      	mov	r2, r0
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	1ad3      	subs	r3, r2, r3
 800905a:	69ba      	ldr	r2, [r7, #24]
 800905c:	429a      	cmp	r2, r3
 800905e:	d302      	bcc.n	8009066 <UART_WaitOnFlagUntilTimeout+0x30>
 8009060:	69bb      	ldr	r3, [r7, #24]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d11b      	bne.n	800909e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	681a      	ldr	r2, [r3, #0]
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009074:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	689a      	ldr	r2, [r3, #8]
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f022 0201 	bic.w	r2, r2, #1
 8009084:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	2220      	movs	r2, #32
 800908a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	2220      	movs	r2, #32
 8009090:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	2200      	movs	r2, #0
 8009096:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800909a:	2303      	movs	r3, #3
 800909c:	e043      	b.n	8009126 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f003 0304 	and.w	r3, r3, #4
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d02c      	beq.n	8009106 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	69db      	ldr	r3, [r3, #28]
 80090b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80090b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80090ba:	d124      	bne.n	8009106 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80090c4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	681a      	ldr	r2, [r3, #0]
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80090d4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	689a      	ldr	r2, [r3, #8]
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f022 0201 	bic.w	r2, r2, #1
 80090e4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	2220      	movs	r2, #32
 80090ea:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	2220      	movs	r2, #32
 80090f0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	2220      	movs	r2, #32
 80090f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	2200      	movs	r2, #0
 80090fe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8009102:	2303      	movs	r3, #3
 8009104:	e00f      	b.n	8009126 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	69da      	ldr	r2, [r3, #28]
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	4013      	ands	r3, r2
 8009110:	68ba      	ldr	r2, [r7, #8]
 8009112:	429a      	cmp	r2, r3
 8009114:	bf0c      	ite	eq
 8009116:	2301      	moveq	r3, #1
 8009118:	2300      	movne	r3, #0
 800911a:	b2db      	uxtb	r3, r3
 800911c:	461a      	mov	r2, r3
 800911e:	79fb      	ldrb	r3, [r7, #7]
 8009120:	429a      	cmp	r2, r3
 8009122:	d091      	beq.n	8009048 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009124:	2300      	movs	r3, #0
}
 8009126:	4618      	mov	r0, r3
 8009128:	3710      	adds	r7, #16
 800912a:	46bd      	mov	sp, r7
 800912c:	bd80      	pop	{r7, pc}
	...

08009130 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b084      	sub	sp, #16
 8009134:	af00      	add	r7, sp, #0
 8009136:	60f8      	str	r0, [r7, #12]
 8009138:	60b9      	str	r1, [r7, #8]
 800913a:	4613      	mov	r3, r2
 800913c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	68ba      	ldr	r2, [r7, #8]
 8009142:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	88fa      	ldrh	r2, [r7, #6]
 8009148:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	2200      	movs	r2, #0
 8009150:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	2222      	movs	r2, #34	; 0x22
 8009158:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800915e:	2b00      	cmp	r3, #0
 8009160:	d02b      	beq.n	80091ba <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009166:	4a25      	ldr	r2, [pc, #148]	; (80091fc <UART_Start_Receive_DMA+0xcc>)
 8009168:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800916e:	4a24      	ldr	r2, [pc, #144]	; (8009200 <UART_Start_Receive_DMA+0xd0>)
 8009170:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009176:	4a23      	ldr	r2, [pc, #140]	; (8009204 <UART_Start_Receive_DMA+0xd4>)
 8009178:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800917e:	2200      	movs	r2, #0
 8009180:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	3324      	adds	r3, #36	; 0x24
 800918c:	4619      	mov	r1, r3
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009192:	461a      	mov	r2, r3
 8009194:	88fb      	ldrh	r3, [r7, #6]
 8009196:	f7f9 fd0b 	bl	8002bb0 <HAL_DMA_Start_IT>
 800919a:	4603      	mov	r3, r0
 800919c:	2b00      	cmp	r3, #0
 800919e:	d00c      	beq.n	80091ba <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	2210      	movs	r2, #16
 80091a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	2200      	movs	r2, #0
 80091ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	2220      	movs	r2, #32
 80091b4:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 80091b6:	2301      	movs	r3, #1
 80091b8:	e01c      	b.n	80091f4 <UART_Start_Receive_DMA+0xc4>
    }
  }
  __HAL_UNLOCK(huart);
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	2200      	movs	r2, #0
 80091be:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	681a      	ldr	r2, [r3, #0]
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80091d0:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	689a      	ldr	r2, [r3, #8]
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f042 0201 	orr.w	r2, r2, #1
 80091e0:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	689a      	ldr	r2, [r3, #8]
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80091f0:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 80091f2:	2300      	movs	r3, #0
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	3710      	adds	r7, #16
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bd80      	pop	{r7, pc}
 80091fc:	08009291 	.word	0x08009291
 8009200:	08009325 	.word	0x08009325
 8009204:	0800935d 	.word	0x0800935d

08009208 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009208:	b480      	push	{r7}
 800920a:	b083      	sub	sp, #12
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	681a      	ldr	r2, [r3, #0]
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800921e:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2220      	movs	r2, #32
 8009224:	679a      	str	r2, [r3, #120]	; 0x78
}
 8009226:	bf00      	nop
 8009228:	370c      	adds	r7, #12
 800922a:	46bd      	mov	sp, r7
 800922c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009230:	4770      	bx	lr

08009232 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009232:	b480      	push	{r7}
 8009234:	b083      	sub	sp, #12
 8009236:	af00      	add	r7, sp, #0
 8009238:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	681a      	ldr	r2, [r3, #0]
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009248:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	689a      	ldr	r2, [r3, #8]
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f022 0201 	bic.w	r2, r2, #1
 8009258:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800925e:	2b01      	cmp	r3, #1
 8009260:	d107      	bne.n	8009272 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	681a      	ldr	r2, [r3, #0]
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f022 0210 	bic.w	r2, r2, #16
 8009270:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2220      	movs	r2, #32
 8009276:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2200      	movs	r2, #0
 800927c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2200      	movs	r2, #0
 8009282:	665a      	str	r2, [r3, #100]	; 0x64
}
 8009284:	bf00      	nop
 8009286:	370c      	adds	r7, #12
 8009288:	46bd      	mov	sp, r7
 800928a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928e:	4770      	bx	lr

08009290 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b084      	sub	sp, #16
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800929c:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	69db      	ldr	r3, [r3, #28]
 80092a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092a6:	d02a      	beq.n	80092fe <UART_DMAReceiveCplt+0x6e>
  {
    huart->RxXferCount = 0U;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	2200      	movs	r2, #0
 80092ac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	681a      	ldr	r2, [r3, #0]
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80092be:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	689a      	ldr	r2, [r3, #8]
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f022 0201 	bic.w	r2, r2, #1
 80092ce:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	689a      	ldr	r2, [r3, #8]
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80092de:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	2220      	movs	r2, #32
 80092e4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092ea:	2b01      	cmp	r3, #1
 80092ec:	d107      	bne.n	80092fe <UART_DMAReceiveCplt+0x6e>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	681a      	ldr	r2, [r3, #0]
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f022 0210 	bic.w	r2, r2, #16
 80092fc:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009302:	2b01      	cmp	r3, #1
 8009304:	d107      	bne.n	8009316 <UART_DMAReceiveCplt+0x86>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800930c:	4619      	mov	r1, r3
 800930e:	68f8      	ldr	r0, [r7, #12]
 8009310:	f7ff fb38 	bl	8008984 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009314:	e002      	b.n	800931c <UART_DMAReceiveCplt+0x8c>
    HAL_UART_RxCpltCallback(huart);
 8009316:	68f8      	ldr	r0, [r7, #12]
 8009318:	f7f8 fe34 	bl	8001f84 <HAL_UART_RxCpltCallback>
}
 800931c:	bf00      	nop
 800931e:	3710      	adds	r7, #16
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}

08009324 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b084      	sub	sp, #16
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009330:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009336:	2b01      	cmp	r3, #1
 8009338:	d109      	bne.n	800934e <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009340:	085b      	lsrs	r3, r3, #1
 8009342:	b29b      	uxth	r3, r3
 8009344:	4619      	mov	r1, r3
 8009346:	68f8      	ldr	r0, [r7, #12]
 8009348:	f7ff fb1c 	bl	8008984 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800934c:	e002      	b.n	8009354 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800934e:	68f8      	ldr	r0, [r7, #12]
 8009350:	f7ff fb04 	bl	800895c <HAL_UART_RxHalfCpltCallback>
}
 8009354:	bf00      	nop
 8009356:	3710      	adds	r7, #16
 8009358:	46bd      	mov	sp, r7
 800935a:	bd80      	pop	{r7, pc}

0800935c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b086      	sub	sp, #24
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009368:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800936e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009370:	697b      	ldr	r3, [r7, #20]
 8009372:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009374:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009376:	697b      	ldr	r3, [r7, #20]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	689b      	ldr	r3, [r3, #8]
 800937c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009380:	2b80      	cmp	r3, #128	; 0x80
 8009382:	d109      	bne.n	8009398 <UART_DMAError+0x3c>
 8009384:	693b      	ldr	r3, [r7, #16]
 8009386:	2b21      	cmp	r3, #33	; 0x21
 8009388:	d106      	bne.n	8009398 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	2200      	movs	r2, #0
 800938e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8009392:	6978      	ldr	r0, [r7, #20]
 8009394:	f7ff ff38 	bl	8009208 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009398:	697b      	ldr	r3, [r7, #20]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	689b      	ldr	r3, [r3, #8]
 800939e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093a2:	2b40      	cmp	r3, #64	; 0x40
 80093a4:	d109      	bne.n	80093ba <UART_DMAError+0x5e>
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	2b22      	cmp	r3, #34	; 0x22
 80093aa:	d106      	bne.n	80093ba <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80093ac:	697b      	ldr	r3, [r7, #20]
 80093ae:	2200      	movs	r2, #0
 80093b0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80093b4:	6978      	ldr	r0, [r7, #20]
 80093b6:	f7ff ff3c 	bl	8009232 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80093c0:	f043 0210 	orr.w	r2, r3, #16
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80093ca:	6978      	ldr	r0, [r7, #20]
 80093cc:	f7ff fad0 	bl	8008970 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80093d0:	bf00      	nop
 80093d2:	3718      	adds	r7, #24
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bd80      	pop	{r7, pc}

080093d8 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80093d8:	b480      	push	{r7}
 80093da:	b083      	sub	sp, #12
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80093e4:	2b21      	cmp	r3, #33	; 0x21
 80093e6:	d12a      	bne.n	800943e <UART_TxISR_8BIT+0x66>
  {
    if (huart->TxXferCount == 0U)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80093ee:	b29b      	uxth	r3, r3
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d110      	bne.n	8009416 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	681a      	ldr	r2, [r3, #0]
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009402:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	681a      	ldr	r2, [r3, #0]
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009412:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8009414:	e013      	b.n	800943e <UART_TxISR_8BIT+0x66>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800941a:	781a      	ldrb	r2, [r3, #0]
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009426:	1c5a      	adds	r2, r3, #1
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009432:	b29b      	uxth	r3, r3
 8009434:	3b01      	subs	r3, #1
 8009436:	b29a      	uxth	r2, r3
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800943e:	bf00      	nop
 8009440:	370c      	adds	r7, #12
 8009442:	46bd      	mov	sp, r7
 8009444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009448:	4770      	bx	lr

0800944a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800944a:	b480      	push	{r7}
 800944c:	b085      	sub	sp, #20
 800944e:	af00      	add	r7, sp, #0
 8009450:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009456:	2b21      	cmp	r3, #33	; 0x21
 8009458:	d12f      	bne.n	80094ba <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009460:	b29b      	uxth	r3, r3
 8009462:	2b00      	cmp	r3, #0
 8009464:	d110      	bne.n	8009488 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	681a      	ldr	r2, [r3, #0]
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009474:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	681a      	ldr	r2, [r3, #0]
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009484:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8009486:	e018      	b.n	80094ba <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800948c:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	881b      	ldrh	r3, [r3, #0]
 8009492:	461a      	mov	r2, r3
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800949c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094a2:	1c9a      	adds	r2, r3, #2
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80094ae:	b29b      	uxth	r3, r3
 80094b0:	3b01      	subs	r3, #1
 80094b2:	b29a      	uxth	r2, r3
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80094ba:	bf00      	nop
 80094bc:	3714      	adds	r7, #20
 80094be:	46bd      	mov	sp, r7
 80094c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c4:	4770      	bx	lr
	...

080094c8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80094c8:	b084      	sub	sp, #16
 80094ca:	b580      	push	{r7, lr}
 80094cc:	b084      	sub	sp, #16
 80094ce:	af00      	add	r7, sp, #0
 80094d0:	6078      	str	r0, [r7, #4]
 80094d2:	f107 001c 	add.w	r0, r7, #28
 80094d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80094da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094dc:	2b01      	cmp	r3, #1
 80094de:	d120      	bne.n	8009522 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	68da      	ldr	r2, [r3, #12]
 80094f0:	4b20      	ldr	r3, [pc, #128]	; (8009574 <USB_CoreInit+0xac>)
 80094f2:	4013      	ands	r3, r2
 80094f4:	687a      	ldr	r2, [r7, #4]
 80094f6:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	68db      	ldr	r3, [r3, #12]
 80094fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009504:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009506:	2b01      	cmp	r3, #1
 8009508:	d105      	bne.n	8009516 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	68db      	ldr	r3, [r3, #12]
 800950e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f001 fad6 	bl	800aac8 <USB_CoreReset>
 800951c:	4603      	mov	r3, r0
 800951e:	73fb      	strb	r3, [r7, #15]
 8009520:	e010      	b.n	8009544 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	68db      	ldr	r3, [r3, #12]
 8009526:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f001 faca 	bl	800aac8 <USB_CoreReset>
 8009534:	4603      	mov	r3, r0
 8009536:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800953c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8009544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009546:	2b01      	cmp	r3, #1
 8009548:	d10b      	bne.n	8009562 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	689b      	ldr	r3, [r3, #8]
 800954e:	f043 0206 	orr.w	r2, r3, #6
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	689b      	ldr	r3, [r3, #8]
 800955a:	f043 0220 	orr.w	r2, r3, #32
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009562:	7bfb      	ldrb	r3, [r7, #15]
}
 8009564:	4618      	mov	r0, r3
 8009566:	3710      	adds	r7, #16
 8009568:	46bd      	mov	sp, r7
 800956a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800956e:	b004      	add	sp, #16
 8009570:	4770      	bx	lr
 8009572:	bf00      	nop
 8009574:	ffbdffbf 	.word	0xffbdffbf

08009578 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009578:	b480      	push	{r7}
 800957a:	b087      	sub	sp, #28
 800957c:	af00      	add	r7, sp, #0
 800957e:	60f8      	str	r0, [r7, #12]
 8009580:	60b9      	str	r1, [r7, #8]
 8009582:	4613      	mov	r3, r2
 8009584:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009586:	79fb      	ldrb	r3, [r7, #7]
 8009588:	2b02      	cmp	r3, #2
 800958a:	d165      	bne.n	8009658 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	4a41      	ldr	r2, [pc, #260]	; (8009694 <USB_SetTurnaroundTime+0x11c>)
 8009590:	4293      	cmp	r3, r2
 8009592:	d906      	bls.n	80095a2 <USB_SetTurnaroundTime+0x2a>
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	4a40      	ldr	r2, [pc, #256]	; (8009698 <USB_SetTurnaroundTime+0x120>)
 8009598:	4293      	cmp	r3, r2
 800959a:	d202      	bcs.n	80095a2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800959c:	230f      	movs	r3, #15
 800959e:	617b      	str	r3, [r7, #20]
 80095a0:	e062      	b.n	8009668 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	4a3c      	ldr	r2, [pc, #240]	; (8009698 <USB_SetTurnaroundTime+0x120>)
 80095a6:	4293      	cmp	r3, r2
 80095a8:	d306      	bcc.n	80095b8 <USB_SetTurnaroundTime+0x40>
 80095aa:	68bb      	ldr	r3, [r7, #8]
 80095ac:	4a3b      	ldr	r2, [pc, #236]	; (800969c <USB_SetTurnaroundTime+0x124>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d202      	bcs.n	80095b8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80095b2:	230e      	movs	r3, #14
 80095b4:	617b      	str	r3, [r7, #20]
 80095b6:	e057      	b.n	8009668 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	4a38      	ldr	r2, [pc, #224]	; (800969c <USB_SetTurnaroundTime+0x124>)
 80095bc:	4293      	cmp	r3, r2
 80095be:	d306      	bcc.n	80095ce <USB_SetTurnaroundTime+0x56>
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	4a37      	ldr	r2, [pc, #220]	; (80096a0 <USB_SetTurnaroundTime+0x128>)
 80095c4:	4293      	cmp	r3, r2
 80095c6:	d202      	bcs.n	80095ce <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80095c8:	230d      	movs	r3, #13
 80095ca:	617b      	str	r3, [r7, #20]
 80095cc:	e04c      	b.n	8009668 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	4a33      	ldr	r2, [pc, #204]	; (80096a0 <USB_SetTurnaroundTime+0x128>)
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d306      	bcc.n	80095e4 <USB_SetTurnaroundTime+0x6c>
 80095d6:	68bb      	ldr	r3, [r7, #8]
 80095d8:	4a32      	ldr	r2, [pc, #200]	; (80096a4 <USB_SetTurnaroundTime+0x12c>)
 80095da:	4293      	cmp	r3, r2
 80095dc:	d802      	bhi.n	80095e4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80095de:	230c      	movs	r3, #12
 80095e0:	617b      	str	r3, [r7, #20]
 80095e2:	e041      	b.n	8009668 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	4a2f      	ldr	r2, [pc, #188]	; (80096a4 <USB_SetTurnaroundTime+0x12c>)
 80095e8:	4293      	cmp	r3, r2
 80095ea:	d906      	bls.n	80095fa <USB_SetTurnaroundTime+0x82>
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	4a2e      	ldr	r2, [pc, #184]	; (80096a8 <USB_SetTurnaroundTime+0x130>)
 80095f0:	4293      	cmp	r3, r2
 80095f2:	d802      	bhi.n	80095fa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80095f4:	230b      	movs	r3, #11
 80095f6:	617b      	str	r3, [r7, #20]
 80095f8:	e036      	b.n	8009668 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	4a2a      	ldr	r2, [pc, #168]	; (80096a8 <USB_SetTurnaroundTime+0x130>)
 80095fe:	4293      	cmp	r3, r2
 8009600:	d906      	bls.n	8009610 <USB_SetTurnaroundTime+0x98>
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	4a29      	ldr	r2, [pc, #164]	; (80096ac <USB_SetTurnaroundTime+0x134>)
 8009606:	4293      	cmp	r3, r2
 8009608:	d802      	bhi.n	8009610 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800960a:	230a      	movs	r3, #10
 800960c:	617b      	str	r3, [r7, #20]
 800960e:	e02b      	b.n	8009668 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	4a26      	ldr	r2, [pc, #152]	; (80096ac <USB_SetTurnaroundTime+0x134>)
 8009614:	4293      	cmp	r3, r2
 8009616:	d906      	bls.n	8009626 <USB_SetTurnaroundTime+0xae>
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	4a25      	ldr	r2, [pc, #148]	; (80096b0 <USB_SetTurnaroundTime+0x138>)
 800961c:	4293      	cmp	r3, r2
 800961e:	d202      	bcs.n	8009626 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009620:	2309      	movs	r3, #9
 8009622:	617b      	str	r3, [r7, #20]
 8009624:	e020      	b.n	8009668 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	4a21      	ldr	r2, [pc, #132]	; (80096b0 <USB_SetTurnaroundTime+0x138>)
 800962a:	4293      	cmp	r3, r2
 800962c:	d306      	bcc.n	800963c <USB_SetTurnaroundTime+0xc4>
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	4a20      	ldr	r2, [pc, #128]	; (80096b4 <USB_SetTurnaroundTime+0x13c>)
 8009632:	4293      	cmp	r3, r2
 8009634:	d802      	bhi.n	800963c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009636:	2308      	movs	r3, #8
 8009638:	617b      	str	r3, [r7, #20]
 800963a:	e015      	b.n	8009668 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	4a1d      	ldr	r2, [pc, #116]	; (80096b4 <USB_SetTurnaroundTime+0x13c>)
 8009640:	4293      	cmp	r3, r2
 8009642:	d906      	bls.n	8009652 <USB_SetTurnaroundTime+0xda>
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	4a1c      	ldr	r2, [pc, #112]	; (80096b8 <USB_SetTurnaroundTime+0x140>)
 8009648:	4293      	cmp	r3, r2
 800964a:	d202      	bcs.n	8009652 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800964c:	2307      	movs	r3, #7
 800964e:	617b      	str	r3, [r7, #20]
 8009650:	e00a      	b.n	8009668 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009652:	2306      	movs	r3, #6
 8009654:	617b      	str	r3, [r7, #20]
 8009656:	e007      	b.n	8009668 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009658:	79fb      	ldrb	r3, [r7, #7]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d102      	bne.n	8009664 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800965e:	2309      	movs	r3, #9
 8009660:	617b      	str	r3, [r7, #20]
 8009662:	e001      	b.n	8009668 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009664:	2309      	movs	r3, #9
 8009666:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	68db      	ldr	r3, [r3, #12]
 800966c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	68da      	ldr	r2, [r3, #12]
 8009678:	697b      	ldr	r3, [r7, #20]
 800967a:	029b      	lsls	r3, r3, #10
 800967c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8009680:	431a      	orrs	r2, r3
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009686:	2300      	movs	r3, #0
}
 8009688:	4618      	mov	r0, r3
 800968a:	371c      	adds	r7, #28
 800968c:	46bd      	mov	sp, r7
 800968e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009692:	4770      	bx	lr
 8009694:	00d8acbf 	.word	0x00d8acbf
 8009698:	00e4e1c0 	.word	0x00e4e1c0
 800969c:	00f42400 	.word	0x00f42400
 80096a0:	01067380 	.word	0x01067380
 80096a4:	011a499f 	.word	0x011a499f
 80096a8:	01312cff 	.word	0x01312cff
 80096ac:	014ca43f 	.word	0x014ca43f
 80096b0:	016e3600 	.word	0x016e3600
 80096b4:	01a6ab1f 	.word	0x01a6ab1f
 80096b8:	01e84800 	.word	0x01e84800

080096bc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80096bc:	b480      	push	{r7}
 80096be:	b083      	sub	sp, #12
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	689b      	ldr	r3, [r3, #8]
 80096c8:	f043 0201 	orr.w	r2, r3, #1
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80096d0:	2300      	movs	r3, #0
}
 80096d2:	4618      	mov	r0, r3
 80096d4:	370c      	adds	r7, #12
 80096d6:	46bd      	mov	sp, r7
 80096d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096dc:	4770      	bx	lr

080096de <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80096de:	b480      	push	{r7}
 80096e0:	b083      	sub	sp, #12
 80096e2:	af00      	add	r7, sp, #0
 80096e4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	689b      	ldr	r3, [r3, #8]
 80096ea:	f023 0201 	bic.w	r2, r3, #1
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80096f2:	2300      	movs	r3, #0
}
 80096f4:	4618      	mov	r0, r3
 80096f6:	370c      	adds	r7, #12
 80096f8:	46bd      	mov	sp, r7
 80096fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fe:	4770      	bx	lr

08009700 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b082      	sub	sp, #8
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
 8009708:	460b      	mov	r3, r1
 800970a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	68db      	ldr	r3, [r3, #12]
 8009710:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009718:	78fb      	ldrb	r3, [r7, #3]
 800971a:	2b01      	cmp	r3, #1
 800971c:	d106      	bne.n	800972c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	68db      	ldr	r3, [r3, #12]
 8009722:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	60da      	str	r2, [r3, #12]
 800972a:	e00b      	b.n	8009744 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800972c:	78fb      	ldrb	r3, [r7, #3]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d106      	bne.n	8009740 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	68db      	ldr	r3, [r3, #12]
 8009736:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	60da      	str	r2, [r3, #12]
 800973e:	e001      	b.n	8009744 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8009740:	2301      	movs	r3, #1
 8009742:	e003      	b.n	800974c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8009744:	2032      	movs	r0, #50	; 0x32
 8009746:	f7f8 fd95 	bl	8002274 <HAL_Delay>

  return HAL_OK;
 800974a:	2300      	movs	r3, #0
}
 800974c:	4618      	mov	r0, r3
 800974e:	3708      	adds	r7, #8
 8009750:	46bd      	mov	sp, r7
 8009752:	bd80      	pop	{r7, pc}

08009754 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009754:	b084      	sub	sp, #16
 8009756:	b580      	push	{r7, lr}
 8009758:	b086      	sub	sp, #24
 800975a:	af00      	add	r7, sp, #0
 800975c:	6078      	str	r0, [r7, #4]
 800975e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009762:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009766:	2300      	movs	r3, #0
 8009768:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800976e:	2300      	movs	r3, #0
 8009770:	613b      	str	r3, [r7, #16]
 8009772:	e009      	b.n	8009788 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009774:	687a      	ldr	r2, [r7, #4]
 8009776:	693b      	ldr	r3, [r7, #16]
 8009778:	3340      	adds	r3, #64	; 0x40
 800977a:	009b      	lsls	r3, r3, #2
 800977c:	4413      	add	r3, r2
 800977e:	2200      	movs	r2, #0
 8009780:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009782:	693b      	ldr	r3, [r7, #16]
 8009784:	3301      	adds	r3, #1
 8009786:	613b      	str	r3, [r7, #16]
 8009788:	693b      	ldr	r3, [r7, #16]
 800978a:	2b0e      	cmp	r3, #14
 800978c:	d9f2      	bls.n	8009774 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800978e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009790:	2b00      	cmp	r3, #0
 8009792:	d11c      	bne.n	80097ce <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800979a:	685b      	ldr	r3, [r3, #4]
 800979c:	68fa      	ldr	r2, [r7, #12]
 800979e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80097a2:	f043 0302 	orr.w	r3, r3, #2
 80097a6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097ac:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	601a      	str	r2, [r3, #0]
 80097cc:	e005      	b.n	80097da <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097d2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80097e0:	461a      	mov	r2, r3
 80097e2:	2300      	movs	r3, #0
 80097e4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097ec:	4619      	mov	r1, r3
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097f4:	461a      	mov	r2, r3
 80097f6:	680b      	ldr	r3, [r1, #0]
 80097f8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80097fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097fc:	2b01      	cmp	r3, #1
 80097fe:	d10c      	bne.n	800981a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009802:	2b00      	cmp	r3, #0
 8009804:	d104      	bne.n	8009810 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009806:	2100      	movs	r1, #0
 8009808:	6878      	ldr	r0, [r7, #4]
 800980a:	f000 f959 	bl	8009ac0 <USB_SetDevSpeed>
 800980e:	e018      	b.n	8009842 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009810:	2101      	movs	r1, #1
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f000 f954 	bl	8009ac0 <USB_SetDevSpeed>
 8009818:	e013      	b.n	8009842 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800981a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800981c:	2b03      	cmp	r3, #3
 800981e:	d10c      	bne.n	800983a <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009822:	2b00      	cmp	r3, #0
 8009824:	d104      	bne.n	8009830 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009826:	2100      	movs	r1, #0
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	f000 f949 	bl	8009ac0 <USB_SetDevSpeed>
 800982e:	e008      	b.n	8009842 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009830:	2101      	movs	r1, #1
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	f000 f944 	bl	8009ac0 <USB_SetDevSpeed>
 8009838:	e003      	b.n	8009842 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800983a:	2103      	movs	r1, #3
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	f000 f93f 	bl	8009ac0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009842:	2110      	movs	r1, #16
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	f000 f8f3 	bl	8009a30 <USB_FlushTxFifo>
 800984a:	4603      	mov	r3, r0
 800984c:	2b00      	cmp	r3, #0
 800984e:	d001      	beq.n	8009854 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8009850:	2301      	movs	r3, #1
 8009852:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	f000 f911 	bl	8009a7c <USB_FlushRxFifo>
 800985a:	4603      	mov	r3, r0
 800985c:	2b00      	cmp	r3, #0
 800985e:	d001      	beq.n	8009864 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8009860:	2301      	movs	r3, #1
 8009862:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800986a:	461a      	mov	r2, r3
 800986c:	2300      	movs	r3, #0
 800986e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009876:	461a      	mov	r2, r3
 8009878:	2300      	movs	r3, #0
 800987a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009882:	461a      	mov	r2, r3
 8009884:	2300      	movs	r3, #0
 8009886:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009888:	2300      	movs	r3, #0
 800988a:	613b      	str	r3, [r7, #16]
 800988c:	e043      	b.n	8009916 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800988e:	693b      	ldr	r3, [r7, #16]
 8009890:	015a      	lsls	r2, r3, #5
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	4413      	add	r3, r2
 8009896:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80098a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80098a4:	d118      	bne.n	80098d8 <USB_DevInit+0x184>
    {
      if (i == 0U)
 80098a6:	693b      	ldr	r3, [r7, #16]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d10a      	bne.n	80098c2 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80098ac:	693b      	ldr	r3, [r7, #16]
 80098ae:	015a      	lsls	r2, r3, #5
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	4413      	add	r3, r2
 80098b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098b8:	461a      	mov	r2, r3
 80098ba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80098be:	6013      	str	r3, [r2, #0]
 80098c0:	e013      	b.n	80098ea <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80098c2:	693b      	ldr	r3, [r7, #16]
 80098c4:	015a      	lsls	r2, r3, #5
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	4413      	add	r3, r2
 80098ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098ce:	461a      	mov	r2, r3
 80098d0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80098d4:	6013      	str	r3, [r2, #0]
 80098d6:	e008      	b.n	80098ea <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80098d8:	693b      	ldr	r3, [r7, #16]
 80098da:	015a      	lsls	r2, r3, #5
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	4413      	add	r3, r2
 80098e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098e4:	461a      	mov	r2, r3
 80098e6:	2300      	movs	r3, #0
 80098e8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80098ea:	693b      	ldr	r3, [r7, #16]
 80098ec:	015a      	lsls	r2, r3, #5
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	4413      	add	r3, r2
 80098f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098f6:	461a      	mov	r2, r3
 80098f8:	2300      	movs	r3, #0
 80098fa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80098fc:	693b      	ldr	r3, [r7, #16]
 80098fe:	015a      	lsls	r2, r3, #5
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	4413      	add	r3, r2
 8009904:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009908:	461a      	mov	r2, r3
 800990a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800990e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009910:	693b      	ldr	r3, [r7, #16]
 8009912:	3301      	adds	r3, #1
 8009914:	613b      	str	r3, [r7, #16]
 8009916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009918:	693a      	ldr	r2, [r7, #16]
 800991a:	429a      	cmp	r2, r3
 800991c:	d3b7      	bcc.n	800988e <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800991e:	2300      	movs	r3, #0
 8009920:	613b      	str	r3, [r7, #16]
 8009922:	e043      	b.n	80099ac <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009924:	693b      	ldr	r3, [r7, #16]
 8009926:	015a      	lsls	r2, r3, #5
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	4413      	add	r3, r2
 800992c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009936:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800993a:	d118      	bne.n	800996e <USB_DevInit+0x21a>
    {
      if (i == 0U)
 800993c:	693b      	ldr	r3, [r7, #16]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d10a      	bne.n	8009958 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009942:	693b      	ldr	r3, [r7, #16]
 8009944:	015a      	lsls	r2, r3, #5
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	4413      	add	r3, r2
 800994a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800994e:	461a      	mov	r2, r3
 8009950:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009954:	6013      	str	r3, [r2, #0]
 8009956:	e013      	b.n	8009980 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009958:	693b      	ldr	r3, [r7, #16]
 800995a:	015a      	lsls	r2, r3, #5
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	4413      	add	r3, r2
 8009960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009964:	461a      	mov	r2, r3
 8009966:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800996a:	6013      	str	r3, [r2, #0]
 800996c:	e008      	b.n	8009980 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800996e:	693b      	ldr	r3, [r7, #16]
 8009970:	015a      	lsls	r2, r3, #5
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	4413      	add	r3, r2
 8009976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800997a:	461a      	mov	r2, r3
 800997c:	2300      	movs	r3, #0
 800997e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009980:	693b      	ldr	r3, [r7, #16]
 8009982:	015a      	lsls	r2, r3, #5
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	4413      	add	r3, r2
 8009988:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800998c:	461a      	mov	r2, r3
 800998e:	2300      	movs	r3, #0
 8009990:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009992:	693b      	ldr	r3, [r7, #16]
 8009994:	015a      	lsls	r2, r3, #5
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	4413      	add	r3, r2
 800999a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800999e:	461a      	mov	r2, r3
 80099a0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80099a4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80099a6:	693b      	ldr	r3, [r7, #16]
 80099a8:	3301      	adds	r3, #1
 80099aa:	613b      	str	r3, [r7, #16]
 80099ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ae:	693a      	ldr	r2, [r7, #16]
 80099b0:	429a      	cmp	r2, r3
 80099b2:	d3b7      	bcc.n	8009924 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099ba:	691b      	ldr	r3, [r3, #16]
 80099bc:	68fa      	ldr	r2, [r7, #12]
 80099be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80099c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80099c6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2200      	movs	r2, #0
 80099cc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80099d4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80099d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d105      	bne.n	80099e8 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	699b      	ldr	r3, [r3, #24]
 80099e0:	f043 0210 	orr.w	r2, r3, #16
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	699a      	ldr	r2, [r3, #24]
 80099ec:	4b0e      	ldr	r3, [pc, #56]	; (8009a28 <USB_DevInit+0x2d4>)
 80099ee:	4313      	orrs	r3, r2
 80099f0:	687a      	ldr	r2, [r7, #4]
 80099f2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80099f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d005      	beq.n	8009a06 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	699b      	ldr	r3, [r3, #24]
 80099fe:	f043 0208 	orr.w	r2, r3, #8
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009a06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a08:	2b01      	cmp	r3, #1
 8009a0a:	d105      	bne.n	8009a18 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	699a      	ldr	r2, [r3, #24]
 8009a10:	4b06      	ldr	r3, [pc, #24]	; (8009a2c <USB_DevInit+0x2d8>)
 8009a12:	4313      	orrs	r3, r2
 8009a14:	687a      	ldr	r2, [r7, #4]
 8009a16:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009a18:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	3718      	adds	r7, #24
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009a24:	b004      	add	sp, #16
 8009a26:	4770      	bx	lr
 8009a28:	803c3800 	.word	0x803c3800
 8009a2c:	40000004 	.word	0x40000004

08009a30 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009a30:	b480      	push	{r7}
 8009a32:	b085      	sub	sp, #20
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
 8009a38:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	019b      	lsls	r3, r3, #6
 8009a42:	f043 0220 	orr.w	r2, r3, #32
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	3301      	adds	r3, #1
 8009a4e:	60fb      	str	r3, [r7, #12]
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	4a09      	ldr	r2, [pc, #36]	; (8009a78 <USB_FlushTxFifo+0x48>)
 8009a54:	4293      	cmp	r3, r2
 8009a56:	d901      	bls.n	8009a5c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8009a58:	2303      	movs	r3, #3
 8009a5a:	e006      	b.n	8009a6a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	691b      	ldr	r3, [r3, #16]
 8009a60:	f003 0320 	and.w	r3, r3, #32
 8009a64:	2b20      	cmp	r3, #32
 8009a66:	d0f0      	beq.n	8009a4a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8009a68:	2300      	movs	r3, #0
}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	3714      	adds	r7, #20
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a74:	4770      	bx	lr
 8009a76:	bf00      	nop
 8009a78:	00030d40 	.word	0x00030d40

08009a7c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	b085      	sub	sp, #20
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8009a84:	2300      	movs	r3, #0
 8009a86:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2210      	movs	r2, #16
 8009a8c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	3301      	adds	r3, #1
 8009a92:	60fb      	str	r3, [r7, #12]
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	4a09      	ldr	r2, [pc, #36]	; (8009abc <USB_FlushRxFifo+0x40>)
 8009a98:	4293      	cmp	r3, r2
 8009a9a:	d901      	bls.n	8009aa0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8009a9c:	2303      	movs	r3, #3
 8009a9e:	e006      	b.n	8009aae <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	691b      	ldr	r3, [r3, #16]
 8009aa4:	f003 0310 	and.w	r3, r3, #16
 8009aa8:	2b10      	cmp	r3, #16
 8009aaa:	d0f0      	beq.n	8009a8e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8009aac:	2300      	movs	r3, #0
}
 8009aae:	4618      	mov	r0, r3
 8009ab0:	3714      	adds	r7, #20
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab8:	4770      	bx	lr
 8009aba:	bf00      	nop
 8009abc:	00030d40 	.word	0x00030d40

08009ac0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009ac0:	b480      	push	{r7}
 8009ac2:	b085      	sub	sp, #20
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
 8009ac8:	460b      	mov	r3, r1
 8009aca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ad6:	681a      	ldr	r2, [r3, #0]
 8009ad8:	78fb      	ldrb	r3, [r7, #3]
 8009ada:	68f9      	ldr	r1, [r7, #12]
 8009adc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009ae0:	4313      	orrs	r3, r2
 8009ae2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009ae4:	2300      	movs	r3, #0
}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	3714      	adds	r7, #20
 8009aea:	46bd      	mov	sp, r7
 8009aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af0:	4770      	bx	lr

08009af2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009af2:	b480      	push	{r7}
 8009af4:	b087      	sub	sp, #28
 8009af6:	af00      	add	r7, sp, #0
 8009af8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009afe:	693b      	ldr	r3, [r7, #16]
 8009b00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b04:	689b      	ldr	r3, [r3, #8]
 8009b06:	f003 0306 	and.w	r3, r3, #6
 8009b0a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d102      	bne.n	8009b18 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009b12:	2300      	movs	r3, #0
 8009b14:	75fb      	strb	r3, [r7, #23]
 8009b16:	e00a      	b.n	8009b2e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	2b02      	cmp	r3, #2
 8009b1c:	d002      	beq.n	8009b24 <USB_GetDevSpeed+0x32>
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	2b06      	cmp	r3, #6
 8009b22:	d102      	bne.n	8009b2a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009b24:	2302      	movs	r3, #2
 8009b26:	75fb      	strb	r3, [r7, #23]
 8009b28:	e001      	b.n	8009b2e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009b2a:	230f      	movs	r3, #15
 8009b2c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009b2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b30:	4618      	mov	r0, r3
 8009b32:	371c      	adds	r7, #28
 8009b34:	46bd      	mov	sp, r7
 8009b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3a:	4770      	bx	lr

08009b3c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b085      	sub	sp, #20
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
 8009b44:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	781b      	ldrb	r3, [r3, #0]
 8009b4e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	785b      	ldrb	r3, [r3, #1]
 8009b54:	2b01      	cmp	r3, #1
 8009b56:	d139      	bne.n	8009bcc <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b5e:	69da      	ldr	r2, [r3, #28]
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	781b      	ldrb	r3, [r3, #0]
 8009b64:	f003 030f 	and.w	r3, r3, #15
 8009b68:	2101      	movs	r1, #1
 8009b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8009b6e:	b29b      	uxth	r3, r3
 8009b70:	68f9      	ldr	r1, [r7, #12]
 8009b72:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009b76:	4313      	orrs	r3, r2
 8009b78:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009b7a:	68bb      	ldr	r3, [r7, #8]
 8009b7c:	015a      	lsls	r2, r3, #5
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	4413      	add	r3, r2
 8009b82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d153      	bne.n	8009c38 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009b90:	68bb      	ldr	r3, [r7, #8]
 8009b92:	015a      	lsls	r2, r3, #5
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	4413      	add	r3, r2
 8009b98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b9c:	681a      	ldr	r2, [r3, #0]
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	689b      	ldr	r3, [r3, #8]
 8009ba2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	78db      	ldrb	r3, [r3, #3]
 8009baa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009bac:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009bae:	68bb      	ldr	r3, [r7, #8]
 8009bb0:	059b      	lsls	r3, r3, #22
 8009bb2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009bb4:	431a      	orrs	r2, r3
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	0159      	lsls	r1, r3, #5
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	440b      	add	r3, r1
 8009bbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bc2:	4619      	mov	r1, r3
 8009bc4:	4b20      	ldr	r3, [pc, #128]	; (8009c48 <USB_ActivateEndpoint+0x10c>)
 8009bc6:	4313      	orrs	r3, r2
 8009bc8:	600b      	str	r3, [r1, #0]
 8009bca:	e035      	b.n	8009c38 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bd2:	69da      	ldr	r2, [r3, #28]
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	781b      	ldrb	r3, [r3, #0]
 8009bd8:	f003 030f 	and.w	r3, r3, #15
 8009bdc:	2101      	movs	r1, #1
 8009bde:	fa01 f303 	lsl.w	r3, r1, r3
 8009be2:	041b      	lsls	r3, r3, #16
 8009be4:	68f9      	ldr	r1, [r7, #12]
 8009be6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009bea:	4313      	orrs	r3, r2
 8009bec:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	015a      	lsls	r2, r3, #5
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	4413      	add	r3, r2
 8009bf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d119      	bne.n	8009c38 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	015a      	lsls	r2, r3, #5
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	4413      	add	r3, r2
 8009c0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c10:	681a      	ldr	r2, [r3, #0]
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	689b      	ldr	r3, [r3, #8]
 8009c16:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	78db      	ldrb	r3, [r3, #3]
 8009c1e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009c20:	430b      	orrs	r3, r1
 8009c22:	431a      	orrs	r2, r3
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	0159      	lsls	r1, r3, #5
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	440b      	add	r3, r1
 8009c2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c30:	4619      	mov	r1, r3
 8009c32:	4b05      	ldr	r3, [pc, #20]	; (8009c48 <USB_ActivateEndpoint+0x10c>)
 8009c34:	4313      	orrs	r3, r2
 8009c36:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009c38:	2300      	movs	r3, #0
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	3714      	adds	r7, #20
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c44:	4770      	bx	lr
 8009c46:	bf00      	nop
 8009c48:	10008000 	.word	0x10008000

08009c4c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009c4c:	b480      	push	{r7}
 8009c4e:	b085      	sub	sp, #20
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
 8009c54:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	781b      	ldrb	r3, [r3, #0]
 8009c5e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	785b      	ldrb	r3, [r3, #1]
 8009c64:	2b01      	cmp	r3, #1
 8009c66:	d161      	bne.n	8009d2c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	015a      	lsls	r2, r3, #5
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	4413      	add	r3, r2
 8009c70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009c7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009c7e:	d11f      	bne.n	8009cc0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009c80:	68bb      	ldr	r3, [r7, #8]
 8009c82:	015a      	lsls	r2, r3, #5
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	4413      	add	r3, r2
 8009c88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	68ba      	ldr	r2, [r7, #8]
 8009c90:	0151      	lsls	r1, r2, #5
 8009c92:	68fa      	ldr	r2, [r7, #12]
 8009c94:	440a      	add	r2, r1
 8009c96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c9a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009c9e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	015a      	lsls	r2, r3, #5
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	4413      	add	r3, r2
 8009ca8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	68ba      	ldr	r2, [r7, #8]
 8009cb0:	0151      	lsls	r1, r2, #5
 8009cb2:	68fa      	ldr	r2, [r7, #12]
 8009cb4:	440a      	add	r2, r1
 8009cb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009cba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009cbe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	781b      	ldrb	r3, [r3, #0]
 8009ccc:	f003 030f 	and.w	r3, r3, #15
 8009cd0:	2101      	movs	r1, #1
 8009cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8009cd6:	b29b      	uxth	r3, r3
 8009cd8:	43db      	mvns	r3, r3
 8009cda:	68f9      	ldr	r1, [r7, #12]
 8009cdc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009ce0:	4013      	ands	r3, r2
 8009ce2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cea:	69da      	ldr	r2, [r3, #28]
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	781b      	ldrb	r3, [r3, #0]
 8009cf0:	f003 030f 	and.w	r3, r3, #15
 8009cf4:	2101      	movs	r1, #1
 8009cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8009cfa:	b29b      	uxth	r3, r3
 8009cfc:	43db      	mvns	r3, r3
 8009cfe:	68f9      	ldr	r1, [r7, #12]
 8009d00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009d04:	4013      	ands	r3, r2
 8009d06:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	015a      	lsls	r2, r3, #5
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	4413      	add	r3, r2
 8009d10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d14:	681a      	ldr	r2, [r3, #0]
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	0159      	lsls	r1, r3, #5
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	440b      	add	r3, r1
 8009d1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d22:	4619      	mov	r1, r3
 8009d24:	4b35      	ldr	r3, [pc, #212]	; (8009dfc <USB_DeactivateEndpoint+0x1b0>)
 8009d26:	4013      	ands	r3, r2
 8009d28:	600b      	str	r3, [r1, #0]
 8009d2a:	e060      	b.n	8009dee <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	015a      	lsls	r2, r3, #5
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	4413      	add	r3, r2
 8009d34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009d3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009d42:	d11f      	bne.n	8009d84 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009d44:	68bb      	ldr	r3, [r7, #8]
 8009d46:	015a      	lsls	r2, r3, #5
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	4413      	add	r3, r2
 8009d4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	68ba      	ldr	r2, [r7, #8]
 8009d54:	0151      	lsls	r1, r2, #5
 8009d56:	68fa      	ldr	r2, [r7, #12]
 8009d58:	440a      	add	r2, r1
 8009d5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d5e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009d62:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	015a      	lsls	r2, r3, #5
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	4413      	add	r3, r2
 8009d6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	68ba      	ldr	r2, [r7, #8]
 8009d74:	0151      	lsls	r1, r2, #5
 8009d76:	68fa      	ldr	r2, [r7, #12]
 8009d78:	440a      	add	r2, r1
 8009d7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d7e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009d82:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	781b      	ldrb	r3, [r3, #0]
 8009d90:	f003 030f 	and.w	r3, r3, #15
 8009d94:	2101      	movs	r1, #1
 8009d96:	fa01 f303 	lsl.w	r3, r1, r3
 8009d9a:	041b      	lsls	r3, r3, #16
 8009d9c:	43db      	mvns	r3, r3
 8009d9e:	68f9      	ldr	r1, [r7, #12]
 8009da0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009da4:	4013      	ands	r3, r2
 8009da6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009dae:	69da      	ldr	r2, [r3, #28]
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	781b      	ldrb	r3, [r3, #0]
 8009db4:	f003 030f 	and.w	r3, r3, #15
 8009db8:	2101      	movs	r1, #1
 8009dba:	fa01 f303 	lsl.w	r3, r1, r3
 8009dbe:	041b      	lsls	r3, r3, #16
 8009dc0:	43db      	mvns	r3, r3
 8009dc2:	68f9      	ldr	r1, [r7, #12]
 8009dc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009dc8:	4013      	ands	r3, r2
 8009dca:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	015a      	lsls	r2, r3, #5
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	4413      	add	r3, r2
 8009dd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009dd8:	681a      	ldr	r2, [r3, #0]
 8009dda:	68bb      	ldr	r3, [r7, #8]
 8009ddc:	0159      	lsls	r1, r3, #5
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	440b      	add	r3, r1
 8009de2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009de6:	4619      	mov	r1, r3
 8009de8:	4b05      	ldr	r3, [pc, #20]	; (8009e00 <USB_DeactivateEndpoint+0x1b4>)
 8009dea:	4013      	ands	r3, r2
 8009dec:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009dee:	2300      	movs	r3, #0
}
 8009df0:	4618      	mov	r0, r3
 8009df2:	3714      	adds	r7, #20
 8009df4:	46bd      	mov	sp, r7
 8009df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfa:	4770      	bx	lr
 8009dfc:	ec337800 	.word	0xec337800
 8009e00:	eff37800 	.word	0xeff37800

08009e04 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b08a      	sub	sp, #40	; 0x28
 8009e08:	af02      	add	r7, sp, #8
 8009e0a:	60f8      	str	r0, [r7, #12]
 8009e0c:	60b9      	str	r1, [r7, #8]
 8009e0e:	4613      	mov	r3, r2
 8009e10:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009e16:	68bb      	ldr	r3, [r7, #8]
 8009e18:	781b      	ldrb	r3, [r3, #0]
 8009e1a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009e1c:	68bb      	ldr	r3, [r7, #8]
 8009e1e:	785b      	ldrb	r3, [r3, #1]
 8009e20:	2b01      	cmp	r3, #1
 8009e22:	f040 8163 	bne.w	800a0ec <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009e26:	68bb      	ldr	r3, [r7, #8]
 8009e28:	695b      	ldr	r3, [r3, #20]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d132      	bne.n	8009e94 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009e2e:	69bb      	ldr	r3, [r7, #24]
 8009e30:	015a      	lsls	r2, r3, #5
 8009e32:	69fb      	ldr	r3, [r7, #28]
 8009e34:	4413      	add	r3, r2
 8009e36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e3a:	691a      	ldr	r2, [r3, #16]
 8009e3c:	69bb      	ldr	r3, [r7, #24]
 8009e3e:	0159      	lsls	r1, r3, #5
 8009e40:	69fb      	ldr	r3, [r7, #28]
 8009e42:	440b      	add	r3, r1
 8009e44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e48:	4619      	mov	r1, r3
 8009e4a:	4ba5      	ldr	r3, [pc, #660]	; (800a0e0 <USB_EPStartXfer+0x2dc>)
 8009e4c:	4013      	ands	r3, r2
 8009e4e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009e50:	69bb      	ldr	r3, [r7, #24]
 8009e52:	015a      	lsls	r2, r3, #5
 8009e54:	69fb      	ldr	r3, [r7, #28]
 8009e56:	4413      	add	r3, r2
 8009e58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e5c:	691b      	ldr	r3, [r3, #16]
 8009e5e:	69ba      	ldr	r2, [r7, #24]
 8009e60:	0151      	lsls	r1, r2, #5
 8009e62:	69fa      	ldr	r2, [r7, #28]
 8009e64:	440a      	add	r2, r1
 8009e66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e6a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009e6e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009e70:	69bb      	ldr	r3, [r7, #24]
 8009e72:	015a      	lsls	r2, r3, #5
 8009e74:	69fb      	ldr	r3, [r7, #28]
 8009e76:	4413      	add	r3, r2
 8009e78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e7c:	691a      	ldr	r2, [r3, #16]
 8009e7e:	69bb      	ldr	r3, [r7, #24]
 8009e80:	0159      	lsls	r1, r3, #5
 8009e82:	69fb      	ldr	r3, [r7, #28]
 8009e84:	440b      	add	r3, r1
 8009e86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e8a:	4619      	mov	r1, r3
 8009e8c:	4b95      	ldr	r3, [pc, #596]	; (800a0e4 <USB_EPStartXfer+0x2e0>)
 8009e8e:	4013      	ands	r3, r2
 8009e90:	610b      	str	r3, [r1, #16]
 8009e92:	e074      	b.n	8009f7e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009e94:	69bb      	ldr	r3, [r7, #24]
 8009e96:	015a      	lsls	r2, r3, #5
 8009e98:	69fb      	ldr	r3, [r7, #28]
 8009e9a:	4413      	add	r3, r2
 8009e9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ea0:	691a      	ldr	r2, [r3, #16]
 8009ea2:	69bb      	ldr	r3, [r7, #24]
 8009ea4:	0159      	lsls	r1, r3, #5
 8009ea6:	69fb      	ldr	r3, [r7, #28]
 8009ea8:	440b      	add	r3, r1
 8009eaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009eae:	4619      	mov	r1, r3
 8009eb0:	4b8c      	ldr	r3, [pc, #560]	; (800a0e4 <USB_EPStartXfer+0x2e0>)
 8009eb2:	4013      	ands	r3, r2
 8009eb4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009eb6:	69bb      	ldr	r3, [r7, #24]
 8009eb8:	015a      	lsls	r2, r3, #5
 8009eba:	69fb      	ldr	r3, [r7, #28]
 8009ebc:	4413      	add	r3, r2
 8009ebe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ec2:	691a      	ldr	r2, [r3, #16]
 8009ec4:	69bb      	ldr	r3, [r7, #24]
 8009ec6:	0159      	lsls	r1, r3, #5
 8009ec8:	69fb      	ldr	r3, [r7, #28]
 8009eca:	440b      	add	r3, r1
 8009ecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ed0:	4619      	mov	r1, r3
 8009ed2:	4b83      	ldr	r3, [pc, #524]	; (800a0e0 <USB_EPStartXfer+0x2dc>)
 8009ed4:	4013      	ands	r3, r2
 8009ed6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009ed8:	69bb      	ldr	r3, [r7, #24]
 8009eda:	015a      	lsls	r2, r3, #5
 8009edc:	69fb      	ldr	r3, [r7, #28]
 8009ede:	4413      	add	r3, r2
 8009ee0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ee4:	691a      	ldr	r2, [r3, #16]
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	6959      	ldr	r1, [r3, #20]
 8009eea:	68bb      	ldr	r3, [r7, #8]
 8009eec:	689b      	ldr	r3, [r3, #8]
 8009eee:	440b      	add	r3, r1
 8009ef0:	1e59      	subs	r1, r3, #1
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	689b      	ldr	r3, [r3, #8]
 8009ef6:	fbb1 f3f3 	udiv	r3, r1, r3
 8009efa:	04d9      	lsls	r1, r3, #19
 8009efc:	4b7a      	ldr	r3, [pc, #488]	; (800a0e8 <USB_EPStartXfer+0x2e4>)
 8009efe:	400b      	ands	r3, r1
 8009f00:	69b9      	ldr	r1, [r7, #24]
 8009f02:	0148      	lsls	r0, r1, #5
 8009f04:	69f9      	ldr	r1, [r7, #28]
 8009f06:	4401      	add	r1, r0
 8009f08:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009f0c:	4313      	orrs	r3, r2
 8009f0e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009f10:	69bb      	ldr	r3, [r7, #24]
 8009f12:	015a      	lsls	r2, r3, #5
 8009f14:	69fb      	ldr	r3, [r7, #28]
 8009f16:	4413      	add	r3, r2
 8009f18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f1c:	691a      	ldr	r2, [r3, #16]
 8009f1e:	68bb      	ldr	r3, [r7, #8]
 8009f20:	695b      	ldr	r3, [r3, #20]
 8009f22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009f26:	69b9      	ldr	r1, [r7, #24]
 8009f28:	0148      	lsls	r0, r1, #5
 8009f2a:	69f9      	ldr	r1, [r7, #28]
 8009f2c:	4401      	add	r1, r0
 8009f2e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009f32:	4313      	orrs	r3, r2
 8009f34:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009f36:	68bb      	ldr	r3, [r7, #8]
 8009f38:	78db      	ldrb	r3, [r3, #3]
 8009f3a:	2b01      	cmp	r3, #1
 8009f3c:	d11f      	bne.n	8009f7e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009f3e:	69bb      	ldr	r3, [r7, #24]
 8009f40:	015a      	lsls	r2, r3, #5
 8009f42:	69fb      	ldr	r3, [r7, #28]
 8009f44:	4413      	add	r3, r2
 8009f46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f4a:	691b      	ldr	r3, [r3, #16]
 8009f4c:	69ba      	ldr	r2, [r7, #24]
 8009f4e:	0151      	lsls	r1, r2, #5
 8009f50:	69fa      	ldr	r2, [r7, #28]
 8009f52:	440a      	add	r2, r1
 8009f54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f58:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009f5c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009f5e:	69bb      	ldr	r3, [r7, #24]
 8009f60:	015a      	lsls	r2, r3, #5
 8009f62:	69fb      	ldr	r3, [r7, #28]
 8009f64:	4413      	add	r3, r2
 8009f66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f6a:	691b      	ldr	r3, [r3, #16]
 8009f6c:	69ba      	ldr	r2, [r7, #24]
 8009f6e:	0151      	lsls	r1, r2, #5
 8009f70:	69fa      	ldr	r2, [r7, #28]
 8009f72:	440a      	add	r2, r1
 8009f74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f78:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009f7c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009f7e:	79fb      	ldrb	r3, [r7, #7]
 8009f80:	2b01      	cmp	r3, #1
 8009f82:	d14b      	bne.n	800a01c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	691b      	ldr	r3, [r3, #16]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d009      	beq.n	8009fa0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009f8c:	69bb      	ldr	r3, [r7, #24]
 8009f8e:	015a      	lsls	r2, r3, #5
 8009f90:	69fb      	ldr	r3, [r7, #28]
 8009f92:	4413      	add	r3, r2
 8009f94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f98:	461a      	mov	r2, r3
 8009f9a:	68bb      	ldr	r3, [r7, #8]
 8009f9c:	691b      	ldr	r3, [r3, #16]
 8009f9e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	78db      	ldrb	r3, [r3, #3]
 8009fa4:	2b01      	cmp	r3, #1
 8009fa6:	d128      	bne.n	8009ffa <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009fa8:	69fb      	ldr	r3, [r7, #28]
 8009faa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fae:	689b      	ldr	r3, [r3, #8]
 8009fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d110      	bne.n	8009fda <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009fb8:	69bb      	ldr	r3, [r7, #24]
 8009fba:	015a      	lsls	r2, r3, #5
 8009fbc:	69fb      	ldr	r3, [r7, #28]
 8009fbe:	4413      	add	r3, r2
 8009fc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	69ba      	ldr	r2, [r7, #24]
 8009fc8:	0151      	lsls	r1, r2, #5
 8009fca:	69fa      	ldr	r2, [r7, #28]
 8009fcc:	440a      	add	r2, r1
 8009fce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009fd2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009fd6:	6013      	str	r3, [r2, #0]
 8009fd8:	e00f      	b.n	8009ffa <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009fda:	69bb      	ldr	r3, [r7, #24]
 8009fdc:	015a      	lsls	r2, r3, #5
 8009fde:	69fb      	ldr	r3, [r7, #28]
 8009fe0:	4413      	add	r3, r2
 8009fe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	69ba      	ldr	r2, [r7, #24]
 8009fea:	0151      	lsls	r1, r2, #5
 8009fec:	69fa      	ldr	r2, [r7, #28]
 8009fee:	440a      	add	r2, r1
 8009ff0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ff4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ff8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009ffa:	69bb      	ldr	r3, [r7, #24]
 8009ffc:	015a      	lsls	r2, r3, #5
 8009ffe:	69fb      	ldr	r3, [r7, #28]
 800a000:	4413      	add	r3, r2
 800a002:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	69ba      	ldr	r2, [r7, #24]
 800a00a:	0151      	lsls	r1, r2, #5
 800a00c:	69fa      	ldr	r2, [r7, #28]
 800a00e:	440a      	add	r2, r1
 800a010:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a014:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a018:	6013      	str	r3, [r2, #0]
 800a01a:	e133      	b.n	800a284 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a01c:	69bb      	ldr	r3, [r7, #24]
 800a01e:	015a      	lsls	r2, r3, #5
 800a020:	69fb      	ldr	r3, [r7, #28]
 800a022:	4413      	add	r3, r2
 800a024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	69ba      	ldr	r2, [r7, #24]
 800a02c:	0151      	lsls	r1, r2, #5
 800a02e:	69fa      	ldr	r2, [r7, #28]
 800a030:	440a      	add	r2, r1
 800a032:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a036:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a03a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a03c:	68bb      	ldr	r3, [r7, #8]
 800a03e:	78db      	ldrb	r3, [r3, #3]
 800a040:	2b01      	cmp	r3, #1
 800a042:	d015      	beq.n	800a070 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a044:	68bb      	ldr	r3, [r7, #8]
 800a046:	695b      	ldr	r3, [r3, #20]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	f000 811b 	beq.w	800a284 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a04e:	69fb      	ldr	r3, [r7, #28]
 800a050:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a054:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a056:	68bb      	ldr	r3, [r7, #8]
 800a058:	781b      	ldrb	r3, [r3, #0]
 800a05a:	f003 030f 	and.w	r3, r3, #15
 800a05e:	2101      	movs	r1, #1
 800a060:	fa01 f303 	lsl.w	r3, r1, r3
 800a064:	69f9      	ldr	r1, [r7, #28]
 800a066:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a06a:	4313      	orrs	r3, r2
 800a06c:	634b      	str	r3, [r1, #52]	; 0x34
 800a06e:	e109      	b.n	800a284 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a070:	69fb      	ldr	r3, [r7, #28]
 800a072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a076:	689b      	ldr	r3, [r3, #8]
 800a078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d110      	bne.n	800a0a2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a080:	69bb      	ldr	r3, [r7, #24]
 800a082:	015a      	lsls	r2, r3, #5
 800a084:	69fb      	ldr	r3, [r7, #28]
 800a086:	4413      	add	r3, r2
 800a088:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	69ba      	ldr	r2, [r7, #24]
 800a090:	0151      	lsls	r1, r2, #5
 800a092:	69fa      	ldr	r2, [r7, #28]
 800a094:	440a      	add	r2, r1
 800a096:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a09a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a09e:	6013      	str	r3, [r2, #0]
 800a0a0:	e00f      	b.n	800a0c2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a0a2:	69bb      	ldr	r3, [r7, #24]
 800a0a4:	015a      	lsls	r2, r3, #5
 800a0a6:	69fb      	ldr	r3, [r7, #28]
 800a0a8:	4413      	add	r3, r2
 800a0aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	69ba      	ldr	r2, [r7, #24]
 800a0b2:	0151      	lsls	r1, r2, #5
 800a0b4:	69fa      	ldr	r2, [r7, #28]
 800a0b6:	440a      	add	r2, r1
 800a0b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a0bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a0c0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a0c2:	68bb      	ldr	r3, [r7, #8]
 800a0c4:	68d9      	ldr	r1, [r3, #12]
 800a0c6:	68bb      	ldr	r3, [r7, #8]
 800a0c8:	781a      	ldrb	r2, [r3, #0]
 800a0ca:	68bb      	ldr	r3, [r7, #8]
 800a0cc:	695b      	ldr	r3, [r3, #20]
 800a0ce:	b298      	uxth	r0, r3
 800a0d0:	79fb      	ldrb	r3, [r7, #7]
 800a0d2:	9300      	str	r3, [sp, #0]
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	68f8      	ldr	r0, [r7, #12]
 800a0d8:	f000 fa38 	bl	800a54c <USB_WritePacket>
 800a0dc:	e0d2      	b.n	800a284 <USB_EPStartXfer+0x480>
 800a0de:	bf00      	nop
 800a0e0:	e007ffff 	.word	0xe007ffff
 800a0e4:	fff80000 	.word	0xfff80000
 800a0e8:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a0ec:	69bb      	ldr	r3, [r7, #24]
 800a0ee:	015a      	lsls	r2, r3, #5
 800a0f0:	69fb      	ldr	r3, [r7, #28]
 800a0f2:	4413      	add	r3, r2
 800a0f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0f8:	691a      	ldr	r2, [r3, #16]
 800a0fa:	69bb      	ldr	r3, [r7, #24]
 800a0fc:	0159      	lsls	r1, r3, #5
 800a0fe:	69fb      	ldr	r3, [r7, #28]
 800a100:	440b      	add	r3, r1
 800a102:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a106:	4619      	mov	r1, r3
 800a108:	4b61      	ldr	r3, [pc, #388]	; (800a290 <USB_EPStartXfer+0x48c>)
 800a10a:	4013      	ands	r3, r2
 800a10c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a10e:	69bb      	ldr	r3, [r7, #24]
 800a110:	015a      	lsls	r2, r3, #5
 800a112:	69fb      	ldr	r3, [r7, #28]
 800a114:	4413      	add	r3, r2
 800a116:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a11a:	691a      	ldr	r2, [r3, #16]
 800a11c:	69bb      	ldr	r3, [r7, #24]
 800a11e:	0159      	lsls	r1, r3, #5
 800a120:	69fb      	ldr	r3, [r7, #28]
 800a122:	440b      	add	r3, r1
 800a124:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a128:	4619      	mov	r1, r3
 800a12a:	4b5a      	ldr	r3, [pc, #360]	; (800a294 <USB_EPStartXfer+0x490>)
 800a12c:	4013      	ands	r3, r2
 800a12e:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	695b      	ldr	r3, [r3, #20]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d123      	bne.n	800a180 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a138:	69bb      	ldr	r3, [r7, #24]
 800a13a:	015a      	lsls	r2, r3, #5
 800a13c:	69fb      	ldr	r3, [r7, #28]
 800a13e:	4413      	add	r3, r2
 800a140:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a144:	691a      	ldr	r2, [r3, #16]
 800a146:	68bb      	ldr	r3, [r7, #8]
 800a148:	689b      	ldr	r3, [r3, #8]
 800a14a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a14e:	69b9      	ldr	r1, [r7, #24]
 800a150:	0148      	lsls	r0, r1, #5
 800a152:	69f9      	ldr	r1, [r7, #28]
 800a154:	4401      	add	r1, r0
 800a156:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a15a:	4313      	orrs	r3, r2
 800a15c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a15e:	69bb      	ldr	r3, [r7, #24]
 800a160:	015a      	lsls	r2, r3, #5
 800a162:	69fb      	ldr	r3, [r7, #28]
 800a164:	4413      	add	r3, r2
 800a166:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a16a:	691b      	ldr	r3, [r3, #16]
 800a16c:	69ba      	ldr	r2, [r7, #24]
 800a16e:	0151      	lsls	r1, r2, #5
 800a170:	69fa      	ldr	r2, [r7, #28]
 800a172:	440a      	add	r2, r1
 800a174:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a178:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a17c:	6113      	str	r3, [r2, #16]
 800a17e:	e033      	b.n	800a1e8 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a180:	68bb      	ldr	r3, [r7, #8]
 800a182:	695a      	ldr	r2, [r3, #20]
 800a184:	68bb      	ldr	r3, [r7, #8]
 800a186:	689b      	ldr	r3, [r3, #8]
 800a188:	4413      	add	r3, r2
 800a18a:	1e5a      	subs	r2, r3, #1
 800a18c:	68bb      	ldr	r3, [r7, #8]
 800a18e:	689b      	ldr	r3, [r3, #8]
 800a190:	fbb2 f3f3 	udiv	r3, r2, r3
 800a194:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a196:	69bb      	ldr	r3, [r7, #24]
 800a198:	015a      	lsls	r2, r3, #5
 800a19a:	69fb      	ldr	r3, [r7, #28]
 800a19c:	4413      	add	r3, r2
 800a19e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1a2:	691a      	ldr	r2, [r3, #16]
 800a1a4:	8afb      	ldrh	r3, [r7, #22]
 800a1a6:	04d9      	lsls	r1, r3, #19
 800a1a8:	4b3b      	ldr	r3, [pc, #236]	; (800a298 <USB_EPStartXfer+0x494>)
 800a1aa:	400b      	ands	r3, r1
 800a1ac:	69b9      	ldr	r1, [r7, #24]
 800a1ae:	0148      	lsls	r0, r1, #5
 800a1b0:	69f9      	ldr	r1, [r7, #28]
 800a1b2:	4401      	add	r1, r0
 800a1b4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a1b8:	4313      	orrs	r3, r2
 800a1ba:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800a1bc:	69bb      	ldr	r3, [r7, #24]
 800a1be:	015a      	lsls	r2, r3, #5
 800a1c0:	69fb      	ldr	r3, [r7, #28]
 800a1c2:	4413      	add	r3, r2
 800a1c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1c8:	691a      	ldr	r2, [r3, #16]
 800a1ca:	68bb      	ldr	r3, [r7, #8]
 800a1cc:	689b      	ldr	r3, [r3, #8]
 800a1ce:	8af9      	ldrh	r1, [r7, #22]
 800a1d0:	fb01 f303 	mul.w	r3, r1, r3
 800a1d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a1d8:	69b9      	ldr	r1, [r7, #24]
 800a1da:	0148      	lsls	r0, r1, #5
 800a1dc:	69f9      	ldr	r1, [r7, #28]
 800a1de:	4401      	add	r1, r0
 800a1e0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a1e4:	4313      	orrs	r3, r2
 800a1e6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a1e8:	79fb      	ldrb	r3, [r7, #7]
 800a1ea:	2b01      	cmp	r3, #1
 800a1ec:	d10d      	bne.n	800a20a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a1ee:	68bb      	ldr	r3, [r7, #8]
 800a1f0:	68db      	ldr	r3, [r3, #12]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d009      	beq.n	800a20a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	68d9      	ldr	r1, [r3, #12]
 800a1fa:	69bb      	ldr	r3, [r7, #24]
 800a1fc:	015a      	lsls	r2, r3, #5
 800a1fe:	69fb      	ldr	r3, [r7, #28]
 800a200:	4413      	add	r3, r2
 800a202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a206:	460a      	mov	r2, r1
 800a208:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	78db      	ldrb	r3, [r3, #3]
 800a20e:	2b01      	cmp	r3, #1
 800a210:	d128      	bne.n	800a264 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a212:	69fb      	ldr	r3, [r7, #28]
 800a214:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a218:	689b      	ldr	r3, [r3, #8]
 800a21a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d110      	bne.n	800a244 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a222:	69bb      	ldr	r3, [r7, #24]
 800a224:	015a      	lsls	r2, r3, #5
 800a226:	69fb      	ldr	r3, [r7, #28]
 800a228:	4413      	add	r3, r2
 800a22a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	69ba      	ldr	r2, [r7, #24]
 800a232:	0151      	lsls	r1, r2, #5
 800a234:	69fa      	ldr	r2, [r7, #28]
 800a236:	440a      	add	r2, r1
 800a238:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a23c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a240:	6013      	str	r3, [r2, #0]
 800a242:	e00f      	b.n	800a264 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a244:	69bb      	ldr	r3, [r7, #24]
 800a246:	015a      	lsls	r2, r3, #5
 800a248:	69fb      	ldr	r3, [r7, #28]
 800a24a:	4413      	add	r3, r2
 800a24c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	69ba      	ldr	r2, [r7, #24]
 800a254:	0151      	lsls	r1, r2, #5
 800a256:	69fa      	ldr	r2, [r7, #28]
 800a258:	440a      	add	r2, r1
 800a25a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a25e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a262:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a264:	69bb      	ldr	r3, [r7, #24]
 800a266:	015a      	lsls	r2, r3, #5
 800a268:	69fb      	ldr	r3, [r7, #28]
 800a26a:	4413      	add	r3, r2
 800a26c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	69ba      	ldr	r2, [r7, #24]
 800a274:	0151      	lsls	r1, r2, #5
 800a276:	69fa      	ldr	r2, [r7, #28]
 800a278:	440a      	add	r2, r1
 800a27a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a27e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a282:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a284:	2300      	movs	r3, #0
}
 800a286:	4618      	mov	r0, r3
 800a288:	3720      	adds	r7, #32
 800a28a:	46bd      	mov	sp, r7
 800a28c:	bd80      	pop	{r7, pc}
 800a28e:	bf00      	nop
 800a290:	fff80000 	.word	0xfff80000
 800a294:	e007ffff 	.word	0xe007ffff
 800a298:	1ff80000 	.word	0x1ff80000

0800a29c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a29c:	b480      	push	{r7}
 800a29e:	b087      	sub	sp, #28
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	60f8      	str	r0, [r7, #12]
 800a2a4:	60b9      	str	r1, [r7, #8]
 800a2a6:	4613      	mov	r3, r2
 800a2a8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800a2ae:	68bb      	ldr	r3, [r7, #8]
 800a2b0:	781b      	ldrb	r3, [r3, #0]
 800a2b2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a2b4:	68bb      	ldr	r3, [r7, #8]
 800a2b6:	785b      	ldrb	r3, [r3, #1]
 800a2b8:	2b01      	cmp	r3, #1
 800a2ba:	f040 80cd 	bne.w	800a458 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a2be:	68bb      	ldr	r3, [r7, #8]
 800a2c0:	695b      	ldr	r3, [r3, #20]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d132      	bne.n	800a32c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a2c6:	693b      	ldr	r3, [r7, #16]
 800a2c8:	015a      	lsls	r2, r3, #5
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	4413      	add	r3, r2
 800a2ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2d2:	691a      	ldr	r2, [r3, #16]
 800a2d4:	693b      	ldr	r3, [r7, #16]
 800a2d6:	0159      	lsls	r1, r3, #5
 800a2d8:	697b      	ldr	r3, [r7, #20]
 800a2da:	440b      	add	r3, r1
 800a2dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2e0:	4619      	mov	r1, r3
 800a2e2:	4b98      	ldr	r3, [pc, #608]	; (800a544 <USB_EP0StartXfer+0x2a8>)
 800a2e4:	4013      	ands	r3, r2
 800a2e6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a2e8:	693b      	ldr	r3, [r7, #16]
 800a2ea:	015a      	lsls	r2, r3, #5
 800a2ec:	697b      	ldr	r3, [r7, #20]
 800a2ee:	4413      	add	r3, r2
 800a2f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2f4:	691b      	ldr	r3, [r3, #16]
 800a2f6:	693a      	ldr	r2, [r7, #16]
 800a2f8:	0151      	lsls	r1, r2, #5
 800a2fa:	697a      	ldr	r2, [r7, #20]
 800a2fc:	440a      	add	r2, r1
 800a2fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a302:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a306:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a308:	693b      	ldr	r3, [r7, #16]
 800a30a:	015a      	lsls	r2, r3, #5
 800a30c:	697b      	ldr	r3, [r7, #20]
 800a30e:	4413      	add	r3, r2
 800a310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a314:	691a      	ldr	r2, [r3, #16]
 800a316:	693b      	ldr	r3, [r7, #16]
 800a318:	0159      	lsls	r1, r3, #5
 800a31a:	697b      	ldr	r3, [r7, #20]
 800a31c:	440b      	add	r3, r1
 800a31e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a322:	4619      	mov	r1, r3
 800a324:	4b88      	ldr	r3, [pc, #544]	; (800a548 <USB_EP0StartXfer+0x2ac>)
 800a326:	4013      	ands	r3, r2
 800a328:	610b      	str	r3, [r1, #16]
 800a32a:	e04e      	b.n	800a3ca <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a32c:	693b      	ldr	r3, [r7, #16]
 800a32e:	015a      	lsls	r2, r3, #5
 800a330:	697b      	ldr	r3, [r7, #20]
 800a332:	4413      	add	r3, r2
 800a334:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a338:	691a      	ldr	r2, [r3, #16]
 800a33a:	693b      	ldr	r3, [r7, #16]
 800a33c:	0159      	lsls	r1, r3, #5
 800a33e:	697b      	ldr	r3, [r7, #20]
 800a340:	440b      	add	r3, r1
 800a342:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a346:	4619      	mov	r1, r3
 800a348:	4b7f      	ldr	r3, [pc, #508]	; (800a548 <USB_EP0StartXfer+0x2ac>)
 800a34a:	4013      	ands	r3, r2
 800a34c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a34e:	693b      	ldr	r3, [r7, #16]
 800a350:	015a      	lsls	r2, r3, #5
 800a352:	697b      	ldr	r3, [r7, #20]
 800a354:	4413      	add	r3, r2
 800a356:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a35a:	691a      	ldr	r2, [r3, #16]
 800a35c:	693b      	ldr	r3, [r7, #16]
 800a35e:	0159      	lsls	r1, r3, #5
 800a360:	697b      	ldr	r3, [r7, #20]
 800a362:	440b      	add	r3, r1
 800a364:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a368:	4619      	mov	r1, r3
 800a36a:	4b76      	ldr	r3, [pc, #472]	; (800a544 <USB_EP0StartXfer+0x2a8>)
 800a36c:	4013      	ands	r3, r2
 800a36e:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800a370:	68bb      	ldr	r3, [r7, #8]
 800a372:	695a      	ldr	r2, [r3, #20]
 800a374:	68bb      	ldr	r3, [r7, #8]
 800a376:	689b      	ldr	r3, [r3, #8]
 800a378:	429a      	cmp	r2, r3
 800a37a:	d903      	bls.n	800a384 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800a37c:	68bb      	ldr	r3, [r7, #8]
 800a37e:	689a      	ldr	r2, [r3, #8]
 800a380:	68bb      	ldr	r3, [r7, #8]
 800a382:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a384:	693b      	ldr	r3, [r7, #16]
 800a386:	015a      	lsls	r2, r3, #5
 800a388:	697b      	ldr	r3, [r7, #20]
 800a38a:	4413      	add	r3, r2
 800a38c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a390:	691b      	ldr	r3, [r3, #16]
 800a392:	693a      	ldr	r2, [r7, #16]
 800a394:	0151      	lsls	r1, r2, #5
 800a396:	697a      	ldr	r2, [r7, #20]
 800a398:	440a      	add	r2, r1
 800a39a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a39e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a3a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a3a4:	693b      	ldr	r3, [r7, #16]
 800a3a6:	015a      	lsls	r2, r3, #5
 800a3a8:	697b      	ldr	r3, [r7, #20]
 800a3aa:	4413      	add	r3, r2
 800a3ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3b0:	691a      	ldr	r2, [r3, #16]
 800a3b2:	68bb      	ldr	r3, [r7, #8]
 800a3b4:	695b      	ldr	r3, [r3, #20]
 800a3b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a3ba:	6939      	ldr	r1, [r7, #16]
 800a3bc:	0148      	lsls	r0, r1, #5
 800a3be:	6979      	ldr	r1, [r7, #20]
 800a3c0:	4401      	add	r1, r0
 800a3c2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a3c6:	4313      	orrs	r3, r2
 800a3c8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a3ca:	79fb      	ldrb	r3, [r7, #7]
 800a3cc:	2b01      	cmp	r3, #1
 800a3ce:	d11e      	bne.n	800a40e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	691b      	ldr	r3, [r3, #16]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d009      	beq.n	800a3ec <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a3d8:	693b      	ldr	r3, [r7, #16]
 800a3da:	015a      	lsls	r2, r3, #5
 800a3dc:	697b      	ldr	r3, [r7, #20]
 800a3de:	4413      	add	r3, r2
 800a3e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3e4:	461a      	mov	r2, r3
 800a3e6:	68bb      	ldr	r3, [r7, #8]
 800a3e8:	691b      	ldr	r3, [r3, #16]
 800a3ea:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a3ec:	693b      	ldr	r3, [r7, #16]
 800a3ee:	015a      	lsls	r2, r3, #5
 800a3f0:	697b      	ldr	r3, [r7, #20]
 800a3f2:	4413      	add	r3, r2
 800a3f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	693a      	ldr	r2, [r7, #16]
 800a3fc:	0151      	lsls	r1, r2, #5
 800a3fe:	697a      	ldr	r2, [r7, #20]
 800a400:	440a      	add	r2, r1
 800a402:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a406:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a40a:	6013      	str	r3, [r2, #0]
 800a40c:	e092      	b.n	800a534 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a40e:	693b      	ldr	r3, [r7, #16]
 800a410:	015a      	lsls	r2, r3, #5
 800a412:	697b      	ldr	r3, [r7, #20]
 800a414:	4413      	add	r3, r2
 800a416:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	693a      	ldr	r2, [r7, #16]
 800a41e:	0151      	lsls	r1, r2, #5
 800a420:	697a      	ldr	r2, [r7, #20]
 800a422:	440a      	add	r2, r1
 800a424:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a428:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a42c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a42e:	68bb      	ldr	r3, [r7, #8]
 800a430:	695b      	ldr	r3, [r3, #20]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d07e      	beq.n	800a534 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a436:	697b      	ldr	r3, [r7, #20]
 800a438:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a43c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a43e:	68bb      	ldr	r3, [r7, #8]
 800a440:	781b      	ldrb	r3, [r3, #0]
 800a442:	f003 030f 	and.w	r3, r3, #15
 800a446:	2101      	movs	r1, #1
 800a448:	fa01 f303 	lsl.w	r3, r1, r3
 800a44c:	6979      	ldr	r1, [r7, #20]
 800a44e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a452:	4313      	orrs	r3, r2
 800a454:	634b      	str	r3, [r1, #52]	; 0x34
 800a456:	e06d      	b.n	800a534 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a458:	693b      	ldr	r3, [r7, #16]
 800a45a:	015a      	lsls	r2, r3, #5
 800a45c:	697b      	ldr	r3, [r7, #20]
 800a45e:	4413      	add	r3, r2
 800a460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a464:	691a      	ldr	r2, [r3, #16]
 800a466:	693b      	ldr	r3, [r7, #16]
 800a468:	0159      	lsls	r1, r3, #5
 800a46a:	697b      	ldr	r3, [r7, #20]
 800a46c:	440b      	add	r3, r1
 800a46e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a472:	4619      	mov	r1, r3
 800a474:	4b34      	ldr	r3, [pc, #208]	; (800a548 <USB_EP0StartXfer+0x2ac>)
 800a476:	4013      	ands	r3, r2
 800a478:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a47a:	693b      	ldr	r3, [r7, #16]
 800a47c:	015a      	lsls	r2, r3, #5
 800a47e:	697b      	ldr	r3, [r7, #20]
 800a480:	4413      	add	r3, r2
 800a482:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a486:	691a      	ldr	r2, [r3, #16]
 800a488:	693b      	ldr	r3, [r7, #16]
 800a48a:	0159      	lsls	r1, r3, #5
 800a48c:	697b      	ldr	r3, [r7, #20]
 800a48e:	440b      	add	r3, r1
 800a490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a494:	4619      	mov	r1, r3
 800a496:	4b2b      	ldr	r3, [pc, #172]	; (800a544 <USB_EP0StartXfer+0x2a8>)
 800a498:	4013      	ands	r3, r2
 800a49a:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	695b      	ldr	r3, [r3, #20]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d003      	beq.n	800a4ac <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	689a      	ldr	r2, [r3, #8]
 800a4a8:	68bb      	ldr	r3, [r7, #8]
 800a4aa:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a4ac:	693b      	ldr	r3, [r7, #16]
 800a4ae:	015a      	lsls	r2, r3, #5
 800a4b0:	697b      	ldr	r3, [r7, #20]
 800a4b2:	4413      	add	r3, r2
 800a4b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4b8:	691b      	ldr	r3, [r3, #16]
 800a4ba:	693a      	ldr	r2, [r7, #16]
 800a4bc:	0151      	lsls	r1, r2, #5
 800a4be:	697a      	ldr	r2, [r7, #20]
 800a4c0:	440a      	add	r2, r1
 800a4c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a4c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a4ca:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800a4cc:	693b      	ldr	r3, [r7, #16]
 800a4ce:	015a      	lsls	r2, r3, #5
 800a4d0:	697b      	ldr	r3, [r7, #20]
 800a4d2:	4413      	add	r3, r2
 800a4d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4d8:	691a      	ldr	r2, [r3, #16]
 800a4da:	68bb      	ldr	r3, [r7, #8]
 800a4dc:	689b      	ldr	r3, [r3, #8]
 800a4de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a4e2:	6939      	ldr	r1, [r7, #16]
 800a4e4:	0148      	lsls	r0, r1, #5
 800a4e6:	6979      	ldr	r1, [r7, #20]
 800a4e8:	4401      	add	r1, r0
 800a4ea:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a4ee:	4313      	orrs	r3, r2
 800a4f0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800a4f2:	79fb      	ldrb	r3, [r7, #7]
 800a4f4:	2b01      	cmp	r3, #1
 800a4f6:	d10d      	bne.n	800a514 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a4f8:	68bb      	ldr	r3, [r7, #8]
 800a4fa:	68db      	ldr	r3, [r3, #12]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d009      	beq.n	800a514 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	68d9      	ldr	r1, [r3, #12]
 800a504:	693b      	ldr	r3, [r7, #16]
 800a506:	015a      	lsls	r2, r3, #5
 800a508:	697b      	ldr	r3, [r7, #20]
 800a50a:	4413      	add	r3, r2
 800a50c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a510:	460a      	mov	r2, r1
 800a512:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a514:	693b      	ldr	r3, [r7, #16]
 800a516:	015a      	lsls	r2, r3, #5
 800a518:	697b      	ldr	r3, [r7, #20]
 800a51a:	4413      	add	r3, r2
 800a51c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	693a      	ldr	r2, [r7, #16]
 800a524:	0151      	lsls	r1, r2, #5
 800a526:	697a      	ldr	r2, [r7, #20]
 800a528:	440a      	add	r2, r1
 800a52a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a52e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a532:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a534:	2300      	movs	r3, #0
}
 800a536:	4618      	mov	r0, r3
 800a538:	371c      	adds	r7, #28
 800a53a:	46bd      	mov	sp, r7
 800a53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a540:	4770      	bx	lr
 800a542:	bf00      	nop
 800a544:	e007ffff 	.word	0xe007ffff
 800a548:	fff80000 	.word	0xfff80000

0800a54c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a54c:	b480      	push	{r7}
 800a54e:	b089      	sub	sp, #36	; 0x24
 800a550:	af00      	add	r7, sp, #0
 800a552:	60f8      	str	r0, [r7, #12]
 800a554:	60b9      	str	r1, [r7, #8]
 800a556:	4611      	mov	r1, r2
 800a558:	461a      	mov	r2, r3
 800a55a:	460b      	mov	r3, r1
 800a55c:	71fb      	strb	r3, [r7, #7]
 800a55e:	4613      	mov	r3, r2
 800a560:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800a566:	68bb      	ldr	r3, [r7, #8]
 800a568:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800a56a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d11a      	bne.n	800a5a8 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a572:	88bb      	ldrh	r3, [r7, #4]
 800a574:	3303      	adds	r3, #3
 800a576:	089b      	lsrs	r3, r3, #2
 800a578:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a57a:	2300      	movs	r3, #0
 800a57c:	61bb      	str	r3, [r7, #24]
 800a57e:	e00f      	b.n	800a5a0 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a580:	79fb      	ldrb	r3, [r7, #7]
 800a582:	031a      	lsls	r2, r3, #12
 800a584:	697b      	ldr	r3, [r7, #20]
 800a586:	4413      	add	r3, r2
 800a588:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a58c:	461a      	mov	r2, r3
 800a58e:	69fb      	ldr	r3, [r7, #28]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a594:	69fb      	ldr	r3, [r7, #28]
 800a596:	3304      	adds	r3, #4
 800a598:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a59a:	69bb      	ldr	r3, [r7, #24]
 800a59c:	3301      	adds	r3, #1
 800a59e:	61bb      	str	r3, [r7, #24]
 800a5a0:	69ba      	ldr	r2, [r7, #24]
 800a5a2:	693b      	ldr	r3, [r7, #16]
 800a5a4:	429a      	cmp	r2, r3
 800a5a6:	d3eb      	bcc.n	800a580 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a5a8:	2300      	movs	r3, #0
}
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	3724      	adds	r7, #36	; 0x24
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b4:	4770      	bx	lr

0800a5b6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a5b6:	b480      	push	{r7}
 800a5b8:	b089      	sub	sp, #36	; 0x24
 800a5ba:	af00      	add	r7, sp, #0
 800a5bc:	60f8      	str	r0, [r7, #12]
 800a5be:	60b9      	str	r1, [r7, #8]
 800a5c0:	4613      	mov	r3, r2
 800a5c2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800a5cc:	88fb      	ldrh	r3, [r7, #6]
 800a5ce:	3303      	adds	r3, #3
 800a5d0:	089b      	lsrs	r3, r3, #2
 800a5d2:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	61bb      	str	r3, [r7, #24]
 800a5d8:	e00b      	b.n	800a5f2 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a5da:	697b      	ldr	r3, [r7, #20]
 800a5dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5e0:	681a      	ldr	r2, [r3, #0]
 800a5e2:	69fb      	ldr	r3, [r7, #28]
 800a5e4:	601a      	str	r2, [r3, #0]
    pDest++;
 800a5e6:	69fb      	ldr	r3, [r7, #28]
 800a5e8:	3304      	adds	r3, #4
 800a5ea:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800a5ec:	69bb      	ldr	r3, [r7, #24]
 800a5ee:	3301      	adds	r3, #1
 800a5f0:	61bb      	str	r3, [r7, #24]
 800a5f2:	69ba      	ldr	r2, [r7, #24]
 800a5f4:	693b      	ldr	r3, [r7, #16]
 800a5f6:	429a      	cmp	r2, r3
 800a5f8:	d3ef      	bcc.n	800a5da <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800a5fa:	69fb      	ldr	r3, [r7, #28]
}
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	3724      	adds	r7, #36	; 0x24
 800a600:	46bd      	mov	sp, r7
 800a602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a606:	4770      	bx	lr

0800a608 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a608:	b480      	push	{r7}
 800a60a:	b085      	sub	sp, #20
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
 800a610:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	781b      	ldrb	r3, [r3, #0]
 800a61a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	785b      	ldrb	r3, [r3, #1]
 800a620:	2b01      	cmp	r3, #1
 800a622:	d12c      	bne.n	800a67e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a624:	68bb      	ldr	r3, [r7, #8]
 800a626:	015a      	lsls	r2, r3, #5
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	4413      	add	r3, r2
 800a62c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	2b00      	cmp	r3, #0
 800a634:	db12      	blt.n	800a65c <USB_EPSetStall+0x54>
 800a636:	68bb      	ldr	r3, [r7, #8]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d00f      	beq.n	800a65c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a63c:	68bb      	ldr	r3, [r7, #8]
 800a63e:	015a      	lsls	r2, r3, #5
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	4413      	add	r3, r2
 800a644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	68ba      	ldr	r2, [r7, #8]
 800a64c:	0151      	lsls	r1, r2, #5
 800a64e:	68fa      	ldr	r2, [r7, #12]
 800a650:	440a      	add	r2, r1
 800a652:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a656:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a65a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a65c:	68bb      	ldr	r3, [r7, #8]
 800a65e:	015a      	lsls	r2, r3, #5
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	4413      	add	r3, r2
 800a664:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	68ba      	ldr	r2, [r7, #8]
 800a66c:	0151      	lsls	r1, r2, #5
 800a66e:	68fa      	ldr	r2, [r7, #12]
 800a670:	440a      	add	r2, r1
 800a672:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a676:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a67a:	6013      	str	r3, [r2, #0]
 800a67c:	e02b      	b.n	800a6d6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	015a      	lsls	r2, r3, #5
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	4413      	add	r3, r2
 800a686:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	db12      	blt.n	800a6b6 <USB_EPSetStall+0xae>
 800a690:	68bb      	ldr	r3, [r7, #8]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d00f      	beq.n	800a6b6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a696:	68bb      	ldr	r3, [r7, #8]
 800a698:	015a      	lsls	r2, r3, #5
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	4413      	add	r3, r2
 800a69e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	68ba      	ldr	r2, [r7, #8]
 800a6a6:	0151      	lsls	r1, r2, #5
 800a6a8:	68fa      	ldr	r2, [r7, #12]
 800a6aa:	440a      	add	r2, r1
 800a6ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a6b0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a6b4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a6b6:	68bb      	ldr	r3, [r7, #8]
 800a6b8:	015a      	lsls	r2, r3, #5
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	4413      	add	r3, r2
 800a6be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	68ba      	ldr	r2, [r7, #8]
 800a6c6:	0151      	lsls	r1, r2, #5
 800a6c8:	68fa      	ldr	r2, [r7, #12]
 800a6ca:	440a      	add	r2, r1
 800a6cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a6d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a6d4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a6d6:	2300      	movs	r3, #0
}
 800a6d8:	4618      	mov	r0, r3
 800a6da:	3714      	adds	r7, #20
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e2:	4770      	bx	lr

0800a6e4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a6e4:	b480      	push	{r7}
 800a6e6:	b085      	sub	sp, #20
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
 800a6ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	781b      	ldrb	r3, [r3, #0]
 800a6f6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	785b      	ldrb	r3, [r3, #1]
 800a6fc:	2b01      	cmp	r3, #1
 800a6fe:	d128      	bne.n	800a752 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a700:	68bb      	ldr	r3, [r7, #8]
 800a702:	015a      	lsls	r2, r3, #5
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	4413      	add	r3, r2
 800a708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	68ba      	ldr	r2, [r7, #8]
 800a710:	0151      	lsls	r1, r2, #5
 800a712:	68fa      	ldr	r2, [r7, #12]
 800a714:	440a      	add	r2, r1
 800a716:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a71a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a71e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	78db      	ldrb	r3, [r3, #3]
 800a724:	2b03      	cmp	r3, #3
 800a726:	d003      	beq.n	800a730 <USB_EPClearStall+0x4c>
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	78db      	ldrb	r3, [r3, #3]
 800a72c:	2b02      	cmp	r3, #2
 800a72e:	d138      	bne.n	800a7a2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a730:	68bb      	ldr	r3, [r7, #8]
 800a732:	015a      	lsls	r2, r3, #5
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	4413      	add	r3, r2
 800a738:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	68ba      	ldr	r2, [r7, #8]
 800a740:	0151      	lsls	r1, r2, #5
 800a742:	68fa      	ldr	r2, [r7, #12]
 800a744:	440a      	add	r2, r1
 800a746:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a74a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a74e:	6013      	str	r3, [r2, #0]
 800a750:	e027      	b.n	800a7a2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a752:	68bb      	ldr	r3, [r7, #8]
 800a754:	015a      	lsls	r2, r3, #5
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	4413      	add	r3, r2
 800a75a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	68ba      	ldr	r2, [r7, #8]
 800a762:	0151      	lsls	r1, r2, #5
 800a764:	68fa      	ldr	r2, [r7, #12]
 800a766:	440a      	add	r2, r1
 800a768:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a76c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a770:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a772:	683b      	ldr	r3, [r7, #0]
 800a774:	78db      	ldrb	r3, [r3, #3]
 800a776:	2b03      	cmp	r3, #3
 800a778:	d003      	beq.n	800a782 <USB_EPClearStall+0x9e>
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	78db      	ldrb	r3, [r3, #3]
 800a77e:	2b02      	cmp	r3, #2
 800a780:	d10f      	bne.n	800a7a2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a782:	68bb      	ldr	r3, [r7, #8]
 800a784:	015a      	lsls	r2, r3, #5
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	4413      	add	r3, r2
 800a78a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	68ba      	ldr	r2, [r7, #8]
 800a792:	0151      	lsls	r1, r2, #5
 800a794:	68fa      	ldr	r2, [r7, #12]
 800a796:	440a      	add	r2, r1
 800a798:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a79c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a7a0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a7a2:	2300      	movs	r3, #0
}
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	3714      	adds	r7, #20
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ae:	4770      	bx	lr

0800a7b0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a7b0:	b480      	push	{r7}
 800a7b2:	b085      	sub	sp, #20
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
 800a7b8:	460b      	mov	r3, r1
 800a7ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	68fa      	ldr	r2, [r7, #12]
 800a7ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a7ce:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a7d2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7da:	681a      	ldr	r2, [r3, #0]
 800a7dc:	78fb      	ldrb	r3, [r7, #3]
 800a7de:	011b      	lsls	r3, r3, #4
 800a7e0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800a7e4:	68f9      	ldr	r1, [r7, #12]
 800a7e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a7ea:	4313      	orrs	r3, r2
 800a7ec:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a7ee:	2300      	movs	r3, #0
}
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	3714      	adds	r7, #20
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fa:	4770      	bx	lr

0800a7fc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a7fc:	b480      	push	{r7}
 800a7fe:	b085      	sub	sp, #20
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	68fa      	ldr	r2, [r7, #12]
 800a812:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a816:	f023 0303 	bic.w	r3, r3, #3
 800a81a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a822:	685b      	ldr	r3, [r3, #4]
 800a824:	68fa      	ldr	r2, [r7, #12]
 800a826:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a82a:	f023 0302 	bic.w	r3, r3, #2
 800a82e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a830:	2300      	movs	r3, #0
}
 800a832:	4618      	mov	r0, r3
 800a834:	3714      	adds	r7, #20
 800a836:	46bd      	mov	sp, r7
 800a838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83c:	4770      	bx	lr

0800a83e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a83e:	b480      	push	{r7}
 800a840:	b085      	sub	sp, #20
 800a842:	af00      	add	r7, sp, #0
 800a844:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	68fa      	ldr	r2, [r7, #12]
 800a854:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a858:	f023 0303 	bic.w	r3, r3, #3
 800a85c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a864:	685b      	ldr	r3, [r3, #4]
 800a866:	68fa      	ldr	r2, [r7, #12]
 800a868:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a86c:	f043 0302 	orr.w	r3, r3, #2
 800a870:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a872:	2300      	movs	r3, #0
}
 800a874:	4618      	mov	r0, r3
 800a876:	3714      	adds	r7, #20
 800a878:	46bd      	mov	sp, r7
 800a87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87e:	4770      	bx	lr

0800a880 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a880:	b480      	push	{r7}
 800a882:	b085      	sub	sp, #20
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	695b      	ldr	r3, [r3, #20]
 800a88c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	699b      	ldr	r3, [r3, #24]
 800a892:	68fa      	ldr	r2, [r7, #12]
 800a894:	4013      	ands	r3, r2
 800a896:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a898:	68fb      	ldr	r3, [r7, #12]
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	3714      	adds	r7, #20
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a4:	4770      	bx	lr

0800a8a6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a8a6:	b480      	push	{r7}
 800a8a8:	b085      	sub	sp, #20
 800a8aa:	af00      	add	r7, sp, #0
 800a8ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8b8:	699b      	ldr	r3, [r3, #24]
 800a8ba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8c2:	69db      	ldr	r3, [r3, #28]
 800a8c4:	68ba      	ldr	r2, [r7, #8]
 800a8c6:	4013      	ands	r3, r2
 800a8c8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a8ca:	68bb      	ldr	r3, [r7, #8]
 800a8cc:	0c1b      	lsrs	r3, r3, #16
}
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	3714      	adds	r7, #20
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d8:	4770      	bx	lr

0800a8da <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a8da:	b480      	push	{r7}
 800a8dc:	b085      	sub	sp, #20
 800a8de:	af00      	add	r7, sp, #0
 800a8e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8ec:	699b      	ldr	r3, [r3, #24]
 800a8ee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8f6:	69db      	ldr	r3, [r3, #28]
 800a8f8:	68ba      	ldr	r2, [r7, #8]
 800a8fa:	4013      	ands	r3, r2
 800a8fc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a8fe:	68bb      	ldr	r3, [r7, #8]
 800a900:	b29b      	uxth	r3, r3
}
 800a902:	4618      	mov	r0, r3
 800a904:	3714      	adds	r7, #20
 800a906:	46bd      	mov	sp, r7
 800a908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90c:	4770      	bx	lr

0800a90e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a90e:	b480      	push	{r7}
 800a910:	b085      	sub	sp, #20
 800a912:	af00      	add	r7, sp, #0
 800a914:	6078      	str	r0, [r7, #4]
 800a916:	460b      	mov	r3, r1
 800a918:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a91e:	78fb      	ldrb	r3, [r7, #3]
 800a920:	015a      	lsls	r2, r3, #5
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	4413      	add	r3, r2
 800a926:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a92a:	689b      	ldr	r3, [r3, #8]
 800a92c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a934:	695b      	ldr	r3, [r3, #20]
 800a936:	68ba      	ldr	r2, [r7, #8]
 800a938:	4013      	ands	r3, r2
 800a93a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a93c:	68bb      	ldr	r3, [r7, #8]
}
 800a93e:	4618      	mov	r0, r3
 800a940:	3714      	adds	r7, #20
 800a942:	46bd      	mov	sp, r7
 800a944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a948:	4770      	bx	lr

0800a94a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a94a:	b480      	push	{r7}
 800a94c:	b087      	sub	sp, #28
 800a94e:	af00      	add	r7, sp, #0
 800a950:	6078      	str	r0, [r7, #4]
 800a952:	460b      	mov	r3, r1
 800a954:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a95a:	697b      	ldr	r3, [r7, #20]
 800a95c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a960:	691b      	ldr	r3, [r3, #16]
 800a962:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a964:	697b      	ldr	r3, [r7, #20]
 800a966:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a96a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a96c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a96e:	78fb      	ldrb	r3, [r7, #3]
 800a970:	f003 030f 	and.w	r3, r3, #15
 800a974:	68fa      	ldr	r2, [r7, #12]
 800a976:	fa22 f303 	lsr.w	r3, r2, r3
 800a97a:	01db      	lsls	r3, r3, #7
 800a97c:	b2db      	uxtb	r3, r3
 800a97e:	693a      	ldr	r2, [r7, #16]
 800a980:	4313      	orrs	r3, r2
 800a982:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a984:	78fb      	ldrb	r3, [r7, #3]
 800a986:	015a      	lsls	r2, r3, #5
 800a988:	697b      	ldr	r3, [r7, #20]
 800a98a:	4413      	add	r3, r2
 800a98c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a990:	689b      	ldr	r3, [r3, #8]
 800a992:	693a      	ldr	r2, [r7, #16]
 800a994:	4013      	ands	r3, r2
 800a996:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a998:	68bb      	ldr	r3, [r7, #8]
}
 800a99a:	4618      	mov	r0, r3
 800a99c:	371c      	adds	r7, #28
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a4:	4770      	bx	lr

0800a9a6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a9a6:	b480      	push	{r7}
 800a9a8:	b083      	sub	sp, #12
 800a9aa:	af00      	add	r7, sp, #0
 800a9ac:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	695b      	ldr	r3, [r3, #20]
 800a9b2:	f003 0301 	and.w	r3, r3, #1
}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	370c      	adds	r7, #12
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c0:	4770      	bx	lr
	...

0800a9c4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a9c4:	b480      	push	{r7}
 800a9c6:	b085      	sub	sp, #20
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9d6:	681a      	ldr	r2, [r3, #0]
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9de:	4619      	mov	r1, r3
 800a9e0:	4b09      	ldr	r3, [pc, #36]	; (800aa08 <USB_ActivateSetup+0x44>)
 800a9e2:	4013      	ands	r3, r2
 800a9e4:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9ec:	685b      	ldr	r3, [r3, #4]
 800a9ee:	68fa      	ldr	r2, [r7, #12]
 800a9f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a9f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a9f8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a9fa:	2300      	movs	r3, #0
}
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	3714      	adds	r7, #20
 800aa00:	46bd      	mov	sp, r7
 800aa02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa06:	4770      	bx	lr
 800aa08:	fffff800 	.word	0xfffff800

0800aa0c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800aa0c:	b480      	push	{r7}
 800aa0e:	b087      	sub	sp, #28
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	60f8      	str	r0, [r7, #12]
 800aa14:	460b      	mov	r3, r1
 800aa16:	607a      	str	r2, [r7, #4]
 800aa18:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	333c      	adds	r3, #60	; 0x3c
 800aa22:	3304      	adds	r3, #4
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800aa28:	693b      	ldr	r3, [r7, #16]
 800aa2a:	4a26      	ldr	r2, [pc, #152]	; (800aac4 <USB_EP0_OutStart+0xb8>)
 800aa2c:	4293      	cmp	r3, r2
 800aa2e:	d90a      	bls.n	800aa46 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aa30:	697b      	ldr	r3, [r7, #20]
 800aa32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aa3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aa40:	d101      	bne.n	800aa46 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800aa42:	2300      	movs	r3, #0
 800aa44:	e037      	b.n	800aab6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800aa46:	697b      	ldr	r3, [r7, #20]
 800aa48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa4c:	461a      	mov	r2, r3
 800aa4e:	2300      	movs	r3, #0
 800aa50:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800aa52:	697b      	ldr	r3, [r7, #20]
 800aa54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa58:	691b      	ldr	r3, [r3, #16]
 800aa5a:	697a      	ldr	r2, [r7, #20]
 800aa5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa60:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aa64:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800aa66:	697b      	ldr	r3, [r7, #20]
 800aa68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa6c:	691b      	ldr	r3, [r3, #16]
 800aa6e:	697a      	ldr	r2, [r7, #20]
 800aa70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa74:	f043 0318 	orr.w	r3, r3, #24
 800aa78:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800aa7a:	697b      	ldr	r3, [r7, #20]
 800aa7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa80:	691b      	ldr	r3, [r3, #16]
 800aa82:	697a      	ldr	r2, [r7, #20]
 800aa84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa88:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800aa8c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800aa8e:	7afb      	ldrb	r3, [r7, #11]
 800aa90:	2b01      	cmp	r3, #1
 800aa92:	d10f      	bne.n	800aab4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800aa94:	697b      	ldr	r3, [r7, #20]
 800aa96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa9a:	461a      	mov	r2, r3
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800aaa0:	697b      	ldr	r3, [r7, #20]
 800aaa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	697a      	ldr	r2, [r7, #20]
 800aaaa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aaae:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800aab2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800aab4:	2300      	movs	r3, #0
}
 800aab6:	4618      	mov	r0, r3
 800aab8:	371c      	adds	r7, #28
 800aaba:	46bd      	mov	sp, r7
 800aabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac0:	4770      	bx	lr
 800aac2:	bf00      	nop
 800aac4:	4f54300a 	.word	0x4f54300a

0800aac8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800aac8:	b480      	push	{r7}
 800aaca:	b085      	sub	sp, #20
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800aad0:	2300      	movs	r3, #0
 800aad2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	3301      	adds	r3, #1
 800aad8:	60fb      	str	r3, [r7, #12]
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	4a13      	ldr	r2, [pc, #76]	; (800ab2c <USB_CoreReset+0x64>)
 800aade:	4293      	cmp	r3, r2
 800aae0:	d901      	bls.n	800aae6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800aae2:	2303      	movs	r3, #3
 800aae4:	e01b      	b.n	800ab1e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	691b      	ldr	r3, [r3, #16]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	daf2      	bge.n	800aad4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800aaee:	2300      	movs	r3, #0
 800aaf0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	691b      	ldr	r3, [r3, #16]
 800aaf6:	f043 0201 	orr.w	r2, r3, #1
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	3301      	adds	r3, #1
 800ab02:	60fb      	str	r3, [r7, #12]
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	4a09      	ldr	r2, [pc, #36]	; (800ab2c <USB_CoreReset+0x64>)
 800ab08:	4293      	cmp	r3, r2
 800ab0a:	d901      	bls.n	800ab10 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ab0c:	2303      	movs	r3, #3
 800ab0e:	e006      	b.n	800ab1e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	691b      	ldr	r3, [r3, #16]
 800ab14:	f003 0301 	and.w	r3, r3, #1
 800ab18:	2b01      	cmp	r3, #1
 800ab1a:	d0f0      	beq.n	800aafe <USB_CoreReset+0x36>

  return HAL_OK;
 800ab1c:	2300      	movs	r3, #0
}
 800ab1e:	4618      	mov	r0, r3
 800ab20:	3714      	adds	r7, #20
 800ab22:	46bd      	mov	sp, r7
 800ab24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab28:	4770      	bx	lr
 800ab2a:	bf00      	nop
 800ab2c:	00030d40 	.word	0x00030d40

0800ab30 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800ab34:	4904      	ldr	r1, [pc, #16]	; (800ab48 <MX_FATFS_Init+0x18>)
 800ab36:	4805      	ldr	r0, [pc, #20]	; (800ab4c <MX_FATFS_Init+0x1c>)
 800ab38:	f003 f9d2 	bl	800dee0 <FATFS_LinkDriver>
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	461a      	mov	r2, r3
 800ab40:	4b03      	ldr	r3, [pc, #12]	; (800ab50 <MX_FATFS_Init+0x20>)
 800ab42:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ab44:	bf00      	nop
 800ab46:	bd80      	pop	{r7, pc}
 800ab48:	20001b0c 	.word	0x20001b0c
 800ab4c:	20000014 	.word	0x20000014
 800ab50:	20001b10 	.word	0x20001b10

0800ab54 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800ab54:	b480      	push	{r7}
 800ab56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800ab58:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab62:	4770      	bx	lr

0800ab64 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800ab64:	b480      	push	{r7}
 800ab66:	b083      	sub	sp, #12
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = 0;
 800ab6e:	4b06      	ldr	r3, [pc, #24]	; (800ab88 <USER_initialize+0x24>)
 800ab70:	2200      	movs	r2, #0
 800ab72:	701a      	strb	r2, [r3, #0]
    return Stat;
 800ab74:	4b04      	ldr	r3, [pc, #16]	; (800ab88 <USER_initialize+0x24>)
 800ab76:	781b      	ldrb	r3, [r3, #0]
 800ab78:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	370c      	adds	r7, #12
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab84:	4770      	bx	lr
 800ab86:	bf00      	nop
 800ab88:	20000011 	.word	0x20000011

0800ab8c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800ab8c:	b480      	push	{r7}
 800ab8e:	b083      	sub	sp, #12
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	4603      	mov	r3, r0
 800ab94:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	  Stat = STA_NOINIT;
 800ab96:	4b0a      	ldr	r3, [pc, #40]	; (800abc0 <USER_status+0x34>)
 800ab98:	2201      	movs	r2, #1
 800ab9a:	701a      	strb	r2, [r3, #0]
	  Stat &= ~STA_NOINIT;
 800ab9c:	4b08      	ldr	r3, [pc, #32]	; (800abc0 <USER_status+0x34>)
 800ab9e:	781b      	ldrb	r3, [r3, #0]
 800aba0:	b2db      	uxtb	r3, r3
 800aba2:	f023 0301 	bic.w	r3, r3, #1
 800aba6:	b2da      	uxtb	r2, r3
 800aba8:	4b05      	ldr	r3, [pc, #20]	; (800abc0 <USER_status+0x34>)
 800abaa:	701a      	strb	r2, [r3, #0]
    return Stat;
 800abac:	4b04      	ldr	r3, [pc, #16]	; (800abc0 <USER_status+0x34>)
 800abae:	781b      	ldrb	r3, [r3, #0]
 800abb0:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800abb2:	4618      	mov	r0, r3
 800abb4:	370c      	adds	r7, #12
 800abb6:	46bd      	mov	sp, r7
 800abb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abbc:	4770      	bx	lr
 800abbe:	bf00      	nop
 800abc0:	20000011 	.word	0x20000011

0800abc4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b086      	sub	sp, #24
 800abc8:	af00      	add	r7, sp, #0
 800abca:	60b9      	str	r1, [r7, #8]
 800abcc:	607a      	str	r2, [r7, #4]
 800abce:	603b      	str	r3, [r7, #0]
 800abd0:	4603      	mov	r3, r0
 800abd2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	uint32_t SecAdd = sector * SECTOR_SIZE;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	031b      	lsls	r3, r3, #12
 800abd8:	617b      	str	r3, [r7, #20]
	uint32_t Size = count * SECTOR_SIZE;
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	031b      	lsls	r3, r3, #12
 800abde:	613b      	str	r3, [r7, #16]

	if(QSPI_Read((uint8_t*)buff, (uint32_t)SecAdd, (uint32_t) Size ) ==  HAL_OK)
 800abe0:	693a      	ldr	r2, [r7, #16]
 800abe2:	6979      	ldr	r1, [r7, #20]
 800abe4:	68b8      	ldr	r0, [r7, #8]
 800abe6:	f003 fab9 	bl	800e15c <QSPI_Read>
 800abea:	4603      	mov	r3, r0
 800abec:	2b00      	cmp	r3, #0
 800abee:	d101      	bne.n	800abf4 <USER_read+0x30>
	{
		return RES_OK;
 800abf0:	2300      	movs	r3, #0
 800abf2:	e000      	b.n	800abf6 <USER_read+0x32>
	}
	else
	{
		return RES_ERROR;
 800abf4:	2301      	movs	r3, #1
	}
	return RES_OK;
  /* USER CODE END READ */
}
 800abf6:	4618      	mov	r0, r3
 800abf8:	3718      	adds	r7, #24
 800abfa:	46bd      	mov	sp, r7
 800abfc:	bd80      	pop	{r7, pc}
	...

0800ac00 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b086      	sub	sp, #24
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	60b9      	str	r1, [r7, #8]
 800ac08:	607a      	str	r2, [r7, #4]
 800ac0a:	603b      	str	r3, [r7, #0]
 800ac0c:	4603      	mov	r3, r0
 800ac0e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	DSector = sector;
 800ac10:	4a1a      	ldr	r2, [pc, #104]	; (800ac7c <USER_write+0x7c>)
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	6013      	str	r3, [r2, #0]
	SecAdd = sector * SECTOR_SIZE;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	031b      	lsls	r3, r3, #12
 800ac1a:	4a19      	ldr	r2, [pc, #100]	; (800ac80 <USER_write+0x80>)
 800ac1c:	6013      	str	r3, [r2, #0]
	Size = count * SECTOR_SIZE;
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	031b      	lsls	r3, r3, #12
 800ac22:	4a18      	ldr	r2, [pc, #96]	; (800ac84 <USER_write+0x84>)
 800ac24:	6013      	str	r3, [r2, #0]
	for(uint16_t i = 0; i< count; i++)
 800ac26:	2300      	movs	r3, #0
 800ac28:	82fb      	strh	r3, [r7, #22]
 800ac2a:	e010      	b.n	800ac4e <USER_write+0x4e>
	{
		if(QSPI_Erase_Sector4K(SecAdd + (i * SECTOR_SIZE)) != HAL_OK)
 800ac2c:	8afb      	ldrh	r3, [r7, #22]
 800ac2e:	031b      	lsls	r3, r3, #12
 800ac30:	461a      	mov	r2, r3
 800ac32:	4b13      	ldr	r3, [pc, #76]	; (800ac80 <USER_write+0x80>)
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	4413      	add	r3, r2
 800ac38:	4618      	mov	r0, r3
 800ac3a:	f003 f9bd 	bl	800dfb8 <QSPI_Erase_Sector4K>
 800ac3e:	4603      	mov	r3, r0
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d001      	beq.n	800ac48 <USER_write+0x48>
		{
			return RES_ERROR;
 800ac44:	2301      	movs	r3, #1
 800ac46:	e014      	b.n	800ac72 <USER_write+0x72>
	for(uint16_t i = 0; i< count; i++)
 800ac48:	8afb      	ldrh	r3, [r7, #22]
 800ac4a:	3301      	adds	r3, #1
 800ac4c:	82fb      	strh	r3, [r7, #22]
 800ac4e:	8afb      	ldrh	r3, [r7, #22]
 800ac50:	683a      	ldr	r2, [r7, #0]
 800ac52:	429a      	cmp	r2, r3
 800ac54:	d8ea      	bhi.n	800ac2c <USER_write+0x2c>
		}
	}

	if(QSPI_Write((uint8_t *)buff, SecAdd, Size) != HAL_OK)
 800ac56:	4b0a      	ldr	r3, [pc, #40]	; (800ac80 <USER_write+0x80>)
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	4a0a      	ldr	r2, [pc, #40]	; (800ac84 <USER_write+0x84>)
 800ac5c:	6812      	ldr	r2, [r2, #0]
 800ac5e:	4619      	mov	r1, r3
 800ac60:	68b8      	ldr	r0, [r7, #8]
 800ac62:	f003 f9eb 	bl	800e03c <QSPI_Write>
 800ac66:	4603      	mov	r3, r0
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d001      	beq.n	800ac70 <USER_write+0x70>
	{
		return RES_ERROR;
 800ac6c:	2301      	movs	r3, #1
 800ac6e:	e000      	b.n	800ac72 <USER_write+0x72>
	}
	return RES_OK;
 800ac70:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800ac72:	4618      	mov	r0, r3
 800ac74:	3718      	adds	r7, #24
 800ac76:	46bd      	mov	sp, r7
 800ac78:	bd80      	pop	{r7, pc}
 800ac7a:	bf00      	nop
 800ac7c:	20003b84 	.word	0x20003b84
 800ac80:	20003b7c 	.word	0x20003b7c
 800ac84:	20003b80 	.word	0x20003b80

0800ac88 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800ac88:	b480      	push	{r7}
 800ac8a:	b085      	sub	sp, #20
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	4603      	mov	r3, r0
 800ac90:	603a      	str	r2, [r7, #0]
 800ac92:	71fb      	strb	r3, [r7, #7]
 800ac94:	460b      	mov	r3, r1
 800ac96:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	DRESULT res = RES_ERROR;
 800ac98:	2301      	movs	r3, #1
 800ac9a:	73fb      	strb	r3, [r7, #15]

	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ac9c:	4b1b      	ldr	r3, [pc, #108]	; (800ad0c <USER_ioctl+0x84>)
 800ac9e:	781b      	ldrb	r3, [r3, #0]
 800aca0:	b2db      	uxtb	r3, r3
 800aca2:	f003 0301 	and.w	r3, r3, #1
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d001      	beq.n	800acae <USER_ioctl+0x26>
 800acaa:	2303      	movs	r3, #3
 800acac:	e027      	b.n	800acfe <USER_ioctl+0x76>

	switch (cmd)
 800acae:	79bb      	ldrb	r3, [r7, #6]
 800acb0:	2b03      	cmp	r3, #3
 800acb2:	d821      	bhi.n	800acf8 <USER_ioctl+0x70>
 800acb4:	a201      	add	r2, pc, #4	; (adr r2, 800acbc <USER_ioctl+0x34>)
 800acb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acba:	bf00      	nop
 800acbc:	0800accd 	.word	0x0800accd
 800acc0:	0800acd3 	.word	0x0800acd3
 800acc4:	0800ace1 	.word	0x0800ace1
 800acc8:	0800acef 	.word	0x0800acef
	{
	/* Make sure that no pending write process */
	case CTRL_SYNC :
		res = RES_OK;
 800accc:	2300      	movs	r3, #0
 800acce:	73fb      	strb	r3, [r7, #15]
		break;
 800acd0:	e014      	b.n	800acfc <USER_ioctl+0x74>

		/* Get number of sectors on the disk (DWORD) */
	case GET_SECTOR_COUNT :
		*(DWORD*)buff = 4096; //SDRAM_DEVICE_SIZE / BLOCK_SIZE;
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800acd8:	601a      	str	r2, [r3, #0]
		res = RES_OK;
 800acda:	2300      	movs	r3, #0
 800acdc:	73fb      	strb	r3, [r7, #15]
		break;
 800acde:	e00d      	b.n	800acfc <USER_ioctl+0x74>

		/* Get R/W sector size (WORD) */
	case GET_SECTOR_SIZE :
		*(WORD*)buff = SECTOR_SIZE;
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ace6:	801a      	strh	r2, [r3, #0]
		res = RES_OK;
 800ace8:	2300      	movs	r3, #0
 800acea:	73fb      	strb	r3, [r7, #15]
		break;
 800acec:	e006      	b.n	800acfc <USER_ioctl+0x74>

		/* Get erase block size in unit of sector (DWORD) */
	case GET_BLOCK_SIZE :
		*(DWORD*)buff = SECTOR_SIZE;
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800acf4:	601a      	str	r2, [r3, #0]
		break;
 800acf6:	e001      	b.n	800acfc <USER_ioctl+0x74>

	default:
		res = RES_PARERR;
 800acf8:	2304      	movs	r3, #4
 800acfa:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800acfc:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800acfe:	4618      	mov	r0, r3
 800ad00:	3714      	adds	r7, #20
 800ad02:	46bd      	mov	sp, r7
 800ad04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad08:	4770      	bx	lr
 800ad0a:	bf00      	nop
 800ad0c:	20000011 	.word	0x20000011

0800ad10 <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 800ad10:	b480      	push	{r7}
 800ad12:	b085      	sub	sp, #20
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	3308      	adds	r3, #8
 800ad1c:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	781b      	ldrb	r3, [r3, #0]
 800ad22:	2b04      	cmp	r3, #4
 800ad24:	d001      	beq.n	800ad2a <verify_packet+0x1a>
    return 1; /* Incorrect type */
 800ad26:	2301      	movs	r3, #1
 800ad28:	e00c      	b.n	800ad44 <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	3302      	adds	r3, #2
 800ad2e:	781b      	ldrb	r3, [r3, #0]
 800ad30:	461a      	mov	r2, r3
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800ad38:	3b03      	subs	r3, #3
 800ad3a:	429a      	cmp	r2, r3
 800ad3c:	d001      	beq.n	800ad42 <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 800ad3e:	2302      	movs	r3, #2
 800ad40:	e000      	b.n	800ad44 <verify_packet+0x34>
  
  return 0;      
 800ad42:	2300      	movs	r3, #0
}
 800ad44:	4618      	mov	r0, r3
 800ad46:	3714      	adds	r7, #20
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4e:	4770      	bx	lr

0800ad50 <hci_init>:
}

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b084      	sub	sp, #16
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
 800ad58:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d002      	beq.n	800ad66 <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 800ad60:	4a18      	ldr	r2, [pc, #96]	; (800adc4 <hci_init+0x74>)
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 800ad66:	4818      	ldr	r0, [pc, #96]	; (800adc8 <hci_init+0x78>)
 800ad68:	f000 f8a2 	bl	800aeb0 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 800ad6c:	4817      	ldr	r0, [pc, #92]	; (800adcc <hci_init+0x7c>)
 800ad6e:	f000 f89f 	bl	800aeb0 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 800ad72:	f7f6 f965 	bl	8001040 <hci_tl_lowlevel_init>

  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800ad76:	2300      	movs	r3, #0
 800ad78:	73fb      	strb	r3, [r7, #15]
 800ad7a:	e00c      	b.n	800ad96 <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 800ad7c:	7bfb      	ldrb	r3, [r7, #15]
 800ad7e:	228c      	movs	r2, #140	; 0x8c
 800ad80:	fb02 f303 	mul.w	r3, r2, r3
 800ad84:	4a12      	ldr	r2, [pc, #72]	; (800add0 <hci_init+0x80>)
 800ad86:	4413      	add	r3, r2
 800ad88:	4619      	mov	r1, r3
 800ad8a:	480f      	ldr	r0, [pc, #60]	; (800adc8 <hci_init+0x78>)
 800ad8c:	f000 f8e8 	bl	800af60 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800ad90:	7bfb      	ldrb	r3, [r7, #15]
 800ad92:	3301      	adds	r3, #1
 800ad94:	73fb      	strb	r3, [r7, #15]
 800ad96:	7bfb      	ldrb	r3, [r7, #15]
 800ad98:	2b09      	cmp	r3, #9
 800ad9a:	d9ef      	bls.n	800ad7c <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 800ad9c:	4b09      	ldr	r3, [pc, #36]	; (800adc4 <hci_init+0x74>)
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d003      	beq.n	800adac <hci_init+0x5c>
 800ada4:	4b07      	ldr	r3, [pc, #28]	; (800adc4 <hci_init+0x74>)
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	2000      	movs	r0, #0
 800adaa:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 800adac:	4b05      	ldr	r3, [pc, #20]	; (800adc4 <hci_init+0x74>)
 800adae:	689b      	ldr	r3, [r3, #8]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d002      	beq.n	800adba <hci_init+0x6a>
 800adb4:	4b03      	ldr	r3, [pc, #12]	; (800adc4 <hci_init+0x74>)
 800adb6:	689b      	ldr	r3, [r3, #8]
 800adb8:	4798      	blx	r3
}
 800adba:	bf00      	nop
 800adbc:	3710      	adds	r7, #16
 800adbe:	46bd      	mov	sp, r7
 800adc0:	bd80      	pop	{r7, pc}
 800adc2:	bf00      	nop
 800adc4:	20000aa0 	.word	0x20000aa0
 800adc8:	20003b88 	.word	0x20003b88
 800adcc:	20003b90 	.word	0x20003b90
 800add0:	20000528 	.word	0x20000528

0800add4 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 800add4:	b480      	push	{r7}
 800add6:	b083      	sub	sp, #12
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	4a0b      	ldr	r2, [pc, #44]	; (800ae10 <hci_register_io_bus+0x3c>)
 800ade2:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	68db      	ldr	r3, [r3, #12]
 800ade8:	4a09      	ldr	r2, [pc, #36]	; (800ae10 <hci_register_io_bus+0x3c>)
 800adea:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	691b      	ldr	r3, [r3, #16]
 800adf0:	4a07      	ldr	r2, [pc, #28]	; (800ae10 <hci_register_io_bus+0x3c>)
 800adf2:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	699b      	ldr	r3, [r3, #24]
 800adf8:	4a05      	ldr	r2, [pc, #20]	; (800ae10 <hci_register_io_bus+0x3c>)
 800adfa:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	689b      	ldr	r3, [r3, #8]
 800ae00:	4a03      	ldr	r2, [pc, #12]	; (800ae10 <hci_register_io_bus+0x3c>)
 800ae02:	6093      	str	r3, [r2, #8]
}
 800ae04:	bf00      	nop
 800ae06:	370c      	adds	r7, #12
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0e:	4770      	bx	lr
 800ae10:	20000aa0 	.word	0x20000aa0

0800ae14 <hci_notify_asynch_evt>:
    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
  }
}

int32_t hci_notify_asynch_evt(void* pdata)
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b086      	sub	sp, #24
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 800ae20:	2300      	movs	r3, #0
 800ae22:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 800ae24:	481f      	ldr	r0, [pc, #124]	; (800aea4 <hci_notify_asynch_evt+0x90>)
 800ae26:	f000 f853 	bl	800aed0 <list_is_empty>
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d132      	bne.n	800ae96 <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 800ae30:	f107 030c 	add.w	r3, r7, #12
 800ae34:	4619      	mov	r1, r3
 800ae36:	481b      	ldr	r0, [pc, #108]	; (800aea4 <hci_notify_asynch_evt+0x90>)
 800ae38:	f000 f8d9 	bl	800afee <list_remove_head>
    
    if (hciContext.io.Receive)
 800ae3c:	4b1a      	ldr	r3, [pc, #104]	; (800aea8 <hci_notify_asynch_evt+0x94>)
 800ae3e:	68db      	ldr	r3, [r3, #12]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d02a      	beq.n	800ae9a <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 800ae44:	4b18      	ldr	r3, [pc, #96]	; (800aea8 <hci_notify_asynch_evt+0x94>)
 800ae46:	68db      	ldr	r3, [r3, #12]
 800ae48:	68fa      	ldr	r2, [r7, #12]
 800ae4a:	3208      	adds	r2, #8
 800ae4c:	2180      	movs	r1, #128	; 0x80
 800ae4e:	4610      	mov	r0, r2
 800ae50:	4798      	blx	r3
 800ae52:	4603      	mov	r3, r0
 800ae54:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 800ae56:	7cfb      	ldrb	r3, [r7, #19]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d016      	beq.n	800ae8a <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	7cfa      	ldrb	r2, [r7, #19]
 800ae60:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
        if (verify_packet(hciReadPacket) == 0)
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	4618      	mov	r0, r3
 800ae68:	f7ff ff52 	bl	800ad10 <verify_packet>
 800ae6c:	4603      	mov	r3, r0
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d105      	bne.n	800ae7e <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	4619      	mov	r1, r3
 800ae76:	480d      	ldr	r0, [pc, #52]	; (800aeac <hci_notify_asynch_evt+0x98>)
 800ae78:	f000 f872 	bl	800af60 <list_insert_tail>
 800ae7c:	e00d      	b.n	800ae9a <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	4619      	mov	r1, r3
 800ae82:	4808      	ldr	r0, [pc, #32]	; (800aea4 <hci_notify_asynch_evt+0x90>)
 800ae84:	f000 f846 	bl	800af14 <list_insert_head>
 800ae88:	e007      	b.n	800ae9a <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	4619      	mov	r1, r3
 800ae8e:	4805      	ldr	r0, [pc, #20]	; (800aea4 <hci_notify_asynch_evt+0x90>)
 800ae90:	f000 f840 	bl	800af14 <list_insert_head>
 800ae94:	e001      	b.n	800ae9a <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 800ae96:	2301      	movs	r3, #1
 800ae98:	617b      	str	r3, [r7, #20]
  }
  return ret;
 800ae9a:	697b      	ldr	r3, [r7, #20]
  
}
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	3718      	adds	r7, #24
 800aea0:	46bd      	mov	sp, r7
 800aea2:	bd80      	pop	{r7, pc}
 800aea4:	20003b88 	.word	0x20003b88
 800aea8:	20000aa0 	.word	0x20000aa0
 800aeac:	20003b90 	.word	0x20003b90

0800aeb0 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 800aeb0:	b480      	push	{r7}
 800aeb2:	b083      	sub	sp, #12
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	687a      	ldr	r2, [r7, #4]
 800aebc:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	687a      	ldr	r2, [r7, #4]
 800aec2:	605a      	str	r2, [r3, #4]
}
 800aec4:	bf00      	nop
 800aec6:	370c      	adds	r7, #12
 800aec8:	46bd      	mov	sp, r7
 800aeca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aece:	4770      	bx	lr

0800aed0 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 800aed0:	b480      	push	{r7}
 800aed2:	b087      	sub	sp, #28
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aed8:	f3ef 8310 	mrs	r3, PRIMASK
 800aedc:	60fb      	str	r3, [r7, #12]
  return(result);
 800aede:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800aee0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800aee2:	b672      	cpsid	i
}
 800aee4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	687a      	ldr	r2, [r7, #4]
 800aeec:	429a      	cmp	r2, r3
 800aeee:	d102      	bne.n	800aef6 <list_is_empty+0x26>
  {
    return_value = 1;
 800aef0:	2301      	movs	r3, #1
 800aef2:	75fb      	strb	r3, [r7, #23]
 800aef4:	e001      	b.n	800aefa <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 800aef6:	2300      	movs	r3, #0
 800aef8:	75fb      	strb	r3, [r7, #23]
 800aefa:	693b      	ldr	r3, [r7, #16]
 800aefc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aefe:	68bb      	ldr	r3, [r7, #8]
 800af00:	f383 8810 	msr	PRIMASK, r3
}
 800af04:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 800af06:	7dfb      	ldrb	r3, [r7, #23]
}
 800af08:	4618      	mov	r0, r3
 800af0a:	371c      	adds	r7, #28
 800af0c:	46bd      	mov	sp, r7
 800af0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af12:	4770      	bx	lr

0800af14 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 800af14:	b480      	push	{r7}
 800af16:	b087      	sub	sp, #28
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
 800af1c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800af1e:	f3ef 8310 	mrs	r3, PRIMASK
 800af22:	60fb      	str	r3, [r7, #12]
  return(result);
 800af24:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800af26:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800af28:	b672      	cpsid	i
}
 800af2a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681a      	ldr	r2, [r3, #0]
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800af34:	683b      	ldr	r3, [r7, #0]
 800af36:	687a      	ldr	r2, [r7, #4]
 800af38:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	683a      	ldr	r2, [r7, #0]
 800af3e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800af40:	683b      	ldr	r3, [r7, #0]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	683a      	ldr	r2, [r7, #0]
 800af46:	605a      	str	r2, [r3, #4]
 800af48:	697b      	ldr	r3, [r7, #20]
 800af4a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af4c:	693b      	ldr	r3, [r7, #16]
 800af4e:	f383 8810 	msr	PRIMASK, r3
}
 800af52:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800af54:	bf00      	nop
 800af56:	371c      	adds	r7, #28
 800af58:	46bd      	mov	sp, r7
 800af5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5e:	4770      	bx	lr

0800af60 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 800af60:	b480      	push	{r7}
 800af62:	b087      	sub	sp, #28
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
 800af68:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800af6a:	f3ef 8310 	mrs	r3, PRIMASK
 800af6e:	60fb      	str	r3, [r7, #12]
  return(result);
 800af70:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800af72:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800af74:	b672      	cpsid	i
}
 800af76:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 800af78:	683b      	ldr	r3, [r7, #0]
 800af7a:	687a      	ldr	r2, [r7, #4]
 800af7c:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	685a      	ldr	r2, [r3, #4]
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	683a      	ldr	r2, [r7, #0]
 800af8a:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	685b      	ldr	r3, [r3, #4]
 800af90:	683a      	ldr	r2, [r7, #0]
 800af92:	601a      	str	r2, [r3, #0]
 800af94:	697b      	ldr	r3, [r7, #20]
 800af96:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af98:	693b      	ldr	r3, [r7, #16]
 800af9a:	f383 8810 	msr	PRIMASK, r3
}
 800af9e:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800afa0:	bf00      	nop
 800afa2:	371c      	adds	r7, #28
 800afa4:	46bd      	mov	sp, r7
 800afa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afaa:	4770      	bx	lr

0800afac <list_remove_node>:

void list_remove_node (tListNode * node)
{
 800afac:	b480      	push	{r7}
 800afae:	b087      	sub	sp, #28
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800afb4:	f3ef 8310 	mrs	r3, PRIMASK
 800afb8:	60fb      	str	r3, [r7, #12]
  return(result);
 800afba:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800afbc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800afbe:	b672      	cpsid	i
}
 800afc0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	685b      	ldr	r3, [r3, #4]
 800afc6:	687a      	ldr	r2, [r7, #4]
 800afc8:	6812      	ldr	r2, [r2, #0]
 800afca:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	687a      	ldr	r2, [r7, #4]
 800afd2:	6852      	ldr	r2, [r2, #4]
 800afd4:	605a      	str	r2, [r3, #4]
 800afd6:	697b      	ldr	r3, [r7, #20]
 800afd8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800afda:	693b      	ldr	r3, [r7, #16]
 800afdc:	f383 8810 	msr	PRIMASK, r3
}
 800afe0:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800afe2:	bf00      	nop
 800afe4:	371c      	adds	r7, #28
 800afe6:	46bd      	mov	sp, r7
 800afe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afec:	4770      	bx	lr

0800afee <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 800afee:	b580      	push	{r7, lr}
 800aff0:	b086      	sub	sp, #24
 800aff2:	af00      	add	r7, sp, #0
 800aff4:	6078      	str	r0, [r7, #4]
 800aff6:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aff8:	f3ef 8310 	mrs	r3, PRIMASK
 800affc:	60fb      	str	r3, [r7, #12]
  return(result);
 800affe:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b000:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b002:	b672      	cpsid	i
}
 800b004:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681a      	ldr	r2, [r3, #0]
 800b00a:	683b      	ldr	r3, [r7, #0]
 800b00c:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	4618      	mov	r0, r3
 800b014:	f7ff ffca 	bl	800afac <list_remove_node>
  (*node)->next = NULL;
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	2200      	movs	r2, #0
 800b01e:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800b020:	683b      	ldr	r3, [r7, #0]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	2200      	movs	r2, #0
 800b026:	605a      	str	r2, [r3, #4]
 800b028:	697b      	ldr	r3, [r7, #20]
 800b02a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b02c:	693b      	ldr	r3, [r7, #16]
 800b02e:	f383 8810 	msr	PRIMASK, r3
}
 800b032:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800b034:	bf00      	nop
 800b036:	3718      	adds	r7, #24
 800b038:	46bd      	mov	sp, r7
 800b03a:	bd80      	pop	{r7, pc}

0800b03c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b084      	sub	sp, #16
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
 800b044:	460b      	mov	r3, r1
 800b046:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b048:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b04c:	f005 fc52 	bl	80108f4 <malloc>
 800b050:	4603      	mov	r3, r0
 800b052:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d105      	bne.n	800b066 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	2200      	movs	r2, #0
 800b05e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800b062:	2302      	movs	r3, #2
 800b064:	e066      	b.n	800b134 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	68fa      	ldr	r2, [r7, #12]
 800b06a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	7c1b      	ldrb	r3, [r3, #16]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d119      	bne.n	800b0aa <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b076:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b07a:	2202      	movs	r2, #2
 800b07c:	2181      	movs	r1, #129	; 0x81
 800b07e:	6878      	ldr	r0, [r7, #4]
 800b080:	f005 fa67 	bl	8010552 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	2201      	movs	r2, #1
 800b088:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b08a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b08e:	2202      	movs	r2, #2
 800b090:	2101      	movs	r1, #1
 800b092:	6878      	ldr	r0, [r7, #4]
 800b094:	f005 fa5d 	bl	8010552 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	2201      	movs	r2, #1
 800b09c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2210      	movs	r2, #16
 800b0a4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800b0a8:	e016      	b.n	800b0d8 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b0aa:	2340      	movs	r3, #64	; 0x40
 800b0ac:	2202      	movs	r2, #2
 800b0ae:	2181      	movs	r1, #129	; 0x81
 800b0b0:	6878      	ldr	r0, [r7, #4]
 800b0b2:	f005 fa4e 	bl	8010552 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	2201      	movs	r2, #1
 800b0ba:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b0bc:	2340      	movs	r3, #64	; 0x40
 800b0be:	2202      	movs	r2, #2
 800b0c0:	2101      	movs	r1, #1
 800b0c2:	6878      	ldr	r0, [r7, #4]
 800b0c4:	f005 fa45 	bl	8010552 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2201      	movs	r2, #1
 800b0cc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2210      	movs	r2, #16
 800b0d4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b0d8:	2308      	movs	r3, #8
 800b0da:	2203      	movs	r2, #3
 800b0dc:	2182      	movs	r1, #130	; 0x82
 800b0de:	6878      	ldr	r0, [r7, #4]
 800b0e0:	f005 fa37 	bl	8010552 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	2201      	movs	r2, #1
 800b0e8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	2200      	movs	r2, #0
 800b102:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	7c1b      	ldrb	r3, [r3, #16]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d109      	bne.n	800b122 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b114:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b118:	2101      	movs	r1, #1
 800b11a:	6878      	ldr	r0, [r7, #4]
 800b11c:	f005 fb08 	bl	8010730 <USBD_LL_PrepareReceive>
 800b120:	e007      	b.n	800b132 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b128:	2340      	movs	r3, #64	; 0x40
 800b12a:	2101      	movs	r1, #1
 800b12c:	6878      	ldr	r0, [r7, #4]
 800b12e:	f005 faff 	bl	8010730 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b132:	2300      	movs	r3, #0
}
 800b134:	4618      	mov	r0, r3
 800b136:	3710      	adds	r7, #16
 800b138:	46bd      	mov	sp, r7
 800b13a:	bd80      	pop	{r7, pc}

0800b13c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b084      	sub	sp, #16
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
 800b144:	460b      	mov	r3, r1
 800b146:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 800b148:	2300      	movs	r3, #0
 800b14a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b14c:	2181      	movs	r1, #129	; 0x81
 800b14e:	6878      	ldr	r0, [r7, #4]
 800b150:	f005 fa25 	bl	801059e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	2200      	movs	r2, #0
 800b158:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b15a:	2101      	movs	r1, #1
 800b15c:	6878      	ldr	r0, [r7, #4]
 800b15e:	f005 fa1e 	bl	801059e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	2200      	movs	r2, #0
 800b166:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b16a:	2182      	movs	r1, #130	; 0x82
 800b16c:	6878      	ldr	r0, [r7, #4]
 800b16e:	f005 fa16 	bl	801059e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	2200      	movs	r2, #0
 800b176:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	2200      	movs	r2, #0
 800b17e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d00e      	beq.n	800b1aa <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b192:	685b      	ldr	r3, [r3, #4]
 800b194:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b19c:	4618      	mov	r0, r3
 800b19e:	f005 fbb1 	bl	8010904 <free>
    pdev->pClassData = NULL;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800b1aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	3710      	adds	r7, #16
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	bd80      	pop	{r7, pc}

0800b1b4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b086      	sub	sp, #24
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
 800b1bc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b1c4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b1d2:	683b      	ldr	r3, [r7, #0]
 800b1d4:	781b      	ldrb	r3, [r3, #0]
 800b1d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d03a      	beq.n	800b254 <USBD_CDC_Setup+0xa0>
 800b1de:	2b20      	cmp	r3, #32
 800b1e0:	f040 8097 	bne.w	800b312 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800b1e4:	683b      	ldr	r3, [r7, #0]
 800b1e6:	88db      	ldrh	r3, [r3, #6]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d029      	beq.n	800b240 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	781b      	ldrb	r3, [r3, #0]
 800b1f0:	b25b      	sxtb	r3, r3
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	da11      	bge.n	800b21a <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b1fc:	689b      	ldr	r3, [r3, #8]
 800b1fe:	683a      	ldr	r2, [r7, #0]
 800b200:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800b202:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b204:	683a      	ldr	r2, [r7, #0]
 800b206:	88d2      	ldrh	r2, [r2, #6]
 800b208:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800b20a:	6939      	ldr	r1, [r7, #16]
 800b20c:	683b      	ldr	r3, [r7, #0]
 800b20e:	88db      	ldrh	r3, [r3, #6]
 800b210:	461a      	mov	r2, r3
 800b212:	6878      	ldr	r0, [r7, #4]
 800b214:	f001 faa6 	bl	800c764 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 800b218:	e082      	b.n	800b320 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800b21a:	683b      	ldr	r3, [r7, #0]
 800b21c:	785a      	ldrb	r2, [r3, #1]
 800b21e:	693b      	ldr	r3, [r7, #16]
 800b220:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	88db      	ldrh	r3, [r3, #6]
 800b228:	b2da      	uxtb	r2, r3
 800b22a:	693b      	ldr	r3, [r7, #16]
 800b22c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800b230:	6939      	ldr	r1, [r7, #16]
 800b232:	683b      	ldr	r3, [r7, #0]
 800b234:	88db      	ldrh	r3, [r3, #6]
 800b236:	461a      	mov	r2, r3
 800b238:	6878      	ldr	r0, [r7, #4]
 800b23a:	f001 fabf 	bl	800c7bc <USBD_CtlPrepareRx>
    break;
 800b23e:	e06f      	b.n	800b320 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b246:	689b      	ldr	r3, [r3, #8]
 800b248:	683a      	ldr	r2, [r7, #0]
 800b24a:	7850      	ldrb	r0, [r2, #1]
 800b24c:	2200      	movs	r2, #0
 800b24e:	6839      	ldr	r1, [r7, #0]
 800b250:	4798      	blx	r3
    break;
 800b252:	e065      	b.n	800b320 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800b254:	683b      	ldr	r3, [r7, #0]
 800b256:	785b      	ldrb	r3, [r3, #1]
 800b258:	2b0b      	cmp	r3, #11
 800b25a:	d84f      	bhi.n	800b2fc <USBD_CDC_Setup+0x148>
 800b25c:	a201      	add	r2, pc, #4	; (adr r2, 800b264 <USBD_CDC_Setup+0xb0>)
 800b25e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b262:	bf00      	nop
 800b264:	0800b295 	.word	0x0800b295
 800b268:	0800b30b 	.word	0x0800b30b
 800b26c:	0800b2fd 	.word	0x0800b2fd
 800b270:	0800b2fd 	.word	0x0800b2fd
 800b274:	0800b2fd 	.word	0x0800b2fd
 800b278:	0800b2fd 	.word	0x0800b2fd
 800b27c:	0800b2fd 	.word	0x0800b2fd
 800b280:	0800b2fd 	.word	0x0800b2fd
 800b284:	0800b2fd 	.word	0x0800b2fd
 800b288:	0800b2fd 	.word	0x0800b2fd
 800b28c:	0800b2bd 	.word	0x0800b2bd
 800b290:	0800b2e5 	.word	0x0800b2e5
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b29a:	2b03      	cmp	r3, #3
 800b29c:	d107      	bne.n	800b2ae <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b29e:	f107 030c 	add.w	r3, r7, #12
 800b2a2:	2202      	movs	r2, #2
 800b2a4:	4619      	mov	r1, r3
 800b2a6:	6878      	ldr	r0, [r7, #4]
 800b2a8:	f001 fa5c 	bl	800c764 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800b2ac:	e030      	b.n	800b310 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800b2ae:	6839      	ldr	r1, [r7, #0]
 800b2b0:	6878      	ldr	r0, [r7, #4]
 800b2b2:	f001 f9e6 	bl	800c682 <USBD_CtlError>
        ret = USBD_FAIL;
 800b2b6:	2303      	movs	r3, #3
 800b2b8:	75fb      	strb	r3, [r7, #23]
      break;
 800b2ba:	e029      	b.n	800b310 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2c2:	2b03      	cmp	r3, #3
 800b2c4:	d107      	bne.n	800b2d6 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b2c6:	f107 030f 	add.w	r3, r7, #15
 800b2ca:	2201      	movs	r2, #1
 800b2cc:	4619      	mov	r1, r3
 800b2ce:	6878      	ldr	r0, [r7, #4]
 800b2d0:	f001 fa48 	bl	800c764 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800b2d4:	e01c      	b.n	800b310 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800b2d6:	6839      	ldr	r1, [r7, #0]
 800b2d8:	6878      	ldr	r0, [r7, #4]
 800b2da:	f001 f9d2 	bl	800c682 <USBD_CtlError>
        ret = USBD_FAIL;
 800b2de:	2303      	movs	r3, #3
 800b2e0:	75fb      	strb	r3, [r7, #23]
      break;
 800b2e2:	e015      	b.n	800b310 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2ea:	2b03      	cmp	r3, #3
 800b2ec:	d00f      	beq.n	800b30e <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 800b2ee:	6839      	ldr	r1, [r7, #0]
 800b2f0:	6878      	ldr	r0, [r7, #4]
 800b2f2:	f001 f9c6 	bl	800c682 <USBD_CtlError>
        ret = USBD_FAIL;
 800b2f6:	2303      	movs	r3, #3
 800b2f8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800b2fa:	e008      	b.n	800b30e <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800b2fc:	6839      	ldr	r1, [r7, #0]
 800b2fe:	6878      	ldr	r0, [r7, #4]
 800b300:	f001 f9bf 	bl	800c682 <USBD_CtlError>
      ret = USBD_FAIL;
 800b304:	2303      	movs	r3, #3
 800b306:	75fb      	strb	r3, [r7, #23]
      break;
 800b308:	e002      	b.n	800b310 <USBD_CDC_Setup+0x15c>
      break;
 800b30a:	bf00      	nop
 800b30c:	e008      	b.n	800b320 <USBD_CDC_Setup+0x16c>
      break;
 800b30e:	bf00      	nop
    }
    break;
 800b310:	e006      	b.n	800b320 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 800b312:	6839      	ldr	r1, [r7, #0]
 800b314:	6878      	ldr	r0, [r7, #4]
 800b316:	f001 f9b4 	bl	800c682 <USBD_CtlError>
    ret = USBD_FAIL;
 800b31a:	2303      	movs	r3, #3
 800b31c:	75fb      	strb	r3, [r7, #23]
    break;
 800b31e:	bf00      	nop
  }

  return (uint8_t)ret;
 800b320:	7dfb      	ldrb	r3, [r7, #23]
}
 800b322:	4618      	mov	r0, r3
 800b324:	3718      	adds	r7, #24
 800b326:	46bd      	mov	sp, r7
 800b328:	bd80      	pop	{r7, pc}
 800b32a:	bf00      	nop

0800b32c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b084      	sub	sp, #16
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
 800b334:	460b      	mov	r3, r1
 800b336:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b33e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b346:	2b00      	cmp	r3, #0
 800b348:	d101      	bne.n	800b34e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b34a:	2303      	movs	r3, #3
 800b34c:	e049      	b.n	800b3e2 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b354:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b356:	78fa      	ldrb	r2, [r7, #3]
 800b358:	6879      	ldr	r1, [r7, #4]
 800b35a:	4613      	mov	r3, r2
 800b35c:	009b      	lsls	r3, r3, #2
 800b35e:	4413      	add	r3, r2
 800b360:	009b      	lsls	r3, r3, #2
 800b362:	440b      	add	r3, r1
 800b364:	3318      	adds	r3, #24
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d029      	beq.n	800b3c0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b36c:	78fa      	ldrb	r2, [r7, #3]
 800b36e:	6879      	ldr	r1, [r7, #4]
 800b370:	4613      	mov	r3, r2
 800b372:	009b      	lsls	r3, r3, #2
 800b374:	4413      	add	r3, r2
 800b376:	009b      	lsls	r3, r3, #2
 800b378:	440b      	add	r3, r1
 800b37a:	3318      	adds	r3, #24
 800b37c:	681a      	ldr	r2, [r3, #0]
 800b37e:	78f9      	ldrb	r1, [r7, #3]
 800b380:	68f8      	ldr	r0, [r7, #12]
 800b382:	460b      	mov	r3, r1
 800b384:	00db      	lsls	r3, r3, #3
 800b386:	1a5b      	subs	r3, r3, r1
 800b388:	009b      	lsls	r3, r3, #2
 800b38a:	4403      	add	r3, r0
 800b38c:	3344      	adds	r3, #68	; 0x44
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	fbb2 f1f3 	udiv	r1, r2, r3
 800b394:	fb03 f301 	mul.w	r3, r3, r1
 800b398:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d110      	bne.n	800b3c0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800b39e:	78fa      	ldrb	r2, [r7, #3]
 800b3a0:	6879      	ldr	r1, [r7, #4]
 800b3a2:	4613      	mov	r3, r2
 800b3a4:	009b      	lsls	r3, r3, #2
 800b3a6:	4413      	add	r3, r2
 800b3a8:	009b      	lsls	r3, r3, #2
 800b3aa:	440b      	add	r3, r1
 800b3ac:	3318      	adds	r3, #24
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b3b2:	78f9      	ldrb	r1, [r7, #3]
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	6878      	ldr	r0, [r7, #4]
 800b3ba:	f005 f998 	bl	80106ee <USBD_LL_Transmit>
 800b3be:	e00f      	b.n	800b3e0 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b3c0:	68bb      	ldr	r3, [r7, #8]
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b3ce:	691b      	ldr	r3, [r3, #16]
 800b3d0:	68ba      	ldr	r2, [r7, #8]
 800b3d2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800b3d6:	68ba      	ldr	r2, [r7, #8]
 800b3d8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800b3dc:	78fa      	ldrb	r2, [r7, #3]
 800b3de:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 800b3e0:	2300      	movs	r3, #0
}
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	3710      	adds	r7, #16
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	bd80      	pop	{r7, pc}

0800b3ea <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b3ea:	b580      	push	{r7, lr}
 800b3ec:	b084      	sub	sp, #16
 800b3ee:	af00      	add	r7, sp, #0
 800b3f0:	6078      	str	r0, [r7, #4]
 800b3f2:	460b      	mov	r3, r1
 800b3f4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b3fc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b404:	2b00      	cmp	r3, #0
 800b406:	d101      	bne.n	800b40c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b408:	2303      	movs	r3, #3
 800b40a:	e015      	b.n	800b438 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b40c:	78fb      	ldrb	r3, [r7, #3]
 800b40e:	4619      	mov	r1, r3
 800b410:	6878      	ldr	r0, [r7, #4]
 800b412:	f005 f9ae 	bl	8010772 <USBD_LL_GetRxDataSize>
 800b416:	4602      	mov	r2, r0
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b424:	68db      	ldr	r3, [r3, #12]
 800b426:	68fa      	ldr	r2, [r7, #12]
 800b428:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b42c:	68fa      	ldr	r2, [r7, #12]
 800b42e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b432:	4611      	mov	r1, r2
 800b434:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b436:	2300      	movs	r3, #0
}
 800b438:	4618      	mov	r0, r3
 800b43a:	3710      	adds	r7, #16
 800b43c:	46bd      	mov	sp, r7
 800b43e:	bd80      	pop	{r7, pc}

0800b440 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b084      	sub	sp, #16
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b44e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b456:	2b00      	cmp	r3, #0
 800b458:	d015      	beq.n	800b486 <USBD_CDC_EP0_RxReady+0x46>
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b460:	2bff      	cmp	r3, #255	; 0xff
 800b462:	d010      	beq.n	800b486 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b46a:	689b      	ldr	r3, [r3, #8]
 800b46c:	68fa      	ldr	r2, [r7, #12]
 800b46e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800b472:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b474:	68fa      	ldr	r2, [r7, #12]
 800b476:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b47a:	b292      	uxth	r2, r2
 800b47c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	22ff      	movs	r2, #255	; 0xff
 800b482:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800b486:	2300      	movs	r3, #0
}
 800b488:	4618      	mov	r0, r3
 800b48a:	3710      	adds	r7, #16
 800b48c:	46bd      	mov	sp, r7
 800b48e:	bd80      	pop	{r7, pc}

0800b490 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b490:	b480      	push	{r7}
 800b492:	b083      	sub	sp, #12
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	2243      	movs	r2, #67	; 0x43
 800b49c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800b49e:	4b03      	ldr	r3, [pc, #12]	; (800b4ac <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	370c      	adds	r7, #12
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4aa:	4770      	bx	lr
 800b4ac:	200000b0 	.word	0x200000b0

0800b4b0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b4b0:	b480      	push	{r7}
 800b4b2:	b083      	sub	sp, #12
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2243      	movs	r2, #67	; 0x43
 800b4bc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800b4be:	4b03      	ldr	r3, [pc, #12]	; (800b4cc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	370c      	adds	r7, #12
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ca:	4770      	bx	lr
 800b4cc:	2000006c 	.word	0x2000006c

0800b4d0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b4d0:	b480      	push	{r7}
 800b4d2:	b083      	sub	sp, #12
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	2243      	movs	r2, #67	; 0x43
 800b4dc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800b4de:	4b03      	ldr	r3, [pc, #12]	; (800b4ec <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	370c      	adds	r7, #12
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ea:	4770      	bx	lr
 800b4ec:	200000f4 	.word	0x200000f4

0800b4f0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b4f0:	b480      	push	{r7}
 800b4f2:	b083      	sub	sp, #12
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	220a      	movs	r2, #10
 800b4fc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b4fe:	4b03      	ldr	r3, [pc, #12]	; (800b50c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b500:	4618      	mov	r0, r3
 800b502:	370c      	adds	r7, #12
 800b504:	46bd      	mov	sp, r7
 800b506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50a:	4770      	bx	lr
 800b50c:	20000028 	.word	0x20000028

0800b510 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b510:	b480      	push	{r7}
 800b512:	b083      	sub	sp, #12
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
 800b518:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d101      	bne.n	800b524 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b520:	2303      	movs	r3, #3
 800b522:	e004      	b.n	800b52e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	683a      	ldr	r2, [r7, #0]
 800b528:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800b52c:	2300      	movs	r3, #0
}
 800b52e:	4618      	mov	r0, r3
 800b530:	370c      	adds	r7, #12
 800b532:	46bd      	mov	sp, r7
 800b534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b538:	4770      	bx	lr

0800b53a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b53a:	b480      	push	{r7}
 800b53c:	b087      	sub	sp, #28
 800b53e:	af00      	add	r7, sp, #0
 800b540:	60f8      	str	r0, [r7, #12]
 800b542:	60b9      	str	r1, [r7, #8]
 800b544:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b54c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800b54e:	697b      	ldr	r3, [r7, #20]
 800b550:	68ba      	ldr	r2, [r7, #8]
 800b552:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b556:	697b      	ldr	r3, [r7, #20]
 800b558:	687a      	ldr	r2, [r7, #4]
 800b55a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b55e:	2300      	movs	r3, #0
}
 800b560:	4618      	mov	r0, r3
 800b562:	371c      	adds	r7, #28
 800b564:	46bd      	mov	sp, r7
 800b566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56a:	4770      	bx	lr

0800b56c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b56c:	b480      	push	{r7}
 800b56e:	b085      	sub	sp, #20
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
 800b574:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b57c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	683a      	ldr	r2, [r7, #0]
 800b582:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b586:	2300      	movs	r3, #0
}
 800b588:	4618      	mov	r0, r3
 800b58a:	3714      	adds	r7, #20
 800b58c:	46bd      	mov	sp, r7
 800b58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b592:	4770      	bx	lr

0800b594 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b594:	b580      	push	{r7, lr}
 800b596:	b084      	sub	sp, #16
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b5a2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d101      	bne.n	800b5b2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b5ae:	2303      	movs	r3, #3
 800b5b0:	e016      	b.n	800b5e0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	7c1b      	ldrb	r3, [r3, #16]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d109      	bne.n	800b5ce <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b5c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b5c4:	2101      	movs	r1, #1
 800b5c6:	6878      	ldr	r0, [r7, #4]
 800b5c8:	f005 f8b2 	bl	8010730 <USBD_LL_PrepareReceive>
 800b5cc:	e007      	b.n	800b5de <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b5d4:	2340      	movs	r3, #64	; 0x40
 800b5d6:	2101      	movs	r1, #1
 800b5d8:	6878      	ldr	r0, [r7, #4]
 800b5da:	f005 f8a9 	bl	8010730 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b5de:	2300      	movs	r3, #0
}
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	3710      	adds	r7, #16
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	bd80      	pop	{r7, pc}

0800b5e8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b086      	sub	sp, #24
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	60f8      	str	r0, [r7, #12]
 800b5f0:	60b9      	str	r1, [r7, #8]
 800b5f2:	4613      	mov	r3, r2
 800b5f4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d101      	bne.n	800b600 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b5fc:	2303      	movs	r3, #3
 800b5fe:	e025      	b.n	800b64c <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b606:	2b00      	cmp	r3, #0
 800b608:	d003      	beq.n	800b612 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	2200      	movs	r2, #0
 800b60e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d003      	beq.n	800b624 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	2200      	movs	r2, #0
 800b620:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b624:	68bb      	ldr	r3, [r7, #8]
 800b626:	2b00      	cmp	r3, #0
 800b628:	d003      	beq.n	800b632 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	68ba      	ldr	r2, [r7, #8]
 800b62e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	2201      	movs	r2, #1
 800b636:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	79fa      	ldrb	r2, [r7, #7]
 800b63e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b640:	68f8      	ldr	r0, [r7, #12]
 800b642:	f004 ff1f 	bl	8010484 <USBD_LL_Init>
 800b646:	4603      	mov	r3, r0
 800b648:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b64a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b64c:	4618      	mov	r0, r3
 800b64e:	3718      	adds	r7, #24
 800b650:	46bd      	mov	sp, r7
 800b652:	bd80      	pop	{r7, pc}

0800b654 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b654:	b580      	push	{r7, lr}
 800b656:	b084      	sub	sp, #16
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
 800b65c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b65e:	2300      	movs	r3, #0
 800b660:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b662:	683b      	ldr	r3, [r7, #0]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d101      	bne.n	800b66c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800b668:	2303      	movs	r3, #3
 800b66a:	e010      	b.n	800b68e <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	683a      	ldr	r2, [r7, #0]
 800b670:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b67a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b67c:	f107 020e 	add.w	r2, r7, #14
 800b680:	4610      	mov	r0, r2
 800b682:	4798      	blx	r3
 800b684:	4602      	mov	r2, r0
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800b68c:	2300      	movs	r3, #0
}
 800b68e:	4618      	mov	r0, r3
 800b690:	3710      	adds	r7, #16
 800b692:	46bd      	mov	sp, r7
 800b694:	bd80      	pop	{r7, pc}

0800b696 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b696:	b580      	push	{r7, lr}
 800b698:	b082      	sub	sp, #8
 800b69a:	af00      	add	r7, sp, #0
 800b69c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b69e:	6878      	ldr	r0, [r7, #4]
 800b6a0:	f004 ff3c 	bl	801051c <USBD_LL_Start>
 800b6a4:	4603      	mov	r3, r0
}
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	3708      	adds	r7, #8
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	bd80      	pop	{r7, pc}

0800b6ae <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b6ae:	b480      	push	{r7}
 800b6b0:	b083      	sub	sp, #12
 800b6b2:	af00      	add	r7, sp, #0
 800b6b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b6b6:	2300      	movs	r3, #0
}
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	370c      	adds	r7, #12
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c2:	4770      	bx	lr

0800b6c4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b084      	sub	sp, #16
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
 800b6cc:	460b      	mov	r3, r1
 800b6ce:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b6d0:	2303      	movs	r3, #3
 800b6d2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d009      	beq.n	800b6f2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	78fa      	ldrb	r2, [r7, #3]
 800b6e8:	4611      	mov	r1, r2
 800b6ea:	6878      	ldr	r0, [r7, #4]
 800b6ec:	4798      	blx	r3
 800b6ee:	4603      	mov	r3, r0
 800b6f0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b6f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	3710      	adds	r7, #16
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	bd80      	pop	{r7, pc}

0800b6fc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b082      	sub	sp, #8
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
 800b704:	460b      	mov	r3, r1
 800b706:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d007      	beq.n	800b722 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b718:	685b      	ldr	r3, [r3, #4]
 800b71a:	78fa      	ldrb	r2, [r7, #3]
 800b71c:	4611      	mov	r1, r2
 800b71e:	6878      	ldr	r0, [r7, #4]
 800b720:	4798      	blx	r3
  }

  return USBD_OK;
 800b722:	2300      	movs	r3, #0
}
 800b724:	4618      	mov	r0, r3
 800b726:	3708      	adds	r7, #8
 800b728:	46bd      	mov	sp, r7
 800b72a:	bd80      	pop	{r7, pc}

0800b72c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b084      	sub	sp, #16
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]
 800b734:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b73c:	6839      	ldr	r1, [r7, #0]
 800b73e:	4618      	mov	r0, r3
 800b740:	f000 ff65 	bl	800c60e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	2201      	movs	r2, #1
 800b748:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b752:	461a      	mov	r2, r3
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b760:	f003 031f 	and.w	r3, r3, #31
 800b764:	2b02      	cmp	r3, #2
 800b766:	d01a      	beq.n	800b79e <USBD_LL_SetupStage+0x72>
 800b768:	2b02      	cmp	r3, #2
 800b76a:	d822      	bhi.n	800b7b2 <USBD_LL_SetupStage+0x86>
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d002      	beq.n	800b776 <USBD_LL_SetupStage+0x4a>
 800b770:	2b01      	cmp	r3, #1
 800b772:	d00a      	beq.n	800b78a <USBD_LL_SetupStage+0x5e>
 800b774:	e01d      	b.n	800b7b2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b77c:	4619      	mov	r1, r3
 800b77e:	6878      	ldr	r0, [r7, #4]
 800b780:	f000 fa18 	bl	800bbb4 <USBD_StdDevReq>
 800b784:	4603      	mov	r3, r0
 800b786:	73fb      	strb	r3, [r7, #15]
      break;
 800b788:	e020      	b.n	800b7cc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b790:	4619      	mov	r1, r3
 800b792:	6878      	ldr	r0, [r7, #4]
 800b794:	f000 fa7c 	bl	800bc90 <USBD_StdItfReq>
 800b798:	4603      	mov	r3, r0
 800b79a:	73fb      	strb	r3, [r7, #15]
      break;
 800b79c:	e016      	b.n	800b7cc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b7a4:	4619      	mov	r1, r3
 800b7a6:	6878      	ldr	r0, [r7, #4]
 800b7a8:	f000 faba 	bl	800bd20 <USBD_StdEPReq>
 800b7ac:	4603      	mov	r3, r0
 800b7ae:	73fb      	strb	r3, [r7, #15]
      break;
 800b7b0:	e00c      	b.n	800b7cc <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b7b8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b7bc:	b2db      	uxtb	r3, r3
 800b7be:	4619      	mov	r1, r3
 800b7c0:	6878      	ldr	r0, [r7, #4]
 800b7c2:	f004 ff0b 	bl	80105dc <USBD_LL_StallEP>
 800b7c6:	4603      	mov	r3, r0
 800b7c8:	73fb      	strb	r3, [r7, #15]
      break;
 800b7ca:	bf00      	nop
  }

  return ret;
 800b7cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	3710      	adds	r7, #16
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	bd80      	pop	{r7, pc}

0800b7d6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b7d6:	b580      	push	{r7, lr}
 800b7d8:	b086      	sub	sp, #24
 800b7da:	af00      	add	r7, sp, #0
 800b7dc:	60f8      	str	r0, [r7, #12]
 800b7de:	460b      	mov	r3, r1
 800b7e0:	607a      	str	r2, [r7, #4]
 800b7e2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b7e4:	7afb      	ldrb	r3, [r7, #11]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d137      	bne.n	800b85a <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b7f0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b7f8:	2b03      	cmp	r3, #3
 800b7fa:	d14a      	bne.n	800b892 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800b7fc:	693b      	ldr	r3, [r7, #16]
 800b7fe:	689a      	ldr	r2, [r3, #8]
 800b800:	693b      	ldr	r3, [r7, #16]
 800b802:	68db      	ldr	r3, [r3, #12]
 800b804:	429a      	cmp	r2, r3
 800b806:	d913      	bls.n	800b830 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b808:	693b      	ldr	r3, [r7, #16]
 800b80a:	689a      	ldr	r2, [r3, #8]
 800b80c:	693b      	ldr	r3, [r7, #16]
 800b80e:	68db      	ldr	r3, [r3, #12]
 800b810:	1ad2      	subs	r2, r2, r3
 800b812:	693b      	ldr	r3, [r7, #16]
 800b814:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b816:	693b      	ldr	r3, [r7, #16]
 800b818:	68da      	ldr	r2, [r3, #12]
 800b81a:	693b      	ldr	r3, [r7, #16]
 800b81c:	689b      	ldr	r3, [r3, #8]
 800b81e:	4293      	cmp	r3, r2
 800b820:	bf28      	it	cs
 800b822:	4613      	movcs	r3, r2
 800b824:	461a      	mov	r2, r3
 800b826:	6879      	ldr	r1, [r7, #4]
 800b828:	68f8      	ldr	r0, [r7, #12]
 800b82a:	f000 ffe4 	bl	800c7f6 <USBD_CtlContinueRx>
 800b82e:	e030      	b.n	800b892 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b836:	691b      	ldr	r3, [r3, #16]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d00a      	beq.n	800b852 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b842:	2b03      	cmp	r3, #3
 800b844:	d105      	bne.n	800b852 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b84c:	691b      	ldr	r3, [r3, #16]
 800b84e:	68f8      	ldr	r0, [r7, #12]
 800b850:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800b852:	68f8      	ldr	r0, [r7, #12]
 800b854:	f000 ffe0 	bl	800c818 <USBD_CtlSendStatus>
 800b858:	e01b      	b.n	800b892 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b860:	699b      	ldr	r3, [r3, #24]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d013      	beq.n	800b88e <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800b86c:	2b03      	cmp	r3, #3
 800b86e:	d10e      	bne.n	800b88e <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b876:	699b      	ldr	r3, [r3, #24]
 800b878:	7afa      	ldrb	r2, [r7, #11]
 800b87a:	4611      	mov	r1, r2
 800b87c:	68f8      	ldr	r0, [r7, #12]
 800b87e:	4798      	blx	r3
 800b880:	4603      	mov	r3, r0
 800b882:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800b884:	7dfb      	ldrb	r3, [r7, #23]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d003      	beq.n	800b892 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800b88a:	7dfb      	ldrb	r3, [r7, #23]
 800b88c:	e002      	b.n	800b894 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b88e:	2303      	movs	r3, #3
 800b890:	e000      	b.n	800b894 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800b892:	2300      	movs	r3, #0
}
 800b894:	4618      	mov	r0, r3
 800b896:	3718      	adds	r7, #24
 800b898:	46bd      	mov	sp, r7
 800b89a:	bd80      	pop	{r7, pc}

0800b89c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b086      	sub	sp, #24
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	60f8      	str	r0, [r7, #12]
 800b8a4:	460b      	mov	r3, r1
 800b8a6:	607a      	str	r2, [r7, #4]
 800b8a8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b8aa:	7afb      	ldrb	r3, [r7, #11]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d16a      	bne.n	800b986 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	3314      	adds	r3, #20
 800b8b4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b8bc:	2b02      	cmp	r3, #2
 800b8be:	d155      	bne.n	800b96c <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800b8c0:	693b      	ldr	r3, [r7, #16]
 800b8c2:	689a      	ldr	r2, [r3, #8]
 800b8c4:	693b      	ldr	r3, [r7, #16]
 800b8c6:	68db      	ldr	r3, [r3, #12]
 800b8c8:	429a      	cmp	r2, r3
 800b8ca:	d914      	bls.n	800b8f6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b8cc:	693b      	ldr	r3, [r7, #16]
 800b8ce:	689a      	ldr	r2, [r3, #8]
 800b8d0:	693b      	ldr	r3, [r7, #16]
 800b8d2:	68db      	ldr	r3, [r3, #12]
 800b8d4:	1ad2      	subs	r2, r2, r3
 800b8d6:	693b      	ldr	r3, [r7, #16]
 800b8d8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b8da:	693b      	ldr	r3, [r7, #16]
 800b8dc:	689b      	ldr	r3, [r3, #8]
 800b8de:	461a      	mov	r2, r3
 800b8e0:	6879      	ldr	r1, [r7, #4]
 800b8e2:	68f8      	ldr	r0, [r7, #12]
 800b8e4:	f000 ff59 	bl	800c79a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	2100      	movs	r1, #0
 800b8ee:	68f8      	ldr	r0, [r7, #12]
 800b8f0:	f004 ff1e 	bl	8010730 <USBD_LL_PrepareReceive>
 800b8f4:	e03a      	b.n	800b96c <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b8f6:	693b      	ldr	r3, [r7, #16]
 800b8f8:	68da      	ldr	r2, [r3, #12]
 800b8fa:	693b      	ldr	r3, [r7, #16]
 800b8fc:	689b      	ldr	r3, [r3, #8]
 800b8fe:	429a      	cmp	r2, r3
 800b900:	d11c      	bne.n	800b93c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b902:	693b      	ldr	r3, [r7, #16]
 800b904:	685a      	ldr	r2, [r3, #4]
 800b906:	693b      	ldr	r3, [r7, #16]
 800b908:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b90a:	429a      	cmp	r2, r3
 800b90c:	d316      	bcc.n	800b93c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b90e:	693b      	ldr	r3, [r7, #16]
 800b910:	685a      	ldr	r2, [r3, #4]
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b918:	429a      	cmp	r2, r3
 800b91a:	d20f      	bcs.n	800b93c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b91c:	2200      	movs	r2, #0
 800b91e:	2100      	movs	r1, #0
 800b920:	68f8      	ldr	r0, [r7, #12]
 800b922:	f000 ff3a 	bl	800c79a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	2200      	movs	r2, #0
 800b92a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b92e:	2300      	movs	r3, #0
 800b930:	2200      	movs	r2, #0
 800b932:	2100      	movs	r1, #0
 800b934:	68f8      	ldr	r0, [r7, #12]
 800b936:	f004 fefb 	bl	8010730 <USBD_LL_PrepareReceive>
 800b93a:	e017      	b.n	800b96c <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b942:	68db      	ldr	r3, [r3, #12]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d00a      	beq.n	800b95e <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b94e:	2b03      	cmp	r3, #3
 800b950:	d105      	bne.n	800b95e <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b958:	68db      	ldr	r3, [r3, #12]
 800b95a:	68f8      	ldr	r0, [r7, #12]
 800b95c:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b95e:	2180      	movs	r1, #128	; 0x80
 800b960:	68f8      	ldr	r0, [r7, #12]
 800b962:	f004 fe3b 	bl	80105dc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b966:	68f8      	ldr	r0, [r7, #12]
 800b968:	f000 ff69 	bl	800c83e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b972:	2b01      	cmp	r3, #1
 800b974:	d123      	bne.n	800b9be <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800b976:	68f8      	ldr	r0, [r7, #12]
 800b978:	f7ff fe99 	bl	800b6ae <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	2200      	movs	r2, #0
 800b980:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b984:	e01b      	b.n	800b9be <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b98c:	695b      	ldr	r3, [r3, #20]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d013      	beq.n	800b9ba <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800b998:	2b03      	cmp	r3, #3
 800b99a:	d10e      	bne.n	800b9ba <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9a2:	695b      	ldr	r3, [r3, #20]
 800b9a4:	7afa      	ldrb	r2, [r7, #11]
 800b9a6:	4611      	mov	r1, r2
 800b9a8:	68f8      	ldr	r0, [r7, #12]
 800b9aa:	4798      	blx	r3
 800b9ac:	4603      	mov	r3, r0
 800b9ae:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800b9b0:	7dfb      	ldrb	r3, [r7, #23]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d003      	beq.n	800b9be <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800b9b6:	7dfb      	ldrb	r3, [r7, #23]
 800b9b8:	e002      	b.n	800b9c0 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b9ba:	2303      	movs	r3, #3
 800b9bc:	e000      	b.n	800b9c0 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800b9be:	2300      	movs	r3, #0
}
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	3718      	adds	r7, #24
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	bd80      	pop	{r7, pc}

0800b9c8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b082      	sub	sp, #8
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	2201      	movs	r2, #1
 800b9d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2200      	movs	r2, #0
 800b9dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d009      	beq.n	800ba0c <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9fe:	685b      	ldr	r3, [r3, #4]
 800ba00:	687a      	ldr	r2, [r7, #4]
 800ba02:	6852      	ldr	r2, [r2, #4]
 800ba04:	b2d2      	uxtb	r2, r2
 800ba06:	4611      	mov	r1, r2
 800ba08:	6878      	ldr	r0, [r7, #4]
 800ba0a:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ba0c:	2340      	movs	r3, #64	; 0x40
 800ba0e:	2200      	movs	r2, #0
 800ba10:	2100      	movs	r1, #0
 800ba12:	6878      	ldr	r0, [r7, #4]
 800ba14:	f004 fd9d 	bl	8010552 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	2201      	movs	r2, #1
 800ba1c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	2240      	movs	r2, #64	; 0x40
 800ba24:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ba28:	2340      	movs	r3, #64	; 0x40
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	2180      	movs	r1, #128	; 0x80
 800ba2e:	6878      	ldr	r0, [r7, #4]
 800ba30:	f004 fd8f 	bl	8010552 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2201      	movs	r2, #1
 800ba38:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	2240      	movs	r2, #64	; 0x40
 800ba3e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800ba40:	2300      	movs	r3, #0
}
 800ba42:	4618      	mov	r0, r3
 800ba44:	3708      	adds	r7, #8
 800ba46:	46bd      	mov	sp, r7
 800ba48:	bd80      	pop	{r7, pc}

0800ba4a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ba4a:	b480      	push	{r7}
 800ba4c:	b083      	sub	sp, #12
 800ba4e:	af00      	add	r7, sp, #0
 800ba50:	6078      	str	r0, [r7, #4]
 800ba52:	460b      	mov	r3, r1
 800ba54:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	78fa      	ldrb	r2, [r7, #3]
 800ba5a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ba5c:	2300      	movs	r3, #0
}
 800ba5e:	4618      	mov	r0, r3
 800ba60:	370c      	adds	r7, #12
 800ba62:	46bd      	mov	sp, r7
 800ba64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba68:	4770      	bx	lr

0800ba6a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ba6a:	b480      	push	{r7}
 800ba6c:	b083      	sub	sp, #12
 800ba6e:	af00      	add	r7, sp, #0
 800ba70:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	2204      	movs	r2, #4
 800ba82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ba86:	2300      	movs	r3, #0
}
 800ba88:	4618      	mov	r0, r3
 800ba8a:	370c      	adds	r7, #12
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba92:	4770      	bx	lr

0800ba94 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ba94:	b480      	push	{r7}
 800ba96:	b083      	sub	sp, #12
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800baa2:	2b04      	cmp	r3, #4
 800baa4:	d105      	bne.n	800bab2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800bab2:	2300      	movs	r3, #0
}
 800bab4:	4618      	mov	r0, r3
 800bab6:	370c      	adds	r7, #12
 800bab8:	46bd      	mov	sp, r7
 800baba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800babe:	4770      	bx	lr

0800bac0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b082      	sub	sp, #8
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bace:	2b03      	cmp	r3, #3
 800bad0:	d10b      	bne.n	800baea <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bad8:	69db      	ldr	r3, [r3, #28]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d005      	beq.n	800baea <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bae4:	69db      	ldr	r3, [r3, #28]
 800bae6:	6878      	ldr	r0, [r7, #4]
 800bae8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800baea:	2300      	movs	r3, #0
}
 800baec:	4618      	mov	r0, r3
 800baee:	3708      	adds	r7, #8
 800baf0:	46bd      	mov	sp, r7
 800baf2:	bd80      	pop	{r7, pc}

0800baf4 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800baf4:	b480      	push	{r7}
 800baf6:	b083      	sub	sp, #12
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
 800bafc:	460b      	mov	r3, r1
 800bafe:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800bb00:	2300      	movs	r3, #0
}
 800bb02:	4618      	mov	r0, r3
 800bb04:	370c      	adds	r7, #12
 800bb06:	46bd      	mov	sp, r7
 800bb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0c:	4770      	bx	lr

0800bb0e <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bb0e:	b480      	push	{r7}
 800bb10:	b083      	sub	sp, #12
 800bb12:	af00      	add	r7, sp, #0
 800bb14:	6078      	str	r0, [r7, #4]
 800bb16:	460b      	mov	r3, r1
 800bb18:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800bb1a:	2300      	movs	r3, #0
}
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	370c      	adds	r7, #12
 800bb20:	46bd      	mov	sp, r7
 800bb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb26:	4770      	bx	lr

0800bb28 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bb28:	b480      	push	{r7}
 800bb2a:	b083      	sub	sp, #12
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bb30:	2300      	movs	r3, #0
}
 800bb32:	4618      	mov	r0, r3
 800bb34:	370c      	adds	r7, #12
 800bb36:	46bd      	mov	sp, r7
 800bb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3c:	4770      	bx	lr

0800bb3e <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bb3e:	b580      	push	{r7, lr}
 800bb40:	b082      	sub	sp, #8
 800bb42:	af00      	add	r7, sp, #0
 800bb44:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	2201      	movs	r2, #1
 800bb4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d009      	beq.n	800bb6c <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb5e:	685b      	ldr	r3, [r3, #4]
 800bb60:	687a      	ldr	r2, [r7, #4]
 800bb62:	6852      	ldr	r2, [r2, #4]
 800bb64:	b2d2      	uxtb	r2, r2
 800bb66:	4611      	mov	r1, r2
 800bb68:	6878      	ldr	r0, [r7, #4]
 800bb6a:	4798      	blx	r3
  }

  return USBD_OK;
 800bb6c:	2300      	movs	r3, #0
}
 800bb6e:	4618      	mov	r0, r3
 800bb70:	3708      	adds	r7, #8
 800bb72:	46bd      	mov	sp, r7
 800bb74:	bd80      	pop	{r7, pc}

0800bb76 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bb76:	b480      	push	{r7}
 800bb78:	b087      	sub	sp, #28
 800bb7a:	af00      	add	r7, sp, #0
 800bb7c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bb82:	697b      	ldr	r3, [r7, #20]
 800bb84:	781b      	ldrb	r3, [r3, #0]
 800bb86:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bb88:	697b      	ldr	r3, [r7, #20]
 800bb8a:	3301      	adds	r3, #1
 800bb8c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bb8e:	697b      	ldr	r3, [r7, #20]
 800bb90:	781b      	ldrb	r3, [r3, #0]
 800bb92:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bb94:	8a3b      	ldrh	r3, [r7, #16]
 800bb96:	021b      	lsls	r3, r3, #8
 800bb98:	b21a      	sxth	r2, r3
 800bb9a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bb9e:	4313      	orrs	r3, r2
 800bba0:	b21b      	sxth	r3, r3
 800bba2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bba4:	89fb      	ldrh	r3, [r7, #14]
}
 800bba6:	4618      	mov	r0, r3
 800bba8:	371c      	adds	r7, #28
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb0:	4770      	bx	lr
	...

0800bbb4 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b084      	sub	sp, #16
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
 800bbbc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bbc2:	683b      	ldr	r3, [r7, #0]
 800bbc4:	781b      	ldrb	r3, [r3, #0]
 800bbc6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bbca:	2b40      	cmp	r3, #64	; 0x40
 800bbcc:	d005      	beq.n	800bbda <USBD_StdDevReq+0x26>
 800bbce:	2b40      	cmp	r3, #64	; 0x40
 800bbd0:	d853      	bhi.n	800bc7a <USBD_StdDevReq+0xc6>
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d00b      	beq.n	800bbee <USBD_StdDevReq+0x3a>
 800bbd6:	2b20      	cmp	r3, #32
 800bbd8:	d14f      	bne.n	800bc7a <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bbe0:	689b      	ldr	r3, [r3, #8]
 800bbe2:	6839      	ldr	r1, [r7, #0]
 800bbe4:	6878      	ldr	r0, [r7, #4]
 800bbe6:	4798      	blx	r3
 800bbe8:	4603      	mov	r3, r0
 800bbea:	73fb      	strb	r3, [r7, #15]
    break;
 800bbec:	e04a      	b.n	800bc84 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800bbee:	683b      	ldr	r3, [r7, #0]
 800bbf0:	785b      	ldrb	r3, [r3, #1]
 800bbf2:	2b09      	cmp	r3, #9
 800bbf4:	d83b      	bhi.n	800bc6e <USBD_StdDevReq+0xba>
 800bbf6:	a201      	add	r2, pc, #4	; (adr r2, 800bbfc <USBD_StdDevReq+0x48>)
 800bbf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbfc:	0800bc51 	.word	0x0800bc51
 800bc00:	0800bc65 	.word	0x0800bc65
 800bc04:	0800bc6f 	.word	0x0800bc6f
 800bc08:	0800bc5b 	.word	0x0800bc5b
 800bc0c:	0800bc6f 	.word	0x0800bc6f
 800bc10:	0800bc2f 	.word	0x0800bc2f
 800bc14:	0800bc25 	.word	0x0800bc25
 800bc18:	0800bc6f 	.word	0x0800bc6f
 800bc1c:	0800bc47 	.word	0x0800bc47
 800bc20:	0800bc39 	.word	0x0800bc39
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800bc24:	6839      	ldr	r1, [r7, #0]
 800bc26:	6878      	ldr	r0, [r7, #4]
 800bc28:	f000 f9d8 	bl	800bfdc <USBD_GetDescriptor>
      break;
 800bc2c:	e024      	b.n	800bc78 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800bc2e:	6839      	ldr	r1, [r7, #0]
 800bc30:	6878      	ldr	r0, [r7, #4]
 800bc32:	f000 fb67 	bl	800c304 <USBD_SetAddress>
      break;
 800bc36:	e01f      	b.n	800bc78 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800bc38:	6839      	ldr	r1, [r7, #0]
 800bc3a:	6878      	ldr	r0, [r7, #4]
 800bc3c:	f000 fba6 	bl	800c38c <USBD_SetConfig>
 800bc40:	4603      	mov	r3, r0
 800bc42:	73fb      	strb	r3, [r7, #15]
      break;
 800bc44:	e018      	b.n	800bc78 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800bc46:	6839      	ldr	r1, [r7, #0]
 800bc48:	6878      	ldr	r0, [r7, #4]
 800bc4a:	f000 fc43 	bl	800c4d4 <USBD_GetConfig>
      break;
 800bc4e:	e013      	b.n	800bc78 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800bc50:	6839      	ldr	r1, [r7, #0]
 800bc52:	6878      	ldr	r0, [r7, #4]
 800bc54:	f000 fc73 	bl	800c53e <USBD_GetStatus>
      break;
 800bc58:	e00e      	b.n	800bc78 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800bc5a:	6839      	ldr	r1, [r7, #0]
 800bc5c:	6878      	ldr	r0, [r7, #4]
 800bc5e:	f000 fca1 	bl	800c5a4 <USBD_SetFeature>
      break;
 800bc62:	e009      	b.n	800bc78 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800bc64:	6839      	ldr	r1, [r7, #0]
 800bc66:	6878      	ldr	r0, [r7, #4]
 800bc68:	f000 fcb0 	bl	800c5cc <USBD_ClrFeature>
      break;
 800bc6c:	e004      	b.n	800bc78 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800bc6e:	6839      	ldr	r1, [r7, #0]
 800bc70:	6878      	ldr	r0, [r7, #4]
 800bc72:	f000 fd06 	bl	800c682 <USBD_CtlError>
      break;
 800bc76:	bf00      	nop
    }
    break;
 800bc78:	e004      	b.n	800bc84 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800bc7a:	6839      	ldr	r1, [r7, #0]
 800bc7c:	6878      	ldr	r0, [r7, #4]
 800bc7e:	f000 fd00 	bl	800c682 <USBD_CtlError>
    break;
 800bc82:	bf00      	nop
  }

  return ret;
 800bc84:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc86:	4618      	mov	r0, r3
 800bc88:	3710      	adds	r7, #16
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	bd80      	pop	{r7, pc}
 800bc8e:	bf00      	nop

0800bc90 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b084      	sub	sp, #16
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
 800bc98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bc9e:	683b      	ldr	r3, [r7, #0]
 800bca0:	781b      	ldrb	r3, [r3, #0]
 800bca2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bca6:	2b40      	cmp	r3, #64	; 0x40
 800bca8:	d005      	beq.n	800bcb6 <USBD_StdItfReq+0x26>
 800bcaa:	2b40      	cmp	r3, #64	; 0x40
 800bcac:	d82e      	bhi.n	800bd0c <USBD_StdItfReq+0x7c>
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d001      	beq.n	800bcb6 <USBD_StdItfReq+0x26>
 800bcb2:	2b20      	cmp	r3, #32
 800bcb4:	d12a      	bne.n	800bd0c <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bcbc:	3b01      	subs	r3, #1
 800bcbe:	2b02      	cmp	r3, #2
 800bcc0:	d81d      	bhi.n	800bcfe <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bcc2:	683b      	ldr	r3, [r7, #0]
 800bcc4:	889b      	ldrh	r3, [r3, #4]
 800bcc6:	b2db      	uxtb	r3, r3
 800bcc8:	2b01      	cmp	r3, #1
 800bcca:	d813      	bhi.n	800bcf4 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcd2:	689b      	ldr	r3, [r3, #8]
 800bcd4:	6839      	ldr	r1, [r7, #0]
 800bcd6:	6878      	ldr	r0, [r7, #4]
 800bcd8:	4798      	blx	r3
 800bcda:	4603      	mov	r3, r0
 800bcdc:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800bcde:	683b      	ldr	r3, [r7, #0]
 800bce0:	88db      	ldrh	r3, [r3, #6]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d110      	bne.n	800bd08 <USBD_StdItfReq+0x78>
 800bce6:	7bfb      	ldrb	r3, [r7, #15]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d10d      	bne.n	800bd08 <USBD_StdItfReq+0x78>
        {
          (void)USBD_CtlSendStatus(pdev);
 800bcec:	6878      	ldr	r0, [r7, #4]
 800bcee:	f000 fd93 	bl	800c818 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800bcf2:	e009      	b.n	800bd08 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 800bcf4:	6839      	ldr	r1, [r7, #0]
 800bcf6:	6878      	ldr	r0, [r7, #4]
 800bcf8:	f000 fcc3 	bl	800c682 <USBD_CtlError>
      break;
 800bcfc:	e004      	b.n	800bd08 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 800bcfe:	6839      	ldr	r1, [r7, #0]
 800bd00:	6878      	ldr	r0, [r7, #4]
 800bd02:	f000 fcbe 	bl	800c682 <USBD_CtlError>
      break;
 800bd06:	e000      	b.n	800bd0a <USBD_StdItfReq+0x7a>
      break;
 800bd08:	bf00      	nop
    }
    break;
 800bd0a:	e004      	b.n	800bd16 <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 800bd0c:	6839      	ldr	r1, [r7, #0]
 800bd0e:	6878      	ldr	r0, [r7, #4]
 800bd10:	f000 fcb7 	bl	800c682 <USBD_CtlError>
    break;
 800bd14:	bf00      	nop
  }

  return ret;
 800bd16:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd18:	4618      	mov	r0, r3
 800bd1a:	3710      	adds	r7, #16
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	bd80      	pop	{r7, pc}

0800bd20 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b084      	sub	sp, #16
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
 800bd28:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800bd2e:	683b      	ldr	r3, [r7, #0]
 800bd30:	889b      	ldrh	r3, [r3, #4]
 800bd32:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bd34:	683b      	ldr	r3, [r7, #0]
 800bd36:	781b      	ldrb	r3, [r3, #0]
 800bd38:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bd3c:	2b40      	cmp	r3, #64	; 0x40
 800bd3e:	d007      	beq.n	800bd50 <USBD_StdEPReq+0x30>
 800bd40:	2b40      	cmp	r3, #64	; 0x40
 800bd42:	f200 8140 	bhi.w	800bfc6 <USBD_StdEPReq+0x2a6>
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d00c      	beq.n	800bd64 <USBD_StdEPReq+0x44>
 800bd4a:	2b20      	cmp	r3, #32
 800bd4c:	f040 813b 	bne.w	800bfc6 <USBD_StdEPReq+0x2a6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd56:	689b      	ldr	r3, [r3, #8]
 800bd58:	6839      	ldr	r1, [r7, #0]
 800bd5a:	6878      	ldr	r0, [r7, #4]
 800bd5c:	4798      	blx	r3
 800bd5e:	4603      	mov	r3, r0
 800bd60:	73fb      	strb	r3, [r7, #15]
    break;
 800bd62:	e135      	b.n	800bfd0 <USBD_StdEPReq+0x2b0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800bd64:	683b      	ldr	r3, [r7, #0]
 800bd66:	785b      	ldrb	r3, [r3, #1]
 800bd68:	2b03      	cmp	r3, #3
 800bd6a:	d007      	beq.n	800bd7c <USBD_StdEPReq+0x5c>
 800bd6c:	2b03      	cmp	r3, #3
 800bd6e:	f300 8124 	bgt.w	800bfba <USBD_StdEPReq+0x29a>
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d07b      	beq.n	800be6e <USBD_StdEPReq+0x14e>
 800bd76:	2b01      	cmp	r3, #1
 800bd78:	d03b      	beq.n	800bdf2 <USBD_StdEPReq+0xd2>
 800bd7a:	e11e      	b.n	800bfba <USBD_StdEPReq+0x29a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd82:	2b02      	cmp	r3, #2
 800bd84:	d002      	beq.n	800bd8c <USBD_StdEPReq+0x6c>
 800bd86:	2b03      	cmp	r3, #3
 800bd88:	d016      	beq.n	800bdb8 <USBD_StdEPReq+0x98>
 800bd8a:	e02c      	b.n	800bde6 <USBD_StdEPReq+0xc6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bd8c:	7bbb      	ldrb	r3, [r7, #14]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d00d      	beq.n	800bdae <USBD_StdEPReq+0x8e>
 800bd92:	7bbb      	ldrb	r3, [r7, #14]
 800bd94:	2b80      	cmp	r3, #128	; 0x80
 800bd96:	d00a      	beq.n	800bdae <USBD_StdEPReq+0x8e>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800bd98:	7bbb      	ldrb	r3, [r7, #14]
 800bd9a:	4619      	mov	r1, r3
 800bd9c:	6878      	ldr	r0, [r7, #4]
 800bd9e:	f004 fc1d 	bl	80105dc <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bda2:	2180      	movs	r1, #128	; 0x80
 800bda4:	6878      	ldr	r0, [r7, #4]
 800bda6:	f004 fc19 	bl	80105dc <USBD_LL_StallEP>
 800bdaa:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800bdac:	e020      	b.n	800bdf0 <USBD_StdEPReq+0xd0>
          USBD_CtlError(pdev, req);
 800bdae:	6839      	ldr	r1, [r7, #0]
 800bdb0:	6878      	ldr	r0, [r7, #4]
 800bdb2:	f000 fc66 	bl	800c682 <USBD_CtlError>
        break;
 800bdb6:	e01b      	b.n	800bdf0 <USBD_StdEPReq+0xd0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800bdb8:	683b      	ldr	r3, [r7, #0]
 800bdba:	885b      	ldrh	r3, [r3, #2]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d10e      	bne.n	800bdde <USBD_StdEPReq+0xbe>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bdc0:	7bbb      	ldrb	r3, [r7, #14]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d00b      	beq.n	800bdde <USBD_StdEPReq+0xbe>
 800bdc6:	7bbb      	ldrb	r3, [r7, #14]
 800bdc8:	2b80      	cmp	r3, #128	; 0x80
 800bdca:	d008      	beq.n	800bdde <USBD_StdEPReq+0xbe>
 800bdcc:	683b      	ldr	r3, [r7, #0]
 800bdce:	88db      	ldrh	r3, [r3, #6]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d104      	bne.n	800bdde <USBD_StdEPReq+0xbe>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800bdd4:	7bbb      	ldrb	r3, [r7, #14]
 800bdd6:	4619      	mov	r1, r3
 800bdd8:	6878      	ldr	r0, [r7, #4]
 800bdda:	f004 fbff 	bl	80105dc <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800bdde:	6878      	ldr	r0, [r7, #4]
 800bde0:	f000 fd1a 	bl	800c818 <USBD_CtlSendStatus>

        break;
 800bde4:	e004      	b.n	800bdf0 <USBD_StdEPReq+0xd0>

      default:
        USBD_CtlError(pdev, req);
 800bde6:	6839      	ldr	r1, [r7, #0]
 800bde8:	6878      	ldr	r0, [r7, #4]
 800bdea:	f000 fc4a 	bl	800c682 <USBD_CtlError>
        break;
 800bdee:	bf00      	nop
      }
      break;
 800bdf0:	e0e8      	b.n	800bfc4 <USBD_StdEPReq+0x2a4>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bdf8:	2b02      	cmp	r3, #2
 800bdfa:	d002      	beq.n	800be02 <USBD_StdEPReq+0xe2>
 800bdfc:	2b03      	cmp	r3, #3
 800bdfe:	d016      	beq.n	800be2e <USBD_StdEPReq+0x10e>
 800be00:	e02e      	b.n	800be60 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800be02:	7bbb      	ldrb	r3, [r7, #14]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d00d      	beq.n	800be24 <USBD_StdEPReq+0x104>
 800be08:	7bbb      	ldrb	r3, [r7, #14]
 800be0a:	2b80      	cmp	r3, #128	; 0x80
 800be0c:	d00a      	beq.n	800be24 <USBD_StdEPReq+0x104>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800be0e:	7bbb      	ldrb	r3, [r7, #14]
 800be10:	4619      	mov	r1, r3
 800be12:	6878      	ldr	r0, [r7, #4]
 800be14:	f004 fbe2 	bl	80105dc <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800be18:	2180      	movs	r1, #128	; 0x80
 800be1a:	6878      	ldr	r0, [r7, #4]
 800be1c:	f004 fbde 	bl	80105dc <USBD_LL_StallEP>
 800be20:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800be22:	e023      	b.n	800be6c <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 800be24:	6839      	ldr	r1, [r7, #0]
 800be26:	6878      	ldr	r0, [r7, #4]
 800be28:	f000 fc2b 	bl	800c682 <USBD_CtlError>
        break;
 800be2c:	e01e      	b.n	800be6c <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800be2e:	683b      	ldr	r3, [r7, #0]
 800be30:	885b      	ldrh	r3, [r3, #2]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d119      	bne.n	800be6a <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800be36:	7bbb      	ldrb	r3, [r7, #14]
 800be38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d004      	beq.n	800be4a <USBD_StdEPReq+0x12a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800be40:	7bbb      	ldrb	r3, [r7, #14]
 800be42:	4619      	mov	r1, r3
 800be44:	6878      	ldr	r0, [r7, #4]
 800be46:	f004 fbe8 	bl	801061a <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800be4a:	6878      	ldr	r0, [r7, #4]
 800be4c:	f000 fce4 	bl	800c818 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be56:	689b      	ldr	r3, [r3, #8]
 800be58:	6839      	ldr	r1, [r7, #0]
 800be5a:	6878      	ldr	r0, [r7, #4]
 800be5c:	4798      	blx	r3
        }
        break;
 800be5e:	e004      	b.n	800be6a <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 800be60:	6839      	ldr	r1, [r7, #0]
 800be62:	6878      	ldr	r0, [r7, #4]
 800be64:	f000 fc0d 	bl	800c682 <USBD_CtlError>
        break;
 800be68:	e000      	b.n	800be6c <USBD_StdEPReq+0x14c>
        break;
 800be6a:	bf00      	nop
      }
      break;
 800be6c:	e0aa      	b.n	800bfc4 <USBD_StdEPReq+0x2a4>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be74:	2b02      	cmp	r3, #2
 800be76:	d002      	beq.n	800be7e <USBD_StdEPReq+0x15e>
 800be78:	2b03      	cmp	r3, #3
 800be7a:	d032      	beq.n	800bee2 <USBD_StdEPReq+0x1c2>
 800be7c:	e097      	b.n	800bfae <USBD_StdEPReq+0x28e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800be7e:	7bbb      	ldrb	r3, [r7, #14]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d007      	beq.n	800be94 <USBD_StdEPReq+0x174>
 800be84:	7bbb      	ldrb	r3, [r7, #14]
 800be86:	2b80      	cmp	r3, #128	; 0x80
 800be88:	d004      	beq.n	800be94 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 800be8a:	6839      	ldr	r1, [r7, #0]
 800be8c:	6878      	ldr	r0, [r7, #4]
 800be8e:	f000 fbf8 	bl	800c682 <USBD_CtlError>
          break;
 800be92:	e091      	b.n	800bfb8 <USBD_StdEPReq+0x298>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800be94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	da0b      	bge.n	800beb4 <USBD_StdEPReq+0x194>
 800be9c:	7bbb      	ldrb	r3, [r7, #14]
 800be9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bea2:	4613      	mov	r3, r2
 800bea4:	009b      	lsls	r3, r3, #2
 800bea6:	4413      	add	r3, r2
 800bea8:	009b      	lsls	r3, r3, #2
 800beaa:	3310      	adds	r3, #16
 800beac:	687a      	ldr	r2, [r7, #4]
 800beae:	4413      	add	r3, r2
 800beb0:	3304      	adds	r3, #4
 800beb2:	e00b      	b.n	800becc <USBD_StdEPReq+0x1ac>
              &pdev->ep_out[ep_addr & 0x7FU];
 800beb4:	7bbb      	ldrb	r3, [r7, #14]
 800beb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800beba:	4613      	mov	r3, r2
 800bebc:	009b      	lsls	r3, r3, #2
 800bebe:	4413      	add	r3, r2
 800bec0:	009b      	lsls	r3, r3, #2
 800bec2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bec6:	687a      	ldr	r2, [r7, #4]
 800bec8:	4413      	add	r3, r2
 800beca:	3304      	adds	r3, #4
 800becc:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800bece:	68bb      	ldr	r3, [r7, #8]
 800bed0:	2200      	movs	r2, #0
 800bed2:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bed4:	68bb      	ldr	r3, [r7, #8]
 800bed6:	2202      	movs	r2, #2
 800bed8:	4619      	mov	r1, r3
 800beda:	6878      	ldr	r0, [r7, #4]
 800bedc:	f000 fc42 	bl	800c764 <USBD_CtlSendData>
        break;
 800bee0:	e06a      	b.n	800bfb8 <USBD_StdEPReq+0x298>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800bee2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	da11      	bge.n	800bf0e <USBD_StdEPReq+0x1ee>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800beea:	7bbb      	ldrb	r3, [r7, #14]
 800beec:	f003 020f 	and.w	r2, r3, #15
 800bef0:	6879      	ldr	r1, [r7, #4]
 800bef2:	4613      	mov	r3, r2
 800bef4:	009b      	lsls	r3, r3, #2
 800bef6:	4413      	add	r3, r2
 800bef8:	009b      	lsls	r3, r3, #2
 800befa:	440b      	add	r3, r1
 800befc:	3324      	adds	r3, #36	; 0x24
 800befe:	881b      	ldrh	r3, [r3, #0]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d117      	bne.n	800bf34 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 800bf04:	6839      	ldr	r1, [r7, #0]
 800bf06:	6878      	ldr	r0, [r7, #4]
 800bf08:	f000 fbbb 	bl	800c682 <USBD_CtlError>
            break;
 800bf0c:	e054      	b.n	800bfb8 <USBD_StdEPReq+0x298>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bf0e:	7bbb      	ldrb	r3, [r7, #14]
 800bf10:	f003 020f 	and.w	r2, r3, #15
 800bf14:	6879      	ldr	r1, [r7, #4]
 800bf16:	4613      	mov	r3, r2
 800bf18:	009b      	lsls	r3, r3, #2
 800bf1a:	4413      	add	r3, r2
 800bf1c:	009b      	lsls	r3, r3, #2
 800bf1e:	440b      	add	r3, r1
 800bf20:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bf24:	881b      	ldrh	r3, [r3, #0]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d104      	bne.n	800bf34 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 800bf2a:	6839      	ldr	r1, [r7, #0]
 800bf2c:	6878      	ldr	r0, [r7, #4]
 800bf2e:	f000 fba8 	bl	800c682 <USBD_CtlError>
            break;
 800bf32:	e041      	b.n	800bfb8 <USBD_StdEPReq+0x298>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bf34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	da0b      	bge.n	800bf54 <USBD_StdEPReq+0x234>
 800bf3c:	7bbb      	ldrb	r3, [r7, #14]
 800bf3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bf42:	4613      	mov	r3, r2
 800bf44:	009b      	lsls	r3, r3, #2
 800bf46:	4413      	add	r3, r2
 800bf48:	009b      	lsls	r3, r3, #2
 800bf4a:	3310      	adds	r3, #16
 800bf4c:	687a      	ldr	r2, [r7, #4]
 800bf4e:	4413      	add	r3, r2
 800bf50:	3304      	adds	r3, #4
 800bf52:	e00b      	b.n	800bf6c <USBD_StdEPReq+0x24c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800bf54:	7bbb      	ldrb	r3, [r7, #14]
 800bf56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bf5a:	4613      	mov	r3, r2
 800bf5c:	009b      	lsls	r3, r3, #2
 800bf5e:	4413      	add	r3, r2
 800bf60:	009b      	lsls	r3, r3, #2
 800bf62:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bf66:	687a      	ldr	r2, [r7, #4]
 800bf68:	4413      	add	r3, r2
 800bf6a:	3304      	adds	r3, #4
 800bf6c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bf6e:	7bbb      	ldrb	r3, [r7, #14]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d002      	beq.n	800bf7a <USBD_StdEPReq+0x25a>
 800bf74:	7bbb      	ldrb	r3, [r7, #14]
 800bf76:	2b80      	cmp	r3, #128	; 0x80
 800bf78:	d103      	bne.n	800bf82 <USBD_StdEPReq+0x262>
          {
            pep->status = 0x0000U;
 800bf7a:	68bb      	ldr	r3, [r7, #8]
 800bf7c:	2200      	movs	r2, #0
 800bf7e:	601a      	str	r2, [r3, #0]
 800bf80:	e00e      	b.n	800bfa0 <USBD_StdEPReq+0x280>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800bf82:	7bbb      	ldrb	r3, [r7, #14]
 800bf84:	4619      	mov	r1, r3
 800bf86:	6878      	ldr	r0, [r7, #4]
 800bf88:	f004 fb66 	bl	8010658 <USBD_LL_IsStallEP>
 800bf8c:	4603      	mov	r3, r0
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d003      	beq.n	800bf9a <USBD_StdEPReq+0x27a>
          {
            pep->status = 0x0001U;
 800bf92:	68bb      	ldr	r3, [r7, #8]
 800bf94:	2201      	movs	r2, #1
 800bf96:	601a      	str	r2, [r3, #0]
 800bf98:	e002      	b.n	800bfa0 <USBD_StdEPReq+0x280>
          }
          else
          {
            pep->status = 0x0000U;
 800bf9a:	68bb      	ldr	r3, [r7, #8]
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bfa0:	68bb      	ldr	r3, [r7, #8]
 800bfa2:	2202      	movs	r2, #2
 800bfa4:	4619      	mov	r1, r3
 800bfa6:	6878      	ldr	r0, [r7, #4]
 800bfa8:	f000 fbdc 	bl	800c764 <USBD_CtlSendData>
          break;
 800bfac:	e004      	b.n	800bfb8 <USBD_StdEPReq+0x298>

      default:
        USBD_CtlError(pdev, req);
 800bfae:	6839      	ldr	r1, [r7, #0]
 800bfb0:	6878      	ldr	r0, [r7, #4]
 800bfb2:	f000 fb66 	bl	800c682 <USBD_CtlError>
        break;
 800bfb6:	bf00      	nop
      }
      break;
 800bfb8:	e004      	b.n	800bfc4 <USBD_StdEPReq+0x2a4>

    default:
      USBD_CtlError(pdev, req);
 800bfba:	6839      	ldr	r1, [r7, #0]
 800bfbc:	6878      	ldr	r0, [r7, #4]
 800bfbe:	f000 fb60 	bl	800c682 <USBD_CtlError>
      break;
 800bfc2:	bf00      	nop
    }
    break;
 800bfc4:	e004      	b.n	800bfd0 <USBD_StdEPReq+0x2b0>

  default:
    USBD_CtlError(pdev, req);
 800bfc6:	6839      	ldr	r1, [r7, #0]
 800bfc8:	6878      	ldr	r0, [r7, #4]
 800bfca:	f000 fb5a 	bl	800c682 <USBD_CtlError>
    break;
 800bfce:	bf00      	nop
  }

  return ret;
 800bfd0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	3710      	adds	r7, #16
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	bd80      	pop	{r7, pc}
	...

0800bfdc <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b084      	sub	sp, #16
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
 800bfe4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bfea:	2300      	movs	r3, #0
 800bfec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bfee:	2300      	movs	r3, #0
 800bff0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bff2:	683b      	ldr	r3, [r7, #0]
 800bff4:	885b      	ldrh	r3, [r3, #2]
 800bff6:	0a1b      	lsrs	r3, r3, #8
 800bff8:	b29b      	uxth	r3, r3
 800bffa:	3b01      	subs	r3, #1
 800bffc:	2b0e      	cmp	r3, #14
 800bffe:	f200 8152 	bhi.w	800c2a6 <USBD_GetDescriptor+0x2ca>
 800c002:	a201      	add	r2, pc, #4	; (adr r2, 800c008 <USBD_GetDescriptor+0x2c>)
 800c004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c008:	0800c079 	.word	0x0800c079
 800c00c:	0800c091 	.word	0x0800c091
 800c010:	0800c0d1 	.word	0x0800c0d1
 800c014:	0800c2a7 	.word	0x0800c2a7
 800c018:	0800c2a7 	.word	0x0800c2a7
 800c01c:	0800c247 	.word	0x0800c247
 800c020:	0800c273 	.word	0x0800c273
 800c024:	0800c2a7 	.word	0x0800c2a7
 800c028:	0800c2a7 	.word	0x0800c2a7
 800c02c:	0800c2a7 	.word	0x0800c2a7
 800c030:	0800c2a7 	.word	0x0800c2a7
 800c034:	0800c2a7 	.word	0x0800c2a7
 800c038:	0800c2a7 	.word	0x0800c2a7
 800c03c:	0800c2a7 	.word	0x0800c2a7
 800c040:	0800c045 	.word	0x0800c045
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c04a:	69db      	ldr	r3, [r3, #28]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d00b      	beq.n	800c068 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c056:	69db      	ldr	r3, [r3, #28]
 800c058:	687a      	ldr	r2, [r7, #4]
 800c05a:	7c12      	ldrb	r2, [r2, #16]
 800c05c:	f107 0108 	add.w	r1, r7, #8
 800c060:	4610      	mov	r0, r2
 800c062:	4798      	blx	r3
 800c064:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800c066:	e126      	b.n	800c2b6 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800c068:	6839      	ldr	r1, [r7, #0]
 800c06a:	6878      	ldr	r0, [r7, #4]
 800c06c:	f000 fb09 	bl	800c682 <USBD_CtlError>
      err++;
 800c070:	7afb      	ldrb	r3, [r7, #11]
 800c072:	3301      	adds	r3, #1
 800c074:	72fb      	strb	r3, [r7, #11]
    break;
 800c076:	e11e      	b.n	800c2b6 <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	687a      	ldr	r2, [r7, #4]
 800c082:	7c12      	ldrb	r2, [r2, #16]
 800c084:	f107 0108 	add.w	r1, r7, #8
 800c088:	4610      	mov	r0, r2
 800c08a:	4798      	blx	r3
 800c08c:	60f8      	str	r0, [r7, #12]
    break;
 800c08e:	e112      	b.n	800c2b6 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	7c1b      	ldrb	r3, [r3, #16]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d10d      	bne.n	800c0b4 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c09e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0a0:	f107 0208 	add.w	r2, r7, #8
 800c0a4:	4610      	mov	r0, r2
 800c0a6:	4798      	blx	r3
 800c0a8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	3301      	adds	r3, #1
 800c0ae:	2202      	movs	r2, #2
 800c0b0:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800c0b2:	e100      	b.n	800c2b6 <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0bc:	f107 0208 	add.w	r2, r7, #8
 800c0c0:	4610      	mov	r0, r2
 800c0c2:	4798      	blx	r3
 800c0c4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	3301      	adds	r3, #1
 800c0ca:	2202      	movs	r2, #2
 800c0cc:	701a      	strb	r2, [r3, #0]
    break;
 800c0ce:	e0f2      	b.n	800c2b6 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800c0d0:	683b      	ldr	r3, [r7, #0]
 800c0d2:	885b      	ldrh	r3, [r3, #2]
 800c0d4:	b2db      	uxtb	r3, r3
 800c0d6:	2b05      	cmp	r3, #5
 800c0d8:	f200 80ac 	bhi.w	800c234 <USBD_GetDescriptor+0x258>
 800c0dc:	a201      	add	r2, pc, #4	; (adr r2, 800c0e4 <USBD_GetDescriptor+0x108>)
 800c0de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0e2:	bf00      	nop
 800c0e4:	0800c0fd 	.word	0x0800c0fd
 800c0e8:	0800c131 	.word	0x0800c131
 800c0ec:	0800c165 	.word	0x0800c165
 800c0f0:	0800c199 	.word	0x0800c199
 800c0f4:	0800c1cd 	.word	0x0800c1cd
 800c0f8:	0800c201 	.word	0x0800c201
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c102:	685b      	ldr	r3, [r3, #4]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d00b      	beq.n	800c120 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c10e:	685b      	ldr	r3, [r3, #4]
 800c110:	687a      	ldr	r2, [r7, #4]
 800c112:	7c12      	ldrb	r2, [r2, #16]
 800c114:	f107 0108 	add.w	r1, r7, #8
 800c118:	4610      	mov	r0, r2
 800c11a:	4798      	blx	r3
 800c11c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c11e:	e091      	b.n	800c244 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800c120:	6839      	ldr	r1, [r7, #0]
 800c122:	6878      	ldr	r0, [r7, #4]
 800c124:	f000 faad 	bl	800c682 <USBD_CtlError>
        err++;
 800c128:	7afb      	ldrb	r3, [r7, #11]
 800c12a:	3301      	adds	r3, #1
 800c12c:	72fb      	strb	r3, [r7, #11]
      break;
 800c12e:	e089      	b.n	800c244 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c136:	689b      	ldr	r3, [r3, #8]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d00b      	beq.n	800c154 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c142:	689b      	ldr	r3, [r3, #8]
 800c144:	687a      	ldr	r2, [r7, #4]
 800c146:	7c12      	ldrb	r2, [r2, #16]
 800c148:	f107 0108 	add.w	r1, r7, #8
 800c14c:	4610      	mov	r0, r2
 800c14e:	4798      	blx	r3
 800c150:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c152:	e077      	b.n	800c244 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800c154:	6839      	ldr	r1, [r7, #0]
 800c156:	6878      	ldr	r0, [r7, #4]
 800c158:	f000 fa93 	bl	800c682 <USBD_CtlError>
        err++;
 800c15c:	7afb      	ldrb	r3, [r7, #11]
 800c15e:	3301      	adds	r3, #1
 800c160:	72fb      	strb	r3, [r7, #11]
      break;
 800c162:	e06f      	b.n	800c244 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c16a:	68db      	ldr	r3, [r3, #12]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d00b      	beq.n	800c188 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c176:	68db      	ldr	r3, [r3, #12]
 800c178:	687a      	ldr	r2, [r7, #4]
 800c17a:	7c12      	ldrb	r2, [r2, #16]
 800c17c:	f107 0108 	add.w	r1, r7, #8
 800c180:	4610      	mov	r0, r2
 800c182:	4798      	blx	r3
 800c184:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c186:	e05d      	b.n	800c244 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800c188:	6839      	ldr	r1, [r7, #0]
 800c18a:	6878      	ldr	r0, [r7, #4]
 800c18c:	f000 fa79 	bl	800c682 <USBD_CtlError>
        err++;
 800c190:	7afb      	ldrb	r3, [r7, #11]
 800c192:	3301      	adds	r3, #1
 800c194:	72fb      	strb	r3, [r7, #11]
      break;
 800c196:	e055      	b.n	800c244 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c19e:	691b      	ldr	r3, [r3, #16]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d00b      	beq.n	800c1bc <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c1aa:	691b      	ldr	r3, [r3, #16]
 800c1ac:	687a      	ldr	r2, [r7, #4]
 800c1ae:	7c12      	ldrb	r2, [r2, #16]
 800c1b0:	f107 0108 	add.w	r1, r7, #8
 800c1b4:	4610      	mov	r0, r2
 800c1b6:	4798      	blx	r3
 800c1b8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c1ba:	e043      	b.n	800c244 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800c1bc:	6839      	ldr	r1, [r7, #0]
 800c1be:	6878      	ldr	r0, [r7, #4]
 800c1c0:	f000 fa5f 	bl	800c682 <USBD_CtlError>
        err++;
 800c1c4:	7afb      	ldrb	r3, [r7, #11]
 800c1c6:	3301      	adds	r3, #1
 800c1c8:	72fb      	strb	r3, [r7, #11]
      break;
 800c1ca:	e03b      	b.n	800c244 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c1d2:	695b      	ldr	r3, [r3, #20]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d00b      	beq.n	800c1f0 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c1de:	695b      	ldr	r3, [r3, #20]
 800c1e0:	687a      	ldr	r2, [r7, #4]
 800c1e2:	7c12      	ldrb	r2, [r2, #16]
 800c1e4:	f107 0108 	add.w	r1, r7, #8
 800c1e8:	4610      	mov	r0, r2
 800c1ea:	4798      	blx	r3
 800c1ec:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c1ee:	e029      	b.n	800c244 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800c1f0:	6839      	ldr	r1, [r7, #0]
 800c1f2:	6878      	ldr	r0, [r7, #4]
 800c1f4:	f000 fa45 	bl	800c682 <USBD_CtlError>
        err++;
 800c1f8:	7afb      	ldrb	r3, [r7, #11]
 800c1fa:	3301      	adds	r3, #1
 800c1fc:	72fb      	strb	r3, [r7, #11]
      break;
 800c1fe:	e021      	b.n	800c244 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c206:	699b      	ldr	r3, [r3, #24]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d00b      	beq.n	800c224 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c212:	699b      	ldr	r3, [r3, #24]
 800c214:	687a      	ldr	r2, [r7, #4]
 800c216:	7c12      	ldrb	r2, [r2, #16]
 800c218:	f107 0108 	add.w	r1, r7, #8
 800c21c:	4610      	mov	r0, r2
 800c21e:	4798      	blx	r3
 800c220:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c222:	e00f      	b.n	800c244 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800c224:	6839      	ldr	r1, [r7, #0]
 800c226:	6878      	ldr	r0, [r7, #4]
 800c228:	f000 fa2b 	bl	800c682 <USBD_CtlError>
        err++;
 800c22c:	7afb      	ldrb	r3, [r7, #11]
 800c22e:	3301      	adds	r3, #1
 800c230:	72fb      	strb	r3, [r7, #11]
      break;
 800c232:	e007      	b.n	800c244 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800c234:	6839      	ldr	r1, [r7, #0]
 800c236:	6878      	ldr	r0, [r7, #4]
 800c238:	f000 fa23 	bl	800c682 <USBD_CtlError>
      err++;
 800c23c:	7afb      	ldrb	r3, [r7, #11]
 800c23e:	3301      	adds	r3, #1
 800c240:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800c242:	bf00      	nop
    }
    break;
 800c244:	e037      	b.n	800c2b6 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	7c1b      	ldrb	r3, [r3, #16]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d109      	bne.n	800c262 <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c256:	f107 0208 	add.w	r2, r7, #8
 800c25a:	4610      	mov	r0, r2
 800c25c:	4798      	blx	r3
 800c25e:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800c260:	e029      	b.n	800c2b6 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800c262:	6839      	ldr	r1, [r7, #0]
 800c264:	6878      	ldr	r0, [r7, #4]
 800c266:	f000 fa0c 	bl	800c682 <USBD_CtlError>
      err++;
 800c26a:	7afb      	ldrb	r3, [r7, #11]
 800c26c:	3301      	adds	r3, #1
 800c26e:	72fb      	strb	r3, [r7, #11]
    break;
 800c270:	e021      	b.n	800c2b6 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	7c1b      	ldrb	r3, [r3, #16]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d10d      	bne.n	800c296 <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c282:	f107 0208 	add.w	r2, r7, #8
 800c286:	4610      	mov	r0, r2
 800c288:	4798      	blx	r3
 800c28a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	3301      	adds	r3, #1
 800c290:	2207      	movs	r2, #7
 800c292:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800c294:	e00f      	b.n	800c2b6 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800c296:	6839      	ldr	r1, [r7, #0]
 800c298:	6878      	ldr	r0, [r7, #4]
 800c29a:	f000 f9f2 	bl	800c682 <USBD_CtlError>
      err++;
 800c29e:	7afb      	ldrb	r3, [r7, #11]
 800c2a0:	3301      	adds	r3, #1
 800c2a2:	72fb      	strb	r3, [r7, #11]
    break;
 800c2a4:	e007      	b.n	800c2b6 <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 800c2a6:	6839      	ldr	r1, [r7, #0]
 800c2a8:	6878      	ldr	r0, [r7, #4]
 800c2aa:	f000 f9ea 	bl	800c682 <USBD_CtlError>
    err++;
 800c2ae:	7afb      	ldrb	r3, [r7, #11]
 800c2b0:	3301      	adds	r3, #1
 800c2b2:	72fb      	strb	r3, [r7, #11]
    break;
 800c2b4:	bf00      	nop
  }

  if (err != 0U)
 800c2b6:	7afb      	ldrb	r3, [r7, #11]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d11e      	bne.n	800c2fa <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800c2bc:	683b      	ldr	r3, [r7, #0]
 800c2be:	88db      	ldrh	r3, [r3, #6]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d016      	beq.n	800c2f2 <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 800c2c4:	893b      	ldrh	r3, [r7, #8]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d00e      	beq.n	800c2e8 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 800c2ca:	683b      	ldr	r3, [r7, #0]
 800c2cc:	88da      	ldrh	r2, [r3, #6]
 800c2ce:	893b      	ldrh	r3, [r7, #8]
 800c2d0:	4293      	cmp	r3, r2
 800c2d2:	bf28      	it	cs
 800c2d4:	4613      	movcs	r3, r2
 800c2d6:	b29b      	uxth	r3, r3
 800c2d8:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800c2da:	893b      	ldrh	r3, [r7, #8]
 800c2dc:	461a      	mov	r2, r3
 800c2de:	68f9      	ldr	r1, [r7, #12]
 800c2e0:	6878      	ldr	r0, [r7, #4]
 800c2e2:	f000 fa3f 	bl	800c764 <USBD_CtlSendData>
 800c2e6:	e009      	b.n	800c2fc <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800c2e8:	6839      	ldr	r1, [r7, #0]
 800c2ea:	6878      	ldr	r0, [r7, #4]
 800c2ec:	f000 f9c9 	bl	800c682 <USBD_CtlError>
 800c2f0:	e004      	b.n	800c2fc <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800c2f2:	6878      	ldr	r0, [r7, #4]
 800c2f4:	f000 fa90 	bl	800c818 <USBD_CtlSendStatus>
 800c2f8:	e000      	b.n	800c2fc <USBD_GetDescriptor+0x320>
    return;
 800c2fa:	bf00      	nop
    }
  }
}
 800c2fc:	3710      	adds	r7, #16
 800c2fe:	46bd      	mov	sp, r7
 800c300:	bd80      	pop	{r7, pc}
 800c302:	bf00      	nop

0800c304 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c304:	b580      	push	{r7, lr}
 800c306:	b084      	sub	sp, #16
 800c308:	af00      	add	r7, sp, #0
 800c30a:	6078      	str	r0, [r7, #4]
 800c30c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c30e:	683b      	ldr	r3, [r7, #0]
 800c310:	889b      	ldrh	r3, [r3, #4]
 800c312:	2b00      	cmp	r3, #0
 800c314:	d130      	bne.n	800c378 <USBD_SetAddress+0x74>
 800c316:	683b      	ldr	r3, [r7, #0]
 800c318:	88db      	ldrh	r3, [r3, #6]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d12c      	bne.n	800c378 <USBD_SetAddress+0x74>
 800c31e:	683b      	ldr	r3, [r7, #0]
 800c320:	885b      	ldrh	r3, [r3, #2]
 800c322:	2b7f      	cmp	r3, #127	; 0x7f
 800c324:	d828      	bhi.n	800c378 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c326:	683b      	ldr	r3, [r7, #0]
 800c328:	885b      	ldrh	r3, [r3, #2]
 800c32a:	b2db      	uxtb	r3, r3
 800c32c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c330:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c338:	2b03      	cmp	r3, #3
 800c33a:	d104      	bne.n	800c346 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800c33c:	6839      	ldr	r1, [r7, #0]
 800c33e:	6878      	ldr	r0, [r7, #4]
 800c340:	f000 f99f 	bl	800c682 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c344:	e01d      	b.n	800c382 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	7bfa      	ldrb	r2, [r7, #15]
 800c34a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c34e:	7bfb      	ldrb	r3, [r7, #15]
 800c350:	4619      	mov	r1, r3
 800c352:	6878      	ldr	r0, [r7, #4]
 800c354:	f004 f9ac 	bl	80106b0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c358:	6878      	ldr	r0, [r7, #4]
 800c35a:	f000 fa5d 	bl	800c818 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c35e:	7bfb      	ldrb	r3, [r7, #15]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d004      	beq.n	800c36e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	2202      	movs	r2, #2
 800c368:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c36c:	e009      	b.n	800c382 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	2201      	movs	r2, #1
 800c372:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c376:	e004      	b.n	800c382 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c378:	6839      	ldr	r1, [r7, #0]
 800c37a:	6878      	ldr	r0, [r7, #4]
 800c37c:	f000 f981 	bl	800c682 <USBD_CtlError>
  }
}
 800c380:	bf00      	nop
 800c382:	bf00      	nop
 800c384:	3710      	adds	r7, #16
 800c386:	46bd      	mov	sp, r7
 800c388:	bd80      	pop	{r7, pc}
	...

0800c38c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c38c:	b580      	push	{r7, lr}
 800c38e:	b084      	sub	sp, #16
 800c390:	af00      	add	r7, sp, #0
 800c392:	6078      	str	r0, [r7, #4]
 800c394:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c396:	2300      	movs	r3, #0
 800c398:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c39a:	683b      	ldr	r3, [r7, #0]
 800c39c:	885b      	ldrh	r3, [r3, #2]
 800c39e:	b2da      	uxtb	r2, r3
 800c3a0:	4b4b      	ldr	r3, [pc, #300]	; (800c4d0 <USBD_SetConfig+0x144>)
 800c3a2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c3a4:	4b4a      	ldr	r3, [pc, #296]	; (800c4d0 <USBD_SetConfig+0x144>)
 800c3a6:	781b      	ldrb	r3, [r3, #0]
 800c3a8:	2b03      	cmp	r3, #3
 800c3aa:	d905      	bls.n	800c3b8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c3ac:	6839      	ldr	r1, [r7, #0]
 800c3ae:	6878      	ldr	r0, [r7, #4]
 800c3b0:	f000 f967 	bl	800c682 <USBD_CtlError>
    return USBD_FAIL;
 800c3b4:	2303      	movs	r3, #3
 800c3b6:	e087      	b.n	800c4c8 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c3be:	2b02      	cmp	r3, #2
 800c3c0:	d002      	beq.n	800c3c8 <USBD_SetConfig+0x3c>
 800c3c2:	2b03      	cmp	r3, #3
 800c3c4:	d025      	beq.n	800c412 <USBD_SetConfig+0x86>
 800c3c6:	e071      	b.n	800c4ac <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800c3c8:	4b41      	ldr	r3, [pc, #260]	; (800c4d0 <USBD_SetConfig+0x144>)
 800c3ca:	781b      	ldrb	r3, [r3, #0]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d01c      	beq.n	800c40a <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800c3d0:	4b3f      	ldr	r3, [pc, #252]	; (800c4d0 <USBD_SetConfig+0x144>)
 800c3d2:	781b      	ldrb	r3, [r3, #0]
 800c3d4:	461a      	mov	r2, r3
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800c3da:	4b3d      	ldr	r3, [pc, #244]	; (800c4d0 <USBD_SetConfig+0x144>)
 800c3dc:	781b      	ldrb	r3, [r3, #0]
 800c3de:	4619      	mov	r1, r3
 800c3e0:	6878      	ldr	r0, [r7, #4]
 800c3e2:	f7ff f96f 	bl	800b6c4 <USBD_SetClassConfig>
 800c3e6:	4603      	mov	r3, r0
 800c3e8:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800c3ea:	7bfb      	ldrb	r3, [r7, #15]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d004      	beq.n	800c3fa <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800c3f0:	6839      	ldr	r1, [r7, #0]
 800c3f2:	6878      	ldr	r0, [r7, #4]
 800c3f4:	f000 f945 	bl	800c682 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800c3f8:	e065      	b.n	800c4c6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800c3fa:	6878      	ldr	r0, [r7, #4]
 800c3fc:	f000 fa0c 	bl	800c818 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	2203      	movs	r2, #3
 800c404:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800c408:	e05d      	b.n	800c4c6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800c40a:	6878      	ldr	r0, [r7, #4]
 800c40c:	f000 fa04 	bl	800c818 <USBD_CtlSendStatus>
    break;
 800c410:	e059      	b.n	800c4c6 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800c412:	4b2f      	ldr	r3, [pc, #188]	; (800c4d0 <USBD_SetConfig+0x144>)
 800c414:	781b      	ldrb	r3, [r3, #0]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d112      	bne.n	800c440 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	2202      	movs	r2, #2
 800c41e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800c422:	4b2b      	ldr	r3, [pc, #172]	; (800c4d0 <USBD_SetConfig+0x144>)
 800c424:	781b      	ldrb	r3, [r3, #0]
 800c426:	461a      	mov	r2, r3
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c42c:	4b28      	ldr	r3, [pc, #160]	; (800c4d0 <USBD_SetConfig+0x144>)
 800c42e:	781b      	ldrb	r3, [r3, #0]
 800c430:	4619      	mov	r1, r3
 800c432:	6878      	ldr	r0, [r7, #4]
 800c434:	f7ff f962 	bl	800b6fc <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800c438:	6878      	ldr	r0, [r7, #4]
 800c43a:	f000 f9ed 	bl	800c818 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800c43e:	e042      	b.n	800c4c6 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800c440:	4b23      	ldr	r3, [pc, #140]	; (800c4d0 <USBD_SetConfig+0x144>)
 800c442:	781b      	ldrb	r3, [r3, #0]
 800c444:	461a      	mov	r2, r3
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	685b      	ldr	r3, [r3, #4]
 800c44a:	429a      	cmp	r2, r3
 800c44c:	d02a      	beq.n	800c4a4 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	685b      	ldr	r3, [r3, #4]
 800c452:	b2db      	uxtb	r3, r3
 800c454:	4619      	mov	r1, r3
 800c456:	6878      	ldr	r0, [r7, #4]
 800c458:	f7ff f950 	bl	800b6fc <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800c45c:	4b1c      	ldr	r3, [pc, #112]	; (800c4d0 <USBD_SetConfig+0x144>)
 800c45e:	781b      	ldrb	r3, [r3, #0]
 800c460:	461a      	mov	r2, r3
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800c466:	4b1a      	ldr	r3, [pc, #104]	; (800c4d0 <USBD_SetConfig+0x144>)
 800c468:	781b      	ldrb	r3, [r3, #0]
 800c46a:	4619      	mov	r1, r3
 800c46c:	6878      	ldr	r0, [r7, #4]
 800c46e:	f7ff f929 	bl	800b6c4 <USBD_SetClassConfig>
 800c472:	4603      	mov	r3, r0
 800c474:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800c476:	7bfb      	ldrb	r3, [r7, #15]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d00f      	beq.n	800c49c <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800c47c:	6839      	ldr	r1, [r7, #0]
 800c47e:	6878      	ldr	r0, [r7, #4]
 800c480:	f000 f8ff 	bl	800c682 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	685b      	ldr	r3, [r3, #4]
 800c488:	b2db      	uxtb	r3, r3
 800c48a:	4619      	mov	r1, r3
 800c48c:	6878      	ldr	r0, [r7, #4]
 800c48e:	f7ff f935 	bl	800b6fc <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	2202      	movs	r2, #2
 800c496:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800c49a:	e014      	b.n	800c4c6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800c49c:	6878      	ldr	r0, [r7, #4]
 800c49e:	f000 f9bb 	bl	800c818 <USBD_CtlSendStatus>
    break;
 800c4a2:	e010      	b.n	800c4c6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800c4a4:	6878      	ldr	r0, [r7, #4]
 800c4a6:	f000 f9b7 	bl	800c818 <USBD_CtlSendStatus>
    break;
 800c4aa:	e00c      	b.n	800c4c6 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800c4ac:	6839      	ldr	r1, [r7, #0]
 800c4ae:	6878      	ldr	r0, [r7, #4]
 800c4b0:	f000 f8e7 	bl	800c682 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c4b4:	4b06      	ldr	r3, [pc, #24]	; (800c4d0 <USBD_SetConfig+0x144>)
 800c4b6:	781b      	ldrb	r3, [r3, #0]
 800c4b8:	4619      	mov	r1, r3
 800c4ba:	6878      	ldr	r0, [r7, #4]
 800c4bc:	f7ff f91e 	bl	800b6fc <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800c4c0:	2303      	movs	r3, #3
 800c4c2:	73fb      	strb	r3, [r7, #15]
    break;
 800c4c4:	bf00      	nop
  }

  return ret;
 800c4c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	3710      	adds	r7, #16
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	bd80      	pop	{r7, pc}
 800c4d0:	20000ac0 	.word	0x20000ac0

0800c4d4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b082      	sub	sp, #8
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
 800c4dc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c4de:	683b      	ldr	r3, [r7, #0]
 800c4e0:	88db      	ldrh	r3, [r3, #6]
 800c4e2:	2b01      	cmp	r3, #1
 800c4e4:	d004      	beq.n	800c4f0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c4e6:	6839      	ldr	r1, [r7, #0]
 800c4e8:	6878      	ldr	r0, [r7, #4]
 800c4ea:	f000 f8ca 	bl	800c682 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800c4ee:	e022      	b.n	800c536 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c4f6:	2b02      	cmp	r3, #2
 800c4f8:	dc02      	bgt.n	800c500 <USBD_GetConfig+0x2c>
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	dc03      	bgt.n	800c506 <USBD_GetConfig+0x32>
 800c4fe:	e015      	b.n	800c52c <USBD_GetConfig+0x58>
 800c500:	2b03      	cmp	r3, #3
 800c502:	d00b      	beq.n	800c51c <USBD_GetConfig+0x48>
 800c504:	e012      	b.n	800c52c <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	2200      	movs	r2, #0
 800c50a:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	3308      	adds	r3, #8
 800c510:	2201      	movs	r2, #1
 800c512:	4619      	mov	r1, r3
 800c514:	6878      	ldr	r0, [r7, #4]
 800c516:	f000 f925 	bl	800c764 <USBD_CtlSendData>
      break;
 800c51a:	e00c      	b.n	800c536 <USBD_GetConfig+0x62>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	3304      	adds	r3, #4
 800c520:	2201      	movs	r2, #1
 800c522:	4619      	mov	r1, r3
 800c524:	6878      	ldr	r0, [r7, #4]
 800c526:	f000 f91d 	bl	800c764 <USBD_CtlSendData>
      break;
 800c52a:	e004      	b.n	800c536 <USBD_GetConfig+0x62>
      USBD_CtlError(pdev, req);
 800c52c:	6839      	ldr	r1, [r7, #0]
 800c52e:	6878      	ldr	r0, [r7, #4]
 800c530:	f000 f8a7 	bl	800c682 <USBD_CtlError>
      break;
 800c534:	bf00      	nop
}
 800c536:	bf00      	nop
 800c538:	3708      	adds	r7, #8
 800c53a:	46bd      	mov	sp, r7
 800c53c:	bd80      	pop	{r7, pc}

0800c53e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c53e:	b580      	push	{r7, lr}
 800c540:	b082      	sub	sp, #8
 800c542:	af00      	add	r7, sp, #0
 800c544:	6078      	str	r0, [r7, #4]
 800c546:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c54e:	3b01      	subs	r3, #1
 800c550:	2b02      	cmp	r3, #2
 800c552:	d81e      	bhi.n	800c592 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800c554:	683b      	ldr	r3, [r7, #0]
 800c556:	88db      	ldrh	r3, [r3, #6]
 800c558:	2b02      	cmp	r3, #2
 800c55a:	d004      	beq.n	800c566 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800c55c:	6839      	ldr	r1, [r7, #0]
 800c55e:	6878      	ldr	r0, [r7, #4]
 800c560:	f000 f88f 	bl	800c682 <USBD_CtlError>
      break;
 800c564:	e01a      	b.n	800c59c <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	2201      	movs	r2, #1
 800c56a:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c572:	2b00      	cmp	r3, #0
 800c574:	d005      	beq.n	800c582 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	68db      	ldr	r3, [r3, #12]
 800c57a:	f043 0202 	orr.w	r2, r3, #2
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	330c      	adds	r3, #12
 800c586:	2202      	movs	r2, #2
 800c588:	4619      	mov	r1, r3
 800c58a:	6878      	ldr	r0, [r7, #4]
 800c58c:	f000 f8ea 	bl	800c764 <USBD_CtlSendData>
    break;
 800c590:	e004      	b.n	800c59c <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800c592:	6839      	ldr	r1, [r7, #0]
 800c594:	6878      	ldr	r0, [r7, #4]
 800c596:	f000 f874 	bl	800c682 <USBD_CtlError>
    break;
 800c59a:	bf00      	nop
  }
}
 800c59c:	bf00      	nop
 800c59e:	3708      	adds	r7, #8
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	bd80      	pop	{r7, pc}

0800c5a4 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b082      	sub	sp, #8
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
 800c5ac:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c5ae:	683b      	ldr	r3, [r7, #0]
 800c5b0:	885b      	ldrh	r3, [r3, #2]
 800c5b2:	2b01      	cmp	r3, #1
 800c5b4:	d106      	bne.n	800c5c4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	2201      	movs	r2, #1
 800c5ba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c5be:	6878      	ldr	r0, [r7, #4]
 800c5c0:	f000 f92a 	bl	800c818 <USBD_CtlSendStatus>
  }
}
 800c5c4:	bf00      	nop
 800c5c6:	3708      	adds	r7, #8
 800c5c8:	46bd      	mov	sp, r7
 800c5ca:	bd80      	pop	{r7, pc}

0800c5cc <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c5cc:	b580      	push	{r7, lr}
 800c5ce:	b082      	sub	sp, #8
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	6078      	str	r0, [r7, #4]
 800c5d4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c5dc:	3b01      	subs	r3, #1
 800c5de:	2b02      	cmp	r3, #2
 800c5e0:	d80b      	bhi.n	800c5fa <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c5e2:	683b      	ldr	r3, [r7, #0]
 800c5e4:	885b      	ldrh	r3, [r3, #2]
 800c5e6:	2b01      	cmp	r3, #1
 800c5e8:	d10c      	bne.n	800c604 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	2200      	movs	r2, #0
 800c5ee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c5f2:	6878      	ldr	r0, [r7, #4]
 800c5f4:	f000 f910 	bl	800c818 <USBD_CtlSendStatus>
      }
      break;
 800c5f8:	e004      	b.n	800c604 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800c5fa:	6839      	ldr	r1, [r7, #0]
 800c5fc:	6878      	ldr	r0, [r7, #4]
 800c5fe:	f000 f840 	bl	800c682 <USBD_CtlError>
      break;
 800c602:	e000      	b.n	800c606 <USBD_ClrFeature+0x3a>
      break;
 800c604:	bf00      	nop
  }
}
 800c606:	bf00      	nop
 800c608:	3708      	adds	r7, #8
 800c60a:	46bd      	mov	sp, r7
 800c60c:	bd80      	pop	{r7, pc}

0800c60e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c60e:	b580      	push	{r7, lr}
 800c610:	b084      	sub	sp, #16
 800c612:	af00      	add	r7, sp, #0
 800c614:	6078      	str	r0, [r7, #4]
 800c616:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c618:	683b      	ldr	r3, [r7, #0]
 800c61a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	781a      	ldrb	r2, [r3, #0]
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	3301      	adds	r3, #1
 800c628:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	781a      	ldrb	r2, [r3, #0]
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	3301      	adds	r3, #1
 800c636:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c638:	68f8      	ldr	r0, [r7, #12]
 800c63a:	f7ff fa9c 	bl	800bb76 <SWAPBYTE>
 800c63e:	4603      	mov	r3, r0
 800c640:	461a      	mov	r2, r3
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	3301      	adds	r3, #1
 800c64a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	3301      	adds	r3, #1
 800c650:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c652:	68f8      	ldr	r0, [r7, #12]
 800c654:	f7ff fa8f 	bl	800bb76 <SWAPBYTE>
 800c658:	4603      	mov	r3, r0
 800c65a:	461a      	mov	r2, r3
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	3301      	adds	r3, #1
 800c664:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	3301      	adds	r3, #1
 800c66a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c66c:	68f8      	ldr	r0, [r7, #12]
 800c66e:	f7ff fa82 	bl	800bb76 <SWAPBYTE>
 800c672:	4603      	mov	r3, r0
 800c674:	461a      	mov	r2, r3
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	80da      	strh	r2, [r3, #6]
}
 800c67a:	bf00      	nop
 800c67c:	3710      	adds	r7, #16
 800c67e:	46bd      	mov	sp, r7
 800c680:	bd80      	pop	{r7, pc}

0800c682 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c682:	b580      	push	{r7, lr}
 800c684:	b082      	sub	sp, #8
 800c686:	af00      	add	r7, sp, #0
 800c688:	6078      	str	r0, [r7, #4]
 800c68a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c68c:	2180      	movs	r1, #128	; 0x80
 800c68e:	6878      	ldr	r0, [r7, #4]
 800c690:	f003 ffa4 	bl	80105dc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c694:	2100      	movs	r1, #0
 800c696:	6878      	ldr	r0, [r7, #4]
 800c698:	f003 ffa0 	bl	80105dc <USBD_LL_StallEP>
}
 800c69c:	bf00      	nop
 800c69e:	3708      	adds	r7, #8
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	bd80      	pop	{r7, pc}

0800c6a4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c6a4:	b580      	push	{r7, lr}
 800c6a6:	b086      	sub	sp, #24
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	60f8      	str	r0, [r7, #12]
 800c6ac:	60b9      	str	r1, [r7, #8]
 800c6ae:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d036      	beq.n	800c728 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c6be:	6938      	ldr	r0, [r7, #16]
 800c6c0:	f000 f836 	bl	800c730 <USBD_GetLen>
 800c6c4:	4603      	mov	r3, r0
 800c6c6:	3301      	adds	r3, #1
 800c6c8:	b29b      	uxth	r3, r3
 800c6ca:	005b      	lsls	r3, r3, #1
 800c6cc:	b29a      	uxth	r2, r3
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c6d2:	7dfb      	ldrb	r3, [r7, #23]
 800c6d4:	68ba      	ldr	r2, [r7, #8]
 800c6d6:	4413      	add	r3, r2
 800c6d8:	687a      	ldr	r2, [r7, #4]
 800c6da:	7812      	ldrb	r2, [r2, #0]
 800c6dc:	701a      	strb	r2, [r3, #0]
  idx++;
 800c6de:	7dfb      	ldrb	r3, [r7, #23]
 800c6e0:	3301      	adds	r3, #1
 800c6e2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c6e4:	7dfb      	ldrb	r3, [r7, #23]
 800c6e6:	68ba      	ldr	r2, [r7, #8]
 800c6e8:	4413      	add	r3, r2
 800c6ea:	2203      	movs	r2, #3
 800c6ec:	701a      	strb	r2, [r3, #0]
  idx++;
 800c6ee:	7dfb      	ldrb	r3, [r7, #23]
 800c6f0:	3301      	adds	r3, #1
 800c6f2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c6f4:	e013      	b.n	800c71e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c6f6:	7dfb      	ldrb	r3, [r7, #23]
 800c6f8:	68ba      	ldr	r2, [r7, #8]
 800c6fa:	4413      	add	r3, r2
 800c6fc:	693a      	ldr	r2, [r7, #16]
 800c6fe:	7812      	ldrb	r2, [r2, #0]
 800c700:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c702:	693b      	ldr	r3, [r7, #16]
 800c704:	3301      	adds	r3, #1
 800c706:	613b      	str	r3, [r7, #16]
    idx++;
 800c708:	7dfb      	ldrb	r3, [r7, #23]
 800c70a:	3301      	adds	r3, #1
 800c70c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c70e:	7dfb      	ldrb	r3, [r7, #23]
 800c710:	68ba      	ldr	r2, [r7, #8]
 800c712:	4413      	add	r3, r2
 800c714:	2200      	movs	r2, #0
 800c716:	701a      	strb	r2, [r3, #0]
    idx++;
 800c718:	7dfb      	ldrb	r3, [r7, #23]
 800c71a:	3301      	adds	r3, #1
 800c71c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c71e:	693b      	ldr	r3, [r7, #16]
 800c720:	781b      	ldrb	r3, [r3, #0]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d1e7      	bne.n	800c6f6 <USBD_GetString+0x52>
 800c726:	e000      	b.n	800c72a <USBD_GetString+0x86>
    return;
 800c728:	bf00      	nop
  }
}
 800c72a:	3718      	adds	r7, #24
 800c72c:	46bd      	mov	sp, r7
 800c72e:	bd80      	pop	{r7, pc}

0800c730 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c730:	b480      	push	{r7}
 800c732:	b085      	sub	sp, #20
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c738:	2300      	movs	r3, #0
 800c73a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c740:	e005      	b.n	800c74e <USBD_GetLen+0x1e>
  {
    len++;
 800c742:	7bfb      	ldrb	r3, [r7, #15]
 800c744:	3301      	adds	r3, #1
 800c746:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c748:	68bb      	ldr	r3, [r7, #8]
 800c74a:	3301      	adds	r3, #1
 800c74c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c74e:	68bb      	ldr	r3, [r7, #8]
 800c750:	781b      	ldrb	r3, [r3, #0]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d1f5      	bne.n	800c742 <USBD_GetLen+0x12>
  }

  return len;
 800c756:	7bfb      	ldrb	r3, [r7, #15]
}
 800c758:	4618      	mov	r0, r3
 800c75a:	3714      	adds	r7, #20
 800c75c:	46bd      	mov	sp, r7
 800c75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c762:	4770      	bx	lr

0800c764 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b084      	sub	sp, #16
 800c768:	af00      	add	r7, sp, #0
 800c76a:	60f8      	str	r0, [r7, #12]
 800c76c:	60b9      	str	r1, [r7, #8]
 800c76e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	2202      	movs	r2, #2
 800c774:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	687a      	ldr	r2, [r7, #4]
 800c77c:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	687a      	ldr	r2, [r7, #4]
 800c782:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	68ba      	ldr	r2, [r7, #8]
 800c788:	2100      	movs	r1, #0
 800c78a:	68f8      	ldr	r0, [r7, #12]
 800c78c:	f003 ffaf 	bl	80106ee <USBD_LL_Transmit>

  return USBD_OK;
 800c790:	2300      	movs	r3, #0
}
 800c792:	4618      	mov	r0, r3
 800c794:	3710      	adds	r7, #16
 800c796:	46bd      	mov	sp, r7
 800c798:	bd80      	pop	{r7, pc}

0800c79a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c79a:	b580      	push	{r7, lr}
 800c79c:	b084      	sub	sp, #16
 800c79e:	af00      	add	r7, sp, #0
 800c7a0:	60f8      	str	r0, [r7, #12]
 800c7a2:	60b9      	str	r1, [r7, #8]
 800c7a4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	68ba      	ldr	r2, [r7, #8]
 800c7aa:	2100      	movs	r1, #0
 800c7ac:	68f8      	ldr	r0, [r7, #12]
 800c7ae:	f003 ff9e 	bl	80106ee <USBD_LL_Transmit>

  return USBD_OK;
 800c7b2:	2300      	movs	r3, #0
}
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	3710      	adds	r7, #16
 800c7b8:	46bd      	mov	sp, r7
 800c7ba:	bd80      	pop	{r7, pc}

0800c7bc <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	b084      	sub	sp, #16
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	60f8      	str	r0, [r7, #12]
 800c7c4:	60b9      	str	r1, [r7, #8]
 800c7c6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	2203      	movs	r2, #3
 800c7cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	687a      	ldr	r2, [r7, #4]
 800c7d4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	687a      	ldr	r2, [r7, #4]
 800c7dc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	68ba      	ldr	r2, [r7, #8]
 800c7e4:	2100      	movs	r1, #0
 800c7e6:	68f8      	ldr	r0, [r7, #12]
 800c7e8:	f003 ffa2 	bl	8010730 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c7ec:	2300      	movs	r3, #0
}
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	3710      	adds	r7, #16
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	bd80      	pop	{r7, pc}

0800c7f6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c7f6:	b580      	push	{r7, lr}
 800c7f8:	b084      	sub	sp, #16
 800c7fa:	af00      	add	r7, sp, #0
 800c7fc:	60f8      	str	r0, [r7, #12]
 800c7fe:	60b9      	str	r1, [r7, #8]
 800c800:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	68ba      	ldr	r2, [r7, #8]
 800c806:	2100      	movs	r1, #0
 800c808:	68f8      	ldr	r0, [r7, #12]
 800c80a:	f003 ff91 	bl	8010730 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c80e:	2300      	movs	r3, #0
}
 800c810:	4618      	mov	r0, r3
 800c812:	3710      	adds	r7, #16
 800c814:	46bd      	mov	sp, r7
 800c816:	bd80      	pop	{r7, pc}

0800c818 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b082      	sub	sp, #8
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	2204      	movs	r2, #4
 800c824:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c828:	2300      	movs	r3, #0
 800c82a:	2200      	movs	r2, #0
 800c82c:	2100      	movs	r1, #0
 800c82e:	6878      	ldr	r0, [r7, #4]
 800c830:	f003 ff5d 	bl	80106ee <USBD_LL_Transmit>

  return USBD_OK;
 800c834:	2300      	movs	r3, #0
}
 800c836:	4618      	mov	r0, r3
 800c838:	3708      	adds	r7, #8
 800c83a:	46bd      	mov	sp, r7
 800c83c:	bd80      	pop	{r7, pc}

0800c83e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c83e:	b580      	push	{r7, lr}
 800c840:	b082      	sub	sp, #8
 800c842:	af00      	add	r7, sp, #0
 800c844:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	2205      	movs	r2, #5
 800c84a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c84e:	2300      	movs	r3, #0
 800c850:	2200      	movs	r2, #0
 800c852:	2100      	movs	r1, #0
 800c854:	6878      	ldr	r0, [r7, #4]
 800c856:	f003 ff6b 	bl	8010730 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c85a:	2300      	movs	r3, #0
}
 800c85c:	4618      	mov	r0, r3
 800c85e:	3708      	adds	r7, #8
 800c860:	46bd      	mov	sp, r7
 800c862:	bd80      	pop	{r7, pc}

0800c864 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b084      	sub	sp, #16
 800c868:	af00      	add	r7, sp, #0
 800c86a:	4603      	mov	r3, r0
 800c86c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800c86e:	79fb      	ldrb	r3, [r7, #7]
 800c870:	4a08      	ldr	r2, [pc, #32]	; (800c894 <disk_status+0x30>)
 800c872:	009b      	lsls	r3, r3, #2
 800c874:	4413      	add	r3, r2
 800c876:	685b      	ldr	r3, [r3, #4]
 800c878:	685b      	ldr	r3, [r3, #4]
 800c87a:	79fa      	ldrb	r2, [r7, #7]
 800c87c:	4905      	ldr	r1, [pc, #20]	; (800c894 <disk_status+0x30>)
 800c87e:	440a      	add	r2, r1
 800c880:	7a12      	ldrb	r2, [r2, #8]
 800c882:	4610      	mov	r0, r2
 800c884:	4798      	blx	r3
 800c886:	4603      	mov	r3, r0
 800c888:	73fb      	strb	r3, [r7, #15]
  return stat;
 800c88a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c88c:	4618      	mov	r0, r3
 800c88e:	3710      	adds	r7, #16
 800c890:	46bd      	mov	sp, r7
 800c892:	bd80      	pop	{r7, pc}
 800c894:	20000cec 	.word	0x20000cec

0800c898 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800c898:	b580      	push	{r7, lr}
 800c89a:	b084      	sub	sp, #16
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	4603      	mov	r3, r0
 800c8a0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800c8a6:	79fb      	ldrb	r3, [r7, #7]
 800c8a8:	4a0d      	ldr	r2, [pc, #52]	; (800c8e0 <disk_initialize+0x48>)
 800c8aa:	5cd3      	ldrb	r3, [r2, r3]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d111      	bne.n	800c8d4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800c8b0:	79fb      	ldrb	r3, [r7, #7]
 800c8b2:	4a0b      	ldr	r2, [pc, #44]	; (800c8e0 <disk_initialize+0x48>)
 800c8b4:	2101      	movs	r1, #1
 800c8b6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800c8b8:	79fb      	ldrb	r3, [r7, #7]
 800c8ba:	4a09      	ldr	r2, [pc, #36]	; (800c8e0 <disk_initialize+0x48>)
 800c8bc:	009b      	lsls	r3, r3, #2
 800c8be:	4413      	add	r3, r2
 800c8c0:	685b      	ldr	r3, [r3, #4]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	79fa      	ldrb	r2, [r7, #7]
 800c8c6:	4906      	ldr	r1, [pc, #24]	; (800c8e0 <disk_initialize+0x48>)
 800c8c8:	440a      	add	r2, r1
 800c8ca:	7a12      	ldrb	r2, [r2, #8]
 800c8cc:	4610      	mov	r0, r2
 800c8ce:	4798      	blx	r3
 800c8d0:	4603      	mov	r3, r0
 800c8d2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800c8d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	3710      	adds	r7, #16
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	bd80      	pop	{r7, pc}
 800c8de:	bf00      	nop
 800c8e0:	20000cec 	.word	0x20000cec

0800c8e4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800c8e4:	b590      	push	{r4, r7, lr}
 800c8e6:	b087      	sub	sp, #28
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	60b9      	str	r1, [r7, #8]
 800c8ec:	607a      	str	r2, [r7, #4]
 800c8ee:	603b      	str	r3, [r7, #0]
 800c8f0:	4603      	mov	r3, r0
 800c8f2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800c8f4:	7bfb      	ldrb	r3, [r7, #15]
 800c8f6:	4a0a      	ldr	r2, [pc, #40]	; (800c920 <disk_read+0x3c>)
 800c8f8:	009b      	lsls	r3, r3, #2
 800c8fa:	4413      	add	r3, r2
 800c8fc:	685b      	ldr	r3, [r3, #4]
 800c8fe:	689c      	ldr	r4, [r3, #8]
 800c900:	7bfb      	ldrb	r3, [r7, #15]
 800c902:	4a07      	ldr	r2, [pc, #28]	; (800c920 <disk_read+0x3c>)
 800c904:	4413      	add	r3, r2
 800c906:	7a18      	ldrb	r0, [r3, #8]
 800c908:	683b      	ldr	r3, [r7, #0]
 800c90a:	687a      	ldr	r2, [r7, #4]
 800c90c:	68b9      	ldr	r1, [r7, #8]
 800c90e:	47a0      	blx	r4
 800c910:	4603      	mov	r3, r0
 800c912:	75fb      	strb	r3, [r7, #23]
  return res;
 800c914:	7dfb      	ldrb	r3, [r7, #23]
}
 800c916:	4618      	mov	r0, r3
 800c918:	371c      	adds	r7, #28
 800c91a:	46bd      	mov	sp, r7
 800c91c:	bd90      	pop	{r4, r7, pc}
 800c91e:	bf00      	nop
 800c920:	20000cec 	.word	0x20000cec

0800c924 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800c924:	b590      	push	{r4, r7, lr}
 800c926:	b087      	sub	sp, #28
 800c928:	af00      	add	r7, sp, #0
 800c92a:	60b9      	str	r1, [r7, #8]
 800c92c:	607a      	str	r2, [r7, #4]
 800c92e:	603b      	str	r3, [r7, #0]
 800c930:	4603      	mov	r3, r0
 800c932:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c934:	7bfb      	ldrb	r3, [r7, #15]
 800c936:	4a0a      	ldr	r2, [pc, #40]	; (800c960 <disk_write+0x3c>)
 800c938:	009b      	lsls	r3, r3, #2
 800c93a:	4413      	add	r3, r2
 800c93c:	685b      	ldr	r3, [r3, #4]
 800c93e:	68dc      	ldr	r4, [r3, #12]
 800c940:	7bfb      	ldrb	r3, [r7, #15]
 800c942:	4a07      	ldr	r2, [pc, #28]	; (800c960 <disk_write+0x3c>)
 800c944:	4413      	add	r3, r2
 800c946:	7a18      	ldrb	r0, [r3, #8]
 800c948:	683b      	ldr	r3, [r7, #0]
 800c94a:	687a      	ldr	r2, [r7, #4]
 800c94c:	68b9      	ldr	r1, [r7, #8]
 800c94e:	47a0      	blx	r4
 800c950:	4603      	mov	r3, r0
 800c952:	75fb      	strb	r3, [r7, #23]
  return res;
 800c954:	7dfb      	ldrb	r3, [r7, #23]
}
 800c956:	4618      	mov	r0, r3
 800c958:	371c      	adds	r7, #28
 800c95a:	46bd      	mov	sp, r7
 800c95c:	bd90      	pop	{r4, r7, pc}
 800c95e:	bf00      	nop
 800c960:	20000cec 	.word	0x20000cec

0800c964 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800c964:	b580      	push	{r7, lr}
 800c966:	b084      	sub	sp, #16
 800c968:	af00      	add	r7, sp, #0
 800c96a:	4603      	mov	r3, r0
 800c96c:	603a      	str	r2, [r7, #0]
 800c96e:	71fb      	strb	r3, [r7, #7]
 800c970:	460b      	mov	r3, r1
 800c972:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800c974:	79fb      	ldrb	r3, [r7, #7]
 800c976:	4a09      	ldr	r2, [pc, #36]	; (800c99c <disk_ioctl+0x38>)
 800c978:	009b      	lsls	r3, r3, #2
 800c97a:	4413      	add	r3, r2
 800c97c:	685b      	ldr	r3, [r3, #4]
 800c97e:	691b      	ldr	r3, [r3, #16]
 800c980:	79fa      	ldrb	r2, [r7, #7]
 800c982:	4906      	ldr	r1, [pc, #24]	; (800c99c <disk_ioctl+0x38>)
 800c984:	440a      	add	r2, r1
 800c986:	7a10      	ldrb	r0, [r2, #8]
 800c988:	79b9      	ldrb	r1, [r7, #6]
 800c98a:	683a      	ldr	r2, [r7, #0]
 800c98c:	4798      	blx	r3
 800c98e:	4603      	mov	r3, r0
 800c990:	73fb      	strb	r3, [r7, #15]
  return res;
 800c992:	7bfb      	ldrb	r3, [r7, #15]
}
 800c994:	4618      	mov	r0, r3
 800c996:	3710      	adds	r7, #16
 800c998:	46bd      	mov	sp, r7
 800c99a:	bd80      	pop	{r7, pc}
 800c99c:	20000cec 	.word	0x20000cec

0800c9a0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800c9a0:	b480      	push	{r7}
 800c9a2:	b085      	sub	sp, #20
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	3301      	adds	r3, #1
 800c9ac:	781b      	ldrb	r3, [r3, #0]
 800c9ae:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800c9b0:	89fb      	ldrh	r3, [r7, #14]
 800c9b2:	021b      	lsls	r3, r3, #8
 800c9b4:	b21a      	sxth	r2, r3
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	781b      	ldrb	r3, [r3, #0]
 800c9ba:	b21b      	sxth	r3, r3
 800c9bc:	4313      	orrs	r3, r2
 800c9be:	b21b      	sxth	r3, r3
 800c9c0:	81fb      	strh	r3, [r7, #14]
	return rv;
 800c9c2:	89fb      	ldrh	r3, [r7, #14]
}
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	3714      	adds	r7, #20
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ce:	4770      	bx	lr

0800c9d0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800c9d0:	b480      	push	{r7}
 800c9d2:	b085      	sub	sp, #20
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	3303      	adds	r3, #3
 800c9dc:	781b      	ldrb	r3, [r3, #0]
 800c9de:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	021b      	lsls	r3, r3, #8
 800c9e4:	687a      	ldr	r2, [r7, #4]
 800c9e6:	3202      	adds	r2, #2
 800c9e8:	7812      	ldrb	r2, [r2, #0]
 800c9ea:	4313      	orrs	r3, r2
 800c9ec:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	021b      	lsls	r3, r3, #8
 800c9f2:	687a      	ldr	r2, [r7, #4]
 800c9f4:	3201      	adds	r2, #1
 800c9f6:	7812      	ldrb	r2, [r2, #0]
 800c9f8:	4313      	orrs	r3, r2
 800c9fa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	021b      	lsls	r3, r3, #8
 800ca00:	687a      	ldr	r2, [r7, #4]
 800ca02:	7812      	ldrb	r2, [r2, #0]
 800ca04:	4313      	orrs	r3, r2
 800ca06:	60fb      	str	r3, [r7, #12]
	return rv;
 800ca08:	68fb      	ldr	r3, [r7, #12]
}
 800ca0a:	4618      	mov	r0, r3
 800ca0c:	3714      	adds	r7, #20
 800ca0e:	46bd      	mov	sp, r7
 800ca10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca14:	4770      	bx	lr

0800ca16 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800ca16:	b480      	push	{r7}
 800ca18:	b083      	sub	sp, #12
 800ca1a:	af00      	add	r7, sp, #0
 800ca1c:	6078      	str	r0, [r7, #4]
 800ca1e:	460b      	mov	r3, r1
 800ca20:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	1c5a      	adds	r2, r3, #1
 800ca26:	607a      	str	r2, [r7, #4]
 800ca28:	887a      	ldrh	r2, [r7, #2]
 800ca2a:	b2d2      	uxtb	r2, r2
 800ca2c:	701a      	strb	r2, [r3, #0]
 800ca2e:	887b      	ldrh	r3, [r7, #2]
 800ca30:	0a1b      	lsrs	r3, r3, #8
 800ca32:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	1c5a      	adds	r2, r3, #1
 800ca38:	607a      	str	r2, [r7, #4]
 800ca3a:	887a      	ldrh	r2, [r7, #2]
 800ca3c:	b2d2      	uxtb	r2, r2
 800ca3e:	701a      	strb	r2, [r3, #0]
}
 800ca40:	bf00      	nop
 800ca42:	370c      	adds	r7, #12
 800ca44:	46bd      	mov	sp, r7
 800ca46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca4a:	4770      	bx	lr

0800ca4c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800ca4c:	b480      	push	{r7}
 800ca4e:	b083      	sub	sp, #12
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	6078      	str	r0, [r7, #4]
 800ca54:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	1c5a      	adds	r2, r3, #1
 800ca5a:	607a      	str	r2, [r7, #4]
 800ca5c:	683a      	ldr	r2, [r7, #0]
 800ca5e:	b2d2      	uxtb	r2, r2
 800ca60:	701a      	strb	r2, [r3, #0]
 800ca62:	683b      	ldr	r3, [r7, #0]
 800ca64:	0a1b      	lsrs	r3, r3, #8
 800ca66:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	1c5a      	adds	r2, r3, #1
 800ca6c:	607a      	str	r2, [r7, #4]
 800ca6e:	683a      	ldr	r2, [r7, #0]
 800ca70:	b2d2      	uxtb	r2, r2
 800ca72:	701a      	strb	r2, [r3, #0]
 800ca74:	683b      	ldr	r3, [r7, #0]
 800ca76:	0a1b      	lsrs	r3, r3, #8
 800ca78:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	1c5a      	adds	r2, r3, #1
 800ca7e:	607a      	str	r2, [r7, #4]
 800ca80:	683a      	ldr	r2, [r7, #0]
 800ca82:	b2d2      	uxtb	r2, r2
 800ca84:	701a      	strb	r2, [r3, #0]
 800ca86:	683b      	ldr	r3, [r7, #0]
 800ca88:	0a1b      	lsrs	r3, r3, #8
 800ca8a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	1c5a      	adds	r2, r3, #1
 800ca90:	607a      	str	r2, [r7, #4]
 800ca92:	683a      	ldr	r2, [r7, #0]
 800ca94:	b2d2      	uxtb	r2, r2
 800ca96:	701a      	strb	r2, [r3, #0]
}
 800ca98:	bf00      	nop
 800ca9a:	370c      	adds	r7, #12
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa2:	4770      	bx	lr

0800caa4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800caa4:	b480      	push	{r7}
 800caa6:	b087      	sub	sp, #28
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	60f8      	str	r0, [r7, #12]
 800caac:	60b9      	str	r1, [r7, #8]
 800caae:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800cab4:	68bb      	ldr	r3, [r7, #8]
 800cab6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d00d      	beq.n	800cada <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800cabe:	693a      	ldr	r2, [r7, #16]
 800cac0:	1c53      	adds	r3, r2, #1
 800cac2:	613b      	str	r3, [r7, #16]
 800cac4:	697b      	ldr	r3, [r7, #20]
 800cac6:	1c59      	adds	r1, r3, #1
 800cac8:	6179      	str	r1, [r7, #20]
 800caca:	7812      	ldrb	r2, [r2, #0]
 800cacc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	3b01      	subs	r3, #1
 800cad2:	607b      	str	r3, [r7, #4]
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d1f1      	bne.n	800cabe <mem_cpy+0x1a>
	}
}
 800cada:	bf00      	nop
 800cadc:	371c      	adds	r7, #28
 800cade:	46bd      	mov	sp, r7
 800cae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae4:	4770      	bx	lr

0800cae6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800cae6:	b480      	push	{r7}
 800cae8:	b087      	sub	sp, #28
 800caea:	af00      	add	r7, sp, #0
 800caec:	60f8      	str	r0, [r7, #12]
 800caee:	60b9      	str	r1, [r7, #8]
 800caf0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800caf6:	697b      	ldr	r3, [r7, #20]
 800caf8:	1c5a      	adds	r2, r3, #1
 800cafa:	617a      	str	r2, [r7, #20]
 800cafc:	68ba      	ldr	r2, [r7, #8]
 800cafe:	b2d2      	uxtb	r2, r2
 800cb00:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	3b01      	subs	r3, #1
 800cb06:	607b      	str	r3, [r7, #4]
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d1f3      	bne.n	800caf6 <mem_set+0x10>
}
 800cb0e:	bf00      	nop
 800cb10:	bf00      	nop
 800cb12:	371c      	adds	r7, #28
 800cb14:	46bd      	mov	sp, r7
 800cb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1a:	4770      	bx	lr

0800cb1c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800cb1c:	b480      	push	{r7}
 800cb1e:	b085      	sub	sp, #20
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800cb24:	2300      	movs	r3, #0
 800cb26:	60fb      	str	r3, [r7, #12]
 800cb28:	e010      	b.n	800cb4c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800cb2a:	4a0d      	ldr	r2, [pc, #52]	; (800cb60 <clear_lock+0x44>)
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	011b      	lsls	r3, r3, #4
 800cb30:	4413      	add	r3, r2
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	687a      	ldr	r2, [r7, #4]
 800cb36:	429a      	cmp	r2, r3
 800cb38:	d105      	bne.n	800cb46 <clear_lock+0x2a>
 800cb3a:	4a09      	ldr	r2, [pc, #36]	; (800cb60 <clear_lock+0x44>)
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	011b      	lsls	r3, r3, #4
 800cb40:	4413      	add	r3, r2
 800cb42:	2200      	movs	r2, #0
 800cb44:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	3301      	adds	r3, #1
 800cb4a:	60fb      	str	r3, [r7, #12]
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	2b01      	cmp	r3, #1
 800cb50:	d9eb      	bls.n	800cb2a <clear_lock+0xe>
	}
}
 800cb52:	bf00      	nop
 800cb54:	bf00      	nop
 800cb56:	3714      	adds	r7, #20
 800cb58:	46bd      	mov	sp, r7
 800cb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5e:	4770      	bx	lr
 800cb60:	20000acc 	.word	0x20000acc

0800cb64 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800cb64:	b580      	push	{r7, lr}
 800cb66:	b086      	sub	sp, #24
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	78db      	ldrb	r3, [r3, #3]
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d034      	beq.n	800cbe2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb7c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	7858      	ldrb	r0, [r3, #1]
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800cb88:	2301      	movs	r3, #1
 800cb8a:	697a      	ldr	r2, [r7, #20]
 800cb8c:	f7ff feca 	bl	800c924 <disk_write>
 800cb90:	4603      	mov	r3, r0
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d002      	beq.n	800cb9c <sync_window+0x38>
			res = FR_DISK_ERR;
 800cb96:	2301      	movs	r3, #1
 800cb98:	73fb      	strb	r3, [r7, #15]
 800cb9a:	e022      	b.n	800cbe2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	2200      	movs	r2, #0
 800cba0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cba6:	697a      	ldr	r2, [r7, #20]
 800cba8:	1ad2      	subs	r2, r2, r3
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	6a1b      	ldr	r3, [r3, #32]
 800cbae:	429a      	cmp	r2, r3
 800cbb0:	d217      	bcs.n	800cbe2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	789b      	ldrb	r3, [r3, #2]
 800cbb6:	613b      	str	r3, [r7, #16]
 800cbb8:	e010      	b.n	800cbdc <sync_window+0x78>
					wsect += fs->fsize;
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	6a1b      	ldr	r3, [r3, #32]
 800cbbe:	697a      	ldr	r2, [r7, #20]
 800cbc0:	4413      	add	r3, r2
 800cbc2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	7858      	ldrb	r0, [r3, #1]
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800cbce:	2301      	movs	r3, #1
 800cbd0:	697a      	ldr	r2, [r7, #20]
 800cbd2:	f7ff fea7 	bl	800c924 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800cbd6:	693b      	ldr	r3, [r7, #16]
 800cbd8:	3b01      	subs	r3, #1
 800cbda:	613b      	str	r3, [r7, #16]
 800cbdc:	693b      	ldr	r3, [r7, #16]
 800cbde:	2b01      	cmp	r3, #1
 800cbe0:	d8eb      	bhi.n	800cbba <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800cbe2:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	3718      	adds	r7, #24
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	bd80      	pop	{r7, pc}

0800cbec <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800cbec:	b580      	push	{r7, lr}
 800cbee:	b084      	sub	sp, #16
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	6078      	str	r0, [r7, #4]
 800cbf4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbfe:	683a      	ldr	r2, [r7, #0]
 800cc00:	429a      	cmp	r2, r3
 800cc02:	d01b      	beq.n	800cc3c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800cc04:	6878      	ldr	r0, [r7, #4]
 800cc06:	f7ff ffad 	bl	800cb64 <sync_window>
 800cc0a:	4603      	mov	r3, r0
 800cc0c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800cc0e:	7bfb      	ldrb	r3, [r7, #15]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d113      	bne.n	800cc3c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	7858      	ldrb	r0, [r3, #1]
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800cc1e:	2301      	movs	r3, #1
 800cc20:	683a      	ldr	r2, [r7, #0]
 800cc22:	f7ff fe5f 	bl	800c8e4 <disk_read>
 800cc26:	4603      	mov	r3, r0
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d004      	beq.n	800cc36 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800cc2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cc30:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800cc32:	2301      	movs	r3, #1
 800cc34:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	683a      	ldr	r2, [r7, #0]
 800cc3a:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800cc3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc3e:	4618      	mov	r0, r3
 800cc40:	3710      	adds	r7, #16
 800cc42:	46bd      	mov	sp, r7
 800cc44:	bd80      	pop	{r7, pc}

0800cc46 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800cc46:	b580      	push	{r7, lr}
 800cc48:	b086      	sub	sp, #24
 800cc4a:	af00      	add	r7, sp, #0
 800cc4c:	6078      	str	r0, [r7, #4]
 800cc4e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800cc56:	683b      	ldr	r3, [r7, #0]
 800cc58:	2b01      	cmp	r3, #1
 800cc5a:	d904      	bls.n	800cc66 <get_fat+0x20>
 800cc5c:	693b      	ldr	r3, [r7, #16]
 800cc5e:	69db      	ldr	r3, [r3, #28]
 800cc60:	683a      	ldr	r2, [r7, #0]
 800cc62:	429a      	cmp	r2, r3
 800cc64:	d302      	bcc.n	800cc6c <get_fat+0x26>
		val = 1;	/* Internal error */
 800cc66:	2301      	movs	r3, #1
 800cc68:	617b      	str	r3, [r7, #20]
 800cc6a:	e091      	b.n	800cd90 <get_fat+0x14a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800cc6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cc70:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800cc72:	693b      	ldr	r3, [r7, #16]
 800cc74:	781b      	ldrb	r3, [r3, #0]
 800cc76:	2b03      	cmp	r3, #3
 800cc78:	d063      	beq.n	800cd42 <get_fat+0xfc>
 800cc7a:	2b03      	cmp	r3, #3
 800cc7c:	dc7e      	bgt.n	800cd7c <get_fat+0x136>
 800cc7e:	2b01      	cmp	r3, #1
 800cc80:	d002      	beq.n	800cc88 <get_fat+0x42>
 800cc82:	2b02      	cmp	r3, #2
 800cc84:	d042      	beq.n	800cd0c <get_fat+0xc6>
 800cc86:	e079      	b.n	800cd7c <get_fat+0x136>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800cc88:	683b      	ldr	r3, [r7, #0]
 800cc8a:	60fb      	str	r3, [r7, #12]
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	085b      	lsrs	r3, r3, #1
 800cc90:	68fa      	ldr	r2, [r7, #12]
 800cc92:	4413      	add	r3, r2
 800cc94:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cc96:	693b      	ldr	r3, [r7, #16]
 800cc98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	0b1b      	lsrs	r3, r3, #12
 800cc9e:	4413      	add	r3, r2
 800cca0:	4619      	mov	r1, r3
 800cca2:	6938      	ldr	r0, [r7, #16]
 800cca4:	f7ff ffa2 	bl	800cbec <move_window>
 800cca8:	4603      	mov	r3, r0
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d169      	bne.n	800cd82 <get_fat+0x13c>
			wc = fs->win[bc++ % SS(fs)];
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	1c5a      	adds	r2, r3, #1
 800ccb2:	60fa      	str	r2, [r7, #12]
 800ccb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ccb8:	693a      	ldr	r2, [r7, #16]
 800ccba:	4413      	add	r3, r2
 800ccbc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ccc0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ccc2:	693b      	ldr	r3, [r7, #16]
 800ccc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	0b1b      	lsrs	r3, r3, #12
 800ccca:	4413      	add	r3, r2
 800cccc:	4619      	mov	r1, r3
 800ccce:	6938      	ldr	r0, [r7, #16]
 800ccd0:	f7ff ff8c 	bl	800cbec <move_window>
 800ccd4:	4603      	mov	r3, r0
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d155      	bne.n	800cd86 <get_fat+0x140>
			wc |= fs->win[bc % SS(fs)] << 8;
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cce0:	693a      	ldr	r2, [r7, #16]
 800cce2:	4413      	add	r3, r2
 800cce4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800cce8:	021b      	lsls	r3, r3, #8
 800ccea:	461a      	mov	r2, r3
 800ccec:	68bb      	ldr	r3, [r7, #8]
 800ccee:	4313      	orrs	r3, r2
 800ccf0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ccf2:	683b      	ldr	r3, [r7, #0]
 800ccf4:	f003 0301 	and.w	r3, r3, #1
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d002      	beq.n	800cd02 <get_fat+0xbc>
 800ccfc:	68bb      	ldr	r3, [r7, #8]
 800ccfe:	091b      	lsrs	r3, r3, #4
 800cd00:	e002      	b.n	800cd08 <get_fat+0xc2>
 800cd02:	68bb      	ldr	r3, [r7, #8]
 800cd04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cd08:	617b      	str	r3, [r7, #20]
			break;
 800cd0a:	e041      	b.n	800cd90 <get_fat+0x14a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800cd0c:	693b      	ldr	r3, [r7, #16]
 800cd0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cd10:	683b      	ldr	r3, [r7, #0]
 800cd12:	0adb      	lsrs	r3, r3, #11
 800cd14:	4413      	add	r3, r2
 800cd16:	4619      	mov	r1, r3
 800cd18:	6938      	ldr	r0, [r7, #16]
 800cd1a:	f7ff ff67 	bl	800cbec <move_window>
 800cd1e:	4603      	mov	r3, r0
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d132      	bne.n	800cd8a <get_fat+0x144>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800cd24:	693b      	ldr	r3, [r7, #16]
 800cd26:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800cd2a:	683b      	ldr	r3, [r7, #0]
 800cd2c:	0059      	lsls	r1, r3, #1
 800cd2e:	f640 73fe 	movw	r3, #4094	; 0xffe
 800cd32:	400b      	ands	r3, r1
 800cd34:	4413      	add	r3, r2
 800cd36:	4618      	mov	r0, r3
 800cd38:	f7ff fe32 	bl	800c9a0 <ld_word>
 800cd3c:	4603      	mov	r3, r0
 800cd3e:	617b      	str	r3, [r7, #20]
			break;
 800cd40:	e026      	b.n	800cd90 <get_fat+0x14a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800cd42:	693b      	ldr	r3, [r7, #16]
 800cd44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cd46:	683b      	ldr	r3, [r7, #0]
 800cd48:	0a9b      	lsrs	r3, r3, #10
 800cd4a:	4413      	add	r3, r2
 800cd4c:	4619      	mov	r1, r3
 800cd4e:	6938      	ldr	r0, [r7, #16]
 800cd50:	f7ff ff4c 	bl	800cbec <move_window>
 800cd54:	4603      	mov	r3, r0
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d119      	bne.n	800cd8e <get_fat+0x148>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800cd5a:	693b      	ldr	r3, [r7, #16]
 800cd5c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800cd60:	683b      	ldr	r3, [r7, #0]
 800cd62:	0099      	lsls	r1, r3, #2
 800cd64:	f640 73fc 	movw	r3, #4092	; 0xffc
 800cd68:	400b      	ands	r3, r1
 800cd6a:	4413      	add	r3, r2
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	f7ff fe2f 	bl	800c9d0 <ld_dword>
 800cd72:	4603      	mov	r3, r0
 800cd74:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800cd78:	617b      	str	r3, [r7, #20]
			break;
 800cd7a:	e009      	b.n	800cd90 <get_fat+0x14a>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800cd7c:	2301      	movs	r3, #1
 800cd7e:	617b      	str	r3, [r7, #20]
 800cd80:	e006      	b.n	800cd90 <get_fat+0x14a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cd82:	bf00      	nop
 800cd84:	e004      	b.n	800cd90 <get_fat+0x14a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cd86:	bf00      	nop
 800cd88:	e002      	b.n	800cd90 <get_fat+0x14a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800cd8a:	bf00      	nop
 800cd8c:	e000      	b.n	800cd90 <get_fat+0x14a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800cd8e:	bf00      	nop
		}
	}

	return val;
 800cd90:	697b      	ldr	r3, [r7, #20]
}
 800cd92:	4618      	mov	r0, r3
 800cd94:	3718      	adds	r7, #24
 800cd96:	46bd      	mov	sp, r7
 800cd98:	bd80      	pop	{r7, pc}
	...

0800cd9c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800cd9c:	b480      	push	{r7}
 800cd9e:	b089      	sub	sp, #36	; 0x24
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800cda4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cda8:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d06e      	beq.n	800ce90 <get_ldnumber+0xf4>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	61bb      	str	r3, [r7, #24]
 800cdb8:	e002      	b.n	800cdc0 <get_ldnumber+0x24>
 800cdba:	69bb      	ldr	r3, [r7, #24]
 800cdbc:	3301      	adds	r3, #1
 800cdbe:	61bb      	str	r3, [r7, #24]
 800cdc0:	69bb      	ldr	r3, [r7, #24]
 800cdc2:	781b      	ldrb	r3, [r3, #0]
 800cdc4:	2b1f      	cmp	r3, #31
 800cdc6:	d903      	bls.n	800cdd0 <get_ldnumber+0x34>
 800cdc8:	69bb      	ldr	r3, [r7, #24]
 800cdca:	781b      	ldrb	r3, [r3, #0]
 800cdcc:	2b3a      	cmp	r3, #58	; 0x3a
 800cdce:	d1f4      	bne.n	800cdba <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800cdd0:	69bb      	ldr	r3, [r7, #24]
 800cdd2:	781b      	ldrb	r3, [r3, #0]
 800cdd4:	2b3a      	cmp	r3, #58	; 0x3a
 800cdd6:	d159      	bne.n	800ce8c <get_ldnumber+0xf0>
			tp = *path;
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	61fb      	str	r3, [r7, #28]
			i = *tp++ - '0';
 800cdde:	69fb      	ldr	r3, [r7, #28]
 800cde0:	1c5a      	adds	r2, r3, #1
 800cde2:	61fa      	str	r2, [r7, #28]
 800cde4:	781b      	ldrb	r3, [r3, #0]
 800cde6:	3b30      	subs	r3, #48	; 0x30
 800cde8:	617b      	str	r3, [r7, #20]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800cdea:	697b      	ldr	r3, [r7, #20]
 800cdec:	2b09      	cmp	r3, #9
 800cdee:	d80f      	bhi.n	800ce10 <get_ldnumber+0x74>
 800cdf0:	69fa      	ldr	r2, [r7, #28]
 800cdf2:	69bb      	ldr	r3, [r7, #24]
 800cdf4:	429a      	cmp	r2, r3
 800cdf6:	d10b      	bne.n	800ce10 <get_ldnumber+0x74>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800cdf8:	697b      	ldr	r3, [r7, #20]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d144      	bne.n	800ce88 <get_ldnumber+0xec>
					vol = (int)i;
 800cdfe:	697b      	ldr	r3, [r7, #20]
 800ce00:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ce02:	69bb      	ldr	r3, [r7, #24]
 800ce04:	3301      	adds	r3, #1
 800ce06:	61bb      	str	r3, [r7, #24]
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	69ba      	ldr	r2, [r7, #24]
 800ce0c:	601a      	str	r2, [r3, #0]
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ce0e:	e03b      	b.n	800ce88 <get_ldnumber+0xec>
				}
			}
#if _STR_VOLUME_ID
			 else {	/* No numeric drive number, find string drive id */
				i = 0; tt++;
 800ce10:	2300      	movs	r3, #0
 800ce12:	617b      	str	r3, [r7, #20]
 800ce14:	69bb      	ldr	r3, [r7, #24]
 800ce16:	3301      	adds	r3, #1
 800ce18:	61bb      	str	r3, [r7, #24]
				do {
					sp = volid[i]; tp = *path;
 800ce1a:	4a21      	ldr	r2, [pc, #132]	; (800cea0 <get_ldnumber+0x104>)
 800ce1c:	697b      	ldr	r3, [r7, #20]
 800ce1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce22:	60fb      	str	r3, [r7, #12]
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	61fb      	str	r3, [r7, #28]
					do {	/* Compare a string drive id with path name */
						c = *sp++; tc = *tp++;
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	1c5a      	adds	r2, r3, #1
 800ce2e:	60fa      	str	r2, [r7, #12]
 800ce30:	781b      	ldrb	r3, [r3, #0]
 800ce32:	72bb      	strb	r3, [r7, #10]
 800ce34:	69fb      	ldr	r3, [r7, #28]
 800ce36:	1c5a      	adds	r2, r3, #1
 800ce38:	61fa      	str	r2, [r7, #28]
 800ce3a:	781b      	ldrb	r3, [r3, #0]
 800ce3c:	72fb      	strb	r3, [r7, #11]
						if (IsLower(tc)) tc -= 0x20;
 800ce3e:	7afb      	ldrb	r3, [r7, #11]
 800ce40:	2b60      	cmp	r3, #96	; 0x60
 800ce42:	d905      	bls.n	800ce50 <get_ldnumber+0xb4>
 800ce44:	7afb      	ldrb	r3, [r7, #11]
 800ce46:	2b7a      	cmp	r3, #122	; 0x7a
 800ce48:	d802      	bhi.n	800ce50 <get_ldnumber+0xb4>
 800ce4a:	7afb      	ldrb	r3, [r7, #11]
 800ce4c:	3b20      	subs	r3, #32
 800ce4e:	72fb      	strb	r3, [r7, #11]
					} while (c && (TCHAR)c == tc);
 800ce50:	7abb      	ldrb	r3, [r7, #10]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d003      	beq.n	800ce5e <get_ldnumber+0xc2>
 800ce56:	7aba      	ldrb	r2, [r7, #10]
 800ce58:	7afb      	ldrb	r3, [r7, #11]
 800ce5a:	429a      	cmp	r2, r3
 800ce5c:	d0e5      	beq.n	800ce2a <get_ldnumber+0x8e>
				} while ((c || tp != tt) && ++i < _VOLUMES);	/* Repeat for each id until pattern match */
 800ce5e:	7abb      	ldrb	r3, [r7, #10]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d103      	bne.n	800ce6c <get_ldnumber+0xd0>
 800ce64:	69fa      	ldr	r2, [r7, #28]
 800ce66:	69bb      	ldr	r3, [r7, #24]
 800ce68:	429a      	cmp	r2, r3
 800ce6a:	d005      	beq.n	800ce78 <get_ldnumber+0xdc>
 800ce6c:	697b      	ldr	r3, [r7, #20]
 800ce6e:	3301      	adds	r3, #1
 800ce70:	617b      	str	r3, [r7, #20]
 800ce72:	697b      	ldr	r3, [r7, #20]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d0d0      	beq.n	800ce1a <get_ldnumber+0x7e>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ce78:	697b      	ldr	r3, [r7, #20]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d104      	bne.n	800ce88 <get_ldnumber+0xec>
					vol = (int)i;
 800ce7e:	697b      	ldr	r3, [r7, #20]
 800ce80:	613b      	str	r3, [r7, #16]
					*path = tt;
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	69ba      	ldr	r2, [r7, #24]
 800ce86:	601a      	str	r2, [r3, #0]
				}
			}
#endif
			return vol;
 800ce88:	693b      	ldr	r3, [r7, #16]
 800ce8a:	e002      	b.n	800ce92 <get_ldnumber+0xf6>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ce8c:	2300      	movs	r3, #0
 800ce8e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ce90:	693b      	ldr	r3, [r7, #16]
}
 800ce92:	4618      	mov	r0, r3
 800ce94:	3724      	adds	r7, #36	; 0x24
 800ce96:	46bd      	mov	sp, r7
 800ce98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce9c:	4770      	bx	lr
 800ce9e:	bf00      	nop
 800cea0:	080136d4 	.word	0x080136d4

0800cea4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800cea4:	b580      	push	{r7, lr}
 800cea6:	b082      	sub	sp, #8
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	6078      	str	r0, [r7, #4]
 800ceac:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	70da      	strb	r2, [r3, #3]
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ceba:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800cebc:	6839      	ldr	r1, [r7, #0]
 800cebe:	6878      	ldr	r0, [r7, #4]
 800cec0:	f7ff fe94 	bl	800cbec <move_window>
 800cec4:	4603      	mov	r3, r0
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d001      	beq.n	800cece <check_fs+0x2a>
 800ceca:	2304      	movs	r3, #4
 800cecc:	e038      	b.n	800cf40 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	3338      	adds	r3, #56	; 0x38
 800ced2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ced6:	4618      	mov	r0, r3
 800ced8:	f7ff fd62 	bl	800c9a0 <ld_word>
 800cedc:	4603      	mov	r3, r0
 800cede:	461a      	mov	r2, r3
 800cee0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800cee4:	429a      	cmp	r2, r3
 800cee6:	d001      	beq.n	800ceec <check_fs+0x48>
 800cee8:	2303      	movs	r3, #3
 800ceea:	e029      	b.n	800cf40 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800cef2:	2be9      	cmp	r3, #233	; 0xe9
 800cef4:	d009      	beq.n	800cf0a <check_fs+0x66>
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800cefc:	2beb      	cmp	r3, #235	; 0xeb
 800cefe:	d11e      	bne.n	800cf3e <check_fs+0x9a>
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800cf06:	2b90      	cmp	r3, #144	; 0x90
 800cf08:	d119      	bne.n	800cf3e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	3338      	adds	r3, #56	; 0x38
 800cf0e:	3336      	adds	r3, #54	; 0x36
 800cf10:	4618      	mov	r0, r3
 800cf12:	f7ff fd5d 	bl	800c9d0 <ld_dword>
 800cf16:	4603      	mov	r3, r0
 800cf18:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800cf1c:	4a0a      	ldr	r2, [pc, #40]	; (800cf48 <check_fs+0xa4>)
 800cf1e:	4293      	cmp	r3, r2
 800cf20:	d101      	bne.n	800cf26 <check_fs+0x82>
 800cf22:	2300      	movs	r3, #0
 800cf24:	e00c      	b.n	800cf40 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	3338      	adds	r3, #56	; 0x38
 800cf2a:	3352      	adds	r3, #82	; 0x52
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	f7ff fd4f 	bl	800c9d0 <ld_dword>
 800cf32:	4603      	mov	r3, r0
 800cf34:	4a05      	ldr	r2, [pc, #20]	; (800cf4c <check_fs+0xa8>)
 800cf36:	4293      	cmp	r3, r2
 800cf38:	d101      	bne.n	800cf3e <check_fs+0x9a>
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	e000      	b.n	800cf40 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800cf3e:	2302      	movs	r3, #2
}
 800cf40:	4618      	mov	r0, r3
 800cf42:	3708      	adds	r7, #8
 800cf44:	46bd      	mov	sp, r7
 800cf46:	bd80      	pop	{r7, pc}
 800cf48:	00544146 	.word	0x00544146
 800cf4c:	33544146 	.word	0x33544146

0800cf50 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800cf50:	b580      	push	{r7, lr}
 800cf52:	b096      	sub	sp, #88	; 0x58
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	60f8      	str	r0, [r7, #12]
 800cf58:	60b9      	str	r1, [r7, #8]
 800cf5a:	4613      	mov	r3, r2
 800cf5c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800cf5e:	68bb      	ldr	r3, [r7, #8]
 800cf60:	2200      	movs	r2, #0
 800cf62:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800cf64:	68f8      	ldr	r0, [r7, #12]
 800cf66:	f7ff ff19 	bl	800cd9c <get_ldnumber>
 800cf6a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800cf6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	da01      	bge.n	800cf76 <find_volume+0x26>
 800cf72:	230b      	movs	r3, #11
 800cf74:	e234      	b.n	800d3e0 <find_volume+0x490>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800cf76:	4aa8      	ldr	r2, [pc, #672]	; (800d218 <find_volume+0x2c8>)
 800cf78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf7e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800cf80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d101      	bne.n	800cf8a <find_volume+0x3a>
 800cf86:	230c      	movs	r3, #12
 800cf88:	e22a      	b.n	800d3e0 <find_volume+0x490>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800cf8a:	68bb      	ldr	r3, [r7, #8]
 800cf8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cf8e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800cf90:	79fb      	ldrb	r3, [r7, #7]
 800cf92:	f023 0301 	bic.w	r3, r3, #1
 800cf96:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800cf98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf9a:	781b      	ldrb	r3, [r3, #0]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d01a      	beq.n	800cfd6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800cfa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfa2:	785b      	ldrb	r3, [r3, #1]
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	f7ff fc5d 	bl	800c864 <disk_status>
 800cfaa:	4603      	mov	r3, r0
 800cfac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800cfb0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cfb4:	f003 0301 	and.w	r3, r3, #1
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d10c      	bne.n	800cfd6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800cfbc:	79fb      	ldrb	r3, [r7, #7]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d007      	beq.n	800cfd2 <find_volume+0x82>
 800cfc2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cfc6:	f003 0304 	and.w	r3, r3, #4
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d001      	beq.n	800cfd2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800cfce:	230a      	movs	r3, #10
 800cfd0:	e206      	b.n	800d3e0 <find_volume+0x490>
			}
			return FR_OK;				/* The file system object is valid */
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	e204      	b.n	800d3e0 <find_volume+0x490>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800cfd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfd8:	2200      	movs	r2, #0
 800cfda:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800cfdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfde:	b2da      	uxtb	r2, r3
 800cfe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfe2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800cfe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfe6:	785b      	ldrb	r3, [r3, #1]
 800cfe8:	4618      	mov	r0, r3
 800cfea:	f7ff fc55 	bl	800c898 <disk_initialize>
 800cfee:	4603      	mov	r3, r0
 800cff0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800cff4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cff8:	f003 0301 	and.w	r3, r3, #1
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d001      	beq.n	800d004 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d000:	2303      	movs	r3, #3
 800d002:	e1ed      	b.n	800d3e0 <find_volume+0x490>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d004:	79fb      	ldrb	r3, [r7, #7]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d007      	beq.n	800d01a <find_volume+0xca>
 800d00a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d00e:	f003 0304 	and.w	r3, r3, #4
 800d012:	2b00      	cmp	r3, #0
 800d014:	d001      	beq.n	800d01a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800d016:	230a      	movs	r3, #10
 800d018:	e1e2      	b.n	800d3e0 <find_volume+0x490>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800d01a:	2300      	movs	r3, #0
 800d01c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d01e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d020:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d022:	f7ff ff3f 	bl	800cea4 <check_fs>
 800d026:	4603      	mov	r3, r0
 800d028:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d02c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d030:	2b02      	cmp	r3, #2
 800d032:	d14b      	bne.n	800d0cc <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d034:	2300      	movs	r3, #0
 800d036:	643b      	str	r3, [r7, #64]	; 0x40
 800d038:	e01f      	b.n	800d07a <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800d03a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d03c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800d040:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d042:	011b      	lsls	r3, r3, #4
 800d044:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800d048:	4413      	add	r3, r2
 800d04a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d04c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d04e:	3304      	adds	r3, #4
 800d050:	781b      	ldrb	r3, [r3, #0]
 800d052:	2b00      	cmp	r3, #0
 800d054:	d006      	beq.n	800d064 <find_volume+0x114>
 800d056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d058:	3308      	adds	r3, #8
 800d05a:	4618      	mov	r0, r3
 800d05c:	f7ff fcb8 	bl	800c9d0 <ld_dword>
 800d060:	4602      	mov	r2, r0
 800d062:	e000      	b.n	800d066 <find_volume+0x116>
 800d064:	2200      	movs	r2, #0
 800d066:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d068:	009b      	lsls	r3, r3, #2
 800d06a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800d06e:	440b      	add	r3, r1
 800d070:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d074:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d076:	3301      	adds	r3, #1
 800d078:	643b      	str	r3, [r7, #64]	; 0x40
 800d07a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d07c:	2b03      	cmp	r3, #3
 800d07e:	d9dc      	bls.n	800d03a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800d080:	2300      	movs	r3, #0
 800d082:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800d084:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d086:	2b00      	cmp	r3, #0
 800d088:	d002      	beq.n	800d090 <find_volume+0x140>
 800d08a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d08c:	3b01      	subs	r3, #1
 800d08e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800d090:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d092:	009b      	lsls	r3, r3, #2
 800d094:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800d098:	4413      	add	r3, r2
 800d09a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800d09e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d0a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d005      	beq.n	800d0b2 <find_volume+0x162>
 800d0a6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d0a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d0aa:	f7ff fefb 	bl	800cea4 <check_fs>
 800d0ae:	4603      	mov	r3, r0
 800d0b0:	e000      	b.n	800d0b4 <find_volume+0x164>
 800d0b2:	2303      	movs	r3, #3
 800d0b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d0b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d0bc:	2b01      	cmp	r3, #1
 800d0be:	d905      	bls.n	800d0cc <find_volume+0x17c>
 800d0c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0c2:	3301      	adds	r3, #1
 800d0c4:	643b      	str	r3, [r7, #64]	; 0x40
 800d0c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0c8:	2b03      	cmp	r3, #3
 800d0ca:	d9e1      	bls.n	800d090 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d0cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d0d0:	2b04      	cmp	r3, #4
 800d0d2:	d101      	bne.n	800d0d8 <find_volume+0x188>
 800d0d4:	2301      	movs	r3, #1
 800d0d6:	e183      	b.n	800d3e0 <find_volume+0x490>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d0d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d0dc:	2b01      	cmp	r3, #1
 800d0de:	d901      	bls.n	800d0e4 <find_volume+0x194>
 800d0e0:	230d      	movs	r3, #13
 800d0e2:	e17d      	b.n	800d3e0 <find_volume+0x490>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d0e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0e6:	3338      	adds	r3, #56	; 0x38
 800d0e8:	330b      	adds	r3, #11
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	f7ff fc58 	bl	800c9a0 <ld_word>
 800d0f0:	4603      	mov	r3, r0
 800d0f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d0f6:	d001      	beq.n	800d0fc <find_volume+0x1ac>
 800d0f8:	230d      	movs	r3, #13
 800d0fa:	e171      	b.n	800d3e0 <find_volume+0x490>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d0fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0fe:	3338      	adds	r3, #56	; 0x38
 800d100:	3316      	adds	r3, #22
 800d102:	4618      	mov	r0, r3
 800d104:	f7ff fc4c 	bl	800c9a0 <ld_word>
 800d108:	4603      	mov	r3, r0
 800d10a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d10c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d106      	bne.n	800d120 <find_volume+0x1d0>
 800d112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d114:	3338      	adds	r3, #56	; 0x38
 800d116:	3324      	adds	r3, #36	; 0x24
 800d118:	4618      	mov	r0, r3
 800d11a:	f7ff fc59 	bl	800c9d0 <ld_dword>
 800d11e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800d120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d122:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d124:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d128:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800d12c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d12e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d132:	789b      	ldrb	r3, [r3, #2]
 800d134:	2b01      	cmp	r3, #1
 800d136:	d005      	beq.n	800d144 <find_volume+0x1f4>
 800d138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d13a:	789b      	ldrb	r3, [r3, #2]
 800d13c:	2b02      	cmp	r3, #2
 800d13e:	d001      	beq.n	800d144 <find_volume+0x1f4>
 800d140:	230d      	movs	r3, #13
 800d142:	e14d      	b.n	800d3e0 <find_volume+0x490>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d146:	789b      	ldrb	r3, [r3, #2]
 800d148:	461a      	mov	r2, r3
 800d14a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d14c:	fb02 f303 	mul.w	r3, r2, r3
 800d150:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d154:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d158:	b29a      	uxth	r2, r3
 800d15a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d15c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d15e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d160:	895b      	ldrh	r3, [r3, #10]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d008      	beq.n	800d178 <find_volume+0x228>
 800d166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d168:	895b      	ldrh	r3, [r3, #10]
 800d16a:	461a      	mov	r2, r3
 800d16c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d16e:	895b      	ldrh	r3, [r3, #10]
 800d170:	3b01      	subs	r3, #1
 800d172:	4013      	ands	r3, r2
 800d174:	2b00      	cmp	r3, #0
 800d176:	d001      	beq.n	800d17c <find_volume+0x22c>
 800d178:	230d      	movs	r3, #13
 800d17a:	e131      	b.n	800d3e0 <find_volume+0x490>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d17c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d17e:	3338      	adds	r3, #56	; 0x38
 800d180:	3311      	adds	r3, #17
 800d182:	4618      	mov	r0, r3
 800d184:	f7ff fc0c 	bl	800c9a0 <ld_word>
 800d188:	4603      	mov	r3, r0
 800d18a:	461a      	mov	r2, r3
 800d18c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d18e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d192:	891b      	ldrh	r3, [r3, #8]
 800d194:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d198:	b29b      	uxth	r3, r3
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d001      	beq.n	800d1a2 <find_volume+0x252>
 800d19e:	230d      	movs	r3, #13
 800d1a0:	e11e      	b.n	800d3e0 <find_volume+0x490>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d1a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1a4:	3338      	adds	r3, #56	; 0x38
 800d1a6:	3313      	adds	r3, #19
 800d1a8:	4618      	mov	r0, r3
 800d1aa:	f7ff fbf9 	bl	800c9a0 <ld_word>
 800d1ae:	4603      	mov	r3, r0
 800d1b0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d1b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d106      	bne.n	800d1c6 <find_volume+0x276>
 800d1b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1ba:	3338      	adds	r3, #56	; 0x38
 800d1bc:	3320      	adds	r3, #32
 800d1be:	4618      	mov	r0, r3
 800d1c0:	f7ff fc06 	bl	800c9d0 <ld_dword>
 800d1c4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d1c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1c8:	3338      	adds	r3, #56	; 0x38
 800d1ca:	330e      	adds	r3, #14
 800d1cc:	4618      	mov	r0, r3
 800d1ce:	f7ff fbe7 	bl	800c9a0 <ld_word>
 800d1d2:	4603      	mov	r3, r0
 800d1d4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d1d6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d101      	bne.n	800d1e0 <find_volume+0x290>
 800d1dc:	230d      	movs	r3, #13
 800d1de:	e0ff      	b.n	800d3e0 <find_volume+0x490>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d1e0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d1e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d1e4:	4413      	add	r3, r2
 800d1e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d1e8:	8912      	ldrh	r2, [r2, #8]
 800d1ea:	09d2      	lsrs	r2, r2, #7
 800d1ec:	b292      	uxth	r2, r2
 800d1ee:	4413      	add	r3, r2
 800d1f0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d1f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d1f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1f6:	429a      	cmp	r2, r3
 800d1f8:	d201      	bcs.n	800d1fe <find_volume+0x2ae>
 800d1fa:	230d      	movs	r3, #13
 800d1fc:	e0f0      	b.n	800d3e0 <find_volume+0x490>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d1fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d202:	1ad3      	subs	r3, r2, r3
 800d204:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d206:	8952      	ldrh	r2, [r2, #10]
 800d208:	fbb3 f3f2 	udiv	r3, r3, r2
 800d20c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d20e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d210:	2b00      	cmp	r3, #0
 800d212:	d103      	bne.n	800d21c <find_volume+0x2cc>
 800d214:	230d      	movs	r3, #13
 800d216:	e0e3      	b.n	800d3e0 <find_volume+0x490>
 800d218:	20000ac4 	.word	0x20000ac4
		fmt = FS_FAT32;
 800d21c:	2303      	movs	r3, #3
 800d21e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d224:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d228:	4293      	cmp	r3, r2
 800d22a:	d802      	bhi.n	800d232 <find_volume+0x2e2>
 800d22c:	2302      	movs	r3, #2
 800d22e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d234:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d238:	4293      	cmp	r3, r2
 800d23a:	d802      	bhi.n	800d242 <find_volume+0x2f2>
 800d23c:	2301      	movs	r3, #1
 800d23e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d244:	1c9a      	adds	r2, r3, #2
 800d246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d248:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800d24a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d24c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d24e:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d250:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d252:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d254:	441a      	add	r2, r3
 800d256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d258:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800d25a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d25c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d25e:	441a      	add	r2, r3
 800d260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d262:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800d264:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d268:	2b03      	cmp	r3, #3
 800d26a:	d11e      	bne.n	800d2aa <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d26c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d26e:	3338      	adds	r3, #56	; 0x38
 800d270:	332a      	adds	r3, #42	; 0x2a
 800d272:	4618      	mov	r0, r3
 800d274:	f7ff fb94 	bl	800c9a0 <ld_word>
 800d278:	4603      	mov	r3, r0
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d001      	beq.n	800d282 <find_volume+0x332>
 800d27e:	230d      	movs	r3, #13
 800d280:	e0ae      	b.n	800d3e0 <find_volume+0x490>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d284:	891b      	ldrh	r3, [r3, #8]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d001      	beq.n	800d28e <find_volume+0x33e>
 800d28a:	230d      	movs	r3, #13
 800d28c:	e0a8      	b.n	800d3e0 <find_volume+0x490>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d28e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d290:	3338      	adds	r3, #56	; 0x38
 800d292:	332c      	adds	r3, #44	; 0x2c
 800d294:	4618      	mov	r0, r3
 800d296:	f7ff fb9b 	bl	800c9d0 <ld_dword>
 800d29a:	4602      	mov	r2, r0
 800d29c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d29e:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d2a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2a2:	69db      	ldr	r3, [r3, #28]
 800d2a4:	009b      	lsls	r3, r3, #2
 800d2a6:	647b      	str	r3, [r7, #68]	; 0x44
 800d2a8:	e01f      	b.n	800d2ea <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d2aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2ac:	891b      	ldrh	r3, [r3, #8]
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d101      	bne.n	800d2b6 <find_volume+0x366>
 800d2b2:	230d      	movs	r3, #13
 800d2b4:	e094      	b.n	800d3e0 <find_volume+0x490>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d2b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d2ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d2bc:	441a      	add	r2, r3
 800d2be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2c0:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d2c2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d2c6:	2b02      	cmp	r3, #2
 800d2c8:	d103      	bne.n	800d2d2 <find_volume+0x382>
 800d2ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2cc:	69db      	ldr	r3, [r3, #28]
 800d2ce:	005b      	lsls	r3, r3, #1
 800d2d0:	e00a      	b.n	800d2e8 <find_volume+0x398>
 800d2d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2d4:	69da      	ldr	r2, [r3, #28]
 800d2d6:	4613      	mov	r3, r2
 800d2d8:	005b      	lsls	r3, r3, #1
 800d2da:	4413      	add	r3, r2
 800d2dc:	085a      	lsrs	r2, r3, #1
 800d2de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2e0:	69db      	ldr	r3, [r3, #28]
 800d2e2:	f003 0301 	and.w	r3, r3, #1
 800d2e6:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d2e8:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d2ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2ec:	6a1a      	ldr	r2, [r3, #32]
 800d2ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d2f0:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800d2f4:	0b1b      	lsrs	r3, r3, #12
 800d2f6:	429a      	cmp	r2, r3
 800d2f8:	d201      	bcs.n	800d2fe <find_volume+0x3ae>
 800d2fa:	230d      	movs	r3, #13
 800d2fc:	e070      	b.n	800d3e0 <find_volume+0x490>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d2fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d300:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d304:	615a      	str	r2, [r3, #20]
 800d306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d308:	695a      	ldr	r2, [r3, #20]
 800d30a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d30c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800d30e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d310:	2280      	movs	r2, #128	; 0x80
 800d312:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d314:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d318:	2b03      	cmp	r3, #3
 800d31a:	d149      	bne.n	800d3b0 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d31c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d31e:	3338      	adds	r3, #56	; 0x38
 800d320:	3330      	adds	r3, #48	; 0x30
 800d322:	4618      	mov	r0, r3
 800d324:	f7ff fb3c 	bl	800c9a0 <ld_word>
 800d328:	4603      	mov	r3, r0
 800d32a:	2b01      	cmp	r3, #1
 800d32c:	d140      	bne.n	800d3b0 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d32e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d330:	3301      	adds	r3, #1
 800d332:	4619      	mov	r1, r3
 800d334:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d336:	f7ff fc59 	bl	800cbec <move_window>
 800d33a:	4603      	mov	r3, r0
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d137      	bne.n	800d3b0 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800d340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d342:	2200      	movs	r2, #0
 800d344:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d348:	3338      	adds	r3, #56	; 0x38
 800d34a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d34e:	4618      	mov	r0, r3
 800d350:	f7ff fb26 	bl	800c9a0 <ld_word>
 800d354:	4603      	mov	r3, r0
 800d356:	461a      	mov	r2, r3
 800d358:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d35c:	429a      	cmp	r2, r3
 800d35e:	d127      	bne.n	800d3b0 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d362:	3338      	adds	r3, #56	; 0x38
 800d364:	4618      	mov	r0, r3
 800d366:	f7ff fb33 	bl	800c9d0 <ld_dword>
 800d36a:	4603      	mov	r3, r0
 800d36c:	4a1e      	ldr	r2, [pc, #120]	; (800d3e8 <find_volume+0x498>)
 800d36e:	4293      	cmp	r3, r2
 800d370:	d11e      	bne.n	800d3b0 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d374:	3338      	adds	r3, #56	; 0x38
 800d376:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d37a:	4618      	mov	r0, r3
 800d37c:	f7ff fb28 	bl	800c9d0 <ld_dword>
 800d380:	4603      	mov	r3, r0
 800d382:	4a1a      	ldr	r2, [pc, #104]	; (800d3ec <find_volume+0x49c>)
 800d384:	4293      	cmp	r3, r2
 800d386:	d113      	bne.n	800d3b0 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d38a:	3338      	adds	r3, #56	; 0x38
 800d38c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800d390:	4618      	mov	r0, r3
 800d392:	f7ff fb1d 	bl	800c9d0 <ld_dword>
 800d396:	4602      	mov	r2, r0
 800d398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d39a:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d39c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d39e:	3338      	adds	r3, #56	; 0x38
 800d3a0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	f7ff fb13 	bl	800c9d0 <ld_dword>
 800d3aa:	4602      	mov	r2, r0
 800d3ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3ae:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d3b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3b2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800d3b6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d3b8:	4b0d      	ldr	r3, [pc, #52]	; (800d3f0 <find_volume+0x4a0>)
 800d3ba:	881b      	ldrh	r3, [r3, #0]
 800d3bc:	3301      	adds	r3, #1
 800d3be:	b29a      	uxth	r2, r3
 800d3c0:	4b0b      	ldr	r3, [pc, #44]	; (800d3f0 <find_volume+0x4a0>)
 800d3c2:	801a      	strh	r2, [r3, #0]
 800d3c4:	4b0a      	ldr	r3, [pc, #40]	; (800d3f0 <find_volume+0x4a0>)
 800d3c6:	881a      	ldrh	r2, [r3, #0]
 800d3c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3ca:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800d3cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3ce:	4a09      	ldr	r2, [pc, #36]	; (800d3f4 <find_volume+0x4a4>)
 800d3d0:	60da      	str	r2, [r3, #12]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 800d3d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3d4:	2200      	movs	r2, #0
 800d3d6:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d3d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d3da:	f7ff fb9f 	bl	800cb1c <clear_lock>
#endif
	return FR_OK;
 800d3de:	2300      	movs	r3, #0
}
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	3758      	adds	r7, #88	; 0x58
 800d3e4:	46bd      	mov	sp, r7
 800d3e6:	bd80      	pop	{r7, pc}
 800d3e8:	41615252 	.word	0x41615252
 800d3ec:	61417272 	.word	0x61417272
 800d3f0:	20000ac8 	.word	0x20000ac8
 800d3f4:	20000aec 	.word	0x20000aec

0800d3f8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d3f8:	b580      	push	{r7, lr}
 800d3fa:	b088      	sub	sp, #32
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	60f8      	str	r0, [r7, #12]
 800d400:	60b9      	str	r1, [r7, #8]
 800d402:	4613      	mov	r3, r2
 800d404:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d406:	68bb      	ldr	r3, [r7, #8]
 800d408:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d40a:	f107 0310 	add.w	r3, r7, #16
 800d40e:	4618      	mov	r0, r3
 800d410:	f7ff fcc4 	bl	800cd9c <get_ldnumber>
 800d414:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d416:	69fb      	ldr	r3, [r7, #28]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	da01      	bge.n	800d420 <f_mount+0x28>
 800d41c:	230b      	movs	r3, #11
 800d41e:	e02b      	b.n	800d478 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d420:	4a17      	ldr	r2, [pc, #92]	; (800d480 <f_mount+0x88>)
 800d422:	69fb      	ldr	r3, [r7, #28]
 800d424:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d428:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d42a:	69bb      	ldr	r3, [r7, #24]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d005      	beq.n	800d43c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d430:	69b8      	ldr	r0, [r7, #24]
 800d432:	f7ff fb73 	bl	800cb1c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d436:	69bb      	ldr	r3, [r7, #24]
 800d438:	2200      	movs	r2, #0
 800d43a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d002      	beq.n	800d448 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	2200      	movs	r2, #0
 800d446:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d448:	68fa      	ldr	r2, [r7, #12]
 800d44a:	490d      	ldr	r1, [pc, #52]	; (800d480 <f_mount+0x88>)
 800d44c:	69fb      	ldr	r3, [r7, #28]
 800d44e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	2b00      	cmp	r3, #0
 800d456:	d002      	beq.n	800d45e <f_mount+0x66>
 800d458:	79fb      	ldrb	r3, [r7, #7]
 800d45a:	2b01      	cmp	r3, #1
 800d45c:	d001      	beq.n	800d462 <f_mount+0x6a>
 800d45e:	2300      	movs	r3, #0
 800d460:	e00a      	b.n	800d478 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d462:	f107 010c 	add.w	r1, r7, #12
 800d466:	f107 0308 	add.w	r3, r7, #8
 800d46a:	2200      	movs	r2, #0
 800d46c:	4618      	mov	r0, r3
 800d46e:	f7ff fd6f 	bl	800cf50 <find_volume>
 800d472:	4603      	mov	r3, r0
 800d474:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d476:	7dfb      	ldrb	r3, [r7, #23]
}
 800d478:	4618      	mov	r0, r3
 800d47a:	3720      	adds	r7, #32
 800d47c:	46bd      	mov	sp, r7
 800d47e:	bd80      	pop	{r7, pc}
 800d480:	20000ac4 	.word	0x20000ac4

0800d484 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800d484:	b580      	push	{r7, lr}
 800d486:	b092      	sub	sp, #72	; 0x48
 800d488:	af00      	add	r7, sp, #0
 800d48a:	60f8      	str	r0, [r7, #12]
 800d48c:	60b9      	str	r1, [r7, #8]
 800d48e:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800d490:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800d494:	f107 030c 	add.w	r3, r7, #12
 800d498:	2200      	movs	r2, #0
 800d49a:	4618      	mov	r0, r3
 800d49c:	f7ff fd58 	bl	800cf50 <find_volume>
 800d4a0:	4603      	mov	r3, r0
 800d4a2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800d4a6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	f040 8099 	bne.w	800d5e2 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800d4b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800d4b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4b8:	695a      	ldr	r2, [r3, #20]
 800d4ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4bc:	69db      	ldr	r3, [r3, #28]
 800d4be:	3b02      	subs	r3, #2
 800d4c0:	429a      	cmp	r2, r3
 800d4c2:	d804      	bhi.n	800d4ce <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800d4c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4c6:	695a      	ldr	r2, [r3, #20]
 800d4c8:	68bb      	ldr	r3, [r7, #8]
 800d4ca:	601a      	str	r2, [r3, #0]
 800d4cc:	e089      	b.n	800d5e2 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800d4d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4d4:	781b      	ldrb	r3, [r3, #0]
 800d4d6:	2b01      	cmp	r3, #1
 800d4d8:	d128      	bne.n	800d52c <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800d4da:	2302      	movs	r3, #2
 800d4dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d4de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4e0:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800d4e2:	f107 0314 	add.w	r3, r7, #20
 800d4e6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	f7ff fbac 	bl	800cc46 <get_fat>
 800d4ee:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800d4f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d4f6:	d103      	bne.n	800d500 <f_getfree+0x7c>
 800d4f8:	2301      	movs	r3, #1
 800d4fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800d4fe:	e063      	b.n	800d5c8 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800d500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d502:	2b01      	cmp	r3, #1
 800d504:	d103      	bne.n	800d50e <f_getfree+0x8a>
 800d506:	2302      	movs	r3, #2
 800d508:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800d50c:	e05c      	b.n	800d5c8 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800d50e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d510:	2b00      	cmp	r3, #0
 800d512:	d102      	bne.n	800d51a <f_getfree+0x96>
 800d514:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d516:	3301      	adds	r3, #1
 800d518:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800d51a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d51c:	3301      	adds	r3, #1
 800d51e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d522:	69db      	ldr	r3, [r3, #28]
 800d524:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d526:	429a      	cmp	r2, r3
 800d528:	d3db      	bcc.n	800d4e2 <f_getfree+0x5e>
 800d52a:	e04d      	b.n	800d5c8 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800d52c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d52e:	69db      	ldr	r3, [r3, #28]
 800d530:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d536:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800d538:	2300      	movs	r3, #0
 800d53a:	637b      	str	r3, [r7, #52]	; 0x34
 800d53c:	2300      	movs	r3, #0
 800d53e:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800d540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d542:	2b00      	cmp	r3, #0
 800d544:	d113      	bne.n	800d56e <f_getfree+0xea>
							res = move_window(fs, sect++);
 800d546:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d54a:	1c5a      	adds	r2, r3, #1
 800d54c:	63ba      	str	r2, [r7, #56]	; 0x38
 800d54e:	4619      	mov	r1, r3
 800d550:	f7ff fb4c 	bl	800cbec <move_window>
 800d554:	4603      	mov	r3, r0
 800d556:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800d55a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d131      	bne.n	800d5c6 <f_getfree+0x142>
							p = fs->win;
 800d562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d564:	3338      	adds	r3, #56	; 0x38
 800d566:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800d568:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d56c:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800d56e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d570:	781b      	ldrb	r3, [r3, #0]
 800d572:	2b02      	cmp	r3, #2
 800d574:	d10f      	bne.n	800d596 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800d576:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d578:	f7ff fa12 	bl	800c9a0 <ld_word>
 800d57c:	4603      	mov	r3, r0
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d102      	bne.n	800d588 <f_getfree+0x104>
 800d582:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d584:	3301      	adds	r3, #1
 800d586:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800d588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d58a:	3302      	adds	r3, #2
 800d58c:	633b      	str	r3, [r7, #48]	; 0x30
 800d58e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d590:	3b02      	subs	r3, #2
 800d592:	637b      	str	r3, [r7, #52]	; 0x34
 800d594:	e010      	b.n	800d5b8 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800d596:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d598:	f7ff fa1a 	bl	800c9d0 <ld_dword>
 800d59c:	4603      	mov	r3, r0
 800d59e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d102      	bne.n	800d5ac <f_getfree+0x128>
 800d5a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d5a8:	3301      	adds	r3, #1
 800d5aa:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800d5ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5ae:	3304      	adds	r3, #4
 800d5b0:	633b      	str	r3, [r7, #48]	; 0x30
 800d5b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5b4:	3b04      	subs	r3, #4
 800d5b6:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800d5b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5ba:	3b01      	subs	r3, #1
 800d5bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d5be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d1bd      	bne.n	800d540 <f_getfree+0xbc>
 800d5c4:	e000      	b.n	800d5c8 <f_getfree+0x144>
							if (res != FR_OK) break;
 800d5c6:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800d5c8:	68bb      	ldr	r3, [r7, #8]
 800d5ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d5cc:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800d5ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d5d2:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800d5d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5d6:	791a      	ldrb	r2, [r3, #4]
 800d5d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5da:	f042 0201 	orr.w	r2, r2, #1
 800d5de:	b2d2      	uxtb	r2, r2
 800d5e0:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800d5e2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	3748      	adds	r7, #72	; 0x48
 800d5ea:	46bd      	mov	sp, r7
 800d5ec:	bd80      	pop	{r7, pc}
	...

0800d5f0 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800d5f0:	b590      	push	{r4, r7, lr}
 800d5f2:	b09d      	sub	sp, #116	; 0x74
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	60f8      	str	r0, [r7, #12]
 800d5f8:	607a      	str	r2, [r7, #4]
 800d5fa:	603b      	str	r3, [r7, #0]
 800d5fc:	460b      	mov	r3, r1
 800d5fe:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800d600:	2301      	movs	r3, #1
 800d602:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 800d604:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d608:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800d60a:	f107 030c 	add.w	r3, r7, #12
 800d60e:	4618      	mov	r0, r3
 800d610:	f7ff fbc4 	bl	800cd9c <get_ldnumber>
 800d614:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d616:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d618:	2b00      	cmp	r3, #0
 800d61a:	da02      	bge.n	800d622 <f_mkfs+0x32>
 800d61c:	230b      	movs	r3, #11
 800d61e:	f000 bc0d 	b.w	800de3c <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800d622:	4a94      	ldr	r2, [pc, #592]	; (800d874 <f_mkfs+0x284>)
 800d624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d005      	beq.n	800d63a <f_mkfs+0x4a>
 800d62e:	4a91      	ldr	r2, [pc, #580]	; (800d874 <f_mkfs+0x284>)
 800d630:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d632:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d636:	2200      	movs	r2, #0
 800d638:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800d63a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d63c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800d640:	2300      	movs	r3, #0
 800d642:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800d646:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800d64a:	4618      	mov	r0, r3
 800d64c:	f7ff f924 	bl	800c898 <disk_initialize>
 800d650:	4603      	mov	r3, r0
 800d652:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800d656:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800d65a:	f003 0301 	and.w	r3, r3, #1
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d001      	beq.n	800d666 <f_mkfs+0x76>
 800d662:	2303      	movs	r3, #3
 800d664:	e3ea      	b.n	800de3c <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800d666:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800d66a:	f003 0304 	and.w	r3, r3, #4
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d001      	beq.n	800d676 <f_mkfs+0x86>
 800d672:	230a      	movs	r3, #10
 800d674:	e3e2      	b.n	800de3c <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800d676:	f107 0214 	add.w	r2, r7, #20
 800d67a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800d67e:	2103      	movs	r1, #3
 800d680:	4618      	mov	r0, r3
 800d682:	f7ff f96f 	bl	800c964 <disk_ioctl>
 800d686:	4603      	mov	r3, r0
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d10c      	bne.n	800d6a6 <f_mkfs+0xb6>
 800d68c:	697b      	ldr	r3, [r7, #20]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d009      	beq.n	800d6a6 <f_mkfs+0xb6>
 800d692:	697b      	ldr	r3, [r7, #20]
 800d694:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d698:	d805      	bhi.n	800d6a6 <f_mkfs+0xb6>
 800d69a:	697b      	ldr	r3, [r7, #20]
 800d69c:	1e5a      	subs	r2, r3, #1
 800d69e:	697b      	ldr	r3, [r7, #20]
 800d6a0:	4013      	ands	r3, r2
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d001      	beq.n	800d6aa <f_mkfs+0xba>
 800d6a6:	2301      	movs	r3, #1
 800d6a8:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 800d6aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d6ae:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d003      	beq.n	800d6be <f_mkfs+0xce>
 800d6b6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d6b8:	687a      	ldr	r2, [r7, #4]
 800d6ba:	429a      	cmp	r2, r3
 800d6bc:	d309      	bcc.n	800d6d2 <f_mkfs+0xe2>
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d6c4:	d805      	bhi.n	800d6d2 <f_mkfs+0xe2>
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	1e5a      	subs	r2, r3, #1
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	4013      	ands	r3, r2
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d001      	beq.n	800d6d6 <f_mkfs+0xe6>
 800d6d2:	2313      	movs	r3, #19
 800d6d4:	e3b2      	b.n	800de3c <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 800d6d6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d6d8:	687a      	ldr	r2, [r7, #4]
 800d6da:	fbb2 f3f3 	udiv	r3, r2, r3
 800d6de:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800d6e0:	683b      	ldr	r3, [r7, #0]
 800d6e2:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800d6e4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d6e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d6ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800d6ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800d6f0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800d6f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6f4:	fb02 f303 	mul.w	r3, r2, r3
 800d6f8:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 800d6fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d101      	bne.n	800d704 <f_mkfs+0x114>
 800d700:	230e      	movs	r3, #14
 800d702:	e39b      	b.n	800de3c <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800d704:	f107 0210 	add.w	r2, r7, #16
 800d708:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800d70c:	2101      	movs	r1, #1
 800d70e:	4618      	mov	r0, r3
 800d710:	f7ff f928 	bl	800c964 <disk_ioctl>
 800d714:	4603      	mov	r3, r0
 800d716:	2b00      	cmp	r3, #0
 800d718:	d001      	beq.n	800d71e <f_mkfs+0x12e>
 800d71a:	2301      	movs	r3, #1
 800d71c:	e38e      	b.n	800de3c <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800d71e:	7afb      	ldrb	r3, [r7, #11]
 800d720:	f003 0308 	and.w	r3, r3, #8
 800d724:	2b00      	cmp	r3, #0
 800d726:	d001      	beq.n	800d72c <f_mkfs+0x13c>
 800d728:	2300      	movs	r3, #0
 800d72a:	e000      	b.n	800d72e <f_mkfs+0x13e>
 800d72c:	233f      	movs	r3, #63	; 0x3f
 800d72e:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800d730:	693b      	ldr	r3, [r7, #16]
 800d732:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d734:	429a      	cmp	r2, r3
 800d736:	d901      	bls.n	800d73c <f_mkfs+0x14c>
 800d738:	230e      	movs	r3, #14
 800d73a:	e37f      	b.n	800de3c <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 800d73c:	693a      	ldr	r2, [r7, #16]
 800d73e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d740:	1ad3      	subs	r3, r2, r3
 800d742:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800d744:	693b      	ldr	r3, [r7, #16]
 800d746:	2b7f      	cmp	r3, #127	; 0x7f
 800d748:	d801      	bhi.n	800d74e <f_mkfs+0x15e>
 800d74a:	230e      	movs	r3, #14
 800d74c:	e376      	b.n	800de3c <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	2b80      	cmp	r3, #128	; 0x80
 800d752:	d901      	bls.n	800d758 <f_mkfs+0x168>
 800d754:	2313      	movs	r3, #19
 800d756:	e371      	b.n	800de3c <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800d758:	7afb      	ldrb	r3, [r7, #11]
 800d75a:	f003 0302 	and.w	r3, r3, #2
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d00d      	beq.n	800d77e <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800d762:	7afb      	ldrb	r3, [r7, #11]
 800d764:	f003 0307 	and.w	r3, r3, #7
 800d768:	2b02      	cmp	r3, #2
 800d76a:	d004      	beq.n	800d776 <f_mkfs+0x186>
 800d76c:	7afb      	ldrb	r3, [r7, #11]
 800d76e:	f003 0301 	and.w	r3, r3, #1
 800d772:	2b00      	cmp	r3, #0
 800d774:	d103      	bne.n	800d77e <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 800d776:	2303      	movs	r3, #3
 800d778:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800d77c:	e009      	b.n	800d792 <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800d77e:	7afb      	ldrb	r3, [r7, #11]
 800d780:	f003 0301 	and.w	r3, r3, #1
 800d784:	2b00      	cmp	r3, #0
 800d786:	d101      	bne.n	800d78c <f_mkfs+0x19c>
 800d788:	2313      	movs	r3, #19
 800d78a:	e357      	b.n	800de3c <f_mkfs+0x84c>
		fmt = FS_FAT16;
 800d78c:	2302      	movs	r3, #2
 800d78e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800d796:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d79a:	2b03      	cmp	r3, #3
 800d79c:	d13c      	bne.n	800d818 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 800d79e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d11b      	bne.n	800d7dc <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800d7a4:	693b      	ldr	r3, [r7, #16]
 800d7a6:	0c5b      	lsrs	r3, r3, #17
 800d7a8:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800d7aa:	2300      	movs	r3, #0
 800d7ac:	64bb      	str	r3, [r7, #72]	; 0x48
 800d7ae:	2301      	movs	r3, #1
 800d7b0:	653b      	str	r3, [r7, #80]	; 0x50
 800d7b2:	e005      	b.n	800d7c0 <f_mkfs+0x1d0>
 800d7b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d7b6:	3301      	adds	r3, #1
 800d7b8:	64bb      	str	r3, [r7, #72]	; 0x48
 800d7ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d7bc:	005b      	lsls	r3, r3, #1
 800d7be:	653b      	str	r3, [r7, #80]	; 0x50
 800d7c0:	4a2d      	ldr	r2, [pc, #180]	; (800d878 <f_mkfs+0x288>)
 800d7c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d7c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d007      	beq.n	800d7dc <f_mkfs+0x1ec>
 800d7cc:	4a2a      	ldr	r2, [pc, #168]	; (800d878 <f_mkfs+0x288>)
 800d7ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d7d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d7d4:	461a      	mov	r2, r3
 800d7d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d7d8:	4293      	cmp	r3, r2
 800d7da:	d2eb      	bcs.n	800d7b4 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800d7dc:	693a      	ldr	r2, [r7, #16]
 800d7de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d7e0:	fbb2 f3f3 	udiv	r3, r2, r3
 800d7e4:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800d7e6:	6a3b      	ldr	r3, [r7, #32]
 800d7e8:	3302      	adds	r3, #2
 800d7ea:	009a      	lsls	r2, r3, #2
 800d7ec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d7ee:	4413      	add	r3, r2
 800d7f0:	1e5a      	subs	r2, r3, #1
 800d7f2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d7f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800d7f8:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 800d7fa:	2320      	movs	r3, #32
 800d7fc:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 800d7fe:	2300      	movs	r3, #0
 800d800:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800d802:	6a3b      	ldr	r3, [r7, #32]
 800d804:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d808:	4293      	cmp	r3, r2
 800d80a:	d903      	bls.n	800d814 <f_mkfs+0x224>
 800d80c:	6a3b      	ldr	r3, [r7, #32]
 800d80e:	4a1b      	ldr	r2, [pc, #108]	; (800d87c <f_mkfs+0x28c>)
 800d810:	4293      	cmp	r3, r2
 800d812:	d952      	bls.n	800d8ba <f_mkfs+0x2ca>
 800d814:	230e      	movs	r3, #14
 800d816:	e311      	b.n	800de3c <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800d818:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d11b      	bne.n	800d856 <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800d81e:	693b      	ldr	r3, [r7, #16]
 800d820:	0b1b      	lsrs	r3, r3, #12
 800d822:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800d824:	2300      	movs	r3, #0
 800d826:	64bb      	str	r3, [r7, #72]	; 0x48
 800d828:	2301      	movs	r3, #1
 800d82a:	653b      	str	r3, [r7, #80]	; 0x50
 800d82c:	e005      	b.n	800d83a <f_mkfs+0x24a>
 800d82e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d830:	3301      	adds	r3, #1
 800d832:	64bb      	str	r3, [r7, #72]	; 0x48
 800d834:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d836:	005b      	lsls	r3, r3, #1
 800d838:	653b      	str	r3, [r7, #80]	; 0x50
 800d83a:	4a11      	ldr	r2, [pc, #68]	; (800d880 <f_mkfs+0x290>)
 800d83c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d83e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d842:	2b00      	cmp	r3, #0
 800d844:	d007      	beq.n	800d856 <f_mkfs+0x266>
 800d846:	4a0e      	ldr	r2, [pc, #56]	; (800d880 <f_mkfs+0x290>)
 800d848:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d84a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d84e:	461a      	mov	r2, r3
 800d850:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d852:	4293      	cmp	r3, r2
 800d854:	d2eb      	bcs.n	800d82e <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 800d856:	693a      	ldr	r2, [r7, #16]
 800d858:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d85a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d85e:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 800d860:	6a3b      	ldr	r3, [r7, #32]
 800d862:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d866:	4293      	cmp	r3, r2
 800d868:	d90c      	bls.n	800d884 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800d86a:	6a3b      	ldr	r3, [r7, #32]
 800d86c:	3302      	adds	r3, #2
 800d86e:	005b      	lsls	r3, r3, #1
 800d870:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d872:	e012      	b.n	800d89a <f_mkfs+0x2aa>
 800d874:	20000ac4 	.word	0x20000ac4
 800d878:	080136f4 	.word	0x080136f4
 800d87c:	0ffffff5 	.word	0x0ffffff5
 800d880:	08013704 	.word	0x08013704
				} else {
					fmt = FS_FAT12;
 800d884:	2301      	movs	r3, #1
 800d886:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800d88a:	6a3a      	ldr	r2, [r7, #32]
 800d88c:	4613      	mov	r3, r2
 800d88e:	005b      	lsls	r3, r3, #1
 800d890:	4413      	add	r3, r2
 800d892:	3301      	adds	r3, #1
 800d894:	085b      	lsrs	r3, r3, #1
 800d896:	3303      	adds	r3, #3
 800d898:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800d89a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800d89c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d89e:	4413      	add	r3, r2
 800d8a0:	1e5a      	subs	r2, r3, #1
 800d8a2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d8a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800d8a8:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 800d8aa:	2301      	movs	r3, #1
 800d8ac:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800d8ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d8b0:	015a      	lsls	r2, r3, #5
 800d8b2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d8b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800d8b8:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800d8ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d8bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d8be:	4413      	add	r3, r2
 800d8c0:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800d8c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d8c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d8c6:	fb02 f203 	mul.w	r2, r2, r3
 800d8ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d8cc:	4413      	add	r3, r2
 800d8ce:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d8d0:	4413      	add	r3, r2
 800d8d2:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800d8d4:	697a      	ldr	r2, [r7, #20]
 800d8d6:	69fb      	ldr	r3, [r7, #28]
 800d8d8:	4413      	add	r3, r2
 800d8da:	1e5a      	subs	r2, r3, #1
 800d8dc:	697b      	ldr	r3, [r7, #20]
 800d8de:	425b      	negs	r3, r3
 800d8e0:	401a      	ands	r2, r3
 800d8e2:	69fb      	ldr	r3, [r7, #28]
 800d8e4:	1ad3      	subs	r3, r2, r3
 800d8e6:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 800d8e8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d8ec:	2b03      	cmp	r3, #3
 800d8ee:	d108      	bne.n	800d902 <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 800d8f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d8f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d8f4:	4413      	add	r3, r2
 800d8f6:	657b      	str	r3, [r7, #84]	; 0x54
 800d8f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d8fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d8fc:	4413      	add	r3, r2
 800d8fe:	65bb      	str	r3, [r7, #88]	; 0x58
 800d900:	e006      	b.n	800d910 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800d902:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d904:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d906:	fbb2 f3f3 	udiv	r3, r2, r3
 800d90a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d90c:	4413      	add	r3, r2
 800d90e:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800d910:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d912:	011a      	lsls	r2, r3, #4
 800d914:	69fb      	ldr	r3, [r7, #28]
 800d916:	441a      	add	r2, r3
 800d918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d91a:	1ad2      	subs	r2, r2, r3
 800d91c:	693b      	ldr	r3, [r7, #16]
 800d91e:	429a      	cmp	r2, r3
 800d920:	d901      	bls.n	800d926 <f_mkfs+0x336>
 800d922:	230e      	movs	r3, #14
 800d924:	e28a      	b.n	800de3c <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800d926:	693a      	ldr	r2, [r7, #16]
 800d928:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d92a:	1ad2      	subs	r2, r2, r3
 800d92c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d92e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d930:	fb01 f303 	mul.w	r3, r1, r3
 800d934:	1ad2      	subs	r2, r2, r3
 800d936:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d938:	1ad2      	subs	r2, r2, r3
 800d93a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d93c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d940:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 800d942:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d946:	2b03      	cmp	r3, #3
 800d948:	d10f      	bne.n	800d96a <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800d94a:	6a3b      	ldr	r3, [r7, #32]
 800d94c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d950:	4293      	cmp	r3, r2
 800d952:	d80a      	bhi.n	800d96a <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	2b00      	cmp	r3, #0
 800d958:	d105      	bne.n	800d966 <f_mkfs+0x376>
 800d95a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d95c:	085b      	lsrs	r3, r3, #1
 800d95e:	607b      	str	r3, [r7, #4]
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	2b00      	cmp	r3, #0
 800d964:	d144      	bne.n	800d9f0 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 800d966:	230e      	movs	r3, #14
 800d968:	e268      	b.n	800de3c <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 800d96a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d96e:	2b02      	cmp	r3, #2
 800d970:	d133      	bne.n	800d9da <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800d972:	6a3b      	ldr	r3, [r7, #32]
 800d974:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d978:	4293      	cmp	r3, r2
 800d97a:	d91e      	bls.n	800d9ba <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d107      	bne.n	800d992 <f_mkfs+0x3a2>
 800d982:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d984:	005b      	lsls	r3, r3, #1
 800d986:	2b40      	cmp	r3, #64	; 0x40
 800d988:	d803      	bhi.n	800d992 <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 800d98a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d98c:	005b      	lsls	r3, r3, #1
 800d98e:	607b      	str	r3, [r7, #4]
 800d990:	e033      	b.n	800d9fa <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 800d992:	7afb      	ldrb	r3, [r7, #11]
 800d994:	f003 0302 	and.w	r3, r3, #2
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d003      	beq.n	800d9a4 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800d99c:	2303      	movs	r3, #3
 800d99e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800d9a2:	e02a      	b.n	800d9fa <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d105      	bne.n	800d9b6 <f_mkfs+0x3c6>
 800d9aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d9ac:	005b      	lsls	r3, r3, #1
 800d9ae:	607b      	str	r3, [r7, #4]
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	2b80      	cmp	r3, #128	; 0x80
 800d9b4:	d91e      	bls.n	800d9f4 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 800d9b6:	230e      	movs	r3, #14
 800d9b8:	e240      	b.n	800de3c <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800d9ba:	6a3b      	ldr	r3, [r7, #32]
 800d9bc:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d9c0:	4293      	cmp	r3, r2
 800d9c2:	d80a      	bhi.n	800d9da <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d105      	bne.n	800d9d6 <f_mkfs+0x3e6>
 800d9ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d9cc:	005b      	lsls	r3, r3, #1
 800d9ce:	607b      	str	r3, [r7, #4]
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	2b80      	cmp	r3, #128	; 0x80
 800d9d4:	d910      	bls.n	800d9f8 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 800d9d6:	230e      	movs	r3, #14
 800d9d8:	e230      	b.n	800de3c <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 800d9da:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d9de:	2b01      	cmp	r3, #1
 800d9e0:	d10c      	bne.n	800d9fc <f_mkfs+0x40c>
 800d9e2:	6a3b      	ldr	r3, [r7, #32]
 800d9e4:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d9e8:	4293      	cmp	r3, r2
 800d9ea:	d907      	bls.n	800d9fc <f_mkfs+0x40c>
 800d9ec:	230e      	movs	r3, #14
 800d9ee:	e225      	b.n	800de3c <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800d9f0:	bf00      	nop
 800d9f2:	e6ce      	b.n	800d792 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800d9f4:	bf00      	nop
 800d9f6:	e6cc      	b.n	800d792 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800d9f8:	bf00      	nop
			pau = au;
 800d9fa:	e6ca      	b.n	800d792 <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 800d9fc:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800d9fe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800da00:	461a      	mov	r2, r3
 800da02:	2100      	movs	r1, #0
 800da04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800da06:	f7ff f86e 	bl	800cae6 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800da0a:	220b      	movs	r2, #11
 800da0c:	49bc      	ldr	r1, [pc, #752]	; (800dd00 <f_mkfs+0x710>)
 800da0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800da10:	f7ff f848 	bl	800caa4 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800da14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da16:	330b      	adds	r3, #11
 800da18:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800da1a:	4611      	mov	r1, r2
 800da1c:	4618      	mov	r0, r3
 800da1e:	f7fe fffa 	bl	800ca16 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800da22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da24:	330d      	adds	r3, #13
 800da26:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800da28:	b2d2      	uxtb	r2, r2
 800da2a:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800da2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da2e:	330e      	adds	r3, #14
 800da30:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800da32:	b292      	uxth	r2, r2
 800da34:	4611      	mov	r1, r2
 800da36:	4618      	mov	r0, r3
 800da38:	f7fe ffed 	bl	800ca16 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 800da3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da3e:	3310      	adds	r3, #16
 800da40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800da42:	b2d2      	uxtb	r2, r2
 800da44:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800da46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da48:	f103 0211 	add.w	r2, r3, #17
 800da4c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800da50:	2b03      	cmp	r3, #3
 800da52:	d002      	beq.n	800da5a <f_mkfs+0x46a>
 800da54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da56:	b29b      	uxth	r3, r3
 800da58:	e000      	b.n	800da5c <f_mkfs+0x46c>
 800da5a:	2300      	movs	r3, #0
 800da5c:	4619      	mov	r1, r3
 800da5e:	4610      	mov	r0, r2
 800da60:	f7fe ffd9 	bl	800ca16 <st_word>
		if (sz_vol < 0x10000) {
 800da64:	693b      	ldr	r3, [r7, #16]
 800da66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800da6a:	d208      	bcs.n	800da7e <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800da6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da6e:	3313      	adds	r3, #19
 800da70:	693a      	ldr	r2, [r7, #16]
 800da72:	b292      	uxth	r2, r2
 800da74:	4611      	mov	r1, r2
 800da76:	4618      	mov	r0, r3
 800da78:	f7fe ffcd 	bl	800ca16 <st_word>
 800da7c:	e006      	b.n	800da8c <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 800da7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da80:	3320      	adds	r3, #32
 800da82:	693a      	ldr	r2, [r7, #16]
 800da84:	4611      	mov	r1, r2
 800da86:	4618      	mov	r0, r3
 800da88:	f7fe ffe0 	bl	800ca4c <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800da8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da8e:	3315      	adds	r3, #21
 800da90:	22f8      	movs	r2, #248	; 0xf8
 800da92:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800da94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da96:	3318      	adds	r3, #24
 800da98:	213f      	movs	r1, #63	; 0x3f
 800da9a:	4618      	mov	r0, r3
 800da9c:	f7fe ffbb 	bl	800ca16 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800daa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daa2:	331a      	adds	r3, #26
 800daa4:	21ff      	movs	r1, #255	; 0xff
 800daa6:	4618      	mov	r0, r3
 800daa8:	f7fe ffb5 	bl	800ca16 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 800daac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daae:	331c      	adds	r3, #28
 800dab0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dab2:	4618      	mov	r0, r3
 800dab4:	f7fe ffca 	bl	800ca4c <st_dword>
		if (fmt == FS_FAT32) {
 800dab8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800dabc:	2b03      	cmp	r3, #3
 800dabe:	d131      	bne.n	800db24 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800dac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dac2:	f103 0443 	add.w	r4, r3, #67	; 0x43
 800dac6:	f7fd f845 	bl	800ab54 <get_fattime>
 800daca:	4603      	mov	r3, r0
 800dacc:	4619      	mov	r1, r3
 800dace:	4620      	mov	r0, r4
 800dad0:	f7fe ffbc 	bl	800ca4c <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800dad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dad6:	3324      	adds	r3, #36	; 0x24
 800dad8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800dada:	4618      	mov	r0, r3
 800dadc:	f7fe ffb6 	bl	800ca4c <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800dae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dae2:	332c      	adds	r3, #44	; 0x2c
 800dae4:	2102      	movs	r1, #2
 800dae6:	4618      	mov	r0, r3
 800dae8:	f7fe ffb0 	bl	800ca4c <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800daec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daee:	3330      	adds	r3, #48	; 0x30
 800daf0:	2101      	movs	r1, #1
 800daf2:	4618      	mov	r0, r3
 800daf4:	f7fe ff8f 	bl	800ca16 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800daf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dafa:	3332      	adds	r3, #50	; 0x32
 800dafc:	2106      	movs	r1, #6
 800dafe:	4618      	mov	r0, r3
 800db00:	f7fe ff89 	bl	800ca16 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800db04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db06:	3340      	adds	r3, #64	; 0x40
 800db08:	2280      	movs	r2, #128	; 0x80
 800db0a:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800db0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db0e:	3342      	adds	r3, #66	; 0x42
 800db10:	2229      	movs	r2, #41	; 0x29
 800db12:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800db14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db16:	3347      	adds	r3, #71	; 0x47
 800db18:	2213      	movs	r2, #19
 800db1a:	497a      	ldr	r1, [pc, #488]	; (800dd04 <f_mkfs+0x714>)
 800db1c:	4618      	mov	r0, r3
 800db1e:	f7fe ffc1 	bl	800caa4 <mem_cpy>
 800db22:	e020      	b.n	800db66 <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800db24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db26:	f103 0427 	add.w	r4, r3, #39	; 0x27
 800db2a:	f7fd f813 	bl	800ab54 <get_fattime>
 800db2e:	4603      	mov	r3, r0
 800db30:	4619      	mov	r1, r3
 800db32:	4620      	mov	r0, r4
 800db34:	f7fe ff8a 	bl	800ca4c <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800db38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db3a:	3316      	adds	r3, #22
 800db3c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800db3e:	b292      	uxth	r2, r2
 800db40:	4611      	mov	r1, r2
 800db42:	4618      	mov	r0, r3
 800db44:	f7fe ff67 	bl	800ca16 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800db48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db4a:	3324      	adds	r3, #36	; 0x24
 800db4c:	2280      	movs	r2, #128	; 0x80
 800db4e:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800db50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db52:	3326      	adds	r3, #38	; 0x26
 800db54:	2229      	movs	r2, #41	; 0x29
 800db56:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800db58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db5a:	332b      	adds	r3, #43	; 0x2b
 800db5c:	2213      	movs	r2, #19
 800db5e:	496a      	ldr	r1, [pc, #424]	; (800dd08 <f_mkfs+0x718>)
 800db60:	4618      	mov	r0, r3
 800db62:	f7fe ff9f 	bl	800caa4 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800db66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db68:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800db6c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800db70:	4618      	mov	r0, r3
 800db72:	f7fe ff50 	bl	800ca16 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800db76:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800db7a:	2301      	movs	r3, #1
 800db7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db7e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800db80:	f7fe fed0 	bl	800c924 <disk_write>
 800db84:	4603      	mov	r3, r0
 800db86:	2b00      	cmp	r3, #0
 800db88:	d001      	beq.n	800db8e <f_mkfs+0x59e>
 800db8a:	2301      	movs	r3, #1
 800db8c:	e156      	b.n	800de3c <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 800db8e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800db92:	2b03      	cmp	r3, #3
 800db94:	d140      	bne.n	800dc18 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800db96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db98:	1d9a      	adds	r2, r3, #6
 800db9a:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800db9e:	2301      	movs	r3, #1
 800dba0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dba2:	f7fe febf 	bl	800c924 <disk_write>
			mem_set(buf, 0, ss);
 800dba6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800dba8:	461a      	mov	r2, r3
 800dbaa:	2100      	movs	r1, #0
 800dbac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dbae:	f7fe ff9a 	bl	800cae6 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800dbb2:	4956      	ldr	r1, [pc, #344]	; (800dd0c <f_mkfs+0x71c>)
 800dbb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dbb6:	f7fe ff49 	bl	800ca4c <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800dbba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbbc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800dbc0:	4953      	ldr	r1, [pc, #332]	; (800dd10 <f_mkfs+0x720>)
 800dbc2:	4618      	mov	r0, r3
 800dbc4:	f7fe ff42 	bl	800ca4c <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800dbc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbca:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800dbce:	6a3b      	ldr	r3, [r7, #32]
 800dbd0:	3b01      	subs	r3, #1
 800dbd2:	4619      	mov	r1, r3
 800dbd4:	4610      	mov	r0, r2
 800dbd6:	f7fe ff39 	bl	800ca4c <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800dbda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbdc:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800dbe0:	2102      	movs	r1, #2
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	f7fe ff32 	bl	800ca4c <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800dbe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbea:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800dbee:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	f7fe ff0f 	bl	800ca16 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800dbf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbfa:	1dda      	adds	r2, r3, #7
 800dbfc:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800dc00:	2301      	movs	r3, #1
 800dc02:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dc04:	f7fe fe8e 	bl	800c924 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800dc08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc0a:	1c5a      	adds	r2, r3, #1
 800dc0c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800dc10:	2301      	movs	r3, #1
 800dc12:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dc14:	f7fe fe86 	bl	800c924 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 800dc18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dc1a:	2100      	movs	r1, #0
 800dc1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dc1e:	f7fe ff62 	bl	800cae6 <mem_set>
		sect = b_fat;		/* FAT start sector */
 800dc22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dc24:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800dc26:	2300      	movs	r3, #0
 800dc28:	64bb      	str	r3, [r7, #72]	; 0x48
 800dc2a:	e04b      	b.n	800dcc4 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 800dc2c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800dc30:	2b03      	cmp	r3, #3
 800dc32:	d113      	bne.n	800dc5c <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 800dc34:	f06f 0107 	mvn.w	r1, #7
 800dc38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dc3a:	f7fe ff07 	bl	800ca4c <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800dc3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc40:	3304      	adds	r3, #4
 800dc42:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800dc46:	4618      	mov	r0, r3
 800dc48:	f7fe ff00 	bl	800ca4c <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 800dc4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc4e:	3308      	adds	r3, #8
 800dc50:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800dc54:	4618      	mov	r0, r3
 800dc56:	f7fe fef9 	bl	800ca4c <st_dword>
 800dc5a:	e00b      	b.n	800dc74 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 800dc5c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800dc60:	2b01      	cmp	r3, #1
 800dc62:	d101      	bne.n	800dc68 <f_mkfs+0x678>
 800dc64:	4b2b      	ldr	r3, [pc, #172]	; (800dd14 <f_mkfs+0x724>)
 800dc66:	e001      	b.n	800dc6c <f_mkfs+0x67c>
 800dc68:	f06f 0307 	mvn.w	r3, #7
 800dc6c:	4619      	mov	r1, r3
 800dc6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dc70:	f7fe feec 	bl	800ca4c <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800dc74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dc76:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800dc78:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800dc7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc7c:	4293      	cmp	r3, r2
 800dc7e:	bf28      	it	cs
 800dc80:	4613      	movcs	r3, r2
 800dc82:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800dc84:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800dc88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dc8a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800dc8c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dc8e:	f7fe fe49 	bl	800c924 <disk_write>
 800dc92:	4603      	mov	r3, r0
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d001      	beq.n	800dc9c <f_mkfs+0x6ac>
 800dc98:	2301      	movs	r3, #1
 800dc9a:	e0cf      	b.n	800de3c <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 800dc9c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800dc9e:	461a      	mov	r2, r3
 800dca0:	2100      	movs	r1, #0
 800dca2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dca4:	f7fe ff1f 	bl	800cae6 <mem_set>
				sect += n; nsect -= n;
 800dca8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800dcaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dcac:	4413      	add	r3, r2
 800dcae:	667b      	str	r3, [r7, #100]	; 0x64
 800dcb0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800dcb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dcb4:	1ad3      	subs	r3, r2, r3
 800dcb6:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 800dcb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d1dc      	bne.n	800dc78 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800dcbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dcc0:	3301      	adds	r3, #1
 800dcc2:	64bb      	str	r3, [r7, #72]	; 0x48
 800dcc4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dcc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dcc8:	429a      	cmp	r2, r3
 800dcca:	d3af      	bcc.n	800dc2c <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800dccc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800dcd0:	2b03      	cmp	r3, #3
 800dcd2:	d101      	bne.n	800dcd8 <f_mkfs+0x6e8>
 800dcd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dcd6:	e000      	b.n	800dcda <f_mkfs+0x6ea>
 800dcd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dcda:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800dcdc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800dcde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dce0:	4293      	cmp	r3, r2
 800dce2:	bf28      	it	cs
 800dce4:	4613      	movcs	r3, r2
 800dce6:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800dce8:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800dcec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dcee:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800dcf0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dcf2:	f7fe fe17 	bl	800c924 <disk_write>
 800dcf6:	4603      	mov	r3, r0
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d00d      	beq.n	800dd18 <f_mkfs+0x728>
 800dcfc:	2301      	movs	r3, #1
 800dcfe:	e09d      	b.n	800de3c <f_mkfs+0x84c>
 800dd00:	080135d4 	.word	0x080135d4
 800dd04:	080135e0 	.word	0x080135e0
 800dd08:	080135f4 	.word	0x080135f4
 800dd0c:	41615252 	.word	0x41615252
 800dd10:	61417272 	.word	0x61417272
 800dd14:	00fffff8 	.word	0x00fffff8
			sect += n; nsect -= n;
 800dd18:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800dd1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dd1c:	4413      	add	r3, r2
 800dd1e:	667b      	str	r3, [r7, #100]	; 0x64
 800dd20:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800dd22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dd24:	1ad3      	subs	r3, r2, r3
 800dd26:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 800dd28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d1d6      	bne.n	800dcdc <f_mkfs+0x6ec>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 800dd2e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800dd32:	2b03      	cmp	r3, #3
 800dd34:	d103      	bne.n	800dd3e <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 800dd36:	230c      	movs	r3, #12
 800dd38:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800dd3c:	e010      	b.n	800dd60 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 800dd3e:	693b      	ldr	r3, [r7, #16]
 800dd40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dd44:	d303      	bcc.n	800dd4e <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800dd46:	2306      	movs	r3, #6
 800dd48:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800dd4c:	e008      	b.n	800dd60 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800dd4e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800dd52:	2b02      	cmp	r3, #2
 800dd54:	d101      	bne.n	800dd5a <f_mkfs+0x76a>
 800dd56:	2304      	movs	r3, #4
 800dd58:	e000      	b.n	800dd5c <f_mkfs+0x76c>
 800dd5a:	2301      	movs	r3, #1
 800dd5c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 800dd60:	7afb      	ldrb	r3, [r7, #11]
 800dd62:	f003 0308 	and.w	r3, r3, #8
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d15b      	bne.n	800de22 <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 800dd6a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800dd6c:	461a      	mov	r2, r3
 800dd6e:	2100      	movs	r1, #0
 800dd70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dd72:	f7fe feb8 	bl	800cae6 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800dd76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd78:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800dd7c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800dd80:	4618      	mov	r0, r3
 800dd82:	f7fe fe48 	bl	800ca16 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 800dd86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd88:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800dd8c:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 800dd8e:	69bb      	ldr	r3, [r7, #24]
 800dd90:	2200      	movs	r2, #0
 800dd92:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 800dd94:	69bb      	ldr	r3, [r7, #24]
 800dd96:	3301      	adds	r3, #1
 800dd98:	2201      	movs	r2, #1
 800dd9a:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 800dd9c:	69bb      	ldr	r3, [r7, #24]
 800dd9e:	3302      	adds	r3, #2
 800dda0:	2201      	movs	r2, #1
 800dda2:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 800dda4:	69bb      	ldr	r3, [r7, #24]
 800dda6:	3303      	adds	r3, #3
 800dda8:	2200      	movs	r2, #0
 800ddaa:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 800ddac:	69bb      	ldr	r3, [r7, #24]
 800ddae:	3304      	adds	r3, #4
 800ddb0:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800ddb4:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 800ddb6:	693a      	ldr	r2, [r7, #16]
 800ddb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddba:	441a      	add	r2, r3
 800ddbc:	4b21      	ldr	r3, [pc, #132]	; (800de44 <f_mkfs+0x854>)
 800ddbe:	fba3 1302 	umull	r1, r3, r3, r2
 800ddc2:	1ad2      	subs	r2, r2, r3
 800ddc4:	0852      	lsrs	r2, r2, #1
 800ddc6:	4413      	add	r3, r2
 800ddc8:	0b5b      	lsrs	r3, r3, #13
 800ddca:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 800ddcc:	69bb      	ldr	r3, [r7, #24]
 800ddce:	3305      	adds	r3, #5
 800ddd0:	22fe      	movs	r2, #254	; 0xfe
 800ddd2:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 800ddd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ddd6:	089b      	lsrs	r3, r3, #2
 800ddd8:	b2da      	uxtb	r2, r3
 800ddda:	69bb      	ldr	r3, [r7, #24]
 800dddc:	3306      	adds	r3, #6
 800ddde:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800dde2:	b2d2      	uxtb	r2, r2
 800dde4:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 800dde6:	69bb      	ldr	r3, [r7, #24]
 800dde8:	3307      	adds	r3, #7
 800ddea:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ddec:	b2d2      	uxtb	r2, r2
 800ddee:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 800ddf0:	69bb      	ldr	r3, [r7, #24]
 800ddf2:	3308      	adds	r3, #8
 800ddf4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	f7fe fe28 	bl	800ca4c <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 800ddfc:	69bb      	ldr	r3, [r7, #24]
 800ddfe:	330c      	adds	r3, #12
 800de00:	693a      	ldr	r2, [r7, #16]
 800de02:	4611      	mov	r1, r2
 800de04:	4618      	mov	r0, r3
 800de06:	f7fe fe21 	bl	800ca4c <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800de0a:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800de0e:	2301      	movs	r3, #1
 800de10:	2200      	movs	r2, #0
 800de12:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800de14:	f7fe fd86 	bl	800c924 <disk_write>
 800de18:	4603      	mov	r3, r0
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d001      	beq.n	800de22 <f_mkfs+0x832>
 800de1e:	2301      	movs	r3, #1
 800de20:	e00c      	b.n	800de3c <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800de22:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800de26:	2200      	movs	r2, #0
 800de28:	2100      	movs	r1, #0
 800de2a:	4618      	mov	r0, r3
 800de2c:	f7fe fd9a 	bl	800c964 <disk_ioctl>
 800de30:	4603      	mov	r3, r0
 800de32:	2b00      	cmp	r3, #0
 800de34:	d001      	beq.n	800de3a <f_mkfs+0x84a>
 800de36:	2301      	movs	r3, #1
 800de38:	e000      	b.n	800de3c <f_mkfs+0x84c>

	return FR_OK;
 800de3a:	2300      	movs	r3, #0
}
 800de3c:	4618      	mov	r0, r3
 800de3e:	3774      	adds	r7, #116	; 0x74
 800de40:	46bd      	mov	sp, r7
 800de42:	bd90      	pop	{r4, r7, pc}
 800de44:	0515565b 	.word	0x0515565b

0800de48 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800de48:	b480      	push	{r7}
 800de4a:	b087      	sub	sp, #28
 800de4c:	af00      	add	r7, sp, #0
 800de4e:	60f8      	str	r0, [r7, #12]
 800de50:	60b9      	str	r1, [r7, #8]
 800de52:	4613      	mov	r3, r2
 800de54:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800de56:	2301      	movs	r3, #1
 800de58:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800de5a:	2300      	movs	r3, #0
 800de5c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800de5e:	4b1f      	ldr	r3, [pc, #124]	; (800dedc <FATFS_LinkDriverEx+0x94>)
 800de60:	7a5b      	ldrb	r3, [r3, #9]
 800de62:	b2db      	uxtb	r3, r3
 800de64:	2b00      	cmp	r3, #0
 800de66:	d131      	bne.n	800decc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800de68:	4b1c      	ldr	r3, [pc, #112]	; (800dedc <FATFS_LinkDriverEx+0x94>)
 800de6a:	7a5b      	ldrb	r3, [r3, #9]
 800de6c:	b2db      	uxtb	r3, r3
 800de6e:	461a      	mov	r2, r3
 800de70:	4b1a      	ldr	r3, [pc, #104]	; (800dedc <FATFS_LinkDriverEx+0x94>)
 800de72:	2100      	movs	r1, #0
 800de74:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800de76:	4b19      	ldr	r3, [pc, #100]	; (800dedc <FATFS_LinkDriverEx+0x94>)
 800de78:	7a5b      	ldrb	r3, [r3, #9]
 800de7a:	b2db      	uxtb	r3, r3
 800de7c:	4a17      	ldr	r2, [pc, #92]	; (800dedc <FATFS_LinkDriverEx+0x94>)
 800de7e:	009b      	lsls	r3, r3, #2
 800de80:	4413      	add	r3, r2
 800de82:	68fa      	ldr	r2, [r7, #12]
 800de84:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800de86:	4b15      	ldr	r3, [pc, #84]	; (800dedc <FATFS_LinkDriverEx+0x94>)
 800de88:	7a5b      	ldrb	r3, [r3, #9]
 800de8a:	b2db      	uxtb	r3, r3
 800de8c:	461a      	mov	r2, r3
 800de8e:	4b13      	ldr	r3, [pc, #76]	; (800dedc <FATFS_LinkDriverEx+0x94>)
 800de90:	4413      	add	r3, r2
 800de92:	79fa      	ldrb	r2, [r7, #7]
 800de94:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800de96:	4b11      	ldr	r3, [pc, #68]	; (800dedc <FATFS_LinkDriverEx+0x94>)
 800de98:	7a5b      	ldrb	r3, [r3, #9]
 800de9a:	b2db      	uxtb	r3, r3
 800de9c:	1c5a      	adds	r2, r3, #1
 800de9e:	b2d1      	uxtb	r1, r2
 800dea0:	4a0e      	ldr	r2, [pc, #56]	; (800dedc <FATFS_LinkDriverEx+0x94>)
 800dea2:	7251      	strb	r1, [r2, #9]
 800dea4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800dea6:	7dbb      	ldrb	r3, [r7, #22]
 800dea8:	3330      	adds	r3, #48	; 0x30
 800deaa:	b2da      	uxtb	r2, r3
 800deac:	68bb      	ldr	r3, [r7, #8]
 800deae:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800deb0:	68bb      	ldr	r3, [r7, #8]
 800deb2:	3301      	adds	r3, #1
 800deb4:	223a      	movs	r2, #58	; 0x3a
 800deb6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800deb8:	68bb      	ldr	r3, [r7, #8]
 800deba:	3302      	adds	r3, #2
 800debc:	222f      	movs	r2, #47	; 0x2f
 800debe:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800dec0:	68bb      	ldr	r3, [r7, #8]
 800dec2:	3303      	adds	r3, #3
 800dec4:	2200      	movs	r2, #0
 800dec6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800dec8:	2300      	movs	r3, #0
 800deca:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800decc:	7dfb      	ldrb	r3, [r7, #23]
}
 800dece:	4618      	mov	r0, r3
 800ded0:	371c      	adds	r7, #28
 800ded2:	46bd      	mov	sp, r7
 800ded4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded8:	4770      	bx	lr
 800deda:	bf00      	nop
 800dedc:	20000cec 	.word	0x20000cec

0800dee0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800dee0:	b580      	push	{r7, lr}
 800dee2:	b082      	sub	sp, #8
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	6078      	str	r0, [r7, #4]
 800dee8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800deea:	2200      	movs	r2, #0
 800deec:	6839      	ldr	r1, [r7, #0]
 800deee:	6878      	ldr	r0, [r7, #4]
 800def0:	f7ff ffaa 	bl	800de48 <FATFS_LinkDriverEx>
 800def4:	4603      	mov	r3, r0
}
 800def6:	4618      	mov	r0, r3
 800def8:	3708      	adds	r7, #8
 800defa:	46bd      	mov	sp, r7
 800defc:	bd80      	pop	{r7, pc}
	...

0800df00 <ee_validate1>:
tEE_DATA ee;

uint32_t ee_invalid_counter = 0;

bool ee_validate1(void)
{
 800df00:	b580      	push	{r7, lr}
 800df02:	af00      	add	r7, sp, #0
	ee_invalid_counter = 0;
 800df04:	4b1b      	ldr	r3, [pc, #108]	; (800df74 <ee_validate1+0x74>)
 800df06:	2200      	movs	r2, #0
 800df08:	601a      	str	r2, [r3, #0]
	ee_invalid_counter += ee_validate_data(EEV_FLOAT, (pFLOAT)&ee.vibration, (pEEV_FLOAT)&EEV_Vibrations);
 800df0a:	4a1b      	ldr	r2, [pc, #108]	; (800df78 <ee_validate1+0x78>)
 800df0c:	491b      	ldr	r1, [pc, #108]	; (800df7c <ee_validate1+0x7c>)
 800df0e:	2006      	movs	r0, #6
 800df10:	f001 fbee 	bl	800f6f0 <ee_validate_data>
 800df14:	4602      	mov	r2, r0
 800df16:	4b17      	ldr	r3, [pc, #92]	; (800df74 <ee_validate1+0x74>)
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	4413      	add	r3, r2
 800df1c:	4a15      	ldr	r2, [pc, #84]	; (800df74 <ee_validate1+0x74>)
 800df1e:	6013      	str	r3, [r2, #0]
	ee_invalid_counter += ee_validate_data(EEV_U08, (pU08)&ee.vibrationRelevatAxis, (pEEV_U08)&EEV_VibrationRelevantAxis);
 800df20:	4a17      	ldr	r2, [pc, #92]	; (800df80 <ee_validate1+0x80>)
 800df22:	4918      	ldr	r1, [pc, #96]	; (800df84 <ee_validate1+0x84>)
 800df24:	2000      	movs	r0, #0
 800df26:	f001 fbe3 	bl	800f6f0 <ee_validate_data>
 800df2a:	4602      	mov	r2, r0
 800df2c:	4b11      	ldr	r3, [pc, #68]	; (800df74 <ee_validate1+0x74>)
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	4413      	add	r3, r2
 800df32:	4a10      	ldr	r2, [pc, #64]	; (800df74 <ee_validate1+0x74>)
 800df34:	6013      	str	r3, [r2, #0]
	ee_invalid_counter += ee_validate_data(EEV_U08, (pU08)&ee.debugLevel, (pEEV_U08)&EEV_DebugLevel);
 800df36:	4a14      	ldr	r2, [pc, #80]	; (800df88 <ee_validate1+0x88>)
 800df38:	4914      	ldr	r1, [pc, #80]	; (800df8c <ee_validate1+0x8c>)
 800df3a:	2000      	movs	r0, #0
 800df3c:	f001 fbd8 	bl	800f6f0 <ee_validate_data>
 800df40:	4602      	mov	r2, r0
 800df42:	4b0c      	ldr	r3, [pc, #48]	; (800df74 <ee_validate1+0x74>)
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	4413      	add	r3, r2
 800df48:	4a0a      	ldr	r2, [pc, #40]	; (800df74 <ee_validate1+0x74>)
 800df4a:	6013      	str	r3, [r2, #0]
	ee_invalid_counter += ee_validate_data(EEV_U16, (pU16)&ee.activeSensors, (pEEV_U16)&EEV_ActiveSensors);
 800df4c:	4a10      	ldr	r2, [pc, #64]	; (800df90 <ee_validate1+0x90>)
 800df4e:	4911      	ldr	r1, [pc, #68]	; (800df94 <ee_validate1+0x94>)
 800df50:	2002      	movs	r0, #2
 800df52:	f001 fbcd 	bl	800f6f0 <ee_validate_data>
 800df56:	4602      	mov	r2, r0
 800df58:	4b06      	ldr	r3, [pc, #24]	; (800df74 <ee_validate1+0x74>)
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	4413      	add	r3, r2
 800df5e:	4a05      	ldr	r2, [pc, #20]	; (800df74 <ee_validate1+0x74>)
 800df60:	6013      	str	r3, [r2, #0]

	return (ee_invalid_counter == 0);
 800df62:	4b04      	ldr	r3, [pc, #16]	; (800df74 <ee_validate1+0x74>)
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	2b00      	cmp	r3, #0
 800df68:	bf0c      	ite	eq
 800df6a:	2301      	moveq	r3, #1
 800df6c:	2300      	movne	r3, #0
 800df6e:	b2db      	uxtb	r3, r3
}
 800df70:	4618      	mov	r0, r3
 800df72:	bd80      	pop	{r7, pc}
 800df74:	20000cf8 	.word	0x20000cf8
 800df78:	20000138 	.word	0x20000138
 800df7c:	20003b98 	.word	0x20003b98
 800df80:	20000144 	.word	0x20000144
 800df84:	20003b9c 	.word	0x20003b9c
 800df88:	20000148 	.word	0x20000148
 800df8c:	20003b9d 	.word	0x20003b9d
 800df90:	2000014c 	.word	0x2000014c
 800df94:	20003b9e 	.word	0x20003b9e

0800df98 <QSPI_Init>:
  * @brief  QSPI Init
  * @param  None
  * @retval HAL_ERROR or HAL_OK
  */
uint8_t QSPI_Init(void)
{
 800df98:	b580      	push	{r7, lr}
 800df9a:	af00      	add	r7, sp, #0
  /* Configuration of the dummy cycles on QSPI memory side */
  if (QSPI_DummyCyclesCfg(&hqspi) != HAL_OK)
 800df9c:	4805      	ldr	r0, [pc, #20]	; (800dfb4 <QSPI_Init+0x1c>)
 800df9e:	f000 fb28 	bl	800e5f2 <QSPI_DummyCyclesCfg>
 800dfa2:	4603      	mov	r3, r0
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d001      	beq.n	800dfac <QSPI_Init+0x14>
  {
    return HAL_ERROR;
 800dfa8:	2301      	movs	r3, #1
 800dfaa:	e000      	b.n	800dfae <QSPI_Init+0x16>
  }
  return HAL_OK;
 800dfac:	2300      	movs	r3, #0
}
 800dfae:	4618      	mov	r0, r3
 800dfb0:	bd80      	pop	{r7, pc}
 800dfb2:	bf00      	nop
 800dfb4:	20001888 	.word	0x20001888

0800dfb8 <QSPI_Erase_Sector4K>:
  * @brief  Erases the specified sector of the QSPI memory.
  * @param  SectorAddress: Block address to erase
  * @retval QSPI memory status
  */
uint8_t QSPI_Erase_Sector4K(uint32_t SectorAddress)
{
 800dfb8:	b580      	push	{r7, lr}
 800dfba:	b092      	sub	sp, #72	; 0x48
 800dfbc:	af00      	add	r7, sp, #0
 800dfbe:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  uint8_t reg1[6];

  if (QSPI_WriteEnable() != HAL_OK)
 800dfc0:	f000 f90e 	bl	800e1e0 <QSPI_WriteEnable>
 800dfc4:	4603      	mov	r3, r0
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d001      	beq.n	800dfce <QSPI_Erase_Sector4K+0x16>
  {
    return HAL_ERROR;
 800dfca:	2301      	movs	r3, #1
 800dfcc:	e030      	b.n	800e030 <QSPI_Erase_Sector4K+0x78>
  }

  /* Initialize the erase command */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800dfce:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dfd2:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction = 0x20; //SUBSECTOR_ERASE_4_BYTE_ADDR_CMD;
 800dfd4:	2320      	movs	r3, #32
 800dfd6:	613b      	str	r3, [r7, #16]
  s_command.AddressMode = QSPI_ADDRESS_1_LINE;
 800dfd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dfdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressSize = QSPI_ADDRESS_24_BITS; //QSPI_ADDRESS_32_BITS;
 800dfde:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800dfe2:	61fb      	str	r3, [r7, #28]
  s_command.Address = SectorAddress;
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	617b      	str	r3, [r7, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800dfe8:	2300      	movs	r3, #0
 800dfea:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode = QSPI_DATA_NONE;
 800dfec:	2300      	movs	r3, #0
 800dfee:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles = 0;
 800dff0:	2300      	movs	r3, #0
 800dff2:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 800dff4:	2300      	movs	r3, #0
 800dff6:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 800dff8:	2300      	movs	r3, #0
 800dffa:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 800dffc:	2300      	movs	r3, #0
 800dffe:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800e000:	f107 0310 	add.w	r3, r7, #16
 800e004:	f241 3288 	movw	r2, #5000	; 0x1388
 800e008:	4619      	mov	r1, r3
 800e00a:	480b      	ldr	r0, [pc, #44]	; (800e038 <QSPI_Erase_Sector4K+0x80>)
 800e00c:	f7f7 fa1e 	bl	800544c <HAL_QSPI_Command>
 800e010:	4603      	mov	r3, r0
 800e012:	2b00      	cmp	r3, #0
 800e014:	d001      	beq.n	800e01a <QSPI_Erase_Sector4K+0x62>
  {
    return HAL_ERROR;
 800e016:	2301      	movs	r3, #1
 800e018:	e00a      	b.n	800e030 <QSPI_Erase_Sector4K+0x78>
  }

  // -------------------------------------------------------------------------------------

  //  if (QSPI_AutoPolling_Erase_in_progress(&hqspi, QSPI_SUBSECTOR_ERASE_MAX_TIME) != HAL_OK)  {    return HAL_ERROR;  }
  if (QSPI_AutoPolling_Write_in_progress(&hqspi, QSPI_SUBSECTOR_ERASE_MAX_TIME) != HAL_OK)
 800e01a:	f44f 7148 	mov.w	r1, #800	; 0x320
 800e01e:	4806      	ldr	r0, [pc, #24]	; (800e038 <QSPI_Erase_Sector4K+0x80>)
 800e020:	f000 f96a 	bl	800e2f8 <QSPI_AutoPolling_Write_in_progress>
 800e024:	4603      	mov	r3, r0
 800e026:	2b00      	cmp	r3, #0
 800e028:	d001      	beq.n	800e02e <QSPI_Erase_Sector4K+0x76>
  {
    return HAL_ERROR;
 800e02a:	2301      	movs	r3, #1
 800e02c:	e000      	b.n	800e030 <QSPI_Erase_Sector4K+0x78>
  }

  return HAL_OK;
 800e02e:	2300      	movs	r3, #0
}
 800e030:	4618      	mov	r0, r3
 800e032:	3748      	adds	r7, #72	; 0x48
 800e034:	46bd      	mov	sp, r7
 800e036:	bd80      	pop	{r7, pc}
 800e038:	20001888 	.word	0x20001888

0800e03c <QSPI_Write>:
  * @param  WriteAddr: Write start address
  * @param  Size: Size of data to write
  * @retval QSPI memory status
  */
uint8_t QSPI_Write(uint8_t *pData, uint32_t WriteAddr, uint32_t Size)
{
 800e03c:	b580      	push	{r7, lr}
 800e03e:	b096      	sub	sp, #88	; 0x58
 800e040:	af00      	add	r7, sp, #0
 800e042:	60f8      	str	r0, [r7, #12]
 800e044:	60b9      	str	r1, [r7, #8]
 800e046:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint32_t end_addr = 0, current_size = 0, current_addr = 0;
 800e048:	2300      	movs	r3, #0
 800e04a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e04c:	2300      	movs	r3, #0
 800e04e:	657b      	str	r3, [r7, #84]	; 0x54
 800e050:	2300      	movs	r3, #0
 800e052:	653b      	str	r3, [r7, #80]	; 0x50
  pData = pData - 1;
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	3b01      	subs	r3, #1
 800e058:	60fb      	str	r3, [r7, #12]
  /* Calculation of the size between the write address and the end of the page */
  current_addr = 0;
 800e05a:	2300      	movs	r3, #0
 800e05c:	653b      	str	r3, [r7, #80]	; 0x50
  while (current_addr <= WriteAddr)
 800e05e:	e003      	b.n	800e068 <QSPI_Write+0x2c>
  {
    current_addr += QSPI_PAGE_SIZE;
 800e060:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e062:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800e066:	653b      	str	r3, [r7, #80]	; 0x50
  while (current_addr <= WriteAddr)
 800e068:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e06a:	68bb      	ldr	r3, [r7, #8]
 800e06c:	429a      	cmp	r2, r3
 800e06e:	d9f7      	bls.n	800e060 <QSPI_Write+0x24>
  }
  current_size = current_addr - WriteAddr;
 800e070:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e072:	68bb      	ldr	r3, [r7, #8]
 800e074:	1ad3      	subs	r3, r2, r3
 800e076:	657b      	str	r3, [r7, #84]	; 0x54

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
 800e078:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	429a      	cmp	r2, r3
 800e07e:	d901      	bls.n	800e084 <QSPI_Write+0x48>
  {
    current_size = Size;
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	657b      	str	r3, [r7, #84]	; 0x54
  }
  //  wr_time1 = systick_count_up;
  /* Initialize the address variables */
  current_addr = WriteAddr;
 800e084:	68bb      	ldr	r3, [r7, #8]
 800e086:	653b      	str	r3, [r7, #80]	; 0x50
  end_addr = WriteAddr + Size;
 800e088:	68ba      	ldr	r2, [r7, #8]
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	4413      	add	r3, r2
 800e08e:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Initialize the program command */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800e090:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e094:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.Instruction = 0x02; // simple page programm //QPI_PAGE_PROG_4_BYTE_ADDR_CMD;
 800e096:	2302      	movs	r3, #2
 800e098:	617b      	str	r3, [r7, #20]
  s_command.AddressMode = QSPI_ADDRESS_1_LINE;
 800e09a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e09e:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.AddressSize = QSPI_ADDRESS_24_BITS;
 800e0a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e0a4:	623b      	str	r3, [r7, #32]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800e0a6:	2300      	movs	r3, #0
 800e0a8:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DataMode = QSPI_DATA_1_LINE;
 800e0aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e0ae:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DummyCycles = 0;
 800e0b0:	2300      	movs	r3, #0
 800e0b2:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 800e0b4:	2300      	movs	r3, #0
 800e0b6:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 800e0bc:	2300      	movs	r3, #0
 800e0be:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Perform the write page by page */
  do
  {
    /* Enable write operations */
    if (QSPI_WriteEnable() != HAL_OK)
 800e0c0:	f000 f88e 	bl	800e1e0 <QSPI_WriteEnable>
 800e0c4:	4603      	mov	r3, r0
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d001      	beq.n	800e0ce <QSPI_Write+0x92>
    {
      return HAL_ERROR;
 800e0ca:	2301      	movs	r3, #1
 800e0cc:	e03f      	b.n	800e14e <QSPI_Write+0x112>
    }

    /* Configure the command */
    s_command.Address = current_addr;
 800e0ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e0d0:	61bb      	str	r3, [r7, #24]
    s_command.NbData = current_size;
 800e0d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e0d4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800e0d6:	f107 0314 	add.w	r3, r7, #20
 800e0da:	f241 3288 	movw	r2, #5000	; 0x1388
 800e0de:	4619      	mov	r1, r3
 800e0e0:	481d      	ldr	r0, [pc, #116]	; (800e158 <QSPI_Write+0x11c>)
 800e0e2:	f7f7 f9b3 	bl	800544c <HAL_QSPI_Command>
 800e0e6:	4603      	mov	r3, r0
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d001      	beq.n	800e0f0 <QSPI_Write+0xb4>
    {
      return HAL_ERROR;
 800e0ec:	2301      	movs	r3, #1
 800e0ee:	e02e      	b.n	800e14e <QSPI_Write+0x112>
    }

    /* Transmission of the data */
    if (HAL_QSPI_Transmit(&hqspi, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800e0f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800e0f4:	68f9      	ldr	r1, [r7, #12]
 800e0f6:	4818      	ldr	r0, [pc, #96]	; (800e158 <QSPI_Write+0x11c>)
 800e0f8:	f7f7 fa06 	bl	8005508 <HAL_QSPI_Transmit>
 800e0fc:	4603      	mov	r3, r0
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d001      	beq.n	800e106 <QSPI_Write+0xca>
    {
      return HAL_ERROR;
 800e102:	2301      	movs	r3, #1
 800e104:	e023      	b.n	800e14e <QSPI_Write+0x112>
    }

    if (QSPI_AutoPolling_Write_in_progress(&hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800e106:	f241 3188 	movw	r1, #5000	; 0x1388
 800e10a:	4813      	ldr	r0, [pc, #76]	; (800e158 <QSPI_Write+0x11c>)
 800e10c:	f000 f8f4 	bl	800e2f8 <QSPI_AutoPolling_Write_in_progress>
 800e110:	4603      	mov	r3, r0
 800e112:	2b00      	cmp	r3, #0
 800e114:	d001      	beq.n	800e11a <QSPI_Write+0xde>
    {
      return HAL_ERROR;
 800e116:	2301      	movs	r3, #1
 800e118:	e019      	b.n	800e14e <QSPI_Write+0x112>
    }

    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 800e11a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e11c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e11e:	4413      	add	r3, r2
 800e120:	653b      	str	r3, [r7, #80]	; 0x50
    pData += current_size;
 800e122:	68fa      	ldr	r2, [r7, #12]
 800e124:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e126:	4413      	add	r3, r2
 800e128:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + QSPI_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : QSPI_PAGE_SIZE;
 800e12a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e12c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800e130:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e132:	429a      	cmp	r2, r3
 800e134:	d203      	bcs.n	800e13e <QSPI_Write+0x102>
 800e136:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e138:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e13a:	1ad3      	subs	r3, r2, r3
 800e13c:	e001      	b.n	800e142 <QSPI_Write+0x106>
 800e13e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e142:	657b      	str	r3, [r7, #84]	; 0x54
  } while (current_addr < end_addr);
 800e144:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e146:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e148:	429a      	cmp	r2, r3
 800e14a:	d3b9      	bcc.n	800e0c0 <QSPI_Write+0x84>

  return HAL_OK;
 800e14c:	2300      	movs	r3, #0
}
 800e14e:	4618      	mov	r0, r3
 800e150:	3758      	adds	r7, #88	; 0x58
 800e152:	46bd      	mov	sp, r7
 800e154:	bd80      	pop	{r7, pc}
 800e156:	bf00      	nop
 800e158:	20001888 	.word	0x20001888

0800e15c <QSPI_Read>:
  * @param  ReadAddr: Read start address
  * @param  Size: Size of data to read
  * @retval QSPI memory status
  */
uint8_t QSPI_Read(uint8_t *pData, uint32_t ReadAddr, uint32_t Size)
{
 800e15c:	b580      	push	{r7, lr}
 800e15e:	b092      	sub	sp, #72	; 0x48
 800e160:	af00      	add	r7, sp, #0
 800e162:	60f8      	str	r0, [r7, #12]
 800e164:	60b9      	str	r1, [r7, #8]
 800e166:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the read command */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800e168:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e16c:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction = 0x03; // simple data read // QPI_READ_4_BYTE_ADDR_CMD; //
 800e16e:	2303      	movs	r3, #3
 800e170:	613b      	str	r3, [r7, #16]
  s_command.AddressMode = QSPI_ADDRESS_1_LINE;
 800e172:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e176:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressSize = QSPI_ADDRESS_24_BITS;
 800e178:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e17c:	61fb      	str	r3, [r7, #28]
  s_command.Address = ReadAddr;
 800e17e:	68bb      	ldr	r3, [r7, #8]
 800e180:	617b      	str	r3, [r7, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800e182:	2300      	movs	r3, #0
 800e184:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode = QSPI_DATA_1_LINE;
 800e186:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e18a:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles = QSPI_DUMMY_CYCLES_READ;
 800e18c:	2308      	movs	r3, #8
 800e18e:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData = Size;
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 800e194:	2300      	movs	r3, #0
 800e196:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 800e198:	2300      	movs	r3, #0
 800e19a:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 800e19c:	2300      	movs	r3, #0
 800e19e:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800e1a0:	f107 0310 	add.w	r3, r7, #16
 800e1a4:	f241 3288 	movw	r2, #5000	; 0x1388
 800e1a8:	4619      	mov	r1, r3
 800e1aa:	480c      	ldr	r0, [pc, #48]	; (800e1dc <QSPI_Read+0x80>)
 800e1ac:	f7f7 f94e 	bl	800544c <HAL_QSPI_Command>
 800e1b0:	4603      	mov	r3, r0
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d001      	beq.n	800e1ba <QSPI_Read+0x5e>
  {
    return HAL_ERROR;
 800e1b6:	2301      	movs	r3, #1
 800e1b8:	e00b      	b.n	800e1d2 <QSPI_Read+0x76>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800e1ba:	f241 3288 	movw	r2, #5000	; 0x1388
 800e1be:	68f9      	ldr	r1, [r7, #12]
 800e1c0:	4806      	ldr	r0, [pc, #24]	; (800e1dc <QSPI_Read+0x80>)
 800e1c2:	f7f7 fa33 	bl	800562c <HAL_QSPI_Receive>
 800e1c6:	4603      	mov	r3, r0
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d001      	beq.n	800e1d0 <QSPI_Read+0x74>
  {
    return HAL_ERROR;
 800e1cc:	2301      	movs	r3, #1
 800e1ce:	e000      	b.n	800e1d2 <QSPI_Read+0x76>
  }

  return HAL_OK;
 800e1d0:	2300      	movs	r3, #0
}
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	3748      	adds	r7, #72	; 0x48
 800e1d6:	46bd      	mov	sp, r7
 800e1d8:	bd80      	pop	{r7, pc}
 800e1da:	bf00      	nop
 800e1dc:	20001888 	.word	0x20001888

0800e1e0 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi: QSPI handle
  * @retval None
  */
uint8_t QSPI_WriteEnable(void)
{
 800e1e0:	b580      	push	{r7, lr}
 800e1e2:	b094      	sub	sp, #80	; 0x50
 800e1e4:	af00      	add	r7, sp, #0
  QSPI_CommandTypeDef s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800e1e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e1ea:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Instruction = WRITE_ENABLE_CMD; // ok
 800e1ec:	2306      	movs	r3, #6
 800e1ee:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode = QSPI_ADDRESS_NONE;
 800e1f0:	2300      	movs	r3, #0
 800e1f2:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800e1f4:	2300      	movs	r3, #0
 800e1f6:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DataMode = QSPI_DATA_NONE;
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DummyCycles = 0;
 800e1fc:	2300      	movs	r3, #0
 800e1fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 800e200:	2300      	movs	r3, #0
 800e202:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 800e204:	2300      	movs	r3, #0
 800e206:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 800e208:	2300      	movs	r3, #0
 800e20a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800e20c:	f107 0318 	add.w	r3, r7, #24
 800e210:	f241 3288 	movw	r2, #5000	; 0x1388
 800e214:	4619      	mov	r1, r3
 800e216:	4816      	ldr	r0, [pc, #88]	; (800e270 <QSPI_WriteEnable+0x90>)
 800e218:	f7f7 f918 	bl	800544c <HAL_QSPI_Command>
 800e21c:	4603      	mov	r3, r0
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d001      	beq.n	800e226 <QSPI_WriteEnable+0x46>
  {
    return HAL_ERROR;
 800e222:	2301      	movs	r3, #1
 800e224:	e01f      	b.n	800e266 <QSPI_WriteEnable+0x86>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match = QSPI_SR_WREN;
 800e226:	2302      	movs	r3, #2
 800e228:	603b      	str	r3, [r7, #0]
  s_config.Mask = QSPI_SR_WREN;
 800e22a:	2302      	movs	r3, #2
 800e22c:	607b      	str	r3, [r7, #4]
  s_config.MatchMode = QSPI_MATCH_MODE_AND;
 800e22e:	2300      	movs	r3, #0
 800e230:	613b      	str	r3, [r7, #16]
  s_config.StatusBytesSize = 1;
 800e232:	2301      	movs	r3, #1
 800e234:	60fb      	str	r3, [r7, #12]
  s_config.Interval = 1;
 800e236:	2301      	movs	r3, #1
 800e238:	60bb      	str	r3, [r7, #8]
  s_config.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 800e23a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e23e:	617b      	str	r3, [r7, #20]

  s_command.Instruction = READ_STATUS_REG_CMD;
 800e240:	2305      	movs	r3, #5
 800e242:	61bb      	str	r3, [r7, #24]
  s_command.DataMode = QSPI_DATA_1_LINE;
 800e244:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e248:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_QSPI_AutoPolling(&hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800e24a:	463a      	mov	r2, r7
 800e24c:	f107 0118 	add.w	r1, r7, #24
 800e250:	f241 3388 	movw	r3, #5000	; 0x1388
 800e254:	4806      	ldr	r0, [pc, #24]	; (800e270 <QSPI_WriteEnable+0x90>)
 800e256:	f7f7 fa86 	bl	8005766 <HAL_QSPI_AutoPolling>
 800e25a:	4603      	mov	r3, r0
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d001      	beq.n	800e264 <QSPI_WriteEnable+0x84>
  {
    return HAL_ERROR;
 800e260:	2301      	movs	r3, #1
 800e262:	e000      	b.n	800e266 <QSPI_WriteEnable+0x86>
  }

  return HAL_OK;
 800e264:	2300      	movs	r3, #0
}
 800e266:	4618      	mov	r0, r3
 800e268:	3750      	adds	r7, #80	; 0x50
 800e26a:	46bd      	mov	sp, r7
 800e26c:	bd80      	pop	{r7, pc}
 800e26e:	bf00      	nop
 800e270:	20001888 	.word	0x20001888

0800e274 <QSPI_READMD>:

uint8_t QSPI_READMD(uint8_t *Mid, uint8_t *Did)
{
 800e274:	b580      	push	{r7, lr}
 800e276:	b098      	sub	sp, #96	; 0x60
 800e278:	af00      	add	r7, sp, #0
 800e27a:	6078      	str	r0, [r7, #4]
 800e27c:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800e27e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e282:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Instruction = 0x90; // ok
 800e284:	2390      	movs	r3, #144	; 0x90
 800e286:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode = QSPI_ADDRESS_NONE;
 800e288:	2300      	movs	r3, #0
 800e28a:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800e28c:	2300      	movs	r3, #0
 800e28e:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataMode = QSPI_DATA_1_LINE;
 800e290:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e294:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DummyCycles = 0;
 800e296:	2300      	movs	r3, #0
 800e298:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.NbData = 5;
 800e29a:	2305      	movs	r3, #5
 800e29c:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 800e29e:	2300      	movs	r3, #0
 800e2a0:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 800e2a2:	2300      	movs	r3, #0
 800e2a4:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 800e2a6:	2300      	movs	r3, #0
 800e2a8:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800e2aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e2ae:	f241 3288 	movw	r2, #5000	; 0x1388
 800e2b2:	4619      	mov	r1, r3
 800e2b4:	480f      	ldr	r0, [pc, #60]	; (800e2f4 <QSPI_READMD+0x80>)
 800e2b6:	f7f7 f8c9 	bl	800544c <HAL_QSPI_Command>
 800e2ba:	4603      	mov	r3, r0
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d001      	beq.n	800e2c4 <QSPI_READMD+0x50>
  {
    return HAL_ERROR;
 800e2c0:	2301      	movs	r3, #1
 800e2c2:	e012      	b.n	800e2ea <QSPI_READMD+0x76>
  }


 uint8_t reg2[6] = {0};
 800e2c4:	2300      	movs	r3, #0
 800e2c6:	60bb      	str	r3, [r7, #8]
 800e2c8:	2300      	movs	r3, #0
 800e2ca:	81bb      	strh	r3, [r7, #12]
 HAL_QSPI_Receive(&hqspi, (reg2), HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 800e2cc:	f107 0308 	add.w	r3, r7, #8
 800e2d0:	f241 3288 	movw	r2, #5000	; 0x1388
 800e2d4:	4619      	mov	r1, r3
 800e2d6:	4807      	ldr	r0, [pc, #28]	; (800e2f4 <QSPI_READMD+0x80>)
 800e2d8:	f7f7 f9a8 	bl	800562c <HAL_QSPI_Receive>
 *Mid = reg2[3];
 800e2dc:	7afa      	ldrb	r2, [r7, #11]
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	701a      	strb	r2, [r3, #0]
 *Did = reg2[4];
 800e2e2:	7b3a      	ldrb	r2, [r7, #12]
 800e2e4:	683b      	ldr	r3, [r7, #0]
 800e2e6:	701a      	strb	r2, [r3, #0]
//  HAL_QSPI_Receive(&hqspi, &(reg2[2]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
//  HAL_QSPI_Receive(&hqspi, &(reg2[3]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
//  HAL_QSPI_Receive(&hqspi, &(reg2[4]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
//  HAL_QSPI_Receive(&hqspi, &(reg2[5]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE);

  return HAL_OK;
 800e2e8:	2300      	movs	r3, #0
}
 800e2ea:	4618      	mov	r0, r3
 800e2ec:	3760      	adds	r7, #96	; 0x60
 800e2ee:	46bd      	mov	sp, r7
 800e2f0:	bd80      	pop	{r7, pc}
 800e2f2:	bf00      	nop
 800e2f4:	20001888 	.word	0x20001888

0800e2f8 <QSPI_AutoPolling_Write_in_progress>:
  * @param  hqspi: QSPI handle
  * @param  Timeout
  * @retval None
  */
uint8_t QSPI_AutoPolling_Write_in_progress(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	b096      	sub	sp, #88	; 0x58
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	6078      	str	r0, [r7, #4]
 800e300:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800e302:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e306:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction = READ_STATUS_REG_CMD;
 800e308:	2305      	movs	r3, #5
 800e30a:	623b      	str	r3, [r7, #32]
  s_command.AddressMode = QSPI_ADDRESS_NONE;
 800e30c:	2300      	movs	r3, #0
 800e30e:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800e310:	2300      	movs	r3, #0
 800e312:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode = QSPI_DATA_1_LINE;
 800e314:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e318:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles = 0;
 800e31a:	2300      	movs	r3, #0
 800e31c:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 800e31e:	2300      	movs	r3, #0
 800e320:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 800e322:	2300      	movs	r3, #0
 800e324:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 800e326:	2300      	movs	r3, #0
 800e328:	657b      	str	r3, [r7, #84]	; 0x54

  s_config.Match = 0;
 800e32a:	2300      	movs	r3, #0
 800e32c:	60bb      	str	r3, [r7, #8]
  //  s_config.Mask            = QSPI_SR_WIP;
  s_config.Mask = QSPI_SR_WIP; /*!< Write in progress */
 800e32e:	2301      	movs	r3, #1
 800e330:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode = QSPI_MATCH_MODE_AND;
 800e332:	2300      	movs	r3, #0
 800e334:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 800e336:	2301      	movs	r3, #1
 800e338:	617b      	str	r3, [r7, #20]
  s_config.Interval = 1; //0x10;
 800e33a:	2301      	movs	r3, #1
 800e33c:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 800e33e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e342:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 800e344:	f107 0208 	add.w	r2, r7, #8
 800e348:	f107 0120 	add.w	r1, r7, #32
 800e34c:	683b      	ldr	r3, [r7, #0]
 800e34e:	6878      	ldr	r0, [r7, #4]
 800e350:	f7f7 fa09 	bl	8005766 <HAL_QSPI_AutoPolling>
 800e354:	4603      	mov	r3, r0
 800e356:	2b00      	cmp	r3, #0
 800e358:	d001      	beq.n	800e35e <QSPI_AutoPolling_Write_in_progress+0x66>
  {
    return HAL_ERROR;
 800e35a:	2301      	movs	r3, #1
 800e35c:	e000      	b.n	800e360 <QSPI_AutoPolling_Write_in_progress+0x68>
  }

  return HAL_OK;
 800e35e:	2300      	movs	r3, #0
}
 800e360:	4618      	mov	r0, r3
 800e362:	3758      	adds	r7, #88	; 0x58
 800e364:	46bd      	mov	sp, r7
 800e366:	bd80      	pop	{r7, pc}

0800e368 <QSPI_Read_Status_registers>:
  return HAL_OK;
}

// Read Status Register-1 (05h), Status Register-2 (35h) & Status Register-3 (15h)
uint8_t QSPI_Read_Status_registers(QSPI_HandleTypeDef *hqspi, uint16_t *R1, uint16_t *R2, uint16_t *R3)
{
 800e368:	b580      	push	{r7, lr}
 800e36a:	b098      	sub	sp, #96	; 0x60
 800e36c:	af00      	add	r7, sp, #0
 800e36e:	60f8      	str	r0, [r7, #12]
 800e370:	60b9      	str	r1, [r7, #8]
 800e372:	607a      	str	r2, [r7, #4]
 800e374:	603b      	str	r3, [r7, #0]
  uint8_t reg1[6];
  uint8_t reg2[6];
  uint8_t reg3[6];

  /* Initialize the reading of status register */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE; //QSPI_INSTRUCTION_4_LINES;
 800e376:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e37a:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Instruction = 0x05;
 800e37c:	2305      	movs	r3, #5
 800e37e:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode = QSPI_ADDRESS_NONE;
 800e380:	2300      	movs	r3, #0
 800e382:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800e384:	2300      	movs	r3, #0
 800e386:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataMode = QSPI_DATA_1_LINE; // QSPI_DATA_4_LINES;
 800e388:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e38c:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DummyCycles = 0;
 800e38e:	2300      	movs	r3, #0
 800e390:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.NbData = 1;
 800e392:	2301      	movs	r3, #1
 800e394:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 800e396:	2300      	movs	r3, #0
 800e398:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 800e39a:	2300      	movs	r3, #0
 800e39c:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 800e39e:	2300      	movs	r3, #0
 800e3a0:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800e3a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e3a6:	f241 3288 	movw	r2, #5000	; 0x1388
 800e3aa:	4619      	mov	r1, r3
 800e3ac:	68f8      	ldr	r0, [r7, #12]
 800e3ae:	f7f7 f84d 	bl	800544c <HAL_QSPI_Command>
 800e3b2:	4603      	mov	r3, r0
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d001      	beq.n	800e3bc <QSPI_Read_Status_registers+0x54>
  {
    return HAL_ERROR;
 800e3b8:	2301      	movs	r3, #1
 800e3ba:	e07a      	b.n	800e4b2 <QSPI_Read_Status_registers+0x14a>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, (uint8_t *)reg1, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800e3bc:	f107 0320 	add.w	r3, r7, #32
 800e3c0:	f241 3288 	movw	r2, #5000	; 0x1388
 800e3c4:	4619      	mov	r1, r3
 800e3c6:	68f8      	ldr	r0, [r7, #12]
 800e3c8:	f7f7 f930 	bl	800562c <HAL_QSPI_Receive>
 800e3cc:	4603      	mov	r3, r0
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d001      	beq.n	800e3d6 <QSPI_Read_Status_registers+0x6e>
  {
    return HAL_ERROR;
 800e3d2:	2301      	movs	r3, #1
 800e3d4:	e06d      	b.n	800e4b2 <QSPI_Read_Status_registers+0x14a>
  }
  *R1 = reg1[0];
 800e3d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e3da:	b29a      	uxth	r2, r3
 800e3dc:	68bb      	ldr	r3, [r7, #8]
 800e3de:	801a      	strh	r2, [r3, #0]
  /* Initialize the reading of status register */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE; //QSPI_INSTRUCTION_4_LINES;
 800e3e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e3e4:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Instruction = 0x35;
 800e3e6:	2335      	movs	r3, #53	; 0x35
 800e3e8:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode = QSPI_ADDRESS_NONE;
 800e3ea:	2300      	movs	r3, #0
 800e3ec:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800e3ee:	2300      	movs	r3, #0
 800e3f0:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataMode = QSPI_DATA_1_LINE; // QSPI_DATA_4_LINES;
 800e3f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e3f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DummyCycles = 0;
 800e3f8:	2300      	movs	r3, #0
 800e3fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.NbData = 1;
 800e3fc:	2301      	movs	r3, #1
 800e3fe:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 800e400:	2300      	movs	r3, #0
 800e402:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 800e404:	2300      	movs	r3, #0
 800e406:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 800e408:	2300      	movs	r3, #0
 800e40a:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800e40c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e410:	f241 3288 	movw	r2, #5000	; 0x1388
 800e414:	4619      	mov	r1, r3
 800e416:	68f8      	ldr	r0, [r7, #12]
 800e418:	f7f7 f818 	bl	800544c <HAL_QSPI_Command>
 800e41c:	4603      	mov	r3, r0
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d001      	beq.n	800e426 <QSPI_Read_Status_registers+0xbe>
  {
    return HAL_ERROR;
 800e422:	2301      	movs	r3, #1
 800e424:	e045      	b.n	800e4b2 <QSPI_Read_Status_registers+0x14a>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, (uint8_t *)reg2, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800e426:	f107 0318 	add.w	r3, r7, #24
 800e42a:	f241 3288 	movw	r2, #5000	; 0x1388
 800e42e:	4619      	mov	r1, r3
 800e430:	68f8      	ldr	r0, [r7, #12]
 800e432:	f7f7 f8fb 	bl	800562c <HAL_QSPI_Receive>
 800e436:	4603      	mov	r3, r0
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d001      	beq.n	800e440 <QSPI_Read_Status_registers+0xd8>
  {
    return HAL_ERROR;
 800e43c:	2301      	movs	r3, #1
 800e43e:	e038      	b.n	800e4b2 <QSPI_Read_Status_registers+0x14a>
  }
  *R2 = reg2[0];
 800e440:	7e3b      	ldrb	r3, [r7, #24]
 800e442:	b29a      	uxth	r2, r3
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	801a      	strh	r2, [r3, #0]
  /* Initialize the reading of status register */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE; //QSPI_INSTRUCTION_4_LINES;
 800e448:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e44c:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Instruction = 0x15;
 800e44e:	2315      	movs	r3, #21
 800e450:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode = QSPI_ADDRESS_NONE;
 800e452:	2300      	movs	r3, #0
 800e454:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800e456:	2300      	movs	r3, #0
 800e458:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataMode = QSPI_DATA_1_LINE; // QSPI_DATA_4_LINES;
 800e45a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e45e:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DummyCycles = 0;
 800e460:	2300      	movs	r3, #0
 800e462:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.NbData = 1;
 800e464:	2301      	movs	r3, #1
 800e466:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 800e468:	2300      	movs	r3, #0
 800e46a:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 800e46c:	2300      	movs	r3, #0
 800e46e:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 800e470:	2300      	movs	r3, #0
 800e472:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800e474:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e478:	f241 3288 	movw	r2, #5000	; 0x1388
 800e47c:	4619      	mov	r1, r3
 800e47e:	68f8      	ldr	r0, [r7, #12]
 800e480:	f7f6 ffe4 	bl	800544c <HAL_QSPI_Command>
 800e484:	4603      	mov	r3, r0
 800e486:	2b00      	cmp	r3, #0
 800e488:	d001      	beq.n	800e48e <QSPI_Read_Status_registers+0x126>
  {
    return HAL_ERROR;
 800e48a:	2301      	movs	r3, #1
 800e48c:	e011      	b.n	800e4b2 <QSPI_Read_Status_registers+0x14a>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, (uint8_t *)reg3, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800e48e:	f107 0310 	add.w	r3, r7, #16
 800e492:	f241 3288 	movw	r2, #5000	; 0x1388
 800e496:	4619      	mov	r1, r3
 800e498:	68f8      	ldr	r0, [r7, #12]
 800e49a:	f7f7 f8c7 	bl	800562c <HAL_QSPI_Receive>
 800e49e:	4603      	mov	r3, r0
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d001      	beq.n	800e4a8 <QSPI_Read_Status_registers+0x140>
  {
    return HAL_ERROR;
 800e4a4:	2301      	movs	r3, #1
 800e4a6:	e004      	b.n	800e4b2 <QSPI_Read_Status_registers+0x14a>
  }
  *R3 = reg3[0];
 800e4a8:	7c3b      	ldrb	r3, [r7, #16]
 800e4aa:	b29a      	uxth	r2, r3
 800e4ac:	683b      	ldr	r3, [r7, #0]
 800e4ae:	801a      	strh	r2, [r3, #0]
  return HAL_OK;
 800e4b0:	2300      	movs	r3, #0
}
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	3760      	adds	r7, #96	; 0x60
 800e4b6:	46bd      	mov	sp, r7
 800e4b8:	bd80      	pop	{r7, pc}

0800e4ba <QSPI_Reset_Status_registers>:

// Reset Status Register-1 (05h), Status Register-2 (35h) & Status Register-3 (15h)
uint8_t QSPI_Reset_Status_registers(QSPI_HandleTypeDef *hqspi, uint16_t *R1, uint16_t *R2, uint16_t *R3)
{
 800e4ba:	b580      	push	{r7, lr}
 800e4bc:	b092      	sub	sp, #72	; 0x48
 800e4be:	af00      	add	r7, sp, #0
 800e4c0:	60f8      	str	r0, [r7, #12]
 800e4c2:	60b9      	str	r1, [r7, #8]
 800e4c4:	607a      	str	r2, [r7, #4]
 800e4c6:	603b      	str	r3, [r7, #0]
  QSPI_CommandTypeDef s_command;

  QSPI_WriteEnable();
 800e4c8:	f7ff fe8a 	bl	800e1e0 <QSPI_WriteEnable>

  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE; //QSPI_INSTRUCTION_4_LINES;
 800e4cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e4d0:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction = 0x01;
 800e4d2:	2301      	movs	r3, #1
 800e4d4:	613b      	str	r3, [r7, #16]
  s_command.AddressMode = QSPI_ADDRESS_NONE;
 800e4d6:	2300      	movs	r3, #0
 800e4d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800e4da:	2300      	movs	r3, #0
 800e4dc:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode = QSPI_DATA_1_LINE; // QSPI_DATA_4_LINES;
 800e4de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e4e2:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles = 0;
 800e4e4:	2300      	movs	r3, #0
 800e4e6:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData = 1;
 800e4e8:	2301      	movs	r3, #1
 800e4ea:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 800e4ec:	2300      	movs	r3, #0
 800e4ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 800e4f0:	2300      	movs	r3, #0
 800e4f2:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 800e4f4:	2300      	movs	r3, #0
 800e4f6:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800e4f8:	f107 0310 	add.w	r3, r7, #16
 800e4fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800e500:	4619      	mov	r1, r3
 800e502:	68f8      	ldr	r0, [r7, #12]
 800e504:	f7f6 ffa2 	bl	800544c <HAL_QSPI_Command>
 800e508:	4603      	mov	r3, r0
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d001      	beq.n	800e512 <QSPI_Reset_Status_registers+0x58>
  {
    return HAL_ERROR;
 800e50e:	2301      	movs	r3, #1
 800e510:	e06b      	b.n	800e5ea <QSPI_Reset_Status_registers+0x130>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, (uint8_t *)R1, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800e512:	f241 3288 	movw	r2, #5000	; 0x1388
 800e516:	68b9      	ldr	r1, [r7, #8]
 800e518:	68f8      	ldr	r0, [r7, #12]
 800e51a:	f7f6 fff5 	bl	8005508 <HAL_QSPI_Transmit>
 800e51e:	4603      	mov	r3, r0
 800e520:	2b00      	cmp	r3, #0
 800e522:	d001      	beq.n	800e528 <QSPI_Reset_Status_registers+0x6e>
  {
    return HAL_ERROR;
 800e524:	2301      	movs	r3, #1
 800e526:	e060      	b.n	800e5ea <QSPI_Reset_Status_registers+0x130>
  }

  QSPI_WriteEnable();
 800e528:	f7ff fe5a 	bl	800e1e0 <QSPI_WriteEnable>

  /* Initialize the reading of status register */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE; //QSPI_INSTRUCTION_4_LINES;
 800e52c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e530:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction = 0x31;
 800e532:	2331      	movs	r3, #49	; 0x31
 800e534:	613b      	str	r3, [r7, #16]
  s_command.AddressMode = QSPI_ADDRESS_NONE;
 800e536:	2300      	movs	r3, #0
 800e538:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800e53a:	2300      	movs	r3, #0
 800e53c:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode = QSPI_DATA_1_LINE; // QSPI_DATA_4_LINES;
 800e53e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e542:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles = 0;
 800e544:	2300      	movs	r3, #0
 800e546:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData = 1;
 800e548:	2301      	movs	r3, #1
 800e54a:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 800e54c:	2300      	movs	r3, #0
 800e54e:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 800e550:	2300      	movs	r3, #0
 800e552:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 800e554:	2300      	movs	r3, #0
 800e556:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800e558:	f107 0310 	add.w	r3, r7, #16
 800e55c:	f241 3288 	movw	r2, #5000	; 0x1388
 800e560:	4619      	mov	r1, r3
 800e562:	68f8      	ldr	r0, [r7, #12]
 800e564:	f7f6 ff72 	bl	800544c <HAL_QSPI_Command>
 800e568:	4603      	mov	r3, r0
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d001      	beq.n	800e572 <QSPI_Reset_Status_registers+0xb8>
  {
    return HAL_ERROR;
 800e56e:	2301      	movs	r3, #1
 800e570:	e03b      	b.n	800e5ea <QSPI_Reset_Status_registers+0x130>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, (uint8_t *)R2, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800e572:	f241 3288 	movw	r2, #5000	; 0x1388
 800e576:	6879      	ldr	r1, [r7, #4]
 800e578:	68f8      	ldr	r0, [r7, #12]
 800e57a:	f7f6 ffc5 	bl	8005508 <HAL_QSPI_Transmit>
 800e57e:	4603      	mov	r3, r0
 800e580:	2b00      	cmp	r3, #0
 800e582:	d001      	beq.n	800e588 <QSPI_Reset_Status_registers+0xce>
  {
    return HAL_ERROR;
 800e584:	2301      	movs	r3, #1
 800e586:	e030      	b.n	800e5ea <QSPI_Reset_Status_registers+0x130>
  }

  QSPI_WriteEnable();
 800e588:	f7ff fe2a 	bl	800e1e0 <QSPI_WriteEnable>

  /* Initialize the reading of status register */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE; //QSPI_INSTRUCTION_4_LINES;
 800e58c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e590:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction = 0x11;
 800e592:	2311      	movs	r3, #17
 800e594:	613b      	str	r3, [r7, #16]
  s_command.AddressMode = QSPI_ADDRESS_NONE;
 800e596:	2300      	movs	r3, #0
 800e598:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800e59a:	2300      	movs	r3, #0
 800e59c:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode = QSPI_DATA_1_LINE; // QSPI_DATA_4_LINES;
 800e59e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e5a2:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles = 0;
 800e5a4:	2300      	movs	r3, #0
 800e5a6:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData = 1;
 800e5a8:	2301      	movs	r3, #1
 800e5aa:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 800e5ac:	2300      	movs	r3, #0
 800e5ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 800e5b0:	2300      	movs	r3, #0
 800e5b2:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 800e5b4:	2300      	movs	r3, #0
 800e5b6:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800e5b8:	f107 0310 	add.w	r3, r7, #16
 800e5bc:	f241 3288 	movw	r2, #5000	; 0x1388
 800e5c0:	4619      	mov	r1, r3
 800e5c2:	68f8      	ldr	r0, [r7, #12]
 800e5c4:	f7f6 ff42 	bl	800544c <HAL_QSPI_Command>
 800e5c8:	4603      	mov	r3, r0
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d001      	beq.n	800e5d2 <QSPI_Reset_Status_registers+0x118>
  {
    return HAL_ERROR;
 800e5ce:	2301      	movs	r3, #1
 800e5d0:	e00b      	b.n	800e5ea <QSPI_Reset_Status_registers+0x130>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, (uint8_t *)R3, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800e5d2:	f241 3288 	movw	r2, #5000	; 0x1388
 800e5d6:	6839      	ldr	r1, [r7, #0]
 800e5d8:	68f8      	ldr	r0, [r7, #12]
 800e5da:	f7f6 ff95 	bl	8005508 <HAL_QSPI_Transmit>
 800e5de:	4603      	mov	r3, r0
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d001      	beq.n	800e5e8 <QSPI_Reset_Status_registers+0x12e>
  {
    return HAL_ERROR;
 800e5e4:	2301      	movs	r3, #1
 800e5e6:	e000      	b.n	800e5ea <QSPI_Reset_Status_registers+0x130>
  }
  return HAL_OK;
 800e5e8:	2300      	movs	r3, #0
}
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	3748      	adds	r7, #72	; 0x48
 800e5ee:	46bd      	mov	sp, r7
 800e5f0:	bd80      	pop	{r7, pc}

0800e5f2 <QSPI_DummyCyclesCfg>:
  * @brief  This function configure the dummy cycles on memory side.
  * @param  hqspi: QSPI handle
  * @retval None
  */
uint8_t QSPI_DummyCyclesCfg(QSPI_HandleTypeDef *hqspi)
{
 800e5f2:	b580      	push	{r7, lr}
 800e5f4:	b094      	sub	sp, #80	; 0x50
 800e5f6:	af00      	add	r7, sp, #0
 800e5f8:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint8_t reg[2];

  /* Initialize the reading of status register */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE; //QSPI_INSTRUCTION_4_LINES;
 800e5fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e5fe:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction = READ_STATUS_REG_CMD;
 800e600:	2305      	movs	r3, #5
 800e602:	613b      	str	r3, [r7, #16]
  s_command.AddressMode = QSPI_ADDRESS_NONE;
 800e604:	2300      	movs	r3, #0
 800e606:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800e608:	2300      	movs	r3, #0
 800e60a:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode = QSPI_DATA_1_LINE; // QSPI_DATA_4_LINES;
 800e60c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e610:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles = 0;
 800e612:	2300      	movs	r3, #0
 800e614:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData = 1;
 800e616:	2301      	movs	r3, #1
 800e618:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 800e61a:	2300      	movs	r3, #0
 800e61c:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 800e61e:	2300      	movs	r3, #0
 800e620:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 800e622:	2300      	movs	r3, #0
 800e624:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800e626:	f107 0310 	add.w	r3, r7, #16
 800e62a:	f241 3288 	movw	r2, #5000	; 0x1388
 800e62e:	4619      	mov	r1, r3
 800e630:	6878      	ldr	r0, [r7, #4]
 800e632:	f7f6 ff0b 	bl	800544c <HAL_QSPI_Command>
 800e636:	4603      	mov	r3, r0
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d001      	beq.n	800e640 <QSPI_DummyCyclesCfg+0x4e>
  {
    return HAL_ERROR;
 800e63c:	2301      	movs	r3, #1
 800e63e:	e08f      	b.n	800e760 <QSPI_DummyCyclesCfg+0x16e>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800e640:	f107 030c 	add.w	r3, r7, #12
 800e644:	f241 3288 	movw	r2, #5000	; 0x1388
 800e648:	4619      	mov	r1, r3
 800e64a:	6878      	ldr	r0, [r7, #4]
 800e64c:	f7f6 ffee 	bl	800562c <HAL_QSPI_Receive>
 800e650:	4603      	mov	r3, r0
 800e652:	2b00      	cmp	r3, #0
 800e654:	d001      	beq.n	800e65a <QSPI_DummyCyclesCfg+0x68>
  {
    return HAL_ERROR;
 800e656:	2301      	movs	r3, #1
 800e658:	e082      	b.n	800e760 <QSPI_DummyCyclesCfg+0x16e>
  }

  /* Initialize the reading of configuration register */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800e65a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e65e:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction = READ_CFG_REG_CMD;
 800e660:	2315      	movs	r3, #21
 800e662:	613b      	str	r3, [r7, #16]
  s_command.AddressMode = QSPI_ADDRESS_NONE;
 800e664:	2300      	movs	r3, #0
 800e666:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800e668:	2300      	movs	r3, #0
 800e66a:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode = QSPI_DATA_1_LINE;
 800e66c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e670:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles = 0;
 800e672:	2300      	movs	r3, #0
 800e674:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData = 1;
 800e676:	2301      	movs	r3, #1
 800e678:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 800e67a:	2300      	movs	r3, #0
 800e67c:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 800e67e:	2300      	movs	r3, #0
 800e680:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 800e682:	2300      	movs	r3, #0
 800e684:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800e686:	f107 0310 	add.w	r3, r7, #16
 800e68a:	f241 3288 	movw	r2, #5000	; 0x1388
 800e68e:	4619      	mov	r1, r3
 800e690:	6878      	ldr	r0, [r7, #4]
 800e692:	f7f6 fedb 	bl	800544c <HAL_QSPI_Command>
 800e696:	4603      	mov	r3, r0
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d001      	beq.n	800e6a0 <QSPI_DummyCyclesCfg+0xae>
  {
    return HAL_ERROR;
 800e69c:	2301      	movs	r3, #1
 800e69e:	e05f      	b.n	800e760 <QSPI_DummyCyclesCfg+0x16e>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &(reg[1]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800e6a0:	f107 030c 	add.w	r3, r7, #12
 800e6a4:	3301      	adds	r3, #1
 800e6a6:	f241 3288 	movw	r2, #5000	; 0x1388
 800e6aa:	4619      	mov	r1, r3
 800e6ac:	6878      	ldr	r0, [r7, #4]
 800e6ae:	f7f6 ffbd 	bl	800562c <HAL_QSPI_Receive>
 800e6b2:	4603      	mov	r3, r0
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d001      	beq.n	800e6bc <QSPI_DummyCyclesCfg+0xca>
  {
    return HAL_ERROR;
 800e6b8:	2301      	movs	r3, #1
 800e6ba:	e051      	b.n	800e760 <QSPI_DummyCyclesCfg+0x16e>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable() != HAL_OK)
 800e6bc:	f7ff fd90 	bl	800e1e0 <QSPI_WriteEnable>
 800e6c0:	4603      	mov	r3, r0
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d001      	beq.n	800e6ca <QSPI_DummyCyclesCfg+0xd8>
  {
    return HAL_ERROR;
 800e6c6:	2301      	movs	r3, #1
 800e6c8:	e04a      	b.n	800e760 <QSPI_DummyCyclesCfg+0x16e>
  }

  /* Update the configuration register with new dummy cycles */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800e6ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e6ce:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction = WRITE_STATUS_CFG_REG_CMD;
 800e6d0:	2301      	movs	r3, #1
 800e6d2:	613b      	str	r3, [r7, #16]
  s_command.AddressMode = QSPI_ADDRESS_NONE;
 800e6d4:	2300      	movs	r3, #0
 800e6d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800e6d8:	2300      	movs	r3, #0
 800e6da:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode = QSPI_DATA_1_LINE;
 800e6dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e6e0:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles = 0;
 800e6e2:	2300      	movs	r3, #0
 800e6e4:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData = 2;
 800e6e6:	2302      	movs	r3, #2
 800e6e8:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 800e6ea:	2300      	movs	r3, #0
 800e6ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 800e6f2:	2300      	movs	r3, #0
 800e6f4:	647b      	str	r3, [r7, #68]	; 0x44

  /* QSPI_DUMMY_CYCLES_READ_QUAD = 3 for 10 cycles in QPI mode */
  //  MODIFY_REG( reg[1], QSPI_CR_NB_DUMMY, (QSPI_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(QSPI_CR_NB_DUMMY)));
  MODIFY_REG(reg[1], QSPI_CR_NB_DUMMY, (QSPI_DUMMY_CYCLES_READ << POSITION_VAL(QSPI_CR_NB_DUMMY)));
 800e6f6:	7b7b      	ldrb	r3, [r7, #13]
 800e6f8:	b25b      	sxtb	r3, r3
 800e6fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e6fe:	b25a      	sxtb	r2, r3
 800e700:	23c0      	movs	r3, #192	; 0xc0
 800e702:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e704:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e706:	fa93 f3a3 	rbit	r3, r3
 800e70a:	64bb      	str	r3, [r7, #72]	; 0x48
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800e70c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e70e:	fab3 f383 	clz	r3, r3
 800e712:	b2db      	uxtb	r3, r3
 800e714:	4619      	mov	r1, r3
 800e716:	2308      	movs	r3, #8
 800e718:	408b      	lsls	r3, r1
 800e71a:	b25b      	sxtb	r3, r3
 800e71c:	4313      	orrs	r3, r2
 800e71e:	b25b      	sxtb	r3, r3
 800e720:	b2db      	uxtb	r3, r3
 800e722:	737b      	strb	r3, [r7, #13]

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800e724:	f107 0310 	add.w	r3, r7, #16
 800e728:	f241 3288 	movw	r2, #5000	; 0x1388
 800e72c:	4619      	mov	r1, r3
 800e72e:	6878      	ldr	r0, [r7, #4]
 800e730:	f7f6 fe8c 	bl	800544c <HAL_QSPI_Command>
 800e734:	4603      	mov	r3, r0
 800e736:	2b00      	cmp	r3, #0
 800e738:	d001      	beq.n	800e73e <QSPI_DummyCyclesCfg+0x14c>
  {
    return HAL_ERROR;
 800e73a:	2301      	movs	r3, #1
 800e73c:	e010      	b.n	800e760 <QSPI_DummyCyclesCfg+0x16e>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800e73e:	f107 030c 	add.w	r3, r7, #12
 800e742:	f241 3288 	movw	r2, #5000	; 0x1388
 800e746:	4619      	mov	r1, r3
 800e748:	6878      	ldr	r0, [r7, #4]
 800e74a:	f7f6 fedd 	bl	8005508 <HAL_QSPI_Transmit>
 800e74e:	4603      	mov	r3, r0
 800e750:	2b00      	cmp	r3, #0
 800e752:	d001      	beq.n	800e758 <QSPI_DummyCyclesCfg+0x166>
  {
    return HAL_ERROR;
 800e754:	2301      	movs	r3, #1
 800e756:	e003      	b.n	800e760 <QSPI_DummyCyclesCfg+0x16e>
  }

  /* 40ms  Write Status/Configuration Register Cycle Time */
  HAL_Delay(40);
 800e758:	2028      	movs	r0, #40	; 0x28
 800e75a:	f7f3 fd8b 	bl	8002274 <HAL_Delay>

  return HAL_OK;
 800e75e:	2300      	movs	r3, #0
}
 800e760:	4618      	mov	r0, r3
 800e762:	3750      	adds	r7, #80	; 0x50
 800e764:	46bd      	mov	sp, r7
 800e766:	bd80      	pop	{r7, pc}

0800e768 <fatFSInit>:

void fatFSInit(void)
{
 800e768:	b580      	push	{r7, lr}
 800e76a:	f5ad 5d80 	sub.w	sp, sp, #4096	; 0x1000
 800e76e:	b086      	sub	sp, #24
 800e770:	af02      	add	r7, sp, #8
	  //  Flash example
	  QSPI_Read_Status_registers(&hqspi, &RR1, &RR2, &RR3);
 800e772:	4b3a      	ldr	r3, [pc, #232]	; (800e85c <fatFSInit+0xf4>)
 800e774:	4a3a      	ldr	r2, [pc, #232]	; (800e860 <fatFSInit+0xf8>)
 800e776:	493b      	ldr	r1, [pc, #236]	; (800e864 <fatFSInit+0xfc>)
 800e778:	483b      	ldr	r0, [pc, #236]	; (800e868 <fatFSInit+0x100>)
 800e77a:	f7ff fdf5 	bl	800e368 <QSPI_Read_Status_registers>
	  RR2 = 0x22;
 800e77e:	4b38      	ldr	r3, [pc, #224]	; (800e860 <fatFSInit+0xf8>)
 800e780:	2222      	movs	r2, #34	; 0x22
 800e782:	801a      	strh	r2, [r3, #0]
	  RR3 = 0x60;
 800e784:	4b35      	ldr	r3, [pc, #212]	; (800e85c <fatFSInit+0xf4>)
 800e786:	2260      	movs	r2, #96	; 0x60
 800e788:	801a      	strh	r2, [r3, #0]
	  QSPI_Reset_Status_registers(&hqspi, &RR1, &RR2, &RR3);
 800e78a:	4b34      	ldr	r3, [pc, #208]	; (800e85c <fatFSInit+0xf4>)
 800e78c:	4a34      	ldr	r2, [pc, #208]	; (800e860 <fatFSInit+0xf8>)
 800e78e:	4935      	ldr	r1, [pc, #212]	; (800e864 <fatFSInit+0xfc>)
 800e790:	4835      	ldr	r0, [pc, #212]	; (800e868 <fatFSInit+0x100>)
 800e792:	f7ff fe92 	bl	800e4ba <QSPI_Reset_Status_registers>
	  HAL_Delay(40);
 800e796:	2028      	movs	r0, #40	; 0x28
 800e798:	f7f3 fd6c 	bl	8002274 <HAL_Delay>
	  QSPI_READMD(&MID, &DID);
 800e79c:	4933      	ldr	r1, [pc, #204]	; (800e86c <fatFSInit+0x104>)
 800e79e:	4834      	ldr	r0, [pc, #208]	; (800e870 <fatFSInit+0x108>)
 800e7a0:	f7ff fd68 	bl	800e274 <QSPI_READMD>

	  QSPI_Read_Status_registers(&hqspi, &RR1, &RR2, &RR3);
 800e7a4:	4b2d      	ldr	r3, [pc, #180]	; (800e85c <fatFSInit+0xf4>)
 800e7a6:	4a2e      	ldr	r2, [pc, #184]	; (800e860 <fatFSInit+0xf8>)
 800e7a8:	492e      	ldr	r1, [pc, #184]	; (800e864 <fatFSInit+0xfc>)
 800e7aa:	482f      	ldr	r0, [pc, #188]	; (800e868 <fatFSInit+0x100>)
 800e7ac:	f7ff fddc 	bl	800e368 <QSPI_Read_Status_registers>
	  do
	  {
		  HAL_Delay(1);
 800e7b0:	2001      	movs	r0, #1
 800e7b2:	f7f3 fd5f 	bl	8002274 <HAL_Delay>
		  FS_ret2 = f_mount(&USERFatFS, "\\", 0);
 800e7b6:	2200      	movs	r2, #0
 800e7b8:	492e      	ldr	r1, [pc, #184]	; (800e874 <fatFSInit+0x10c>)
 800e7ba:	482f      	ldr	r0, [pc, #188]	; (800e878 <fatFSInit+0x110>)
 800e7bc:	f7fe fe1c 	bl	800d3f8 <f_mount>
 800e7c0:	4603      	mov	r3, r0
 800e7c2:	461a      	mov	r2, r3
 800e7c4:	4b2d      	ldr	r3, [pc, #180]	; (800e87c <fatFSInit+0x114>)
 800e7c6:	701a      	strb	r2, [r3, #0]
	  } while (FS_ret2 != FR_OK);
 800e7c8:	4b2c      	ldr	r3, [pc, #176]	; (800e87c <fatFSInit+0x114>)
 800e7ca:	781b      	ldrb	r3, [r3, #0]
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d1ef      	bne.n	800e7b0 <fatFSInit+0x48>

	  DWORD free_clusters, free_sectors, total_sectors;

	  FATFS *getFreeFs;
	  uint8_t buffer[_MAX_SS];
	  FS_ret2 = f_getfree("\\", &free_clusters, &getFreeFs);
 800e7d0:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800e7d4:	f241 0304 	movw	r3, #4100	; 0x1004
 800e7d8:	443b      	add	r3, r7
 800e7da:	4619      	mov	r1, r3
 800e7dc:	4825      	ldr	r0, [pc, #148]	; (800e874 <fatFSInit+0x10c>)
 800e7de:	f7fe fe51 	bl	800d484 <f_getfree>
 800e7e2:	4603      	mov	r3, r0
 800e7e4:	461a      	mov	r2, r3
 800e7e6:	4b25      	ldr	r3, [pc, #148]	; (800e87c <fatFSInit+0x114>)
 800e7e8:	701a      	strb	r2, [r3, #0]
	  if (FS_ret2 != FR_OK)
 800e7ea:	4b24      	ldr	r3, [pc, #144]	; (800e87c <fatFSInit+0x114>)
 800e7ec:	781b      	ldrb	r3, [r3, #0]
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d010      	beq.n	800e814 <fatFSInit+0xac>
	  {
		  FS_ret2 = f_mkfs("\\", FM_FAT, 0, buffer, sizeof(buffer));
 800e7f2:	4b23      	ldr	r3, [pc, #140]	; (800e880 <fatFSInit+0x118>)
 800e7f4:	f241 0210 	movw	r2, #4112	; 0x1010
 800e7f8:	443a      	add	r2, r7
 800e7fa:	4413      	add	r3, r2
 800e7fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e800:	9200      	str	r2, [sp, #0]
 800e802:	2200      	movs	r2, #0
 800e804:	2101      	movs	r1, #1
 800e806:	481b      	ldr	r0, [pc, #108]	; (800e874 <fatFSInit+0x10c>)
 800e808:	f7fe fef2 	bl	800d5f0 <f_mkfs>
 800e80c:	4603      	mov	r3, r0
 800e80e:	461a      	mov	r2, r3
 800e810:	4b1a      	ldr	r3, [pc, #104]	; (800e87c <fatFSInit+0x114>)
 800e812:	701a      	strb	r2, [r3, #0]
	  }

	  total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 800e814:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	69db      	ldr	r3, [r3, #28]
 800e81c:	3b02      	subs	r3, #2
 800e81e:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800e822:	6812      	ldr	r2, [r2, #0]
 800e824:	8952      	ldrh	r2, [r2, #10]
 800e826:	fb02 f303 	mul.w	r3, r2, r3
 800e82a:	f241 020c 	movw	r2, #4108	; 0x100c
 800e82e:	443a      	add	r2, r7
 800e830:	6013      	str	r3, [r2, #0]
	  free_sectors = free_clusters * getFreeFs->csize;
 800e832:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	895b      	ldrh	r3, [r3, #10]
 800e83a:	461a      	mov	r2, r3
 800e83c:	f241 0304 	movw	r3, #4100	; 0x1004
 800e840:	443b      	add	r3, r7
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	fb03 f302 	mul.w	r3, r3, r2
 800e848:	f241 0208 	movw	r2, #4104	; 0x1008
 800e84c:	443a      	add	r2, r7
 800e84e:	6013      	str	r3, [r2, #0]
}
 800e850:	bf00      	nop
 800e852:	f507 5780 	add.w	r7, r7, #4096	; 0x1000
 800e856:	3710      	adds	r7, #16
 800e858:	46bd      	mov	sp, r7
 800e85a:	bd80      	pop	{r7, pc}
 800e85c:	20000d02 	.word	0x20000d02
 800e860:	20000d00 	.word	0x20000d00
 800e864:	20000cfe 	.word	0x20000cfe
 800e868:	20001888 	.word	0x20001888
 800e86c:	20000cfd 	.word	0x20000cfd
 800e870:	20000cfc 	.word	0x20000cfc
 800e874:	08013638 	.word	0x08013638
 800e878:	20002b44 	.word	0x20002b44
 800e87c:	20003c3c 	.word	0x20003c3c
 800e880:	ffffeff0 	.word	0xffffeff0

0800e884 <CheckButtons>:

bool triggerButtonIsHigh = false;
bool triggerButtonIsLow = false;

void CheckButtons(void)
{
 800e884:	b580      	push	{r7, lr}
 800e886:	b082      	sub	sp, #8
 800e888:	af00      	add	r7, sp, #0
	/*Get Buttons State */
	armPinState = HAL_GPIO_ReadPin(armGPIO, armPIN);
 800e88a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800e88e:	4898      	ldr	r0, [pc, #608]	; (800eaf0 <CheckButtons+0x26c>)
 800e890:	f7f5 fb10 	bl	8003eb4 <HAL_GPIO_ReadPin>
 800e894:	4603      	mov	r3, r0
 800e896:	461a      	mov	r2, r3
 800e898:	4b96      	ldr	r3, [pc, #600]	; (800eaf4 <CheckButtons+0x270>)
 800e89a:	701a      	strb	r2, [r3, #0]
	triggerPinState = HAL_GPIO_ReadPin(triggerGPIO, triggerPIN);
 800e89c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e8a0:	4893      	ldr	r0, [pc, #588]	; (800eaf0 <CheckButtons+0x26c>)
 800e8a2:	f7f5 fb07 	bl	8003eb4 <HAL_GPIO_ReadPin>
 800e8a6:	4603      	mov	r3, r0
 800e8a8:	461a      	mov	r2, r3
 800e8aa:	4b93      	ldr	r3, [pc, #588]	; (800eaf8 <CheckButtons+0x274>)
 800e8ac:	701a      	strb	r2, [r3, #0]
	if ( (rcState == PREINIT) && (armPinState == GPIO_PIN_SET) )
 800e8ae:	4b93      	ldr	r3, [pc, #588]	; (800eafc <CheckButtons+0x278>)
 800e8b0:	781b      	ldrb	r3, [r3, #0]
 800e8b2:	2b00      	cmp	r3, #0
	{

	}

	/*Accumulate Button Press Pattern  */
	if (armPinState == GPIO_PIN_RESET)
 800e8b4:	4b8f      	ldr	r3, [pc, #572]	; (800eaf4 <CheckButtons+0x270>)
 800e8b6:	781b      	ldrb	r3, [r3, #0]
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d112      	bne.n	800e8e2 <CheckButtons+0x5e>
	{
		armButtonIsHigh = false;
 800e8bc:	4b90      	ldr	r3, [pc, #576]	; (800eb00 <CheckButtons+0x27c>)
 800e8be:	2200      	movs	r2, #0
 800e8c0:	701a      	strb	r2, [r3, #0]
		armButtonIsLow = true;
 800e8c2:	4b90      	ldr	r3, [pc, #576]	; (800eb04 <CheckButtons+0x280>)
 800e8c4:	2201      	movs	r2, #1
 800e8c6:	701a      	strb	r2, [r3, #0]
		if ( (linkType == PWM) && (rcState == OPERATIONAL) )
 800e8c8:	4b8f      	ldr	r3, [pc, #572]	; (800eb08 <CheckButtons+0x284>)
 800e8ca:	781b      	ldrb	r3, [r3, #0]
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d159      	bne.n	800e984 <CheckButtons+0x100>
 800e8d0:	4b8a      	ldr	r3, [pc, #552]	; (800eafc <CheckButtons+0x278>)
 800e8d2:	781b      	ldrb	r3, [r3, #0]
 800e8d4:	2b02      	cmp	r3, #2
 800e8d6:	d155      	bne.n	800e984 <CheckButtons+0x100>
		{
			channelPWMValues[0] =  ((2000 - 1500) * 8 / 5 + 992);
 800e8d8:	4b8c      	ldr	r3, [pc, #560]	; (800eb0c <CheckButtons+0x288>)
 800e8da:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800e8de:	801a      	strh	r2, [r3, #0]
 800e8e0:	e050      	b.n	800e984 <CheckButtons+0x100>
		}
	}
	else
	{
		if (armButtonIsLow)
 800e8e2:	4b88      	ldr	r3, [pc, #544]	; (800eb04 <CheckButtons+0x280>)
 800e8e4:	781b      	ldrb	r3, [r3, #0]
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d038      	beq.n	800e95c <CheckButtons+0xd8>
		{
			if ( (linkType == PWM) && (rcState == OPERATIONAL) )
 800e8ea:	4b87      	ldr	r3, [pc, #540]	; (800eb08 <CheckButtons+0x284>)
 800e8ec:	781b      	ldrb	r3, [r3, #0]
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d106      	bne.n	800e900 <CheckButtons+0x7c>
 800e8f2:	4b82      	ldr	r3, [pc, #520]	; (800eafc <CheckButtons+0x278>)
 800e8f4:	781b      	ldrb	r3, [r3, #0]
 800e8f6:	2b02      	cmp	r3, #2
 800e8f8:	d102      	bne.n	800e900 <CheckButtons+0x7c>
			{
				channelPWMValues[0] = ((1000 - 1500) * 8 / 5 + 992);
 800e8fa:	4b84      	ldr	r3, [pc, #528]	; (800eb0c <CheckButtons+0x288>)
 800e8fc:	22c0      	movs	r2, #192	; 0xc0
 800e8fe:	801a      	strh	r2, [r3, #0]
			}
			uint32_t armLocalDuration = ((HAL_GetTick()
 800e900:	f7f3 fcac 	bl	800225c <HAL_GetTick>
 800e904:	4602      	mov	r2, r0
					- armButtonPressStart) / 100) * 100;
 800e906:	4b82      	ldr	r3, [pc, #520]	; (800eb10 <CheckButtons+0x28c>)
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	1ad3      	subs	r3, r2, r3
 800e90c:	4a81      	ldr	r2, [pc, #516]	; (800eb14 <CheckButtons+0x290>)
 800e90e:	fba2 2303 	umull	r2, r3, r2, r3
 800e912:	095b      	lsrs	r3, r3, #5
			uint32_t armLocalDuration = ((HAL_GetTick()
 800e914:	2264      	movs	r2, #100	; 0x64
 800e916:	fb02 f303 	mul.w	r3, r2, r3
 800e91a:	607b      	str	r3, [r7, #4]
			if ( (armButtonCycle < 5) && (armLocalDuration > 100) )
 800e91c:	4b7e      	ldr	r3, [pc, #504]	; (800eb18 <CheckButtons+0x294>)
 800e91e:	781b      	ldrb	r3, [r3, #0]
 800e920:	2b04      	cmp	r3, #4
 800e922:	d80f      	bhi.n	800e944 <CheckButtons+0xc0>
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	2b64      	cmp	r3, #100	; 0x64
 800e928:	d90c      	bls.n	800e944 <CheckButtons+0xc0>
			{
				armButtonPressDurationmSec[armButtonCycle] = armLocalDuration;
 800e92a:	4b7b      	ldr	r3, [pc, #492]	; (800eb18 <CheckButtons+0x294>)
 800e92c:	781b      	ldrb	r3, [r3, #0]
 800e92e:	4619      	mov	r1, r3
 800e930:	4a7a      	ldr	r2, [pc, #488]	; (800eb1c <CheckButtons+0x298>)
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
				armButtonCycle++;
 800e938:	4b77      	ldr	r3, [pc, #476]	; (800eb18 <CheckButtons+0x294>)
 800e93a:	781b      	ldrb	r3, [r3, #0]
 800e93c:	3301      	adds	r3, #1
 800e93e:	b2da      	uxtb	r2, r3
 800e940:	4b75      	ldr	r3, [pc, #468]	; (800eb18 <CheckButtons+0x294>)
 800e942:	701a      	strb	r2, [r3, #0]
			}
			if (armButtonCycle > 5)
 800e944:	4b74      	ldr	r3, [pc, #464]	; (800eb18 <CheckButtons+0x294>)
 800e946:	781b      	ldrb	r3, [r3, #0]
 800e948:	2b05      	cmp	r3, #5
 800e94a:	d907      	bls.n	800e95c <CheckButtons+0xd8>
			{
				armButtonCycle = 0;
 800e94c:	4b72      	ldr	r3, [pc, #456]	; (800eb18 <CheckButtons+0x294>)
 800e94e:	2200      	movs	r2, #0
 800e950:	701a      	strb	r2, [r3, #0]
				memset(armButtonPressDurationmSec, 0, 20);
 800e952:	2214      	movs	r2, #20
 800e954:	2100      	movs	r1, #0
 800e956:	4871      	ldr	r0, [pc, #452]	; (800eb1c <CheckButtons+0x298>)
 800e958:	f001 ffea 	bl	8010930 <memset>
			}
		}
		armButtonIsHigh = true;
 800e95c:	4b68      	ldr	r3, [pc, #416]	; (800eb00 <CheckButtons+0x27c>)
 800e95e:	2201      	movs	r2, #1
 800e960:	701a      	strb	r2, [r3, #0]
		armButtonIsLow = false;
 800e962:	4b68      	ldr	r3, [pc, #416]	; (800eb04 <CheckButtons+0x280>)
 800e964:	2200      	movs	r2, #0
 800e966:	701a      	strb	r2, [r3, #0]
		armButtonPressStart = HAL_GetTick();
 800e968:	f7f3 fc78 	bl	800225c <HAL_GetTick>
 800e96c:	4603      	mov	r3, r0
 800e96e:	4a68      	ldr	r2, [pc, #416]	; (800eb10 <CheckButtons+0x28c>)
 800e970:	6013      	str	r3, [r2, #0]
		if (armButtonCycle == 0)
 800e972:	4b69      	ldr	r3, [pc, #420]	; (800eb18 <CheckButtons+0x294>)
 800e974:	781b      	ldrb	r3, [r3, #0]
 800e976:	2b00      	cmp	r3, #0
 800e978:	d104      	bne.n	800e984 <CheckButtons+0x100>
		{
			armButtonPressCycleStart = HAL_GetTick();
 800e97a:	f7f3 fc6f 	bl	800225c <HAL_GetTick>
 800e97e:	4603      	mov	r3, r0
 800e980:	4a67      	ldr	r2, [pc, #412]	; (800eb20 <CheckButtons+0x29c>)
 800e982:	6013      	str	r3, [r2, #0]
		}
	}

	if (triggerPinState == GPIO_PIN_RESET)
 800e984:	4b5c      	ldr	r3, [pc, #368]	; (800eaf8 <CheckButtons+0x274>)
 800e986:	781b      	ldrb	r3, [r3, #0]
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d112      	bne.n	800e9b2 <CheckButtons+0x12e>
	{
		triggerButtonIsHigh = false;
 800e98c:	4b65      	ldr	r3, [pc, #404]	; (800eb24 <CheckButtons+0x2a0>)
 800e98e:	2200      	movs	r2, #0
 800e990:	701a      	strb	r2, [r3, #0]
		triggerButtonIsLow = true;
 800e992:	4b65      	ldr	r3, [pc, #404]	; (800eb28 <CheckButtons+0x2a4>)
 800e994:	2201      	movs	r2, #1
 800e996:	701a      	strb	r2, [r3, #0]
		if ( (linkType == PWM) && (rcState == OPERATIONAL) )
 800e998:	4b5b      	ldr	r3, [pc, #364]	; (800eb08 <CheckButtons+0x284>)
 800e99a:	781b      	ldrb	r3, [r3, #0]
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d159      	bne.n	800ea54 <CheckButtons+0x1d0>
 800e9a0:	4b56      	ldr	r3, [pc, #344]	; (800eafc <CheckButtons+0x278>)
 800e9a2:	781b      	ldrb	r3, [r3, #0]
 800e9a4:	2b02      	cmp	r3, #2
 800e9a6:	d155      	bne.n	800ea54 <CheckButtons+0x1d0>
		{
			channelPWMValues[1] = ((2000 - 1500) * 8 / 5 + 992);
 800e9a8:	4b58      	ldr	r3, [pc, #352]	; (800eb0c <CheckButtons+0x288>)
 800e9aa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800e9ae:	805a      	strh	r2, [r3, #2]
 800e9b0:	e050      	b.n	800ea54 <CheckButtons+0x1d0>
		}
	}
	else
	{
		if ( (linkType == PWM) && (rcState == OPERATIONAL) )
 800e9b2:	4b55      	ldr	r3, [pc, #340]	; (800eb08 <CheckButtons+0x284>)
 800e9b4:	781b      	ldrb	r3, [r3, #0]
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d106      	bne.n	800e9c8 <CheckButtons+0x144>
 800e9ba:	4b50      	ldr	r3, [pc, #320]	; (800eafc <CheckButtons+0x278>)
 800e9bc:	781b      	ldrb	r3, [r3, #0]
 800e9be:	2b02      	cmp	r3, #2
 800e9c0:	d102      	bne.n	800e9c8 <CheckButtons+0x144>
		{
			channelPWMValues[1] = ((1000 - 1500) * 8 / 5 + 992);
 800e9c2:	4b52      	ldr	r3, [pc, #328]	; (800eb0c <CheckButtons+0x288>)
 800e9c4:	22c0      	movs	r2, #192	; 0xc0
 800e9c6:	805a      	strh	r2, [r3, #2]
		}
		if (triggerButtonIsLow)
 800e9c8:	4b57      	ldr	r3, [pc, #348]	; (800eb28 <CheckButtons+0x2a4>)
 800e9ca:	781b      	ldrb	r3, [r3, #0]
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d02d      	beq.n	800ea2c <CheckButtons+0x1a8>
		{
			uint32_t triggerLocalDuration = ((HAL_GetTick()
 800e9d0:	f7f3 fc44 	bl	800225c <HAL_GetTick>
 800e9d4:	4602      	mov	r2, r0
					- triggerButtonPressStart) / 100) * 100;
 800e9d6:	4b55      	ldr	r3, [pc, #340]	; (800eb2c <CheckButtons+0x2a8>)
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	1ad3      	subs	r3, r2, r3
 800e9dc:	4a4d      	ldr	r2, [pc, #308]	; (800eb14 <CheckButtons+0x290>)
 800e9de:	fba2 2303 	umull	r2, r3, r2, r3
 800e9e2:	095b      	lsrs	r3, r3, #5
			uint32_t triggerLocalDuration = ((HAL_GetTick()
 800e9e4:	2264      	movs	r2, #100	; 0x64
 800e9e6:	fb02 f303 	mul.w	r3, r2, r3
 800e9ea:	603b      	str	r3, [r7, #0]
			if ( (triggerButtonCycle < 5) && (triggerLocalDuration > 100) )
 800e9ec:	4b50      	ldr	r3, [pc, #320]	; (800eb30 <CheckButtons+0x2ac>)
 800e9ee:	781b      	ldrb	r3, [r3, #0]
 800e9f0:	2b04      	cmp	r3, #4
 800e9f2:	d80f      	bhi.n	800ea14 <CheckButtons+0x190>
 800e9f4:	683b      	ldr	r3, [r7, #0]
 800e9f6:	2b64      	cmp	r3, #100	; 0x64
 800e9f8:	d90c      	bls.n	800ea14 <CheckButtons+0x190>
			{
				triggerButtonPressDurationmSec[triggerButtonCycle] = triggerLocalDuration;
 800e9fa:	4b4d      	ldr	r3, [pc, #308]	; (800eb30 <CheckButtons+0x2ac>)
 800e9fc:	781b      	ldrb	r3, [r3, #0]
 800e9fe:	4619      	mov	r1, r3
 800ea00:	4a4c      	ldr	r2, [pc, #304]	; (800eb34 <CheckButtons+0x2b0>)
 800ea02:	683b      	ldr	r3, [r7, #0]
 800ea04:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
				triggerButtonCycle++;
 800ea08:	4b49      	ldr	r3, [pc, #292]	; (800eb30 <CheckButtons+0x2ac>)
 800ea0a:	781b      	ldrb	r3, [r3, #0]
 800ea0c:	3301      	adds	r3, #1
 800ea0e:	b2da      	uxtb	r2, r3
 800ea10:	4b47      	ldr	r3, [pc, #284]	; (800eb30 <CheckButtons+0x2ac>)
 800ea12:	701a      	strb	r2, [r3, #0]
			}
			if (triggerButtonCycle > 5)
 800ea14:	4b46      	ldr	r3, [pc, #280]	; (800eb30 <CheckButtons+0x2ac>)
 800ea16:	781b      	ldrb	r3, [r3, #0]
 800ea18:	2b05      	cmp	r3, #5
 800ea1a:	d907      	bls.n	800ea2c <CheckButtons+0x1a8>
			{
				triggerButtonCycle = 0;
 800ea1c:	4b44      	ldr	r3, [pc, #272]	; (800eb30 <CheckButtons+0x2ac>)
 800ea1e:	2200      	movs	r2, #0
 800ea20:	701a      	strb	r2, [r3, #0]
				memset(triggerButtonPressDurationmSec, 0, 20);
 800ea22:	2214      	movs	r2, #20
 800ea24:	2100      	movs	r1, #0
 800ea26:	4843      	ldr	r0, [pc, #268]	; (800eb34 <CheckButtons+0x2b0>)
 800ea28:	f001 ff82 	bl	8010930 <memset>
			}
		}
		triggerButtonIsHigh = true;
 800ea2c:	4b3d      	ldr	r3, [pc, #244]	; (800eb24 <CheckButtons+0x2a0>)
 800ea2e:	2201      	movs	r2, #1
 800ea30:	701a      	strb	r2, [r3, #0]
		triggerButtonIsLow = false;
 800ea32:	4b3d      	ldr	r3, [pc, #244]	; (800eb28 <CheckButtons+0x2a4>)
 800ea34:	2200      	movs	r2, #0
 800ea36:	701a      	strb	r2, [r3, #0]
		triggerButtonPressStart = HAL_GetTick();
 800ea38:	f7f3 fc10 	bl	800225c <HAL_GetTick>
 800ea3c:	4603      	mov	r3, r0
 800ea3e:	4a3b      	ldr	r2, [pc, #236]	; (800eb2c <CheckButtons+0x2a8>)
 800ea40:	6013      	str	r3, [r2, #0]
		if (triggerButtonCycle == 0)
 800ea42:	4b3b      	ldr	r3, [pc, #236]	; (800eb30 <CheckButtons+0x2ac>)
 800ea44:	781b      	ldrb	r3, [r3, #0]
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d104      	bne.n	800ea54 <CheckButtons+0x1d0>
		{
			triggerButtonPressCycleStart = HAL_GetTick();
 800ea4a:	f7f3 fc07 	bl	800225c <HAL_GetTick>
 800ea4e:	4603      	mov	r3, r0
 800ea50:	4a39      	ldr	r2, [pc, #228]	; (800eb38 <CheckButtons+0x2b4>)
 800ea52:	6013      	str	r3, [r2, #0]
		}
	}

	/* Act Upon Received Pattern */
	if ( (armButtonIsHigh) && (triggerButtonIsHigh) )
 800ea54:	4b2a      	ldr	r3, [pc, #168]	; (800eb00 <CheckButtons+0x27c>)
 800ea56:	781b      	ldrb	r3, [r3, #0]
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d044      	beq.n	800eae6 <CheckButtons+0x262>
 800ea5c:	4b31      	ldr	r3, [pc, #196]	; (800eb24 <CheckButtons+0x2a0>)
 800ea5e:	781b      	ldrb	r3, [r3, #0]
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d040      	beq.n	800eae6 <CheckButtons+0x262>
	{
		if ( (rcState == OPERATIONAL) && (linkType == DIGITAL) )
 800ea64:	4b25      	ldr	r3, [pc, #148]	; (800eafc <CheckButtons+0x278>)
 800ea66:	781b      	ldrb	r3, [r3, #0]
 800ea68:	2b02      	cmp	r3, #2
 800ea6a:	d13c      	bne.n	800eae6 <CheckButtons+0x262>
 800ea6c:	4b26      	ldr	r3, [pc, #152]	; (800eb08 <CheckButtons+0x284>)
 800ea6e:	781b      	ldrb	r3, [r3, #0]
 800ea70:	2b01      	cmp	r3, #1
 800ea72:	d138      	bne.n	800eae6 <CheckButtons+0x262>
		{
			if (HAL_GetTick() - armButtonPressCycleStart > 5000)
 800ea74:	f7f3 fbf2 	bl	800225c <HAL_GetTick>
 800ea78:	4602      	mov	r2, r0
 800ea7a:	4b29      	ldr	r3, [pc, #164]	; (800eb20 <CheckButtons+0x29c>)
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	1ad3      	subs	r3, r2, r3
 800ea80:	f241 3288 	movw	r2, #5000	; 0x1388
 800ea84:	4293      	cmp	r3, r2
 800ea86:	d92e      	bls.n	800eae6 <CheckButtons+0x262>
			{
				if (armButtonPressDurationmSec[0] >= 3000)
 800ea88:	4b24      	ldr	r3, [pc, #144]	; (800eb1c <CheckButtons+0x298>)
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800ea90:	4293      	cmp	r3, r2
 800ea92:	d820      	bhi.n	800ead6 <CheckButtons+0x252>
					//Do this --> Arm System

					//				sprintf(USBTXArray, "%6.3f, Do this\r\n", CurrentTime());
					//				Print(false, true, true);
				}
				else if ((armButtonPressDurationmSec[0] >= 1000)
 800ea94:	4b21      	ldr	r3, [pc, #132]	; (800eb1c <CheckButtons+0x298>)
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ea9c:	d31b      	bcc.n	800ead6 <CheckButtons+0x252>
						&& (armButtonPressDurationmSec[1] >= 1000))
 800ea9e:	4b1f      	ldr	r3, [pc, #124]	; (800eb1c <CheckButtons+0x298>)
 800eaa0:	685b      	ldr	r3, [r3, #4]
 800eaa2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800eaa6:	d216      	bcs.n	800ead6 <CheckButtons+0x252>
				{
					//Do that
					//				sprintf(USBTXArray, "%6.3f, Do that\r\n", CurrentTime());
					//				Print(false, true, true);
				}
				else if ((armButtonPressDurationmSec[0] >= 1000)
 800eaa8:	4b1c      	ldr	r3, [pc, #112]	; (800eb1c <CheckButtons+0x298>)
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800eab0:	d311      	bcc.n	800ead6 <CheckButtons+0x252>
						&& (armButtonPressDurationmSec[1] == 0))
 800eab2:	4b1a      	ldr	r3, [pc, #104]	; (800eb1c <CheckButtons+0x298>)
 800eab4:	685b      	ldr	r3, [r3, #4]
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d00d      	beq.n	800ead6 <CheckButtons+0x252>
					//Do that
					//				sprintf(USBTXArray, "%6.3f, Do that Single Press\r\n",
					//						CurrentTime());
					//				Print(false, true, true);
				}
				else if ((armButtonPressDurationmSec[0] >= 500)
 800eaba:	4b18      	ldr	r3, [pc, #96]	; (800eb1c <CheckButtons+0x298>)
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800eac2:	d308      	bcc.n	800ead6 <CheckButtons+0x252>
						&& (armButtonPressDurationmSec[1] >= 1000))
 800eac4:	4b15      	ldr	r3, [pc, #84]	; (800eb1c <CheckButtons+0x298>)
 800eac6:	685b      	ldr	r3, [r3, #4]
 800eac8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800eacc:	d203      	bcs.n	800ead6 <CheckButtons+0x252>
					//Or maybe this
					//				sprintf(USBTXArray, "%6.3f, Or maybe this\r\n", CurrentTime());
					//				Print(false, true, true);

				}
				else if ((armButtonPressDurationmSec[0] >= 500)
 800eace:	4b13      	ldr	r3, [pc, #76]	; (800eb1c <CheckButtons+0x298>)
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
				{
					//Or maybe that
					//				sprintf(USBTXArray, "%6.3f, Or maybe that\r\n", CurrentTime());
					//				Print(false, true, true);
				}
				armButtonCycle = 0;
 800ead6:	4b10      	ldr	r3, [pc, #64]	; (800eb18 <CheckButtons+0x294>)
 800ead8:	2200      	movs	r2, #0
 800eada:	701a      	strb	r2, [r3, #0]
				memset(armButtonPressDurationmSec, 0, 20);
 800eadc:	2214      	movs	r2, #20
 800eade:	2100      	movs	r1, #0
 800eae0:	480e      	ldr	r0, [pc, #56]	; (800eb1c <CheckButtons+0x298>)
 800eae2:	f001 ff25 	bl	8010930 <memset>
			}
		}
	}
	//		SetRGB(250, 0, 0);
}
 800eae6:	bf00      	nop
 800eae8:	3708      	adds	r7, #8
 800eaea:	46bd      	mov	sp, r7
 800eaec:	bd80      	pop	{r7, pc}
 800eaee:	bf00      	nop
 800eaf0:	40021000 	.word	0x40021000
 800eaf4:	20003c48 	.word	0x20003c48
 800eaf8:	20003c49 	.word	0x20003c49
 800eafc:	20000514 	.word	0x20000514
 800eb00:	20000d40 	.word	0x20000d40
 800eb04:	20000d41 	.word	0x20000d41
 800eb08:	20000515 	.word	0x20000515
 800eb0c:	20000154 	.word	0x20000154
 800eb10:	20000d08 	.word	0x20000d08
 800eb14:	51eb851f 	.word	0x51eb851f
 800eb18:	20000d04 	.word	0x20000d04
 800eb1c:	20000d10 	.word	0x20000d10
 800eb20:	20000d0c 	.word	0x20000d0c
 800eb24:	20000d42 	.word	0x20000d42
 800eb28:	20000d43 	.word	0x20000d43
 800eb2c:	20000d24 	.word	0x20000d24
 800eb30:	20000d05 	.word	0x20000d05
 800eb34:	20000d2c 	.word	0x20000d2c
 800eb38:	20000d28 	.word	0x20000d28

0800eb3c <sendChannelMessageToRX>:
//	// rc_telem.putstr(rc_tx_buffer_char);
//	rc_telem.putbyte(rc_tx_buffer,19);
}

void sendChannelMessageToRX(void)
{
 800eb3c:	b580      	push	{r7, lr}
 800eb3e:	af00      	add	r7, sp, #0
	if ( HAL_GetTick() - lastCRSFChannelMessage > 4)
 800eb40:	f7f3 fb8c 	bl	800225c <HAL_GetTick>
 800eb44:	4602      	mov	r2, r0
 800eb46:	4b0d      	ldr	r3, [pc, #52]	; (800eb7c <sendChannelMessageToRX+0x40>)
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	1ad3      	subs	r3, r2, r3
 800eb4c:	2b04      	cmp	r3, #4
 800eb4e:	d912      	bls.n	800eb76 <sendChannelMessageToRX+0x3a>
	{
		memset(rcChannelsFrame, 0, 26);
 800eb50:	221a      	movs	r2, #26
 800eb52:	2100      	movs	r1, #0
 800eb54:	480a      	ldr	r0, [pc, #40]	; (800eb80 <sendChannelMessageToRX+0x44>)
 800eb56:	f001 feeb 	bl	8010930 <memset>
		createCrossfireChannelsFrame(rcChannelsFrame, channelPWMValues);
 800eb5a:	490a      	ldr	r1, [pc, #40]	; (800eb84 <sendChannelMessageToRX+0x48>)
 800eb5c:	4808      	ldr	r0, [pc, #32]	; (800eb80 <sendChannelMessageToRX+0x44>)
 800eb5e:	f000 f83b 	bl	800ebd8 <createCrossfireChannelsFrame>
		HAL_UART_Transmit_IT(&huart1, rcChannelsFrame, 26);
 800eb62:	221a      	movs	r2, #26
 800eb64:	4906      	ldr	r1, [pc, #24]	; (800eb80 <sendChannelMessageToRX+0x44>)
 800eb66:	4808      	ldr	r0, [pc, #32]	; (800eb88 <sendChannelMessageToRX+0x4c>)
 800eb68:	f7f9 fd58 	bl	800861c <HAL_UART_Transmit_IT>
		lastCRSFChannelMessage = HAL_GetTick();
 800eb6c:	f7f3 fb76 	bl	800225c <HAL_GetTick>
 800eb70:	4603      	mov	r3, r0
 800eb72:	4a02      	ldr	r2, [pc, #8]	; (800eb7c <sendChannelMessageToRX+0x40>)
 800eb74:	6013      	str	r3, [r2, #0]
	}
}
 800eb76:	bf00      	nop
 800eb78:	bd80      	pop	{r7, pc}
 800eb7a:	bf00      	nop
 800eb7c:	20000518 	.word	0x20000518
 800eb80:	20000d84 	.word	0x20000d84
 800eb84:	20000154 	.word	0x20000154
 800eb88:	200019e4 	.word	0x200019e4

0800eb8c <crc8>:
	uint8_t crc = crc8(&tbsRXArray[2], len-1);
	return crc;
}

uint8_t crc8(const uint8_t *ptr, uint32_t len)
{
 800eb8c:	b480      	push	{r7}
 800eb8e:	b085      	sub	sp, #20
 800eb90:	af00      	add	r7, sp, #0
 800eb92:	6078      	str	r0, [r7, #4]
 800eb94:	6039      	str	r1, [r7, #0]
	uint8_t crc = 0;
 800eb96:	2300      	movs	r3, #0
 800eb98:	73fb      	strb	r3, [r7, #15]
	for (uint32_t i = 0; i < len; i++)
 800eb9a:	2300      	movs	r3, #0
 800eb9c:	60bb      	str	r3, [r7, #8]
 800eb9e:	e00d      	b.n	800ebbc <crc8+0x30>
	{
		crc = crc8tab[crc ^ *ptr++];
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	1c5a      	adds	r2, r3, #1
 800eba4:	607a      	str	r2, [r7, #4]
 800eba6:	781a      	ldrb	r2, [r3, #0]
 800eba8:	7bfb      	ldrb	r3, [r7, #15]
 800ebaa:	4053      	eors	r3, r2
 800ebac:	b2db      	uxtb	r3, r3
 800ebae:	461a      	mov	r2, r3
 800ebb0:	4b08      	ldr	r3, [pc, #32]	; (800ebd4 <crc8+0x48>)
 800ebb2:	5c9b      	ldrb	r3, [r3, r2]
 800ebb4:	73fb      	strb	r3, [r7, #15]
	for (uint32_t i = 0; i < len; i++)
 800ebb6:	68bb      	ldr	r3, [r7, #8]
 800ebb8:	3301      	adds	r3, #1
 800ebba:	60bb      	str	r3, [r7, #8]
 800ebbc:	68ba      	ldr	r2, [r7, #8]
 800ebbe:	683b      	ldr	r3, [r7, #0]
 800ebc0:	429a      	cmp	r2, r3
 800ebc2:	d3ed      	bcc.n	800eba0 <crc8+0x14>
	}
	return crc;
 800ebc4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebc6:	4618      	mov	r0, r3
 800ebc8:	3714      	adds	r7, #20
 800ebca:	46bd      	mov	sp, r7
 800ebcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd0:	4770      	bx	lr
 800ebd2:	bf00      	nop
 800ebd4:	08013714 	.word	0x08013714

0800ebd8 <createCrossfireChannelsFrame>:

// Range for pulses (channels output) is [-1024:+1024]
uint8_t createCrossfireChannelsFrame(uint8_t * frame, int16_t * pulses)
{
 800ebd8:	b590      	push	{r4, r7, lr}
 800ebda:	b089      	sub	sp, #36	; 0x24
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	6078      	str	r0, [r7, #4]
 800ebe0:	6039      	str	r1, [r7, #0]
	uint8_t * buf = frame;
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	61fb      	str	r3, [r7, #28]
	*buf++ = MODULE_ADDRESS;
 800ebe6:	69fb      	ldr	r3, [r7, #28]
 800ebe8:	1c5a      	adds	r2, r3, #1
 800ebea:	61fa      	str	r2, [r7, #28]
 800ebec:	22ee      	movs	r2, #238	; 0xee
 800ebee:	701a      	strb	r2, [r3, #0]
	*buf++ = 24; // 1(ID) + 22 + 1(CRC)
 800ebf0:	69fb      	ldr	r3, [r7, #28]
 800ebf2:	1c5a      	adds	r2, r3, #1
 800ebf4:	61fa      	str	r2, [r7, #28]
 800ebf6:	2218      	movs	r2, #24
 800ebf8:	701a      	strb	r2, [r3, #0]
	uint8_t * crc_start = buf;
 800ebfa:	69fb      	ldr	r3, [r7, #28]
 800ebfc:	60fb      	str	r3, [r7, #12]
	*buf++ = CHANNELS_ID;
 800ebfe:	69fb      	ldr	r3, [r7, #28]
 800ec00:	1c5a      	adds	r2, r3, #1
 800ec02:	61fa      	str	r2, [r7, #28]
 800ec04:	2216      	movs	r2, #22
 800ec06:	701a      	strb	r2, [r3, #0]
	uint32_t bits = 0;
 800ec08:	2300      	movs	r3, #0
 800ec0a:	61bb      	str	r3, [r7, #24]
	uint8_t bitsavailable = 0;
 800ec0c:	2300      	movs	r3, #0
 800ec0e:	75fb      	strb	r3, [r7, #23]
	for (int i=0; i<CROSSFIRE_CHANNELS_COUNT; i++)
 800ec10:	2300      	movs	r3, #0
 800ec12:	613b      	str	r3, [r7, #16]
 800ec14:	e033      	b.n	800ec7e <createCrossfireChannelsFrame+0xa6>
	{
		uint32_t val = limitInt32(0, CROSSFIRE_CH_CENTER + (((pulses[i]) * 4) / 5), 2*CROSSFIRE_CH_CENTER);
 800ec16:	693b      	ldr	r3, [r7, #16]
 800ec18:	005b      	lsls	r3, r3, #1
 800ec1a:	683a      	ldr	r2, [r7, #0]
 800ec1c:	4413      	add	r3, r2
 800ec1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ec22:	009b      	lsls	r3, r3, #2
 800ec24:	4a20      	ldr	r2, [pc, #128]	; (800eca8 <createCrossfireChannelsFrame+0xd0>)
 800ec26:	fb82 1203 	smull	r1, r2, r2, r3
 800ec2a:	1052      	asrs	r2, r2, #1
 800ec2c:	17db      	asrs	r3, r3, #31
 800ec2e:	1ad3      	subs	r3, r2, r3
 800ec30:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800ec34:	f44f 62f8 	mov.w	r2, #1984	; 0x7c0
 800ec38:	4619      	mov	r1, r3
 800ec3a:	2000      	movs	r0, #0
 800ec3c:	f000 fafc 	bl	800f238 <limitInt32>
 800ec40:	4603      	mov	r3, r0
 800ec42:	60bb      	str	r3, [r7, #8]
		bits |= val << bitsavailable;
 800ec44:	7dfb      	ldrb	r3, [r7, #23]
 800ec46:	68ba      	ldr	r2, [r7, #8]
 800ec48:	fa02 f303 	lsl.w	r3, r2, r3
 800ec4c:	69ba      	ldr	r2, [r7, #24]
 800ec4e:	4313      	orrs	r3, r2
 800ec50:	61bb      	str	r3, [r7, #24]
		bitsavailable += CROSSFIRE_CH_BITS;
 800ec52:	7dfb      	ldrb	r3, [r7, #23]
 800ec54:	330b      	adds	r3, #11
 800ec56:	75fb      	strb	r3, [r7, #23]
		while (bitsavailable >= 8)
 800ec58:	e00b      	b.n	800ec72 <createCrossfireChannelsFrame+0x9a>
		{
			*buf++ = bits;
 800ec5a:	69fb      	ldr	r3, [r7, #28]
 800ec5c:	1c5a      	adds	r2, r3, #1
 800ec5e:	61fa      	str	r2, [r7, #28]
 800ec60:	69ba      	ldr	r2, [r7, #24]
 800ec62:	b2d2      	uxtb	r2, r2
 800ec64:	701a      	strb	r2, [r3, #0]
			bits >>= 8;
 800ec66:	69bb      	ldr	r3, [r7, #24]
 800ec68:	0a1b      	lsrs	r3, r3, #8
 800ec6a:	61bb      	str	r3, [r7, #24]
			bitsavailable -= 8;
 800ec6c:	7dfb      	ldrb	r3, [r7, #23]
 800ec6e:	3b08      	subs	r3, #8
 800ec70:	75fb      	strb	r3, [r7, #23]
		while (bitsavailable >= 8)
 800ec72:	7dfb      	ldrb	r3, [r7, #23]
 800ec74:	2b07      	cmp	r3, #7
 800ec76:	d8f0      	bhi.n	800ec5a <createCrossfireChannelsFrame+0x82>
	for (int i=0; i<CROSSFIRE_CHANNELS_COUNT; i++)
 800ec78:	693b      	ldr	r3, [r7, #16]
 800ec7a:	3301      	adds	r3, #1
 800ec7c:	613b      	str	r3, [r7, #16]
 800ec7e:	693b      	ldr	r3, [r7, #16]
 800ec80:	2b0f      	cmp	r3, #15
 800ec82:	ddc8      	ble.n	800ec16 <createCrossfireChannelsFrame+0x3e>
		}
	}
	*buf++ = crc8(crc_start, 23);
 800ec84:	69fc      	ldr	r4, [r7, #28]
 800ec86:	1c63      	adds	r3, r4, #1
 800ec88:	61fb      	str	r3, [r7, #28]
 800ec8a:	2117      	movs	r1, #23
 800ec8c:	68f8      	ldr	r0, [r7, #12]
 800ec8e:	f7ff ff7d 	bl	800eb8c <crc8>
 800ec92:	4603      	mov	r3, r0
 800ec94:	7023      	strb	r3, [r4, #0]
	return buf - frame;
 800ec96:	69fa      	ldr	r2, [r7, #28]
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	1ad3      	subs	r3, r2, r3
 800ec9c:	b2db      	uxtb	r3, r3
}
 800ec9e:	4618      	mov	r0, r3
 800eca0:	3724      	adds	r7, #36	; 0x24
 800eca2:	46bd      	mov	sp, r7
 800eca4:	bd90      	pop	{r4, r7, pc}
 800eca6:	bf00      	nop
 800eca8:	66666667 	.word	0x66666667

0800ecac <parseTBSMessage>:

bool parseTBSMessage(void)
{
 800ecac:	b480      	push	{r7}
 800ecae:	af00      	add	r7, sp, #0

}
 800ecb0:	bf00      	nop
 800ecb2:	4618      	mov	r0, r3
 800ecb4:	46bd      	mov	sp, r7
 800ecb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecba:	4770      	bx	lr

0800ecbc <__NVIC_SystemReset>:
{
 800ecbc:	b480      	push	{r7}
 800ecbe:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800ecc0:	f3bf 8f4f 	dsb	sy
}
 800ecc4:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800ecc6:	4b06      	ldr	r3, [pc, #24]	; (800ece0 <__NVIC_SystemReset+0x24>)
 800ecc8:	68db      	ldr	r3, [r3, #12]
 800ecca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800ecce:	4904      	ldr	r1, [pc, #16]	; (800ece0 <__NVIC_SystemReset+0x24>)
 800ecd0:	4b04      	ldr	r3, [pc, #16]	; (800ece4 <__NVIC_SystemReset+0x28>)
 800ecd2:	4313      	orrs	r3, r2
 800ecd4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800ecd6:	f3bf 8f4f 	dsb	sy
}
 800ecda:	bf00      	nop
    __NOP();
 800ecdc:	bf00      	nop
 800ecde:	e7fd      	b.n	800ecdc <__NVIC_SystemReset+0x20>
 800ece0:	e000ed00 	.word	0xe000ed00
 800ece4:	05fa0004 	.word	0x05fa0004

0800ece8 <func_debug>:
#include "usart.h"

bool isReportParametersActive = false;

eCI_RESULT func_debug(void)
{
 800ece8:	b480      	push	{r7}
 800ecea:	af00      	add	r7, sp, #0
	return CI_OK;
 800ecec:	2300      	movs	r3, #0
}
 800ecee:	4618      	mov	r0, r3
 800ecf0:	46bd      	mov	sp, r7
 800ecf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecf6:	4770      	bx	lr

0800ecf8 <func_updateRCVersion>:

eCI_RESULT func_updateRCVersion(void)
{
 800ecf8:	b580      	push	{r7, lr}
 800ecfa:	af00      	add	r7, sp, #0
	HAL_UART_DMAStop(&huart1);
 800ecfc:	4806      	ldr	r0, [pc, #24]	; (800ed18 <func_updateRCVersion+0x20>)
 800ecfe:	f7f9 fdc0 	bl	8008882 <HAL_UART_DMAStop>

	SerialDownload(true);
 800ed02:	2001      	movs	r0, #1
 800ed04:	f000 fbec 	bl	800f4e0 <SerialDownload>

	if(HAL_UART_Receive_DMA(&huart1, (uint8_t *)&aRxBufferCh1, 1 ) != HAL_OK)
 800ed08:	2201      	movs	r2, #1
 800ed0a:	4904      	ldr	r1, [pc, #16]	; (800ed1c <func_updateRCVersion+0x24>)
 800ed0c:	4802      	ldr	r0, [pc, #8]	; (800ed18 <func_updateRCVersion+0x20>)
 800ed0e:	f7f9 fce1 	bl	80086d4 <HAL_UART_Receive_DMA>
	{

	} //  Error_Handler();
	//HAL_FLASH_Lock(); Is it realy needed?
	return CI_OK;
 800ed12:	2300      	movs	r3, #0
}
 800ed14:	4618      	mov	r0, r3
 800ed16:	bd80      	pop	{r7, pc}
 800ed18:	200019e4 	.word	0x200019e4
 800ed1c:	20000000 	.word	0x20000000

0800ed20 <func_versionReport>:

eCI_RESULT func_versionReport(void)
{
 800ed20:	b480      	push	{r7}
 800ed22:	af00      	add	r7, sp, #0

	return CI_OK;
 800ed24:	2300      	movs	r3, #0
}
 800ed26:	4618      	mov	r0, r3
 800ed28:	46bd      	mov	sp, r7
 800ed2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed2e:	4770      	bx	lr

0800ed30 <func_endUpdatePhase>:

eCI_RESULT func_endUpdatePhase(void)
{
 800ed30:	b580      	push	{r7, lr}
 800ed32:	b082      	sub	sp, #8
 800ed34:	af00      	add	r7, sp, #0
	HAL_UART_DMAStop(&huart2);
 800ed36:	480f      	ldr	r0, [pc, #60]	; (800ed74 <func_endUpdatePhase+0x44>)
 800ed38:	f7f9 fda3 	bl	8008882 <HAL_UART_DMAStop>

	HAL_Delay(100);
 800ed3c:	2064      	movs	r0, #100	; 0x64
 800ed3e:	f7f3 fa99 	bl	8002274 <HAL_Delay>
	JumpAddress = *(__IO uint32_t*) (APPLICATION_ADDRESS + 4);
 800ed42:	4b0d      	ldr	r3, [pc, #52]	; (800ed78 <func_endUpdatePhase+0x48>)
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	4a0d      	ldr	r2, [pc, #52]	; (800ed7c <func_endUpdatePhase+0x4c>)
 800ed48:	6013      	str	r3, [r2, #0]
	/* Jump to user application */
	JumpToApplication = (pFunction) JumpAddress;
 800ed4a:	4b0c      	ldr	r3, [pc, #48]	; (800ed7c <func_endUpdatePhase+0x4c>)
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	461a      	mov	r2, r3
 800ed50:	4b0b      	ldr	r3, [pc, #44]	; (800ed80 <func_endUpdatePhase+0x50>)
 800ed52:	601a      	str	r2, [r3, #0]
	/* Initialize user application's Stack Pointer */
	__set_MSP(*(__IO uint32_t*) APPLICATION_ADDRESS);
 800ed54:	4b0b      	ldr	r3, [pc, #44]	; (800ed84 <func_endUpdatePhase+0x54>)
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	f383 8808 	msr	MSP, r3
}
 800ed60:	bf00      	nop
	JumpToApplication();
 800ed62:	4b07      	ldr	r3, [pc, #28]	; (800ed80 <func_endUpdatePhase+0x50>)
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	4798      	blx	r3
	//TODO: show Flash process finished
	return CI_OK;
 800ed68:	2300      	movs	r3, #0
}
 800ed6a:	4618      	mov	r0, r3
 800ed6c:	3708      	adds	r7, #8
 800ed6e:	46bd      	mov	sp, r7
 800ed70:	bd80      	pop	{r7, pc}
 800ed72:	bf00      	nop
 800ed74:	20001a68 	.word	0x20001a68
 800ed78:	08020004 	.word	0x08020004
 800ed7c:	20003ca4 	.word	0x20003ca4
 800ed80:	20003ca8 	.word	0x20003ca8
 800ed84:	08020000 	.word	0x08020000

0800ed88 <func_resetRC>:

eCI_RESULT func_resetRC(void)
{
 800ed88:	b580      	push	{r7, lr}
 800ed8a:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
 800ed8c:	f7ff ff96 	bl	800ecbc <__NVIC_SystemReset>

0800ed90 <func_showAvailableCommands>:
	return CI_OK;
}

eCI_RESULT func_showAvailableCommands(void)
{
 800ed90:	b480      	push	{r7}
 800ed92:	af00      	add	r7, sp, #0
	return CI_OK;
 800ed94:	2300      	movs	r3, #0
}
 800ed96:	4618      	mov	r0, r3
 800ed98:	46bd      	mov	sp, r7
 800ed9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed9e:	4770      	bx	lr

0800eda0 <func_fmt>:

eCI_RESULT func_fmt(void)
{
 800eda0:	b480      	push	{r7}
 800eda2:	af00      	add	r7, sp, #0
	return CI_OK;
 800eda4:	2300      	movs	r3, #0
}
 800eda6:	4618      	mov	r0, r3
 800eda8:	46bd      	mov	sp, r7
 800edaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edae:	4770      	bx	lr

0800edb0 <funcTable>:
		{ "help", func_showAvailableCommands },
		{ "fmt" , func_fmt }
};

uint8_t funcTable( char* token )
{
 800edb0:	b580      	push	{r7, lr}
 800edb2:	b084      	sub	sp, #16
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	6078      	str	r0, [r7, #4]
	for( functionsList* pCase = cases; pCase != cases + sizeof( cases ) / sizeof( cases[0] ); pCase++ )
 800edb8:	4b0e      	ldr	r3, [pc, #56]	; (800edf4 <funcTable+0x44>)
 800edba:	60fb      	str	r3, [r7, #12]
 800edbc:	e010      	b.n	800ede0 <funcTable+0x30>
	{
		if( 0 == strcmp( pCase->string, token ) )
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	6879      	ldr	r1, [r7, #4]
 800edc4:	4618      	mov	r0, r3
 800edc6:	f7f1 fa3b 	bl	8000240 <strcmp>
 800edca:	4603      	mov	r3, r0
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d104      	bne.n	800edda <funcTable+0x2a>
		{
			(*pCase->func)();
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	685b      	ldr	r3, [r3, #4]
 800edd4:	4798      	blx	r3
			return 1;
 800edd6:	2301      	movs	r3, #1
 800edd8:	e007      	b.n	800edea <funcTable+0x3a>
	for( functionsList* pCase = cases; pCase != cases + sizeof( cases ) / sizeof( cases[0] ); pCase++ )
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	3308      	adds	r3, #8
 800edde:	60fb      	str	r3, [r7, #12]
 800ede0:	4a05      	ldr	r2, [pc, #20]	; (800edf8 <funcTable+0x48>)
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	4293      	cmp	r3, r2
 800ede6:	d1ea      	bne.n	800edbe <funcTable+0xe>
			break;
		}
	}
	return 0;
 800ede8:	2300      	movs	r3, #0
}
 800edea:	4618      	mov	r0, r3
 800edec:	3710      	adds	r7, #16
 800edee:	46bd      	mov	sp, r7
 800edf0:	bd80      	pop	{r7, pc}
 800edf2:	bf00      	nop
 800edf4:	20000174 	.word	0x20000174
 800edf8:	200001ac 	.word	0x200001ac

0800edfc <isfloat>:
}cSTR_UTIL;

//---------------------------------------------------------------------------

static inline bool isfloat(char *s)
{
 800edfc:	b480      	push	{r7}
 800edfe:	b085      	sub	sp, #20
 800ee00:	af00      	add	r7, sp, #0
 800ee02:	6078      	str	r0, [r7, #4]
  char c;

  if (*s == '-')
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	781b      	ldrb	r3, [r3, #0]
 800ee08:	2b2d      	cmp	r3, #45	; 0x2d
 800ee0a:	d102      	bne.n	800ee12 <isfloat+0x16>
  {
    s++;
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	3301      	adds	r3, #1
 800ee10:	607b      	str	r3, [r7, #4]
  }

  c = *s++;
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	1c5a      	adds	r2, r3, #1
 800ee16:	607a      	str	r2, [r7, #4]
 800ee18:	781b      	ldrb	r3, [r3, #0]
 800ee1a:	73fb      	strb	r3, [r7, #15]

  while (c != ' ' && c != ',' && c > 0)
 800ee1c:	e009      	b.n	800ee32 <isfloat+0x36>
  {
    if (c == '.')
 800ee1e:	7bfb      	ldrb	r3, [r7, #15]
 800ee20:	2b2e      	cmp	r3, #46	; 0x2e
 800ee22:	d101      	bne.n	800ee28 <isfloat+0x2c>
    {
      return (true);
 800ee24:	2301      	movs	r3, #1
 800ee26:	e00e      	b.n	800ee46 <isfloat+0x4a>
    }

    c = *s++;
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	1c5a      	adds	r2, r3, #1
 800ee2c:	607a      	str	r2, [r7, #4]
 800ee2e:	781b      	ldrb	r3, [r3, #0]
 800ee30:	73fb      	strb	r3, [r7, #15]
  while (c != ' ' && c != ',' && c > 0)
 800ee32:	7bfb      	ldrb	r3, [r7, #15]
 800ee34:	2b20      	cmp	r3, #32
 800ee36:	d005      	beq.n	800ee44 <isfloat+0x48>
 800ee38:	7bfb      	ldrb	r3, [r7, #15]
 800ee3a:	2b2c      	cmp	r3, #44	; 0x2c
 800ee3c:	d002      	beq.n	800ee44 <isfloat+0x48>
 800ee3e:	7bfb      	ldrb	r3, [r7, #15]
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d1ec      	bne.n	800ee1e <isfloat+0x22>
  }

  return (false);
 800ee44:	2300      	movs	r3, #0
}
 800ee46:	4618      	mov	r0, r3
 800ee48:	3714      	adds	r7, #20
 800ee4a:	46bd      	mov	sp, r7
 800ee4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee50:	4770      	bx	lr

0800ee52 <skip_chars>:
//---------------------------------------------------------------------------

static inline char *skip_chars(char *s)
{
 800ee52:	b480      	push	{r7}
 800ee54:	b083      	sub	sp, #12
 800ee56:	af00      	add	r7, sp, #0
 800ee58:	6078      	str	r0, [r7, #4]
  while (*s && *s != ',' && *s != ' ')
 800ee5a:	e002      	b.n	800ee62 <skip_chars+0x10>
  {
    s++;
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	3301      	adds	r3, #1
 800ee60:	607b      	str	r3, [r7, #4]
  while (*s && *s != ',' && *s != ' ')
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	781b      	ldrb	r3, [r3, #0]
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d007      	beq.n	800ee7a <skip_chars+0x28>
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	781b      	ldrb	r3, [r3, #0]
 800ee6e:	2b2c      	cmp	r3, #44	; 0x2c
 800ee70:	d003      	beq.n	800ee7a <skip_chars+0x28>
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	781b      	ldrb	r3, [r3, #0]
 800ee76:	2b20      	cmp	r3, #32
 800ee78:	d1f0      	bne.n	800ee5c <skip_chars+0xa>
  }

  return (s);
 800ee7a:	687b      	ldr	r3, [r7, #4]
}
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	370c      	adds	r7, #12
 800ee80:	46bd      	mov	sp, r7
 800ee82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee86:	4770      	bx	lr

0800ee88 <skip_blanks>:
//---------------------------------------------------------------------------

static inline char *skip_blanks(char *s)
{
 800ee88:	b480      	push	{r7}
 800ee8a:	b083      	sub	sp, #12
 800ee8c:	af00      	add	r7, sp, #0
 800ee8e:	6078      	str	r0, [r7, #4]
  while (*s == ' ' || *s == ',')
 800ee90:	e002      	b.n	800ee98 <skip_blanks+0x10>
  {
    s++;
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	3301      	adds	r3, #1
 800ee96:	607b      	str	r3, [r7, #4]
  while (*s == ' ' || *s == ',')
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	781b      	ldrb	r3, [r3, #0]
 800ee9c:	2b20      	cmp	r3, #32
 800ee9e:	d0f8      	beq.n	800ee92 <skip_blanks+0xa>
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	781b      	ldrb	r3, [r3, #0]
 800eea4:	2b2c      	cmp	r3, #44	; 0x2c
 800eea6:	d0f4      	beq.n	800ee92 <skip_blanks+0xa>
  }

  return (s);
 800eea8:	687b      	ldr	r3, [r7, #4]
}
 800eeaa:	4618      	mov	r0, r3
 800eeac:	370c      	adds	r7, #12
 800eeae:	46bd      	mov	sp, r7
 800eeb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeb4:	4770      	bx	lr

0800eeb6 <remove_CRLF>:

static inline char *remove_CRLF(char *s)
{
 800eeb6:	b580      	push	{r7, lr}
 800eeb8:	b084      	sub	sp, #16
 800eeba:	af00      	add	r7, sp, #0
 800eebc:	6078      	str	r0, [r7, #4]
  for (int i = 0 ; i < strlen(s) ; i++)
 800eebe:	2300      	movs	r3, #0
 800eec0:	60fb      	str	r3, [r7, #12]
 800eec2:	e013      	b.n	800eeec <remove_CRLF+0x36>
  {
    if ( (s[i] == 0x0a) || (s[i] ==0x0d) )
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	687a      	ldr	r2, [r7, #4]
 800eec8:	4413      	add	r3, r2
 800eeca:	781b      	ldrb	r3, [r3, #0]
 800eecc:	2b0a      	cmp	r3, #10
 800eece:	d005      	beq.n	800eedc <remove_CRLF+0x26>
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	687a      	ldr	r2, [r7, #4]
 800eed4:	4413      	add	r3, r2
 800eed6:	781b      	ldrb	r3, [r3, #0]
 800eed8:	2b0d      	cmp	r3, #13
 800eeda:	d104      	bne.n	800eee6 <remove_CRLF+0x30>
    {
      s[i] = 0x00;
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	687a      	ldr	r2, [r7, #4]
 800eee0:	4413      	add	r3, r2
 800eee2:	2200      	movs	r2, #0
 800eee4:	701a      	strb	r2, [r3, #0]
  for (int i = 0 ; i < strlen(s) ; i++)
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	3301      	adds	r3, #1
 800eeea:	60fb      	str	r3, [r7, #12]
 800eeec:	6878      	ldr	r0, [r7, #4]
 800eeee:	f7f1 f9b1 	bl	8000254 <strlen>
 800eef2:	4602      	mov	r2, r0
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	429a      	cmp	r2, r3
 800eef8:	d8e4      	bhi.n	800eec4 <remove_CRLF+0xe>
    }
  }

  return (s);
 800eefa:	687b      	ldr	r3, [r7, #4]
}
 800eefc:	4618      	mov	r0, r3
 800eefe:	3710      	adds	r7, #16
 800ef00:	46bd      	mov	sp, r7
 800ef02:	bd80      	pop	{r7, pc}

0800ef04 <init_params>:
char* sp;
uint8_t cmd_str_len = 0;
uint32_t ascii_image = 0;

void init_params(void)
{
 800ef04:	b480      	push	{r7}
 800ef06:	af00      	add	r7, sp, #0
  for (g_ci.param_count = 0; g_ci.param_count < CI_MAX_PARAMETERS; g_ci.param_count++)
 800ef08:	4b18      	ldr	r3, [pc, #96]	; (800ef6c <init_params+0x68>)
 800ef0a:	2200      	movs	r2, #0
 800ef0c:	705a      	strb	r2, [r3, #1]
 800ef0e:	e01e      	b.n	800ef4e <init_params+0x4a>
  {
    g_ci.params[g_ci.param_count].f = 0.0f;
 800ef10:	4b16      	ldr	r3, [pc, #88]	; (800ef6c <init_params+0x68>)
 800ef12:	785b      	ldrb	r3, [r3, #1]
 800ef14:	4a15      	ldr	r2, [pc, #84]	; (800ef6c <init_params+0x68>)
 800ef16:	011b      	lsls	r3, r3, #4
 800ef18:	4413      	add	r3, r2
 800ef1a:	3304      	adds	r3, #4
 800ef1c:	f04f 0200 	mov.w	r2, #0
 800ef20:	601a      	str	r2, [r3, #0]
    g_ci.params[g_ci.param_count].i = 0;
 800ef22:	4b12      	ldr	r3, [pc, #72]	; (800ef6c <init_params+0x68>)
 800ef24:	785b      	ldrb	r3, [r3, #1]
 800ef26:	4a11      	ldr	r2, [pc, #68]	; (800ef6c <init_params+0x68>)
 800ef28:	011b      	lsls	r3, r3, #4
 800ef2a:	4413      	add	r3, r2
 800ef2c:	3308      	adds	r3, #8
 800ef2e:	2200      	movs	r2, #0
 800ef30:	601a      	str	r2, [r3, #0]
    g_ci.params[g_ci.param_count].t = CI_UNKNOWN;
 800ef32:	4b0e      	ldr	r3, [pc, #56]	; (800ef6c <init_params+0x68>)
 800ef34:	785b      	ldrb	r3, [r3, #1]
 800ef36:	4a0d      	ldr	r2, [pc, #52]	; (800ef6c <init_params+0x68>)
 800ef38:	011b      	lsls	r3, r3, #4
 800ef3a:	4413      	add	r3, r2
 800ef3c:	3310      	adds	r3, #16
 800ef3e:	2203      	movs	r2, #3
 800ef40:	701a      	strb	r2, [r3, #0]
  for (g_ci.param_count = 0; g_ci.param_count < CI_MAX_PARAMETERS; g_ci.param_count++)
 800ef42:	4b0a      	ldr	r3, [pc, #40]	; (800ef6c <init_params+0x68>)
 800ef44:	785b      	ldrb	r3, [r3, #1]
 800ef46:	3301      	adds	r3, #1
 800ef48:	b2da      	uxtb	r2, r3
 800ef4a:	4b08      	ldr	r3, [pc, #32]	; (800ef6c <init_params+0x68>)
 800ef4c:	705a      	strb	r2, [r3, #1]
 800ef4e:	4b07      	ldr	r3, [pc, #28]	; (800ef6c <init_params+0x68>)
 800ef50:	785b      	ldrb	r3, [r3, #1]
 800ef52:	2b04      	cmp	r3, #4
 800ef54:	d9dc      	bls.n	800ef10 <init_params+0xc>
  }

  g_ci.param_error = 0;
 800ef56:	4b05      	ldr	r3, [pc, #20]	; (800ef6c <init_params+0x68>)
 800ef58:	2200      	movs	r2, #0
 800ef5a:	709a      	strb	r2, [r3, #2]
  g_ci.param_count = 0;
 800ef5c:	4b03      	ldr	r3, [pc, #12]	; (800ef6c <init_params+0x68>)
 800ef5e:	2200      	movs	r2, #0
 800ef60:	705a      	strb	r2, [r3, #1]
}
 800ef62:	bf00      	nop
 800ef64:	46bd      	mov	sp, r7
 800ef66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef6a:	4770      	bx	lr
 800ef6c:	20003c4c 	.word	0x20003c4c

0800ef70 <eval_params>:
  }
}
//-----------------------------------------------------------------------------

char* eval_params(char* s, uint8_t param_index)
{
 800ef70:	b580      	push	{r7, lr}
 800ef72:	b086      	sub	sp, #24
 800ef74:	af00      	add	r7, sp, #0
 800ef76:	6078      	str	r0, [r7, #4]
 800ef78:	460b      	mov	r3, r1
 800ef7a:	70fb      	strb	r3, [r7, #3]
  int32_t num;
  char* stmp = s;
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	60fb      	str	r3, [r7, #12]
  bool negative = false;
 800ef80:	2300      	movs	r3, #0
 800ef82:	74fb      	strb	r3, [r7, #19]
  unsigned char c;

  if (param_index >= CI_MAX_PARAMETERS)
 800ef84:	78fb      	ldrb	r3, [r7, #3]
 800ef86:	2b04      	cmp	r3, #4
 800ef88:	d901      	bls.n	800ef8e <eval_params+0x1e>
  {
    return (s);
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	e0ac      	b.n	800f0e8 <eval_params+0x178>
  }

  if (*s == '"')
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	781b      	ldrb	r3, [r3, #0]
 800ef92:	2b22      	cmp	r3, #34	; 0x22
 800ef94:	d121      	bne.n	800efda <eval_params+0x6a>
  {
    g_ci.params[param_index].i = (int32_t)++s;
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	3301      	adds	r3, #1
 800ef9a:	607b      	str	r3, [r7, #4]
 800ef9c:	78fb      	ldrb	r3, [r7, #3]
 800ef9e:	687a      	ldr	r2, [r7, #4]
 800efa0:	4953      	ldr	r1, [pc, #332]	; (800f0f0 <eval_params+0x180>)
 800efa2:	011b      	lsls	r3, r3, #4
 800efa4:	440b      	add	r3, r1
 800efa6:	3308      	adds	r3, #8
 800efa8:	601a      	str	r2, [r3, #0]

    g_ci.params[param_index].t = CI_STRING;
 800efaa:	78fb      	ldrb	r3, [r7, #3]
 800efac:	4a50      	ldr	r2, [pc, #320]	; (800f0f0 <eval_params+0x180>)
 800efae:	011b      	lsls	r3, r3, #4
 800efb0:	4413      	add	r3, r2
 800efb2:	3310      	adds	r3, #16
 800efb4:	2202      	movs	r2, #2
 800efb6:	701a      	strb	r2, [r3, #0]

    while (*s > 0 && *s++ != '"')
 800efb8:	bf00      	nop
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	781b      	ldrb	r3, [r3, #0]
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d005      	beq.n	800efce <eval_params+0x5e>
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	1c5a      	adds	r2, r3, #1
 800efc6:	607a      	str	r2, [r7, #4]
 800efc8:	781b      	ldrb	r3, [r3, #0]
 800efca:	2b22      	cmp	r3, #34	; 0x22
 800efcc:	d1f5      	bne.n	800efba <eval_params+0x4a>
    {
    }

    *(s - 1) = 0;
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	3b01      	subs	r3, #1
 800efd2:	2200      	movs	r2, #0
 800efd4:	701a      	strb	r2, [r3, #0]

    return (s);
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	e086      	b.n	800f0e8 <eval_params+0x178>
  }
  else if (isfloat(s))
 800efda:	6878      	ldr	r0, [r7, #4]
 800efdc:	f7ff ff0e 	bl	800edfc <isfloat>
 800efe0:	4603      	mov	r3, r0
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d027      	beq.n	800f036 <eval_params+0xc6>
  {
    g_ci.params[param_index].f = (float)atof(s);
 800efe6:	6878      	ldr	r0, [r7, #4]
 800efe8:	f001 fc56 	bl	8010898 <atof>
 800efec:	eeb0 7b40 	vmov.f64	d7, d0
 800eff0:	78fb      	ldrb	r3, [r7, #3]
 800eff2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800eff6:	4a3e      	ldr	r2, [pc, #248]	; (800f0f0 <eval_params+0x180>)
 800eff8:	011b      	lsls	r3, r3, #4
 800effa:	4413      	add	r3, r2
 800effc:	3304      	adds	r3, #4
 800effe:	edc3 7a00 	vstr	s15, [r3]
    g_ci.params[param_index].i = (int32_t)g_ci.params[param_index].f;
 800f002:	78fb      	ldrb	r3, [r7, #3]
 800f004:	4a3a      	ldr	r2, [pc, #232]	; (800f0f0 <eval_params+0x180>)
 800f006:	011b      	lsls	r3, r3, #4
 800f008:	4413      	add	r3, r2
 800f00a:	3304      	adds	r3, #4
 800f00c:	edd3 7a00 	vldr	s15, [r3]
 800f010:	78fb      	ldrb	r3, [r7, #3]
 800f012:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f016:	ee17 1a90 	vmov	r1, s15
 800f01a:	4a35      	ldr	r2, [pc, #212]	; (800f0f0 <eval_params+0x180>)
 800f01c:	011b      	lsls	r3, r3, #4
 800f01e:	4413      	add	r3, r2
 800f020:	3308      	adds	r3, #8
 800f022:	6019      	str	r1, [r3, #0]
    g_ci.params[param_index].t = CI_FLOAT;
 800f024:	78fb      	ldrb	r3, [r7, #3]
 800f026:	4a32      	ldr	r2, [pc, #200]	; (800f0f0 <eval_params+0x180>)
 800f028:	011b      	lsls	r3, r3, #4
 800f02a:	4413      	add	r3, r2
 800f02c:	3310      	adds	r3, #16
 800f02e:	2201      	movs	r2, #1
 800f030:	701a      	strb	r2, [r3, #0]

    return (s);
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	e058      	b.n	800f0e8 <eval_params+0x178>
  }

  s = stmp;
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	607b      	str	r3, [r7, #4]

  if (*s == '-')
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	781b      	ldrb	r3, [r3, #0]
 800f03e:	2b2d      	cmp	r3, #45	; 0x2d
 800f040:	d104      	bne.n	800f04c <eval_params+0xdc>
  {
    negative = true;
 800f042:	2301      	movs	r3, #1
 800f044:	74fb      	strb	r3, [r7, #19]
    s++;
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	3301      	adds	r3, #1
 800f04a:	607b      	str	r3, [r7, #4]
  }

  for (num = 0; isdigit(c = *s); s++)
 800f04c:	2300      	movs	r3, #0
 800f04e:	617b      	str	r3, [r7, #20]
 800f050:	e00c      	b.n	800f06c <eval_params+0xfc>
  {
    num = num * 10 + (c - '0');
 800f052:	697a      	ldr	r2, [r7, #20]
 800f054:	4613      	mov	r3, r2
 800f056:	009b      	lsls	r3, r3, #2
 800f058:	4413      	add	r3, r2
 800f05a:	005b      	lsls	r3, r3, #1
 800f05c:	461a      	mov	r2, r3
 800f05e:	7afb      	ldrb	r3, [r7, #11]
 800f060:	3b30      	subs	r3, #48	; 0x30
 800f062:	4413      	add	r3, r2
 800f064:	617b      	str	r3, [r7, #20]
  for (num = 0; isdigit(c = *s); s++)
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	3301      	adds	r3, #1
 800f06a:	607b      	str	r3, [r7, #4]
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	781b      	ldrb	r3, [r3, #0]
 800f070:	72fb      	strb	r3, [r7, #11]
 800f072:	7afb      	ldrb	r3, [r7, #11]
 800f074:	3301      	adds	r3, #1
 800f076:	4a1f      	ldr	r2, [pc, #124]	; (800f0f4 <eval_params+0x184>)
 800f078:	4413      	add	r3, r2
 800f07a:	781b      	ldrb	r3, [r3, #0]
 800f07c:	f003 0304 	and.w	r3, r3, #4
 800f080:	2b00      	cmp	r3, #0
 800f082:	d1e6      	bne.n	800f052 <eval_params+0xe2>
  }

  if (c > 0 && c != ',' && c != ' ' && c != 0x0a)
 800f084:	7afb      	ldrb	r3, [r7, #11]
 800f086:	2b00      	cmp	r3, #0
 800f088:	d00d      	beq.n	800f0a6 <eval_params+0x136>
 800f08a:	7afb      	ldrb	r3, [r7, #11]
 800f08c:	2b2c      	cmp	r3, #44	; 0x2c
 800f08e:	d00a      	beq.n	800f0a6 <eval_params+0x136>
 800f090:	7afb      	ldrb	r3, [r7, #11]
 800f092:	2b20      	cmp	r3, #32
 800f094:	d007      	beq.n	800f0a6 <eval_params+0x136>
 800f096:	7afb      	ldrb	r3, [r7, #11]
 800f098:	2b0a      	cmp	r3, #10
 800f09a:	d004      	beq.n	800f0a6 <eval_params+0x136>
  {
    g_ci.param_error = param_index + 1;
 800f09c:	78fb      	ldrb	r3, [r7, #3]
 800f09e:	3301      	adds	r3, #1
 800f0a0:	b2da      	uxtb	r2, r3
 800f0a2:	4b13      	ldr	r3, [pc, #76]	; (800f0f0 <eval_params+0x180>)
 800f0a4:	709a      	strb	r2, [r3, #2]
  }

  if (negative)
 800f0a6:	7cfb      	ldrb	r3, [r7, #19]
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d002      	beq.n	800f0b2 <eval_params+0x142>
  {
    num = -num;
 800f0ac:	697b      	ldr	r3, [r7, #20]
 800f0ae:	425b      	negs	r3, r3
 800f0b0:	617b      	str	r3, [r7, #20]
  }

  g_ci.params[param_index].i = num;
 800f0b2:	78fb      	ldrb	r3, [r7, #3]
 800f0b4:	4a0e      	ldr	r2, [pc, #56]	; (800f0f0 <eval_params+0x180>)
 800f0b6:	011b      	lsls	r3, r3, #4
 800f0b8:	4413      	add	r3, r2
 800f0ba:	3308      	adds	r3, #8
 800f0bc:	697a      	ldr	r2, [r7, #20]
 800f0be:	601a      	str	r2, [r3, #0]

  g_ci.params[param_index].f = (float)num;
 800f0c0:	78fb      	ldrb	r3, [r7, #3]
 800f0c2:	697a      	ldr	r2, [r7, #20]
 800f0c4:	ee07 2a90 	vmov	s15, r2
 800f0c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f0cc:	4a08      	ldr	r2, [pc, #32]	; (800f0f0 <eval_params+0x180>)
 800f0ce:	011b      	lsls	r3, r3, #4
 800f0d0:	4413      	add	r3, r2
 800f0d2:	3304      	adds	r3, #4
 800f0d4:	edc3 7a00 	vstr	s15, [r3]

  g_ci.params[param_index].t = CI_INT;
 800f0d8:	78fb      	ldrb	r3, [r7, #3]
 800f0da:	4a05      	ldr	r2, [pc, #20]	; (800f0f0 <eval_params+0x180>)
 800f0dc:	011b      	lsls	r3, r3, #4
 800f0de:	4413      	add	r3, r2
 800f0e0:	3310      	adds	r3, #16
 800f0e2:	2200      	movs	r2, #0
 800f0e4:	701a      	strb	r2, [r3, #0]

  return (s);
 800f0e6:	687b      	ldr	r3, [r7, #4]
}
 800f0e8:	4618      	mov	r0, r3
 800f0ea:	3718      	adds	r7, #24
 800f0ec:	46bd      	mov	sp, r7
 800f0ee:	bd80      	pop	{r7, pc}
 800f0f0:	20003c4c 	.word	0x20003c4c
 800f0f4:	08013814 	.word	0x08013814

0800f0f8 <parse>:
//-----------------------------------------------------------------------------

uint32_t parse(char* s)
{
 800f0f8:	b580      	push	{r7, lr}
 800f0fa:	b084      	sub	sp, #16
 800f0fc:	af00      	add	r7, sp, #0
 800f0fe:	6078      	str	r0, [r7, #4]
  ascii_image = 0;
 800f100:	4b48      	ldr	r3, [pc, #288]	; (800f224 <parse+0x12c>)
 800f102:	2200      	movs	r2, #0
 800f104:	601a      	str	r2, [r3, #0]
  uint8_t n;
  cmd_str_len = 0;
 800f106:	4b48      	ldr	r3, [pc, #288]	; (800f228 <parse+0x130>)
 800f108:	2200      	movs	r2, #0
 800f10a:	701a      	strb	r2, [r3, #0]
  memset(CommandsArray, 0, 5);
 800f10c:	2205      	movs	r2, #5
 800f10e:	2100      	movs	r1, #0
 800f110:	4846      	ldr	r0, [pc, #280]	; (800f22c <parse+0x134>)
 800f112:	f001 fc0d 	bl	8010930 <memset>

  init_params();
 800f116:	f7ff fef5 	bl	800ef04 <init_params>
  s = remove_CRLF((char*)s);
 800f11a:	6878      	ldr	r0, [r7, #4]
 800f11c:	f7ff fecb 	bl	800eeb6 <remove_CRLF>
 800f120:	6078      	str	r0, [r7, #4]
  s = skip_blanks((char*)s);
 800f122:	6878      	ldr	r0, [r7, #4]
 800f124:	f7ff feb0 	bl	800ee88 <skip_blanks>
 800f128:	6078      	str	r0, [r7, #4]

  sp = s;
 800f12a:	4a41      	ldr	r2, [pc, #260]	; (800f230 <parse+0x138>)
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	6013      	str	r3, [r2, #0]

  s = skip_chars(s);
 800f130:	6878      	ldr	r0, [r7, #4]
 800f132:	f7ff fe8e 	bl	800ee52 <skip_chars>
 800f136:	6078      	str	r0, [r7, #4]

  cmd_str_len = (uint8_t)(s - sp);
 800f138:	4b3d      	ldr	r3, [pc, #244]	; (800f230 <parse+0x138>)
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	687a      	ldr	r2, [r7, #4]
 800f13e:	1ad3      	subs	r3, r2, r3
 800f140:	b2da      	uxtb	r2, r3
 800f142:	4b39      	ldr	r3, [pc, #228]	; (800f228 <parse+0x130>)
 800f144:	701a      	strb	r2, [r3, #0]

  *s++ = 0;
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	1c5a      	adds	r2, r3, #1
 800f14a:	607a      	str	r2, [r7, #4]
 800f14c:	2200      	movs	r2, #0
 800f14e:	701a      	strb	r2, [r3, #0]

  if (cmd_str_len > 4)
 800f150:	4b35      	ldr	r3, [pc, #212]	; (800f228 <parse+0x130>)
 800f152:	781b      	ldrb	r3, [r3, #0]
 800f154:	2b04      	cmp	r3, #4
 800f156:	d902      	bls.n	800f15e <parse+0x66>
  {
    cmd_str_len = 4;
 800f158:	4b33      	ldr	r3, [pc, #204]	; (800f228 <parse+0x130>)
 800f15a:	2204      	movs	r2, #4
 800f15c:	701a      	strb	r2, [r3, #0]
  }

  sp += cmd_str_len - 1;
 800f15e:	4b34      	ldr	r3, [pc, #208]	; (800f230 <parse+0x138>)
 800f160:	681a      	ldr	r2, [r3, #0]
 800f162:	4b31      	ldr	r3, [pc, #196]	; (800f228 <parse+0x130>)
 800f164:	781b      	ldrb	r3, [r3, #0]
 800f166:	3b01      	subs	r3, #1
 800f168:	4413      	add	r3, r2
 800f16a:	4a31      	ldr	r2, [pc, #196]	; (800f230 <parse+0x138>)
 800f16c:	6013      	str	r3, [r2, #0]

  for (n = cmd_str_len; n-1; n--)
 800f16e:	4b2e      	ldr	r3, [pc, #184]	; (800f228 <parse+0x130>)
 800f170:	781b      	ldrb	r3, [r3, #0]
 800f172:	73fb      	strb	r3, [r7, #15]
 800f174:	e013      	b.n	800f19e <parse+0xa6>
  {
    ascii_image <<= 8;
 800f176:	4b2b      	ldr	r3, [pc, #172]	; (800f224 <parse+0x12c>)
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	021b      	lsls	r3, r3, #8
 800f17c:	4a29      	ldr	r2, [pc, #164]	; (800f224 <parse+0x12c>)
 800f17e:	6013      	str	r3, [r2, #0]
    ascii_image += *sp--;
 800f180:	4b2b      	ldr	r3, [pc, #172]	; (800f230 <parse+0x138>)
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	1e5a      	subs	r2, r3, #1
 800f186:	492a      	ldr	r1, [pc, #168]	; (800f230 <parse+0x138>)
 800f188:	600a      	str	r2, [r1, #0]
 800f18a:	781b      	ldrb	r3, [r3, #0]
 800f18c:	461a      	mov	r2, r3
 800f18e:	4b25      	ldr	r3, [pc, #148]	; (800f224 <parse+0x12c>)
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	4413      	add	r3, r2
 800f194:	4a23      	ldr	r2, [pc, #140]	; (800f224 <parse+0x12c>)
 800f196:	6013      	str	r3, [r2, #0]
  for (n = cmd_str_len; n-1; n--)
 800f198:	7bfb      	ldrb	r3, [r7, #15]
 800f19a:	3b01      	subs	r3, #1
 800f19c:	73fb      	strb	r3, [r7, #15]
 800f19e:	7bfb      	ldrb	r3, [r7, #15]
 800f1a0:	2b01      	cmp	r3, #1
 800f1a2:	d1e8      	bne.n	800f176 <parse+0x7e>
  }
  memcpy(CommandsArray,sp,cmd_str_len);
 800f1a4:	4b22      	ldr	r3, [pc, #136]	; (800f230 <parse+0x138>)
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	4a1f      	ldr	r2, [pc, #124]	; (800f228 <parse+0x130>)
 800f1aa:	7812      	ldrb	r2, [r2, #0]
 800f1ac:	4619      	mov	r1, r3
 800f1ae:	481f      	ldr	r0, [pc, #124]	; (800f22c <parse+0x134>)
 800f1b0:	f001 fbb0 	bl	8010914 <memcpy>
  ascii_image += *sp--;
 800f1b4:	4b1e      	ldr	r3, [pc, #120]	; (800f230 <parse+0x138>)
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	1e5a      	subs	r2, r3, #1
 800f1ba:	491d      	ldr	r1, [pc, #116]	; (800f230 <parse+0x138>)
 800f1bc:	600a      	str	r2, [r1, #0]
 800f1be:	781b      	ldrb	r3, [r3, #0]
 800f1c0:	461a      	mov	r2, r3
 800f1c2:	4b18      	ldr	r3, [pc, #96]	; (800f224 <parse+0x12c>)
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	4413      	add	r3, r2
 800f1c8:	4a16      	ldr	r2, [pc, #88]	; (800f224 <parse+0x12c>)
 800f1ca:	6013      	str	r3, [r2, #0]

  init_params();
 800f1cc:	f7ff fe9a 	bl	800ef04 <init_params>


  while (*s && g_ci.param_count < CI_MAX_PARAMETERS)
 800f1d0:	e016      	b.n	800f200 <parse+0x108>
  {
    s = skip_blanks(s);
 800f1d2:	6878      	ldr	r0, [r7, #4]
 800f1d4:	f7ff fe58 	bl	800ee88 <skip_blanks>
 800f1d8:	6078      	str	r0, [r7, #4]

   if (*s != 0)
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	781b      	ldrb	r3, [r3, #0]
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d00e      	beq.n	800f200 <parse+0x108>
    {
      s = eval_params(s, g_ci.param_count++);
 800f1e2:	4b14      	ldr	r3, [pc, #80]	; (800f234 <parse+0x13c>)
 800f1e4:	785b      	ldrb	r3, [r3, #1]
 800f1e6:	1c5a      	adds	r2, r3, #1
 800f1e8:	b2d1      	uxtb	r1, r2
 800f1ea:	4a12      	ldr	r2, [pc, #72]	; (800f234 <parse+0x13c>)
 800f1ec:	7051      	strb	r1, [r2, #1]
 800f1ee:	4619      	mov	r1, r3
 800f1f0:	6878      	ldr	r0, [r7, #4]
 800f1f2:	f7ff febd 	bl	800ef70 <eval_params>
 800f1f6:	6078      	str	r0, [r7, #4]

      s = skip_chars(s);
 800f1f8:	6878      	ldr	r0, [r7, #4]
 800f1fa:	f7ff fe2a 	bl	800ee52 <skip_chars>
 800f1fe:	6078      	str	r0, [r7, #4]
  while (*s && g_ci.param_count < CI_MAX_PARAMETERS)
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	781b      	ldrb	r3, [r3, #0]
 800f204:	2b00      	cmp	r3, #0
 800f206:	d003      	beq.n	800f210 <parse+0x118>
 800f208:	4b0a      	ldr	r3, [pc, #40]	; (800f234 <parse+0x13c>)
 800f20a:	785b      	ldrb	r3, [r3, #1]
 800f20c:	2b04      	cmp	r3, #4
 800f20e:	d9e0      	bls.n	800f1d2 <parse+0xda>
    }
  }
  funcTable(CommandsArray);
 800f210:	4806      	ldr	r0, [pc, #24]	; (800f22c <parse+0x134>)
 800f212:	f7ff fdcd 	bl	800edb0 <funcTable>
  if (!ee_validate1())
 800f216:	f7fe fe73 	bl	800df00 <ee_validate1>
  // }
  // else
  // {
  //   return CI_COMMAND_ERROR;
  // }
  return 0;
 800f21a:	2300      	movs	r3, #0
}
 800f21c:	4618      	mov	r0, r3
 800f21e:	3710      	adds	r7, #16
 800f220:	46bd      	mov	sp, r7
 800f222:	bd80      	pop	{r7, pc}
 800f224:	20000da8 	.word	0x20000da8
 800f228:	20000da5 	.word	0x20000da5
 800f22c:	20000da0 	.word	0x20000da0
 800f230:	20003ca0 	.word	0x20003ca0
 800f234:	20003c4c 	.word	0x20003c4c

0800f238 <limitInt32>:
{
	return sourceValue > 0 ? 1 : (sourceValue < 0 ? -1 : 0);
}

int32_t limitInt32(int32_t minValue, int32_t value, int32_t maxValue)
{
 800f238:	b480      	push	{r7}
 800f23a:	b085      	sub	sp, #20
 800f23c:	af00      	add	r7, sp, #0
 800f23e:	60f8      	str	r0, [r7, #12]
 800f240:	60b9      	str	r1, [r7, #8]
 800f242:	607a      	str	r2, [r7, #4]
	if (value < minValue)
 800f244:	68ba      	ldr	r2, [r7, #8]
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	429a      	cmp	r2, r3
 800f24a:	da01      	bge.n	800f250 <limitInt32+0x18>
	{
		return minValue;
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	e006      	b.n	800f25e <limitInt32+0x26>
	}
	else if (value > maxValue)
 800f250:	68ba      	ldr	r2, [r7, #8]
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	429a      	cmp	r2, r3
 800f256:	dd01      	ble.n	800f25c <limitInt32+0x24>
	{
		return maxValue;
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	e000      	b.n	800f25e <limitInt32+0x26>
	}
	return value;
 800f25c:	68bb      	ldr	r3, [r7, #8]
}
 800f25e:	4618      	mov	r0, r3
 800f260:	3714      	adds	r7, #20
 800f262:	46bd      	mov	sp, r7
 800f264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f268:	4770      	bx	lr

0800f26a <Str2Int>:
  * @param  p_intnum: The integer value
  * @retval 1: Correct
  *         0: Error
  */
uint32_t Str2Int(uint8_t *p_inputstr, uint32_t *p_intnum)
{
 800f26a:	b480      	push	{r7}
 800f26c:	b087      	sub	sp, #28
 800f26e:	af00      	add	r7, sp, #0
 800f270:	6078      	str	r0, [r7, #4]
 800f272:	6039      	str	r1, [r7, #0]
  uint32_t i = 0, res = 0;
 800f274:	2300      	movs	r3, #0
 800f276:	617b      	str	r3, [r7, #20]
 800f278:	2300      	movs	r3, #0
 800f27a:	613b      	str	r3, [r7, #16]
  uint32_t val = 0;
 800f27c:	2300      	movs	r3, #0
 800f27e:	60fb      	str	r3, [r7, #12]

  if ((p_inputstr[0] == '0') && ((p_inputstr[1] == 'x') || (p_inputstr[1] == 'X')))
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	781b      	ldrb	r3, [r3, #0]
 800f284:	2b30      	cmp	r3, #48	; 0x30
 800f286:	f040 80d7 	bne.w	800f438 <Str2Int+0x1ce>
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	3301      	adds	r3, #1
 800f28e:	781b      	ldrb	r3, [r3, #0]
 800f290:	2b78      	cmp	r3, #120	; 0x78
 800f292:	d005      	beq.n	800f2a0 <Str2Int+0x36>
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	3301      	adds	r3, #1
 800f298:	781b      	ldrb	r3, [r3, #0]
 800f29a:	2b58      	cmp	r3, #88	; 0x58
 800f29c:	f040 80cc 	bne.w	800f438 <Str2Int+0x1ce>
  {
    i = 2;
 800f2a0:	2302      	movs	r3, #2
 800f2a2:	617b      	str	r3, [r7, #20]
    while ( ( i < 11 ) && ( p_inputstr[i] != '\0' ) )
 800f2a4:	e057      	b.n	800f356 <Str2Int+0xec>
    {
      if (ISVALIDHEX(p_inputstr[i]))
 800f2a6:	687a      	ldr	r2, [r7, #4]
 800f2a8:	697b      	ldr	r3, [r7, #20]
 800f2aa:	4413      	add	r3, r2
 800f2ac:	781b      	ldrb	r3, [r3, #0]
 800f2ae:	2b40      	cmp	r3, #64	; 0x40
 800f2b0:	d905      	bls.n	800f2be <Str2Int+0x54>
 800f2b2:	687a      	ldr	r2, [r7, #4]
 800f2b4:	697b      	ldr	r3, [r7, #20]
 800f2b6:	4413      	add	r3, r2
 800f2b8:	781b      	ldrb	r3, [r3, #0]
 800f2ba:	2b46      	cmp	r3, #70	; 0x46
 800f2bc:	d917      	bls.n	800f2ee <Str2Int+0x84>
 800f2be:	687a      	ldr	r2, [r7, #4]
 800f2c0:	697b      	ldr	r3, [r7, #20]
 800f2c2:	4413      	add	r3, r2
 800f2c4:	781b      	ldrb	r3, [r3, #0]
 800f2c6:	2b60      	cmp	r3, #96	; 0x60
 800f2c8:	d905      	bls.n	800f2d6 <Str2Int+0x6c>
 800f2ca:	687a      	ldr	r2, [r7, #4]
 800f2cc:	697b      	ldr	r3, [r7, #20]
 800f2ce:	4413      	add	r3, r2
 800f2d0:	781b      	ldrb	r3, [r3, #0]
 800f2d2:	2b66      	cmp	r3, #102	; 0x66
 800f2d4:	d90b      	bls.n	800f2ee <Str2Int+0x84>
 800f2d6:	687a      	ldr	r2, [r7, #4]
 800f2d8:	697b      	ldr	r3, [r7, #20]
 800f2da:	4413      	add	r3, r2
 800f2dc:	781b      	ldrb	r3, [r3, #0]
 800f2de:	2b2f      	cmp	r3, #47	; 0x2f
 800f2e0:	d936      	bls.n	800f350 <Str2Int+0xe6>
 800f2e2:	687a      	ldr	r2, [r7, #4]
 800f2e4:	697b      	ldr	r3, [r7, #20]
 800f2e6:	4413      	add	r3, r2
 800f2e8:	781b      	ldrb	r3, [r3, #0]
 800f2ea:	2b39      	cmp	r3, #57	; 0x39
 800f2ec:	d830      	bhi.n	800f350 <Str2Int+0xe6>
      {
        val = (val << 4) + CONVERTHEX(p_inputstr[i]);
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	011b      	lsls	r3, r3, #4
 800f2f2:	6879      	ldr	r1, [r7, #4]
 800f2f4:	697a      	ldr	r2, [r7, #20]
 800f2f6:	440a      	add	r2, r1
 800f2f8:	7812      	ldrb	r2, [r2, #0]
 800f2fa:	2a2f      	cmp	r2, #47	; 0x2f
 800f2fc:	d90b      	bls.n	800f316 <Str2Int+0xac>
 800f2fe:	6879      	ldr	r1, [r7, #4]
 800f300:	697a      	ldr	r2, [r7, #20]
 800f302:	440a      	add	r2, r1
 800f304:	7812      	ldrb	r2, [r2, #0]
 800f306:	2a39      	cmp	r2, #57	; 0x39
 800f308:	d805      	bhi.n	800f316 <Str2Int+0xac>
 800f30a:	6879      	ldr	r1, [r7, #4]
 800f30c:	697a      	ldr	r2, [r7, #20]
 800f30e:	440a      	add	r2, r1
 800f310:	7812      	ldrb	r2, [r2, #0]
 800f312:	3a30      	subs	r2, #48	; 0x30
 800f314:	e016      	b.n	800f344 <Str2Int+0xda>
 800f316:	6879      	ldr	r1, [r7, #4]
 800f318:	697a      	ldr	r2, [r7, #20]
 800f31a:	440a      	add	r2, r1
 800f31c:	7812      	ldrb	r2, [r2, #0]
 800f31e:	2a40      	cmp	r2, #64	; 0x40
 800f320:	d90b      	bls.n	800f33a <Str2Int+0xd0>
 800f322:	6879      	ldr	r1, [r7, #4]
 800f324:	697a      	ldr	r2, [r7, #20]
 800f326:	440a      	add	r2, r1
 800f328:	7812      	ldrb	r2, [r2, #0]
 800f32a:	2a46      	cmp	r2, #70	; 0x46
 800f32c:	d805      	bhi.n	800f33a <Str2Int+0xd0>
 800f32e:	6879      	ldr	r1, [r7, #4]
 800f330:	697a      	ldr	r2, [r7, #20]
 800f332:	440a      	add	r2, r1
 800f334:	7812      	ldrb	r2, [r2, #0]
 800f336:	3a37      	subs	r2, #55	; 0x37
 800f338:	e004      	b.n	800f344 <Str2Int+0xda>
 800f33a:	6879      	ldr	r1, [r7, #4]
 800f33c:	697a      	ldr	r2, [r7, #20]
 800f33e:	440a      	add	r2, r1
 800f340:	7812      	ldrb	r2, [r2, #0]
 800f342:	3a57      	subs	r2, #87	; 0x57
 800f344:	4413      	add	r3, r2
 800f346:	60fb      	str	r3, [r7, #12]
      {
        /* Return 0, Invalid input */
        res = 0;
        break;
      }
      i++;
 800f348:	697b      	ldr	r3, [r7, #20]
 800f34a:	3301      	adds	r3, #1
 800f34c:	617b      	str	r3, [r7, #20]
 800f34e:	e002      	b.n	800f356 <Str2Int+0xec>
        res = 0;
 800f350:	2300      	movs	r3, #0
 800f352:	613b      	str	r3, [r7, #16]
        break;
 800f354:	e008      	b.n	800f368 <Str2Int+0xfe>
    while ( ( i < 11 ) && ( p_inputstr[i] != '\0' ) )
 800f356:	697b      	ldr	r3, [r7, #20]
 800f358:	2b0a      	cmp	r3, #10
 800f35a:	d805      	bhi.n	800f368 <Str2Int+0xfe>
 800f35c:	687a      	ldr	r2, [r7, #4]
 800f35e:	697b      	ldr	r3, [r7, #20]
 800f360:	4413      	add	r3, r2
 800f362:	781b      	ldrb	r3, [r3, #0]
 800f364:	2b00      	cmp	r3, #0
 800f366:	d19e      	bne.n	800f2a6 <Str2Int+0x3c>
    }

    /* valid result */
    if (p_inputstr[i] == '\0')
 800f368:	687a      	ldr	r2, [r7, #4]
 800f36a:	697b      	ldr	r3, [r7, #20]
 800f36c:	4413      	add	r3, r2
 800f36e:	781b      	ldrb	r3, [r3, #0]
 800f370:	2b00      	cmp	r3, #0
 800f372:	d167      	bne.n	800f444 <Str2Int+0x1da>
    {
      *p_intnum = val;
 800f374:	683b      	ldr	r3, [r7, #0]
 800f376:	68fa      	ldr	r2, [r7, #12]
 800f378:	601a      	str	r2, [r3, #0]
      res = 1;
 800f37a:	2301      	movs	r3, #1
 800f37c:	613b      	str	r3, [r7, #16]
    if (p_inputstr[i] == '\0')
 800f37e:	e061      	b.n	800f444 <Str2Int+0x1da>
  }
  else /* max 10-digit decimal input */
  {
    while ( ( i < 11 ) && ( res != 1 ) )
    {
      if (p_inputstr[i] == '\0')
 800f380:	687a      	ldr	r2, [r7, #4]
 800f382:	697b      	ldr	r3, [r7, #20]
 800f384:	4413      	add	r3, r2
 800f386:	781b      	ldrb	r3, [r3, #0]
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d105      	bne.n	800f398 <Str2Int+0x12e>
      {
        *p_intnum = val;
 800f38c:	683b      	ldr	r3, [r7, #0]
 800f38e:	68fa      	ldr	r2, [r7, #12]
 800f390:	601a      	str	r2, [r3, #0]
        /* return 1 */
        res = 1;
 800f392:	2301      	movs	r3, #1
 800f394:	613b      	str	r3, [r7, #16]
 800f396:	e04c      	b.n	800f432 <Str2Int+0x1c8>
      }
      else if (((p_inputstr[i] == 'k') || (p_inputstr[i] == 'K')) && (i > 0))
 800f398:	687a      	ldr	r2, [r7, #4]
 800f39a:	697b      	ldr	r3, [r7, #20]
 800f39c:	4413      	add	r3, r2
 800f39e:	781b      	ldrb	r3, [r3, #0]
 800f3a0:	2b6b      	cmp	r3, #107	; 0x6b
 800f3a2:	d005      	beq.n	800f3b0 <Str2Int+0x146>
 800f3a4:	687a      	ldr	r2, [r7, #4]
 800f3a6:	697b      	ldr	r3, [r7, #20]
 800f3a8:	4413      	add	r3, r2
 800f3aa:	781b      	ldrb	r3, [r3, #0]
 800f3ac:	2b4b      	cmp	r3, #75	; 0x4b
 800f3ae:	d10b      	bne.n	800f3c8 <Str2Int+0x15e>
 800f3b0:	697b      	ldr	r3, [r7, #20]
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d008      	beq.n	800f3c8 <Str2Int+0x15e>
      {
        val = val << 10;
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	029b      	lsls	r3, r3, #10
 800f3ba:	60fb      	str	r3, [r7, #12]
        *p_intnum = val;
 800f3bc:	683b      	ldr	r3, [r7, #0]
 800f3be:	68fa      	ldr	r2, [r7, #12]
 800f3c0:	601a      	str	r2, [r3, #0]
        res = 1;
 800f3c2:	2301      	movs	r3, #1
 800f3c4:	613b      	str	r3, [r7, #16]
 800f3c6:	e034      	b.n	800f432 <Str2Int+0x1c8>
      }
      else if (((p_inputstr[i] == 'm') || (p_inputstr[i] == 'M')) && (i > 0))
 800f3c8:	687a      	ldr	r2, [r7, #4]
 800f3ca:	697b      	ldr	r3, [r7, #20]
 800f3cc:	4413      	add	r3, r2
 800f3ce:	781b      	ldrb	r3, [r3, #0]
 800f3d0:	2b6d      	cmp	r3, #109	; 0x6d
 800f3d2:	d005      	beq.n	800f3e0 <Str2Int+0x176>
 800f3d4:	687a      	ldr	r2, [r7, #4]
 800f3d6:	697b      	ldr	r3, [r7, #20]
 800f3d8:	4413      	add	r3, r2
 800f3da:	781b      	ldrb	r3, [r3, #0]
 800f3dc:	2b4d      	cmp	r3, #77	; 0x4d
 800f3de:	d10b      	bne.n	800f3f8 <Str2Int+0x18e>
 800f3e0:	697b      	ldr	r3, [r7, #20]
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d008      	beq.n	800f3f8 <Str2Int+0x18e>
      {
        val = val << 20;
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	051b      	lsls	r3, r3, #20
 800f3ea:	60fb      	str	r3, [r7, #12]
        *p_intnum = val;
 800f3ec:	683b      	ldr	r3, [r7, #0]
 800f3ee:	68fa      	ldr	r2, [r7, #12]
 800f3f0:	601a      	str	r2, [r3, #0]
        res = 1;
 800f3f2:	2301      	movs	r3, #1
 800f3f4:	613b      	str	r3, [r7, #16]
 800f3f6:	e01c      	b.n	800f432 <Str2Int+0x1c8>
      }
      else if (ISVALIDDEC(p_inputstr[i]))
 800f3f8:	687a      	ldr	r2, [r7, #4]
 800f3fa:	697b      	ldr	r3, [r7, #20]
 800f3fc:	4413      	add	r3, r2
 800f3fe:	781b      	ldrb	r3, [r3, #0]
 800f400:	2b2f      	cmp	r3, #47	; 0x2f
 800f402:	d913      	bls.n	800f42c <Str2Int+0x1c2>
 800f404:	687a      	ldr	r2, [r7, #4]
 800f406:	697b      	ldr	r3, [r7, #20]
 800f408:	4413      	add	r3, r2
 800f40a:	781b      	ldrb	r3, [r3, #0]
 800f40c:	2b39      	cmp	r3, #57	; 0x39
 800f40e:	d80d      	bhi.n	800f42c <Str2Int+0x1c2>
      {
        val = val * 10 + CONVERTDEC(p_inputstr[i]);
 800f410:	68fa      	ldr	r2, [r7, #12]
 800f412:	4613      	mov	r3, r2
 800f414:	009b      	lsls	r3, r3, #2
 800f416:	4413      	add	r3, r2
 800f418:	005b      	lsls	r3, r3, #1
 800f41a:	4619      	mov	r1, r3
 800f41c:	687a      	ldr	r2, [r7, #4]
 800f41e:	697b      	ldr	r3, [r7, #20]
 800f420:	4413      	add	r3, r2
 800f422:	781b      	ldrb	r3, [r3, #0]
 800f424:	440b      	add	r3, r1
 800f426:	3b30      	subs	r3, #48	; 0x30
 800f428:	60fb      	str	r3, [r7, #12]
 800f42a:	e002      	b.n	800f432 <Str2Int+0x1c8>
      }
      else
      {
        /* return 0, Invalid input */
        res = 0;
 800f42c:	2300      	movs	r3, #0
 800f42e:	613b      	str	r3, [r7, #16]
        break;
 800f430:	e008      	b.n	800f444 <Str2Int+0x1da>
      }
      i++;
 800f432:	697b      	ldr	r3, [r7, #20]
 800f434:	3301      	adds	r3, #1
 800f436:	617b      	str	r3, [r7, #20]
    while ( ( i < 11 ) && ( res != 1 ) )
 800f438:	697b      	ldr	r3, [r7, #20]
 800f43a:	2b0a      	cmp	r3, #10
 800f43c:	d802      	bhi.n	800f444 <Str2Int+0x1da>
 800f43e:	693b      	ldr	r3, [r7, #16]
 800f440:	2b01      	cmp	r3, #1
 800f442:	d19d      	bne.n	800f380 <Str2Int+0x116>
    }
  }

  return res;
 800f444:	693b      	ldr	r3, [r7, #16]
}
 800f446:	4618      	mov	r0, r3
 800f448:	371c      	adds	r7, #28
 800f44a:	46bd      	mov	sp, r7
 800f44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f450:	4770      	bx	lr
	...

0800f454 <Serial_PutByte>:
  * @param  param The byte to be sent
  * @retval HAL_StatusTypeDef HAL_OK if OK
  */

HAL_StatusTypeDef Serial_PutByte( uint8_t param )
{
 800f454:	b580      	push	{r7, lr}
 800f456:	b082      	sub	sp, #8
 800f458:	af00      	add	r7, sp, #0
 800f45a:	4603      	mov	r3, r0
 800f45c:	71fb      	strb	r3, [r7, #7]
  /* May be timeouted... */
  if ( huart1.gState == HAL_UART_STATE_TIMEOUT )
 800f45e:	4b09      	ldr	r3, [pc, #36]	; (800f484 <Serial_PutByte+0x30>)
 800f460:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f462:	2ba0      	cmp	r3, #160	; 0xa0
 800f464:	d102      	bne.n	800f46c <Serial_PutByte+0x18>
  {
	  huart1.gState = HAL_UART_STATE_READY;
 800f466:	4b07      	ldr	r3, [pc, #28]	; (800f484 <Serial_PutByte+0x30>)
 800f468:	2220      	movs	r2, #32
 800f46a:	679a      	str	r2, [r3, #120]	; 0x78
  }
  return HAL_UART_Transmit(&huart1, &param, 1, TX_TIMEOUT);
 800f46c:	1df9      	adds	r1, r7, #7
 800f46e:	2364      	movs	r3, #100	; 0x64
 800f470:	2201      	movs	r2, #1
 800f472:	4804      	ldr	r0, [pc, #16]	; (800f484 <Serial_PutByte+0x30>)
 800f474:	f7f8 ff6e 	bl	8008354 <HAL_UART_Transmit>
 800f478:	4603      	mov	r3, r0
}
 800f47a:	4618      	mov	r0, r3
 800f47c:	3708      	adds	r7, #8
 800f47e:	46bd      	mov	sp, r7
 800f480:	bd80      	pop	{r7, pc}
 800f482:	bf00      	nop
 800f484:	200019e4 	.word	0x200019e4

0800f488 <rrotate>:
   }
   return t;
}

unsigned char rrotate(unsigned char val, int n)
{  unsigned int t,i;
 800f488:	b480      	push	{r7}
 800f48a:	b085      	sub	sp, #20
 800f48c:	af00      	add	r7, sp, #0
 800f48e:	4603      	mov	r3, r0
 800f490:	6039      	str	r1, [r7, #0]
 800f492:	71fb      	strb	r3, [r7, #7]
   t = val;
 800f494:	79fb      	ldrb	r3, [r7, #7]
 800f496:	60fb      	str	r3, [r7, #12]
   t =  t <<8;
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	021b      	lsls	r3, r3, #8
 800f49c:	60fb      	str	r3, [r7, #12]
   for(i = 0; i<n;i++)
 800f49e:	2300      	movs	r3, #0
 800f4a0:	60bb      	str	r3, [r7, #8]
 800f4a2:	e00e      	b.n	800f4c2 <rrotate+0x3a>
   {   t = t >>1;
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	085b      	lsrs	r3, r3, #1
 800f4a8:	60fb      	str	r3, [r7, #12]
	   if ((t&128)) { t = t | 32768; }
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d003      	beq.n	800f4bc <rrotate+0x34>
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f4ba:	60fb      	str	r3, [r7, #12]
   for(i = 0; i<n;i++)
 800f4bc:	68bb      	ldr	r3, [r7, #8]
 800f4be:	3301      	adds	r3, #1
 800f4c0:	60bb      	str	r3, [r7, #8]
 800f4c2:	683b      	ldr	r3, [r7, #0]
 800f4c4:	68ba      	ldr	r2, [r7, #8]
 800f4c6:	429a      	cmp	r2, r3
 800f4c8:	d3ec      	bcc.n	800f4a4 <rrotate+0x1c>
   }
   t =  t >>8;
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	0a1b      	lsrs	r3, r3, #8
 800f4ce:	60fb      	str	r3, [r7, #12]
   return t;
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	b2db      	uxtb	r3, r3
}
 800f4d4:	4618      	mov	r0, r3
 800f4d6:	3714      	adds	r7, #20
 800f4d8:	46bd      	mov	sp, r7
 800f4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4de:	4770      	bx	lr

0800f4e0 <SerialDownload>:
  * @brief  Download a file via serial port
  * @param  None
  * @retval None
  */
uint32_t SerialDownload(bool move)
{
 800f4e0:	b590      	push	{r4, r7, lr}
 800f4e2:	b08d      	sub	sp, #52	; 0x34
 800f4e4:	af00      	add	r7, sp, #0
 800f4e6:	4603      	mov	r3, r0
 800f4e8:	71fb      	strb	r3, [r7, #7]
  uint8_t number[11] = {0};
 800f4ea:	2300      	movs	r3, #0
 800f4ec:	613b      	str	r3, [r7, #16]
 800f4ee:	f107 0314 	add.w	r3, r7, #20
 800f4f2:	2200      	movs	r2, #0
 800f4f4:	601a      	str	r2, [r3, #0]
 800f4f6:	f8c3 2003 	str.w	r2, [r3, #3]
  uint32_t size = 0;
 800f4fa:	2300      	movs	r3, #0
 800f4fc:	60fb      	str	r3, [r7, #12]
  uint8_t *B4_Addr;
  uint32_t FlashDestination1, FlashDestination2;

  COM_StatusTypeDef result;

  result = Ymodem_Receive( &size );
 800f4fe:	f107 030c 	add.w	r3, r7, #12
 800f502:	4618      	mov	r0, r3
 800f504:	f000 fb04 	bl	800fb10 <Ymodem_Receive>
 800f508:	4603      	mov	r3, r0
 800f50a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (result == COM_OK)
 800f50e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f512:	2b00      	cmp	r3, #0
 800f514:	f040 80c1 	bne.w	800f69a <SerialDownload+0x1ba>
  {
//	  Buzzer_Set_Mode(1);
    if (move)
 800f518:	79fb      	ldrb	r3, [r7, #7]
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	f000 80d4 	beq.w	800f6c8 <SerialDownload+0x1e8>
    {

//     FLASH_If_Erase(APPLICATION_ADDRESS,size);
     HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError);
 800f520:	496c      	ldr	r1, [pc, #432]	; (800f6d4 <SerialDownload+0x1f4>)
 800f522:	486d      	ldr	r0, [pc, #436]	; (800f6d8 <SerialDownload+0x1f8>)
 800f524:	f7f4 f910 	bl	8003748 <HAL_FLASHEx_Erase>

     FlashDestination1 = APPLICATION_ADDRESS;
 800f528:	4b6c      	ldr	r3, [pc, #432]	; (800f6dc <SerialDownload+0x1fc>)
 800f52a:	62fb      	str	r3, [r7, #44]	; 0x2c
     FlashDestination2 = DOWNLOAD_ADDRESS;
 800f52c:	4b6c      	ldr	r3, [pc, #432]	; (800f6e0 <SerialDownload+0x200>)
 800f52e:	62bb      	str	r3, [r7, #40]	; 0x28

     for (int j = 0;j < size;j += 4)
 800f530:	2300      	movs	r3, #0
 800f532:	627b      	str	r3, [r7, #36]	; 0x24
 800f534:	e0ab      	b.n	800f68e <SerialDownload+0x1ae>
      {  //     SECONDS = 0;
              B4_Addr = (uint8_t*)&B4;
 800f536:	f107 0308 	add.w	r3, r7, #8
 800f53a:	61fb      	str	r3, [r7, #28]
              B4 = *(uint32_t*)FlashDestination2;
 800f53c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	60bb      	str	r3, [r7, #8]
              B4_Addr[0] = rrotate((rrotate(B4_Addr[0],5)^key[ck]),3); ck++; if (ck>255) ck = 0;
 800f542:	69fb      	ldr	r3, [r7, #28]
 800f544:	781b      	ldrb	r3, [r3, #0]
 800f546:	2105      	movs	r1, #5
 800f548:	4618      	mov	r0, r3
 800f54a:	f7ff ff9d 	bl	800f488 <rrotate>
 800f54e:	4603      	mov	r3, r0
 800f550:	4619      	mov	r1, r3
 800f552:	4b64      	ldr	r3, [pc, #400]	; (800f6e4 <SerialDownload+0x204>)
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	4a64      	ldr	r2, [pc, #400]	; (800f6e8 <SerialDownload+0x208>)
 800f558:	5cd3      	ldrb	r3, [r2, r3]
 800f55a:	404b      	eors	r3, r1
 800f55c:	b2db      	uxtb	r3, r3
 800f55e:	2103      	movs	r1, #3
 800f560:	4618      	mov	r0, r3
 800f562:	f7ff ff91 	bl	800f488 <rrotate>
 800f566:	4603      	mov	r3, r0
 800f568:	461a      	mov	r2, r3
 800f56a:	69fb      	ldr	r3, [r7, #28]
 800f56c:	701a      	strb	r2, [r3, #0]
 800f56e:	4b5d      	ldr	r3, [pc, #372]	; (800f6e4 <SerialDownload+0x204>)
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	3301      	adds	r3, #1
 800f574:	4a5b      	ldr	r2, [pc, #364]	; (800f6e4 <SerialDownload+0x204>)
 800f576:	6013      	str	r3, [r2, #0]
 800f578:	4b5a      	ldr	r3, [pc, #360]	; (800f6e4 <SerialDownload+0x204>)
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	2bff      	cmp	r3, #255	; 0xff
 800f57e:	d902      	bls.n	800f586 <SerialDownload+0xa6>
 800f580:	4b58      	ldr	r3, [pc, #352]	; (800f6e4 <SerialDownload+0x204>)
 800f582:	2200      	movs	r2, #0
 800f584:	601a      	str	r2, [r3, #0]
              B4_Addr[1] = rrotate((rrotate(B4_Addr[1],5)^key[ck]),3); ck++; if (ck>255) ck = 0;
 800f586:	69fb      	ldr	r3, [r7, #28]
 800f588:	3301      	adds	r3, #1
 800f58a:	781b      	ldrb	r3, [r3, #0]
 800f58c:	2105      	movs	r1, #5
 800f58e:	4618      	mov	r0, r3
 800f590:	f7ff ff7a 	bl	800f488 <rrotate>
 800f594:	4603      	mov	r3, r0
 800f596:	4619      	mov	r1, r3
 800f598:	4b52      	ldr	r3, [pc, #328]	; (800f6e4 <SerialDownload+0x204>)
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	4a52      	ldr	r2, [pc, #328]	; (800f6e8 <SerialDownload+0x208>)
 800f59e:	5cd3      	ldrb	r3, [r2, r3]
 800f5a0:	404b      	eors	r3, r1
 800f5a2:	b2da      	uxtb	r2, r3
 800f5a4:	69fb      	ldr	r3, [r7, #28]
 800f5a6:	1c5c      	adds	r4, r3, #1
 800f5a8:	2103      	movs	r1, #3
 800f5aa:	4610      	mov	r0, r2
 800f5ac:	f7ff ff6c 	bl	800f488 <rrotate>
 800f5b0:	4603      	mov	r3, r0
 800f5b2:	7023      	strb	r3, [r4, #0]
 800f5b4:	4b4b      	ldr	r3, [pc, #300]	; (800f6e4 <SerialDownload+0x204>)
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	3301      	adds	r3, #1
 800f5ba:	4a4a      	ldr	r2, [pc, #296]	; (800f6e4 <SerialDownload+0x204>)
 800f5bc:	6013      	str	r3, [r2, #0]
 800f5be:	4b49      	ldr	r3, [pc, #292]	; (800f6e4 <SerialDownload+0x204>)
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	2bff      	cmp	r3, #255	; 0xff
 800f5c4:	d902      	bls.n	800f5cc <SerialDownload+0xec>
 800f5c6:	4b47      	ldr	r3, [pc, #284]	; (800f6e4 <SerialDownload+0x204>)
 800f5c8:	2200      	movs	r2, #0
 800f5ca:	601a      	str	r2, [r3, #0]
              B4_Addr[2] = rrotate((rrotate(B4_Addr[2],5)^key[ck]),3); ck++; if (ck>255) ck = 0;
 800f5cc:	69fb      	ldr	r3, [r7, #28]
 800f5ce:	3302      	adds	r3, #2
 800f5d0:	781b      	ldrb	r3, [r3, #0]
 800f5d2:	2105      	movs	r1, #5
 800f5d4:	4618      	mov	r0, r3
 800f5d6:	f7ff ff57 	bl	800f488 <rrotate>
 800f5da:	4603      	mov	r3, r0
 800f5dc:	4619      	mov	r1, r3
 800f5de:	4b41      	ldr	r3, [pc, #260]	; (800f6e4 <SerialDownload+0x204>)
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	4a41      	ldr	r2, [pc, #260]	; (800f6e8 <SerialDownload+0x208>)
 800f5e4:	5cd3      	ldrb	r3, [r2, r3]
 800f5e6:	404b      	eors	r3, r1
 800f5e8:	b2da      	uxtb	r2, r3
 800f5ea:	69fb      	ldr	r3, [r7, #28]
 800f5ec:	1c9c      	adds	r4, r3, #2
 800f5ee:	2103      	movs	r1, #3
 800f5f0:	4610      	mov	r0, r2
 800f5f2:	f7ff ff49 	bl	800f488 <rrotate>
 800f5f6:	4603      	mov	r3, r0
 800f5f8:	7023      	strb	r3, [r4, #0]
 800f5fa:	4b3a      	ldr	r3, [pc, #232]	; (800f6e4 <SerialDownload+0x204>)
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	3301      	adds	r3, #1
 800f600:	4a38      	ldr	r2, [pc, #224]	; (800f6e4 <SerialDownload+0x204>)
 800f602:	6013      	str	r3, [r2, #0]
 800f604:	4b37      	ldr	r3, [pc, #220]	; (800f6e4 <SerialDownload+0x204>)
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	2bff      	cmp	r3, #255	; 0xff
 800f60a:	d902      	bls.n	800f612 <SerialDownload+0x132>
 800f60c:	4b35      	ldr	r3, [pc, #212]	; (800f6e4 <SerialDownload+0x204>)
 800f60e:	2200      	movs	r2, #0
 800f610:	601a      	str	r2, [r3, #0]
              B4_Addr[3] = rrotate((rrotate(B4_Addr[3],5)^key[ck]),3); ck++; if (ck>255) ck = 0;
 800f612:	69fb      	ldr	r3, [r7, #28]
 800f614:	3303      	adds	r3, #3
 800f616:	781b      	ldrb	r3, [r3, #0]
 800f618:	2105      	movs	r1, #5
 800f61a:	4618      	mov	r0, r3
 800f61c:	f7ff ff34 	bl	800f488 <rrotate>
 800f620:	4603      	mov	r3, r0
 800f622:	4619      	mov	r1, r3
 800f624:	4b2f      	ldr	r3, [pc, #188]	; (800f6e4 <SerialDownload+0x204>)
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	4a2f      	ldr	r2, [pc, #188]	; (800f6e8 <SerialDownload+0x208>)
 800f62a:	5cd3      	ldrb	r3, [r2, r3]
 800f62c:	404b      	eors	r3, r1
 800f62e:	b2da      	uxtb	r2, r3
 800f630:	69fb      	ldr	r3, [r7, #28]
 800f632:	1cdc      	adds	r4, r3, #3
 800f634:	2103      	movs	r1, #3
 800f636:	4610      	mov	r0, r2
 800f638:	f7ff ff26 	bl	800f488 <rrotate>
 800f63c:	4603      	mov	r3, r0
 800f63e:	7023      	strb	r3, [r4, #0]
 800f640:	4b28      	ldr	r3, [pc, #160]	; (800f6e4 <SerialDownload+0x204>)
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	3301      	adds	r3, #1
 800f646:	4a27      	ldr	r2, [pc, #156]	; (800f6e4 <SerialDownload+0x204>)
 800f648:	6013      	str	r3, [r2, #0]
 800f64a:	4b26      	ldr	r3, [pc, #152]	; (800f6e4 <SerialDownload+0x204>)
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	2bff      	cmp	r3, #255	; 0xff
 800f650:	d902      	bls.n	800f658 <SerialDownload+0x178>
 800f652:	4b24      	ldr	r3, [pc, #144]	; (800f6e4 <SerialDownload+0x204>)
 800f654:	2200      	movs	r2, #0
 800f656:	601a      	str	r2, [r3, #0]
              FLASHStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, FlashDestination1, B4);
 800f658:	68bb      	ldr	r3, [r7, #8]
 800f65a:	461a      	mov	r2, r3
 800f65c:	f04f 0300 	mov.w	r3, #0
 800f660:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f662:	2003      	movs	r0, #3
 800f664:	f7f3 fe18 	bl	8003298 <HAL_FLASH_Program>
 800f668:	4603      	mov	r3, r0
 800f66a:	461a      	mov	r2, r3
 800f66c:	4b1f      	ldr	r3, [pc, #124]	; (800f6ec <SerialDownload+0x20c>)
 800f66e:	701a      	strb	r2, [r3, #0]
              if (FLASHStatus!=HAL_OK)
 800f670:	4b1e      	ldr	r3, [pc, #120]	; (800f6ec <SerialDownload+0x20c>)
 800f672:	781b      	ldrb	r3, [r3, #0]
 800f674:	2b00      	cmp	r3, #0
 800f676:	d001      	beq.n	800f67c <SerialDownload+0x19c>
                {
//            	  sprintf(term_buffer,"Error: Image move %lu %d\n\r",size,j);
//                   PRINT();
                   return 0;
 800f678:	2300      	movs	r3, #0
 800f67a:	e026      	b.n	800f6ca <SerialDownload+0x1ea>
//            	  sprintf(term_buffer,"Error: Image check move %lu %d\n\r",size,j);
//                  PRINT();
//                  sprintf(term_buffer,"\r\n%s|Error moving to AppAddr. Name: %s Size: %d bytes",CT(),aFileName,size); PRINT();
//                  return;
                }
              FlashDestination1 += 4; FlashDestination2 += 4;
 800f67c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f67e:	3304      	adds	r3, #4
 800f680:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f684:	3304      	adds	r3, #4
 800f686:	62bb      	str	r3, [r7, #40]	; 0x28
     for (int j = 0;j < size;j += 4)
 800f688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f68a:	3304      	adds	r3, #4
 800f68c:	627b      	str	r3, [r7, #36]	; 0x24
 800f68e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	429a      	cmp	r2, r3
 800f694:	f4ff af4f 	bcc.w	800f536 <SerialDownload+0x56>
 800f698:	e016      	b.n	800f6c8 <SerialDownload+0x1e8>
    {
//    	sprintf(term_buffer,"\r\n%s|SenseAir file loading completed Successfully. Name: %s Size: %d bytes",CT(),aFileName,size); PRINT();
    }

  }
  else if (result == COM_LIMIT)
 800f69a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f69e:	2b05      	cmp	r3, #5
 800f6a0:	d102      	bne.n	800f6a8 <SerialDownload+0x1c8>
  {
	  size = 0;
 800f6a2:	2300      	movs	r3, #0
 800f6a4:	60fb      	str	r3, [r7, #12]
 800f6a6:	e00f      	b.n	800f6c8 <SerialDownload+0x1e8>
//    sprintf(term_buffer,"\r\n%s|Error. The image size is higher than the allowed space memory!",CT()); PRINT();
//    Buzzer_Set_Mode(6);
  }
  else if (result == COM_DATA)
 800f6a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f6ac:	2b04      	cmp	r3, #4
 800f6ae:	d102      	bne.n	800f6b6 <SerialDownload+0x1d6>
  {
	  size = 0;
 800f6b0:	2300      	movs	r3, #0
 800f6b2:	60fb      	str	r3, [r7, #12]
 800f6b4:	e008      	b.n	800f6c8 <SerialDownload+0x1e8>
//    sprintf(term_buffer,"\r\n%s|Error. Verification failed. Try again.",CT()); PRINT();
//    Buzzer_Set_Mode(6);
  }
  else if (result == COM_ABORT)
 800f6b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f6ba:	2b02      	cmp	r3, #2
 800f6bc:	d102      	bne.n	800f6c4 <SerialDownload+0x1e4>
  {
	  size = 0;
 800f6be:	2300      	movs	r3, #0
 800f6c0:	60fb      	str	r3, [r7, #12]
 800f6c2:	e001      	b.n	800f6c8 <SerialDownload+0x1e8>
//    ci_reset();
//    Buzzer_Set_Mode(6);
  }
  else
  {
	  size = 0;
 800f6c4:	2300      	movs	r3, #0
 800f6c6:	60fb      	str	r3, [r7, #12]
//    sprintf(term_buffer,"\r\n%s|Error. Failed to receive the file.",CT()); PRINT();
//    ci_reset();
//    Buzzer_Set_Mode(6);
  }
  return size;
 800f6c8:	68fb      	ldr	r3, [r7, #12]
}
 800f6ca:	4618      	mov	r0, r3
 800f6cc:	3734      	adds	r7, #52	; 0x34
 800f6ce:	46bd      	mov	sp, r7
 800f6d0:	bd90      	pop	{r4, r7, pc}
 800f6d2:	bf00      	nop
 800f6d4:	2000051c 	.word	0x2000051c
 800f6d8:	20001874 	.word	0x20001874
 800f6dc:	08020000 	.word	0x08020000
 800f6e0:	08050000 	.word	0x08050000
 800f6e4:	20000eac 	.word	0x20000eac
 800f6e8:	20000dac 	.word	0x20000dac
 800f6ec:	20003cec 	.word	0x20003cec

0800f6f0 <ee_validate_data>:

#include "main.h"
//-----------------------------------------------------------------------------

uint32_t ee_validate_data(eEEV_DATA_TYPE data_type, void* value_ptr, void* eev_ptr)
{
 800f6f0:	b480      	push	{r7}
 800f6f2:	b087      	sub	sp, #28
 800f6f4:	af00      	add	r7, sp, #0
 800f6f6:	4603      	mov	r3, r0
 800f6f8:	60b9      	str	r1, [r7, #8]
 800f6fa:	607a      	str	r2, [r7, #4]
 800f6fc:	73fb      	strb	r3, [r7, #15]
	uint32_t ee_invalid_counter = 0;
 800f6fe:	2300      	movs	r3, #0
 800f700:	617b      	str	r3, [r7, #20]

	switch (data_type)
 800f702:	7bfb      	ldrb	r3, [r7, #15]
 800f704:	2b06      	cmp	r3, #6
 800f706:	f200 80cb 	bhi.w	800f8a0 <ee_validate_data+0x1b0>
 800f70a:	a201      	add	r2, pc, #4	; (adr r2, 800f710 <ee_validate_data+0x20>)
 800f70c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f710:	0800f72d 	.word	0x0800f72d
 800f714:	0800f757 	.word	0x0800f757
 800f718:	0800f78b 	.word	0x0800f78b
 800f71c:	0800f7b3 	.word	0x0800f7b3
 800f720:	0800f7e5 	.word	0x0800f7e5
 800f724:	0800f80d 	.word	0x0800f80d
 800f728:	0800f835 	.word	0x0800f835
	{
	case EEV_U08:
		if (*(pU08)value_ptr < (*(pEEV_U08)eev_ptr).min ||
 800f72c:	68bb      	ldr	r3, [r7, #8]
 800f72e:	781a      	ldrb	r2, [r3, #0]
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	781b      	ldrb	r3, [r3, #0]
 800f734:	429a      	cmp	r2, r3
 800f736:	d306      	bcc.n	800f746 <ee_validate_data+0x56>
				*(pU08)value_ptr > (*(pEEV_U08)eev_ptr).max)
 800f738:	68bb      	ldr	r3, [r7, #8]
 800f73a:	781a      	ldrb	r2, [r3, #0]
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	789b      	ldrb	r3, [r3, #2]
		if (*(pU08)value_ptr < (*(pEEV_U08)eev_ptr).min ||
 800f740:	429a      	cmp	r2, r3
 800f742:	f240 80a2 	bls.w	800f88a <ee_validate_data+0x19a>
		{
			*(pU08)value_ptr = (*(pEEV_U08)eev_ptr).std;
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	785a      	ldrb	r2, [r3, #1]
 800f74a:	68bb      	ldr	r3, [r7, #8]
 800f74c:	701a      	strb	r2, [r3, #0]
			ee_invalid_counter++;
 800f74e:	697b      	ldr	r3, [r7, #20]
 800f750:	3301      	adds	r3, #1
 800f752:	617b      	str	r3, [r7, #20]
		}
		break;
 800f754:	e099      	b.n	800f88a <ee_validate_data+0x19a>

	case EEV_S08:
		if (*(pS08)value_ptr < (*(pEEV_S08)eev_ptr).min ||
 800f756:	68bb      	ldr	r3, [r7, #8]
 800f758:	f993 2000 	ldrsb.w	r2, [r3]
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	f993 3000 	ldrsb.w	r3, [r3]
 800f762:	429a      	cmp	r2, r3
 800f764:	db08      	blt.n	800f778 <ee_validate_data+0x88>
				*(pS08)value_ptr > (*(pEEV_S08)eev_ptr).max)
 800f766:	68bb      	ldr	r3, [r7, #8]
 800f768:	f993 2000 	ldrsb.w	r2, [r3]
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	f993 3002 	ldrsb.w	r3, [r3, #2]
		if (*(pS08)value_ptr < (*(pEEV_S08)eev_ptr).min ||
 800f772:	429a      	cmp	r2, r3
 800f774:	f340 808b 	ble.w	800f88e <ee_validate_data+0x19e>
		{
			*(pS08)value_ptr = (*(pEEV_S08)eev_ptr).std;
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	f993 2001 	ldrsb.w	r2, [r3, #1]
 800f77e:	68bb      	ldr	r3, [r7, #8]
 800f780:	701a      	strb	r2, [r3, #0]
			ee_invalid_counter++;
 800f782:	697b      	ldr	r3, [r7, #20]
 800f784:	3301      	adds	r3, #1
 800f786:	617b      	str	r3, [r7, #20]
		}
		break;
 800f788:	e081      	b.n	800f88e <ee_validate_data+0x19e>

	case EEV_U16:
		if (*(pU16)value_ptr < (*(pEEV_U16)eev_ptr).min ||
 800f78a:	68bb      	ldr	r3, [r7, #8]
 800f78c:	881a      	ldrh	r2, [r3, #0]
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	881b      	ldrh	r3, [r3, #0]
 800f792:	429a      	cmp	r2, r3
 800f794:	d305      	bcc.n	800f7a2 <ee_validate_data+0xb2>
				*(pU16)value_ptr > (*(pEEV_U16)eev_ptr).max)
 800f796:	68bb      	ldr	r3, [r7, #8]
 800f798:	881a      	ldrh	r2, [r3, #0]
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	889b      	ldrh	r3, [r3, #4]
		if (*(pU16)value_ptr < (*(pEEV_U16)eev_ptr).min ||
 800f79e:	429a      	cmp	r2, r3
 800f7a0:	d977      	bls.n	800f892 <ee_validate_data+0x1a2>
		{
			*(pU16)value_ptr = (*(pEEV_U16)eev_ptr).std;
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	885a      	ldrh	r2, [r3, #2]
 800f7a6:	68bb      	ldr	r3, [r7, #8]
 800f7a8:	801a      	strh	r2, [r3, #0]
			ee_invalid_counter++;
 800f7aa:	697b      	ldr	r3, [r7, #20]
 800f7ac:	3301      	adds	r3, #1
 800f7ae:	617b      	str	r3, [r7, #20]
		}
		break;
 800f7b0:	e06f      	b.n	800f892 <ee_validate_data+0x1a2>

	case EEV_S16:
		if (*(pS16)value_ptr < (*(pEEV_S16)eev_ptr).min ||
 800f7b2:	68bb      	ldr	r3, [r7, #8]
 800f7b4:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f7be:	429a      	cmp	r2, r3
 800f7c0:	db07      	blt.n	800f7d2 <ee_validate_data+0xe2>
				*(pS16)value_ptr > (*(pEEV_S16)eev_ptr).max)
 800f7c2:	68bb      	ldr	r3, [r7, #8]
 800f7c4:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
		if (*(pS16)value_ptr < (*(pEEV_S16)eev_ptr).min ||
 800f7ce:	429a      	cmp	r2, r3
 800f7d0:	dd61      	ble.n	800f896 <ee_validate_data+0x1a6>
		{
			*(pS16)value_ptr = (*(pEEV_S16)eev_ptr).std;
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800f7d8:	68bb      	ldr	r3, [r7, #8]
 800f7da:	801a      	strh	r2, [r3, #0]
			ee_invalid_counter++;
 800f7dc:	697b      	ldr	r3, [r7, #20]
 800f7de:	3301      	adds	r3, #1
 800f7e0:	617b      	str	r3, [r7, #20]
		}
		break;
 800f7e2:	e058      	b.n	800f896 <ee_validate_data+0x1a6>

	case EEV_U32:
		if ( (*(pU32)value_ptr < (*(pEEV_U32)eev_ptr).min) || (*(pU32)value_ptr > (*(pEEV_U32)eev_ptr).max) )
 800f7e4:	68bb      	ldr	r3, [r7, #8]
 800f7e6:	681a      	ldr	r2, [r3, #0]
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	429a      	cmp	r2, r3
 800f7ee:	d305      	bcc.n	800f7fc <ee_validate_data+0x10c>
 800f7f0:	68bb      	ldr	r3, [r7, #8]
 800f7f2:	681a      	ldr	r2, [r3, #0]
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	689b      	ldr	r3, [r3, #8]
 800f7f8:	429a      	cmp	r2, r3
 800f7fa:	d94e      	bls.n	800f89a <ee_validate_data+0x1aa>
		{
			*(pU32)value_ptr = (*(pEEV_U32)eev_ptr).std;
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	685a      	ldr	r2, [r3, #4]
 800f800:	68bb      	ldr	r3, [r7, #8]
 800f802:	601a      	str	r2, [r3, #0]
			ee_invalid_counter++;
 800f804:	697b      	ldr	r3, [r7, #20]
 800f806:	3301      	adds	r3, #1
 800f808:	617b      	str	r3, [r7, #20]
		}
		break;
 800f80a:	e046      	b.n	800f89a <ee_validate_data+0x1aa>

	case EEV_S32:
		if (*(pS32)value_ptr < (*(pEEV_S32)eev_ptr).min ||
 800f80c:	68bb      	ldr	r3, [r7, #8]
 800f80e:	681a      	ldr	r2, [r3, #0]
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	429a      	cmp	r2, r3
 800f816:	db05      	blt.n	800f824 <ee_validate_data+0x134>
				*(pS32)value_ptr > (*(pEEV_S32)eev_ptr).max)
 800f818:	68bb      	ldr	r3, [r7, #8]
 800f81a:	681a      	ldr	r2, [r3, #0]
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	689b      	ldr	r3, [r3, #8]
		if (*(pS32)value_ptr < (*(pEEV_S32)eev_ptr).min ||
 800f820:	429a      	cmp	r2, r3
 800f822:	dd3c      	ble.n	800f89e <ee_validate_data+0x1ae>
		{
			*(pS32)value_ptr = (*(pEEV_S32)eev_ptr).std;
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	685a      	ldr	r2, [r3, #4]
 800f828:	68bb      	ldr	r3, [r7, #8]
 800f82a:	601a      	str	r2, [r3, #0]
			ee_invalid_counter++;
 800f82c:	697b      	ldr	r3, [r7, #20]
 800f82e:	3301      	adds	r3, #1
 800f830:	617b      	str	r3, [r7, #20]
		}
		break;
 800f832:	e034      	b.n	800f89e <ee_validate_data+0x1ae>

	case EEV_FLOAT:
		if (*(pU32)value_ptr == 0xFFFFFFFF)
 800f834:	68bb      	ldr	r3, [r7, #8]
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f83c:	d106      	bne.n	800f84c <ee_validate_data+0x15c>
		{
			*(pFLOAT)value_ptr = (*(pEEV_FLOAT)eev_ptr).std;
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	685a      	ldr	r2, [r3, #4]
 800f842:	68bb      	ldr	r3, [r7, #8]
 800f844:	601a      	str	r2, [r3, #0]
			ee_invalid_counter++;
 800f846:	697b      	ldr	r3, [r7, #20]
 800f848:	3301      	adds	r3, #1
 800f84a:	617b      	str	r3, [r7, #20]
		}

		if (*(pFLOAT)value_ptr < (*(pEEV_FLOAT)eev_ptr).min ||
 800f84c:	68bb      	ldr	r3, [r7, #8]
 800f84e:	ed93 7a00 	vldr	s14, [r3]
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	edd3 7a00 	vldr	s15, [r3]
 800f858:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f85c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f860:	d40b      	bmi.n	800f87a <ee_validate_data+0x18a>
				*(pFLOAT)value_ptr > (*(pEEV_FLOAT)eev_ptr).max)
 800f862:	68bb      	ldr	r3, [r7, #8]
 800f864:	ed93 7a00 	vldr	s14, [r3]
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	edd3 7a02 	vldr	s15, [r3, #8]
		if (*(pFLOAT)value_ptr < (*(pEEV_FLOAT)eev_ptr).min ||
 800f86e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f876:	dc00      	bgt.n	800f87a <ee_validate_data+0x18a>
		{
			*(pFLOAT)value_ptr = (*(pEEV_FLOAT)eev_ptr).std;
			ee_invalid_counter++;
		}
		break;
 800f878:	e012      	b.n	800f8a0 <ee_validate_data+0x1b0>
			*(pFLOAT)value_ptr = (*(pEEV_FLOAT)eev_ptr).std;
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	685a      	ldr	r2, [r3, #4]
 800f87e:	68bb      	ldr	r3, [r7, #8]
 800f880:	601a      	str	r2, [r3, #0]
			ee_invalid_counter++;
 800f882:	697b      	ldr	r3, [r7, #20]
 800f884:	3301      	adds	r3, #1
 800f886:	617b      	str	r3, [r7, #20]
		break;
 800f888:	e00a      	b.n	800f8a0 <ee_validate_data+0x1b0>
		break;
 800f88a:	bf00      	nop
 800f88c:	e008      	b.n	800f8a0 <ee_validate_data+0x1b0>
		break;
 800f88e:	bf00      	nop
 800f890:	e006      	b.n	800f8a0 <ee_validate_data+0x1b0>
		break;
 800f892:	bf00      	nop
 800f894:	e004      	b.n	800f8a0 <ee_validate_data+0x1b0>
		break;
 800f896:	bf00      	nop
 800f898:	e002      	b.n	800f8a0 <ee_validate_data+0x1b0>
		break;
 800f89a:	bf00      	nop
 800f89c:	e000      	b.n	800f8a0 <ee_validate_data+0x1b0>
		break;
 800f89e:	bf00      	nop
	}

	return (ee_invalid_counter);
 800f8a0:	697b      	ldr	r3, [r7, #20]
}
 800f8a2:	4618      	mov	r0, r3
 800f8a4:	371c      	adds	r7, #28
 800f8a6:	46bd      	mov	sp, r7
 800f8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ac:	4770      	bx	lr
 800f8ae:	bf00      	nop

0800f8b0 <ReceivePacket>:
  * @param  timeout
  * @retval HAL_OK: normally return
  *         HAL_BUSY: abort by user
  */
static HAL_StatusTypeDef ReceivePacket(uint8_t *p_data, uint32_t *p_length, uint32_t timeout)
{
 800f8b0:	b580      	push	{r7, lr}
 800f8b2:	b088      	sub	sp, #32
 800f8b4:	af00      	add	r7, sp, #0
 800f8b6:	60f8      	str	r0, [r7, #12]
 800f8b8:	60b9      	str	r1, [r7, #8]
 800f8ba:	607a      	str	r2, [r7, #4]
  uint32_t crc;
  uint32_t packet_size = 0;
 800f8bc:	2300      	movs	r3, #0
 800f8be:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef status;
  uint8_t char1;

  *p_length = 0;
 800f8c0:	68bb      	ldr	r3, [r7, #8]
 800f8c2:	2200      	movs	r2, #0
 800f8c4:	601a      	str	r2, [r3, #0]
  status = HAL_UART_Receive(&huart1, &char1, 1, timeout);
 800f8c6:	f107 0113 	add.w	r1, r7, #19
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	2201      	movs	r2, #1
 800f8ce:	485d      	ldr	r0, [pc, #372]	; (800fa44 <ReceivePacket+0x194>)
 800f8d0:	f7f8 fdd3 	bl	800847a <HAL_UART_Receive>
 800f8d4:	4603      	mov	r3, r0
 800f8d6:	76fb      	strb	r3, [r7, #27]

  if (status == HAL_OK)
 800f8d8:	7efb      	ldrb	r3, [r7, #27]
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	f040 80aa 	bne.w	800fa34 <ReceivePacket+0x184>
  {
    switch (char1)
 800f8e0:	7cfb      	ldrb	r3, [r7, #19]
 800f8e2:	2b61      	cmp	r3, #97	; 0x61
 800f8e4:	d059      	beq.n	800f99a <ReceivePacket+0xea>
 800f8e6:	2b61      	cmp	r3, #97	; 0x61
 800f8e8:	dc5a      	bgt.n	800f9a0 <ReceivePacket+0xf0>
 800f8ea:	2b18      	cmp	r3, #24
 800f8ec:	dc38      	bgt.n	800f960 <ReceivePacket+0xb0>
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	dd56      	ble.n	800f9a0 <ReceivePacket+0xf0>
 800f8f2:	3b01      	subs	r3, #1
 800f8f4:	2b17      	cmp	r3, #23
 800f8f6:	d853      	bhi.n	800f9a0 <ReceivePacket+0xf0>
 800f8f8:	a201      	add	r2, pc, #4	; (adr r2, 800f900 <ReceivePacket+0x50>)
 800f8fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8fe:	bf00      	nop
 800f900:	0800f967 	.word	0x0800f967
 800f904:	0800f96d 	.word	0x0800f96d
 800f908:	0800f9a1 	.word	0x0800f9a1
 800f90c:	0800f9a7 	.word	0x0800f9a7
 800f910:	0800f9a1 	.word	0x0800f9a1
 800f914:	0800f9a1 	.word	0x0800f9a1
 800f918:	0800f9a1 	.word	0x0800f9a1
 800f91c:	0800f9a1 	.word	0x0800f9a1
 800f920:	0800f9a1 	.word	0x0800f9a1
 800f924:	0800f9a1 	.word	0x0800f9a1
 800f928:	0800f9a1 	.word	0x0800f9a1
 800f92c:	0800f9a1 	.word	0x0800f9a1
 800f930:	0800f9a1 	.word	0x0800f9a1
 800f934:	0800f9a1 	.word	0x0800f9a1
 800f938:	0800f9a1 	.word	0x0800f9a1
 800f93c:	0800f9a1 	.word	0x0800f9a1
 800f940:	0800f9a1 	.word	0x0800f9a1
 800f944:	0800f9a1 	.word	0x0800f9a1
 800f948:	0800f9a1 	.word	0x0800f9a1
 800f94c:	0800f9a1 	.word	0x0800f9a1
 800f950:	0800f9a1 	.word	0x0800f9a1
 800f954:	0800f9a1 	.word	0x0800f9a1
 800f958:	0800f9a1 	.word	0x0800f9a1
 800f95c:	0800f975 	.word	0x0800f975
 800f960:	2b41      	cmp	r3, #65	; 0x41
 800f962:	d01a      	beq.n	800f99a <ReceivePacket+0xea>
 800f964:	e01c      	b.n	800f9a0 <ReceivePacket+0xf0>
    {
      case SOH:
        packet_size = PACKET_SIZE;
 800f966:	2380      	movs	r3, #128	; 0x80
 800f968:	61fb      	str	r3, [r7, #28]
        break;
 800f96a:	e01d      	b.n	800f9a8 <ReceivePacket+0xf8>
      case STX:
        packet_size = PACKET_1K_SIZE;
 800f96c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f970:	61fb      	str	r3, [r7, #28]
        break;
 800f972:	e019      	b.n	800f9a8 <ReceivePacket+0xf8>
      case EOT:
        break;
      case CA:
        if ((HAL_UART_Receive(&huart1, &char1, 1, timeout) == HAL_OK) && (char1 == CA))
 800f974:	f107 0113 	add.w	r1, r7, #19
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	2201      	movs	r2, #1
 800f97c:	4831      	ldr	r0, [pc, #196]	; (800fa44 <ReceivePacket+0x194>)
 800f97e:	f7f8 fd7c 	bl	800847a <HAL_UART_Receive>
 800f982:	4603      	mov	r3, r0
 800f984:	2b00      	cmp	r3, #0
 800f986:	d105      	bne.n	800f994 <ReceivePacket+0xe4>
 800f988:	7cfb      	ldrb	r3, [r7, #19]
 800f98a:	2b18      	cmp	r3, #24
 800f98c:	d102      	bne.n	800f994 <ReceivePacket+0xe4>
        {
          packet_size = 2;
 800f98e:	2302      	movs	r3, #2
 800f990:	61fb      	str	r3, [r7, #28]
        }
        else
        {
          status = HAL_ERROR;
        }
        break;
 800f992:	e009      	b.n	800f9a8 <ReceivePacket+0xf8>
          status = HAL_ERROR;
 800f994:	2301      	movs	r3, #1
 800f996:	76fb      	strb	r3, [r7, #27]
        break;
 800f998:	e006      	b.n	800f9a8 <ReceivePacket+0xf8>
      case ABORT1:
      case ABORT2:
        status = HAL_BUSY;
 800f99a:	2302      	movs	r3, #2
 800f99c:	76fb      	strb	r3, [r7, #27]
        break;
 800f99e:	e003      	b.n	800f9a8 <ReceivePacket+0xf8>
      default:
        status = HAL_ERROR;
 800f9a0:	2301      	movs	r3, #1
 800f9a2:	76fb      	strb	r3, [r7, #27]
        break;
 800f9a4:	e000      	b.n	800f9a8 <ReceivePacket+0xf8>
        break;
 800f9a6:	bf00      	nop
    }
    *p_data = char1;
 800f9a8:	7cfa      	ldrb	r2, [r7, #19]
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	701a      	strb	r2, [r3, #0]

    if (packet_size >= PACKET_SIZE )
 800f9ae:	69fb      	ldr	r3, [r7, #28]
 800f9b0:	2b7f      	cmp	r3, #127	; 0x7f
 800f9b2:	d93f      	bls.n	800fa34 <ReceivePacket+0x184>
    {
      status = HAL_UART_Receive(&huart1, &p_data[PACKET_NUMBER_INDEX], packet_size + PACKET_OVERHEAD_SIZE, timeout);
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	1c99      	adds	r1, r3, #2
 800f9b8:	69fb      	ldr	r3, [r7, #28]
 800f9ba:	b29b      	uxth	r3, r3
 800f9bc:	3304      	adds	r3, #4
 800f9be:	b29a      	uxth	r2, r3
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	4820      	ldr	r0, [pc, #128]	; (800fa44 <ReceivePacket+0x194>)
 800f9c4:	f7f8 fd59 	bl	800847a <HAL_UART_Receive>
 800f9c8:	4603      	mov	r3, r0
 800f9ca:	76fb      	strb	r3, [r7, #27]

      /* Simple packet sanity check */
      if (status == HAL_OK )
 800f9cc:	7efb      	ldrb	r3, [r7, #27]
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d12e      	bne.n	800fa30 <ReceivePacket+0x180>
      {
        if (p_data[PACKET_NUMBER_INDEX] != ((p_data[PACKET_CNUMBER_INDEX]) ^ NEGATIVE_BYTE))
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	3302      	adds	r3, #2
 800f9d6:	781a      	ldrb	r2, [r3, #0]
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	3303      	adds	r3, #3
 800f9dc:	781b      	ldrb	r3, [r3, #0]
 800f9de:	43db      	mvns	r3, r3
 800f9e0:	b2db      	uxtb	r3, r3
 800f9e2:	429a      	cmp	r2, r3
 800f9e4:	d004      	beq.n	800f9f0 <ReceivePacket+0x140>
        {
          packet_size = 0;
 800f9e6:	2300      	movs	r3, #0
 800f9e8:	61fb      	str	r3, [r7, #28]
          status = HAL_ERROR;
 800f9ea:	2301      	movs	r3, #1
 800f9ec:	76fb      	strb	r3, [r7, #27]
 800f9ee:	e021      	b.n	800fa34 <ReceivePacket+0x184>
        }
        else
        {
          /* Check packet CRC */
          crc = p_data[ packet_size + PACKET_DATA_INDEX ] << 8;
 800f9f0:	69fb      	ldr	r3, [r7, #28]
 800f9f2:	3304      	adds	r3, #4
 800f9f4:	68fa      	ldr	r2, [r7, #12]
 800f9f6:	4413      	add	r3, r2
 800f9f8:	781b      	ldrb	r3, [r3, #0]
 800f9fa:	021b      	lsls	r3, r3, #8
 800f9fc:	617b      	str	r3, [r7, #20]
          crc += p_data[ packet_size + PACKET_DATA_INDEX + 1 ];
 800f9fe:	69fb      	ldr	r3, [r7, #28]
 800fa00:	3305      	adds	r3, #5
 800fa02:	68fa      	ldr	r2, [r7, #12]
 800fa04:	4413      	add	r3, r2
 800fa06:	781b      	ldrb	r3, [r3, #0]
 800fa08:	461a      	mov	r2, r3
 800fa0a:	697b      	ldr	r3, [r7, #20]
 800fa0c:	4413      	add	r3, r2
 800fa0e:	617b      	str	r3, [r7, #20]
          if (Cal_CRC16(&p_data[PACKET_DATA_INDEX], packet_size) != crc )
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	3304      	adds	r3, #4
 800fa14:	69f9      	ldr	r1, [r7, #28]
 800fa16:	4618      	mov	r0, r3
 800fa18:	f000 f849 	bl	800faae <Cal_CRC16>
 800fa1c:	4603      	mov	r3, r0
 800fa1e:	461a      	mov	r2, r3
 800fa20:	697b      	ldr	r3, [r7, #20]
 800fa22:	4293      	cmp	r3, r2
 800fa24:	d006      	beq.n	800fa34 <ReceivePacket+0x184>
          {
            packet_size = 0;
 800fa26:	2300      	movs	r3, #0
 800fa28:	61fb      	str	r3, [r7, #28]
            status = HAL_ERROR;
 800fa2a:	2301      	movs	r3, #1
 800fa2c:	76fb      	strb	r3, [r7, #27]
 800fa2e:	e001      	b.n	800fa34 <ReceivePacket+0x184>
          }
        }
      }
      else
      {
        packet_size = 0;
 800fa30:	2300      	movs	r3, #0
 800fa32:	61fb      	str	r3, [r7, #28]
      }
    }
  }
  *p_length = packet_size;
 800fa34:	68bb      	ldr	r3, [r7, #8]
 800fa36:	69fa      	ldr	r2, [r7, #28]
 800fa38:	601a      	str	r2, [r3, #0]
  return status;
 800fa3a:	7efb      	ldrb	r3, [r7, #27]
}
 800fa3c:	4618      	mov	r0, r3
 800fa3e:	3720      	adds	r7, #32
 800fa40:	46bd      	mov	sp, r7
 800fa42:	bd80      	pop	{r7, pc}
 800fa44:	200019e4 	.word	0x200019e4

0800fa48 <UpdateCRC16>:
  * @param  crc_in input value 
  * @param  input byte
  * @retval None
  */
uint16_t UpdateCRC16(uint16_t crc_in, uint8_t byte)
{
 800fa48:	b480      	push	{r7}
 800fa4a:	b085      	sub	sp, #20
 800fa4c:	af00      	add	r7, sp, #0
 800fa4e:	4603      	mov	r3, r0
 800fa50:	460a      	mov	r2, r1
 800fa52:	80fb      	strh	r3, [r7, #6]
 800fa54:	4613      	mov	r3, r2
 800fa56:	717b      	strb	r3, [r7, #5]
  uint32_t crc = crc_in;
 800fa58:	88fb      	ldrh	r3, [r7, #6]
 800fa5a:	60fb      	str	r3, [r7, #12]
  uint32_t in = byte | 0x100;
 800fa5c:	797b      	ldrb	r3, [r7, #5]
 800fa5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fa62:	60bb      	str	r3, [r7, #8]

  do
  {
    crc <<= 1;
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	005b      	lsls	r3, r3, #1
 800fa68:	60fb      	str	r3, [r7, #12]
    in <<= 1;
 800fa6a:	68bb      	ldr	r3, [r7, #8]
 800fa6c:	005b      	lsls	r3, r3, #1
 800fa6e:	60bb      	str	r3, [r7, #8]
    if(in & 0x100)
 800fa70:	68bb      	ldr	r3, [r7, #8]
 800fa72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d002      	beq.n	800fa80 <UpdateCRC16+0x38>
      ++crc;
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	3301      	adds	r3, #1
 800fa7e:	60fb      	str	r3, [r7, #12]
    if(crc & 0x10000)
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d004      	beq.n	800fa94 <UpdateCRC16+0x4c>
      crc ^= 0x1021;
 800fa8a:	68fa      	ldr	r2, [r7, #12]
 800fa8c:	f241 0321 	movw	r3, #4129	; 0x1021
 800fa90:	4053      	eors	r3, r2
 800fa92:	60fb      	str	r3, [r7, #12]
  }
  
  while(!(in & 0x10000));
 800fa94:	68bb      	ldr	r3, [r7, #8]
 800fa96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d0e2      	beq.n	800fa64 <UpdateCRC16+0x1c>

  return crc & 0xffffu;
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	b29b      	uxth	r3, r3
}
 800faa2:	4618      	mov	r0, r3
 800faa4:	3714      	adds	r7, #20
 800faa6:	46bd      	mov	sp, r7
 800faa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faac:	4770      	bx	lr

0800faae <Cal_CRC16>:
  * @param  data
  * @param  length
  * @retval None
  */
uint16_t Cal_CRC16(const uint8_t* p_data, uint32_t size)
{
 800faae:	b580      	push	{r7, lr}
 800fab0:	b084      	sub	sp, #16
 800fab2:	af00      	add	r7, sp, #0
 800fab4:	6078      	str	r0, [r7, #4]
 800fab6:	6039      	str	r1, [r7, #0]
  uint32_t crc = 0;
 800fab8:	2300      	movs	r3, #0
 800faba:	60fb      	str	r3, [r7, #12]
  const uint8_t* dataEnd = p_data+size;
 800fabc:	687a      	ldr	r2, [r7, #4]
 800fabe:	683b      	ldr	r3, [r7, #0]
 800fac0:	4413      	add	r3, r2
 800fac2:	60bb      	str	r3, [r7, #8]

  while(p_data < dataEnd)
 800fac4:	e00a      	b.n	800fadc <Cal_CRC16+0x2e>
    crc = UpdateCRC16(crc, *p_data++);
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	b298      	uxth	r0, r3
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	1c5a      	adds	r2, r3, #1
 800face:	607a      	str	r2, [r7, #4]
 800fad0:	781b      	ldrb	r3, [r3, #0]
 800fad2:	4619      	mov	r1, r3
 800fad4:	f7ff ffb8 	bl	800fa48 <UpdateCRC16>
 800fad8:	4603      	mov	r3, r0
 800fada:	60fb      	str	r3, [r7, #12]
  while(p_data < dataEnd)
 800fadc:	687a      	ldr	r2, [r7, #4]
 800fade:	68bb      	ldr	r3, [r7, #8]
 800fae0:	429a      	cmp	r2, r3
 800fae2:	d3f0      	bcc.n	800fac6 <Cal_CRC16+0x18>
 
  crc = UpdateCRC16(crc, 0);
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	b29b      	uxth	r3, r3
 800fae8:	2100      	movs	r1, #0
 800faea:	4618      	mov	r0, r3
 800faec:	f7ff ffac 	bl	800fa48 <UpdateCRC16>
 800faf0:	4603      	mov	r3, r0
 800faf2:	60fb      	str	r3, [r7, #12]
  crc = UpdateCRC16(crc, 0);
 800faf4:	68fb      	ldr	r3, [r7, #12]
 800faf6:	b29b      	uxth	r3, r3
 800faf8:	2100      	movs	r1, #0
 800fafa:	4618      	mov	r0, r3
 800fafc:	f7ff ffa4 	bl	800fa48 <UpdateCRC16>
 800fb00:	4603      	mov	r3, r0
 800fb02:	60fb      	str	r3, [r7, #12]

  return crc&0xffffu;
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	b29b      	uxth	r3, r3
}
 800fb08:	4618      	mov	r0, r3
 800fb0a:	3710      	adds	r7, #16
 800fb0c:	46bd      	mov	sp, r7
 800fb0e:	bd80      	pop	{r7, pc}

0800fb10 <Ymodem_Receive>:
  * @brief  Receive a file using the ymodem protocol with CRC16.
  * @param  p_size The size of the file.
  * @retval COM_StatusTypeDef result of reception/programming
  */
COM_StatusTypeDef Ymodem_Receive ( uint32_t *p_size )
{
 800fb10:	b580      	push	{r7, lr}
 800fb12:	b092      	sub	sp, #72	; 0x48
 800fb14:	af00      	add	r7, sp, #0
 800fb16:	6078      	str	r0, [r7, #4]
  uint32_t i, packet_length, session_done = 0, file_done, errors = 0, session_begin = 0;
 800fb18:	2300      	movs	r3, #0
 800fb1a:	643b      	str	r3, [r7, #64]	; 0x40
 800fb1c:	2300      	movs	r3, #0
 800fb1e:	63bb      	str	r3, [r7, #56]	; 0x38
 800fb20:	2300      	movs	r3, #0
 800fb22:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t flashdestination;
  uint32_t ramsource, filesize;
  uint8_t *file_ptr;
  uint8_t file_size[FILE_SIZE_LENGTH], tmp;//!!, packets_received;
  uint16_t packets_received;
  COM_StatusTypeDef result = COM_OK;
 800fb24:	2300      	movs	r3, #0
 800fb26:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

  /* Initialize flashdestination variable */
  flashdestination = DOWNLOAD_ADDRESS;
 800fb2a:	4b8f      	ldr	r3, [pc, #572]	; (800fd68 <Ymodem_Receive+0x258>)
 800fb2c:	633b      	str	r3, [r7, #48]	; 0x30

  __HAL_UART_FLUSH_DRREGISTER(&huart1);
 800fb2e:	4b8f      	ldr	r3, [pc, #572]	; (800fd6c <Ymodem_Receive+0x25c>)
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	699a      	ldr	r2, [r3, #24]
 800fb34:	4b8d      	ldr	r3, [pc, #564]	; (800fd6c <Ymodem_Receive+0x25c>)
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	f042 0208 	orr.w	r2, r2, #8
 800fb3c:	619a      	str	r2, [r3, #24]
 800fb3e:	4b8b      	ldr	r3, [pc, #556]	; (800fd6c <Ymodem_Receive+0x25c>)
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	699a      	ldr	r2, [r3, #24]
 800fb44:	4b89      	ldr	r3, [pc, #548]	; (800fd6c <Ymodem_Receive+0x25c>)
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	f042 0210 	orr.w	r2, r2, #16
 800fb4c:	619a      	str	r2, [r3, #24]
  
  while ((session_done == 0) && (result == COM_OK))
 800fb4e:	e0fc      	b.n	800fd4a <Ymodem_Receive+0x23a>
  {
    packets_received = 0;
 800fb50:	2300      	movs	r3, #0
 800fb52:	857b      	strh	r3, [r7, #42]	; 0x2a
    file_done = 0;
 800fb54:	2300      	movs	r3, #0
 800fb56:	63fb      	str	r3, [r7, #60]	; 0x3c
    while ((file_done == 0) && (result == COM_OK))
 800fb58:	e0ef      	b.n	800fd3a <Ymodem_Receive+0x22a>
    { //HAL_Delay(2); // after 2.33
      switch (ReceivePacket(aPacketData, &packet_length, DOWNLOAD_TIMEOUT))
 800fb5a:	f107 0320 	add.w	r3, r7, #32
 800fb5e:	f644 6220 	movw	r2, #20000	; 0x4e20
 800fb62:	4619      	mov	r1, r3
 800fb64:	4882      	ldr	r0, [pc, #520]	; (800fd70 <Ymodem_Receive+0x260>)
 800fb66:	f7ff fea3 	bl	800f8b0 <ReceivePacket>
 800fb6a:	4603      	mov	r3, r0
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d003      	beq.n	800fb78 <Ymodem_Receive+0x68>
 800fb70:	2b02      	cmp	r3, #2
 800fb72:	f000 80c1 	beq.w	800fcf8 <Ymodem_Receive+0x1e8>
 800fb76:	e0c9      	b.n	800fd0c <Ymodem_Receive+0x1fc>
      {
        case HAL_OK:
          errors = 0;
 800fb78:	2300      	movs	r3, #0
 800fb7a:	63bb      	str	r3, [r7, #56]	; 0x38
          switch (packet_length)
 800fb7c:	6a3b      	ldr	r3, [r7, #32]
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d008      	beq.n	800fb94 <Ymodem_Receive+0x84>
 800fb82:	2b02      	cmp	r3, #2
 800fb84:	d10c      	bne.n	800fba0 <Ymodem_Receive+0x90>
          {
            case 2:
              /* Abort by sender */
              Serial_PutByte(ACK);
 800fb86:	2006      	movs	r0, #6
 800fb88:	f7ff fc64 	bl	800f454 <Serial_PutByte>
              result = COM_ABORT;
 800fb8c:	2302      	movs	r3, #2
 800fb8e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
              break;
 800fb92:	e0b0      	b.n	800fcf6 <Ymodem_Receive+0x1e6>
            case 0:
              /* End of transmission */
              Serial_PutByte(ACK);
 800fb94:	2006      	movs	r0, #6
 800fb96:	f7ff fc5d 	bl	800f454 <Serial_PutByte>
              file_done = 1;
 800fb9a:	2301      	movs	r3, #1
 800fb9c:	63fb      	str	r3, [r7, #60]	; 0x3c
              break;
 800fb9e:	e0aa      	b.n	800fcf6 <Ymodem_Receive+0x1e6>
            default:
              /* Normal packet */
//!!              if (aPacketData[PACKET_NUMBER_INDEX] != packets_received)
              if (aPacketData[PACKET_NUMBER_INDEX] != (uint8_t)(0x00FF & packets_received) )
 800fba0:	4b73      	ldr	r3, [pc, #460]	; (800fd70 <Ymodem_Receive+0x260>)
 800fba2:	789a      	ldrb	r2, [r3, #2]
 800fba4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fba6:	b2db      	uxtb	r3, r3
 800fba8:	429a      	cmp	r2, r3
 800fbaa:	d003      	beq.n	800fbb4 <Ymodem_Receive+0xa4>
              {
                Serial_PutByte(NAK);
 800fbac:	2015      	movs	r0, #21
 800fbae:	f7ff fc51 	bl	800f454 <Serial_PutByte>
                  }
                }
                packets_received ++;
                session_begin = 1;
              }
              break;
 800fbb2:	e09f      	b.n	800fcf4 <Ymodem_Receive+0x1e4>
                if (packets_received == 0)
 800fbb4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d178      	bne.n	800fcac <Ymodem_Receive+0x19c>
                  if (aPacketData[PACKET_DATA_INDEX] != 0)
 800fbba:	4b6d      	ldr	r3, [pc, #436]	; (800fd70 <Ymodem_Receive+0x260>)
 800fbbc:	791b      	ldrb	r3, [r3, #4]
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d06c      	beq.n	800fc9c <Ymodem_Receive+0x18c>
                    i = 0;
 800fbc2:	2300      	movs	r3, #0
 800fbc4:	647b      	str	r3, [r7, #68]	; 0x44
                    file_ptr = aPacketData + PACKET_DATA_INDEX;
 800fbc6:	4b6b      	ldr	r3, [pc, #428]	; (800fd74 <Ymodem_Receive+0x264>)
 800fbc8:	62fb      	str	r3, [r7, #44]	; 0x2c
                    while ( (*file_ptr != 0) && (i < FILE_NAME_LENGTH))
 800fbca:	e008      	b.n	800fbde <Ymodem_Receive+0xce>
                      aFileName[i++] = *file_ptr++;
 800fbcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fbce:	1c53      	adds	r3, r2, #1
 800fbd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fbd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fbd4:	1c59      	adds	r1, r3, #1
 800fbd6:	6479      	str	r1, [r7, #68]	; 0x44
 800fbd8:	7811      	ldrb	r1, [r2, #0]
 800fbda:	4a67      	ldr	r2, [pc, #412]	; (800fd78 <Ymodem_Receive+0x268>)
 800fbdc:	54d1      	strb	r1, [r2, r3]
                    while ( (*file_ptr != 0) && (i < FILE_NAME_LENGTH))
 800fbde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbe0:	781b      	ldrb	r3, [r3, #0]
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d002      	beq.n	800fbec <Ymodem_Receive+0xdc>
 800fbe6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fbe8:	2b3f      	cmp	r3, #63	; 0x3f
 800fbea:	d9ef      	bls.n	800fbcc <Ymodem_Receive+0xbc>
                    aFileName[i++] = '\0';
 800fbec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fbee:	1c5a      	adds	r2, r3, #1
 800fbf0:	647a      	str	r2, [r7, #68]	; 0x44
 800fbf2:	4a61      	ldr	r2, [pc, #388]	; (800fd78 <Ymodem_Receive+0x268>)
 800fbf4:	2100      	movs	r1, #0
 800fbf6:	54d1      	strb	r1, [r2, r3]
                    i = 0;
 800fbf8:	2300      	movs	r3, #0
 800fbfa:	647b      	str	r3, [r7, #68]	; 0x44
                    file_ptr ++;
 800fbfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbfe:	3301      	adds	r3, #1
 800fc00:	62fb      	str	r3, [r7, #44]	; 0x2c
                    while ( (*file_ptr != ' ') && (i < FILE_SIZE_LENGTH))
 800fc02:	e00b      	b.n	800fc1c <Ymodem_Receive+0x10c>
                      file_size[i++] = *file_ptr++;
 800fc04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fc06:	1c53      	adds	r3, r2, #1
 800fc08:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fc0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fc0c:	1c59      	adds	r1, r3, #1
 800fc0e:	6479      	str	r1, [r7, #68]	; 0x44
 800fc10:	7812      	ldrb	r2, [r2, #0]
 800fc12:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800fc16:	440b      	add	r3, r1
 800fc18:	f803 2c3c 	strb.w	r2, [r3, #-60]
                    while ( (*file_ptr != ' ') && (i < FILE_SIZE_LENGTH))
 800fc1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc1e:	781b      	ldrb	r3, [r3, #0]
 800fc20:	2b20      	cmp	r3, #32
 800fc22:	d002      	beq.n	800fc2a <Ymodem_Receive+0x11a>
 800fc24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fc26:	2b0f      	cmp	r3, #15
 800fc28:	d9ec      	bls.n	800fc04 <Ymodem_Receive+0xf4>
                    file_size[i++] = '\0';
 800fc2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fc2c:	1c5a      	adds	r2, r3, #1
 800fc2e:	647a      	str	r2, [r7, #68]	; 0x44
 800fc30:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800fc34:	4413      	add	r3, r2
 800fc36:	2200      	movs	r2, #0
 800fc38:	f803 2c3c 	strb.w	r2, [r3, #-60]
                    Str2Int(file_size, &filesize);
 800fc3c:	f107 021c 	add.w	r2, r7, #28
 800fc40:	f107 030c 	add.w	r3, r7, #12
 800fc44:	4611      	mov	r1, r2
 800fc46:	4618      	mov	r0, r3
 800fc48:	f7ff fb0f 	bl	800f26a <Str2Int>
                    if (*p_size > (USER_FLASH_SIZE + 1))
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800fc54:	d914      	bls.n	800fc80 <Ymodem_Receive+0x170>
                      tmp = CA;
 800fc56:	2318      	movs	r3, #24
 800fc58:	72fb      	strb	r3, [r7, #11]
                      HAL_UART_Transmit(&huart1, &tmp, 1, NAK_TIMEOUT);
 800fc5a:	f107 010b 	add.w	r1, r7, #11
 800fc5e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800fc62:	2201      	movs	r2, #1
 800fc64:	4841      	ldr	r0, [pc, #260]	; (800fd6c <Ymodem_Receive+0x25c>)
 800fc66:	f7f8 fb75 	bl	8008354 <HAL_UART_Transmit>
                      HAL_UART_Transmit(&huart1, &tmp, 1, NAK_TIMEOUT);
 800fc6a:	f107 010b 	add.w	r1, r7, #11
 800fc6e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800fc72:	2201      	movs	r2, #1
 800fc74:	483d      	ldr	r0, [pc, #244]	; (800fd6c <Ymodem_Receive+0x25c>)
 800fc76:	f7f8 fb6d 	bl	8008354 <HAL_UART_Transmit>
                      result = COM_LIMIT;
 800fc7a:	2305      	movs	r3, #5
 800fc7c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
                    HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError);
 800fc80:	493e      	ldr	r1, [pc, #248]	; (800fd7c <Ymodem_Receive+0x26c>)
 800fc82:	483f      	ldr	r0, [pc, #252]	; (800fd80 <Ymodem_Receive+0x270>)
 800fc84:	f7f3 fd60 	bl	8003748 <HAL_FLASHEx_Erase>
                    *p_size = filesize;
 800fc88:	69fa      	ldr	r2, [r7, #28]
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	601a      	str	r2, [r3, #0]
                    Serial_PutByte(ACK);
 800fc8e:	2006      	movs	r0, #6
 800fc90:	f7ff fbe0 	bl	800f454 <Serial_PutByte>
                    Serial_PutByte(CRC16);
 800fc94:	2043      	movs	r0, #67	; 0x43
 800fc96:	f7ff fbdd 	bl	800f454 <Serial_PutByte>
 800fc9a:	e026      	b.n	800fcea <Ymodem_Receive+0x1da>
                    Serial_PutByte(ACK);
 800fc9c:	2006      	movs	r0, #6
 800fc9e:	f7ff fbd9 	bl	800f454 <Serial_PutByte>
                    file_done = 1;
 800fca2:	2301      	movs	r3, #1
 800fca4:	63fb      	str	r3, [r7, #60]	; 0x3c
                    session_done = 1;
 800fca6:	2301      	movs	r3, #1
 800fca8:	643b      	str	r3, [r7, #64]	; 0x40
                    break;
 800fcaa:	e024      	b.n	800fcf6 <Ymodem_Receive+0x1e6>
                  ramsource = (uint32_t) & aPacketData[PACKET_DATA_INDEX];
 800fcac:	4b31      	ldr	r3, [pc, #196]	; (800fd74 <Ymodem_Receive+0x264>)
 800fcae:	627b      	str	r3, [r7, #36]	; 0x24
                  if (HAL_FLASH_Program(flashdestination, (uint32_t*) ramsource, packet_length/4) == HAL_OK)
 800fcb0:	6a3b      	ldr	r3, [r7, #32]
 800fcb2:	089b      	lsrs	r3, r3, #2
 800fcb4:	461a      	mov	r2, r3
 800fcb6:	f04f 0300 	mov.w	r3, #0
 800fcba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fcbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fcbe:	f7f3 faeb 	bl	8003298 <HAL_FLASH_Program>
 800fcc2:	4603      	mov	r3, r0
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d107      	bne.n	800fcd8 <Ymodem_Receive+0x1c8>
                    flashdestination += packet_length;
 800fcc8:	6a3b      	ldr	r3, [r7, #32]
 800fcca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fccc:	4413      	add	r3, r2
 800fcce:	633b      	str	r3, [r7, #48]	; 0x30
                    Serial_PutByte(ACK);
 800fcd0:	2006      	movs	r0, #6
 800fcd2:	f7ff fbbf 	bl	800f454 <Serial_PutByte>
 800fcd6:	e008      	b.n	800fcea <Ymodem_Receive+0x1da>
                    Serial_PutByte(CA);
 800fcd8:	2018      	movs	r0, #24
 800fcda:	f7ff fbbb 	bl	800f454 <Serial_PutByte>
                    Serial_PutByte(CA);
 800fcde:	2018      	movs	r0, #24
 800fce0:	f7ff fbb8 	bl	800f454 <Serial_PutByte>
                    result = COM_DATA;
 800fce4:	2304      	movs	r3, #4
 800fce6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
                packets_received ++;
 800fcea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fcec:	3301      	adds	r3, #1
 800fcee:	857b      	strh	r3, [r7, #42]	; 0x2a
                session_begin = 1;
 800fcf0:	2301      	movs	r3, #1
 800fcf2:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800fcf4:	bf00      	nop
          }
          break;
 800fcf6:	e020      	b.n	800fd3a <Ymodem_Receive+0x22a>
        case HAL_BUSY: /* Abort actually */
          Serial_PutByte(CA);
 800fcf8:	2018      	movs	r0, #24
 800fcfa:	f7ff fbab 	bl	800f454 <Serial_PutByte>
          Serial_PutByte(CA);
 800fcfe:	2018      	movs	r0, #24
 800fd00:	f7ff fba8 	bl	800f454 <Serial_PutByte>
          result = COM_ABORT;
 800fd04:	2302      	movs	r3, #2
 800fd06:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
          break;
 800fd0a:	e016      	b.n	800fd3a <Ymodem_Receive+0x22a>
        default:
          if (session_begin > 0)
 800fd0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d002      	beq.n	800fd18 <Ymodem_Receive+0x208>
          {
            errors ++;
 800fd12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd14:	3301      	adds	r3, #1
 800fd16:	63bb      	str	r3, [r7, #56]	; 0x38
          }
          if (errors > MAX_ERRORS)
 800fd18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd1a:	2b05      	cmp	r3, #5
 800fd1c:	d909      	bls.n	800fd32 <Ymodem_Receive+0x222>
          {
            /* Abort communication */
            Serial_PutByte(CA);
 800fd1e:	2018      	movs	r0, #24
 800fd20:	f7ff fb98 	bl	800f454 <Serial_PutByte>
            Serial_PutByte(CA);
 800fd24:	2018      	movs	r0, #24
 800fd26:	f7ff fb95 	bl	800f454 <Serial_PutByte>
            result = COM_ABORT;
 800fd2a:	2302      	movs	r3, #2
 800fd2c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 800fd30:	e002      	b.n	800fd38 <Ymodem_Receive+0x228>
          }
          else
          {
            Serial_PutByte(CRC16); /* Ask for a packet */
 800fd32:	2043      	movs	r0, #67	; 0x43
 800fd34:	f7ff fb8e 	bl	800f454 <Serial_PutByte>
          }
          break;
 800fd38:	bf00      	nop
    while ((file_done == 0) && (result == COM_OK))
 800fd3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d104      	bne.n	800fd4a <Ymodem_Receive+0x23a>
 800fd40:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	f43f af08 	beq.w	800fb5a <Ymodem_Receive+0x4a>
  while ((session_done == 0) && (result == COM_OK))
 800fd4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d104      	bne.n	800fd5a <Ymodem_Receive+0x24a>
 800fd50:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	f43f aefb 	beq.w	800fb50 <Ymodem_Receive+0x40>
      }
    }
  }
  return result;
 800fd5a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
}
 800fd5e:	4618      	mov	r0, r3
 800fd60:	3748      	adds	r7, #72	; 0x48
 800fd62:	46bd      	mov	sp, r7
 800fd64:	bd80      	pop	{r7, pc}
 800fd66:	bf00      	nop
 800fd68:	08050000 	.word	0x08050000
 800fd6c:	200019e4 	.word	0x200019e4
 800fd70:	20003cf0 	.word	0x20003cf0
 800fd74:	20003cf4 	.word	0x20003cf4
 800fd78:	20003cac 	.word	0x20003cac
 800fd7c:	2000051c 	.word	0x2000051c
 800fd80:	20001874 	.word	0x20001874

0800fd84 <readUSBData>:
/*
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */
uint16_t readUSBData(void)
{
 800fd84:	b580      	push	{r7, lr}
 800fd86:	b082      	sub	sp, #8
 800fd88:	af00      	add	r7, sp, #0
	uint16_t usbBytesRead = 0;
 800fd8a:	2300      	movs	r3, #0
 800fd8c:	80fb      	strh	r3, [r7, #6]
	if (HAL_GetTick() - lastUSBDataRead >= 10)
 800fd8e:	f7f2 fa65 	bl	800225c <HAL_GetTick>
 800fd92:	4602      	mov	r2, r0
 800fd94:	4b14      	ldr	r3, [pc, #80]	; (800fde8 <readUSBData+0x64>)
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	1ad3      	subs	r3, r2, r3
 800fd9a:	2b09      	cmp	r3, #9
 800fd9c:	d91e      	bls.n	800fddc <readUSBData+0x58>
	{
		USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &usbRXArray[0]);
 800fd9e:	4913      	ldr	r1, [pc, #76]	; (800fdec <readUSBData+0x68>)
 800fda0:	4813      	ldr	r0, [pc, #76]	; (800fdf0 <readUSBData+0x6c>)
 800fda2:	f7fb fbe3 	bl	800b56c <USBD_CDC_SetRxBuffer>
		USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800fda6:	4812      	ldr	r0, [pc, #72]	; (800fdf0 <readUSBData+0x6c>)
 800fda8:	f7fb fbf4 	bl	800b594 <USBD_CDC_ReceivePacket>
		usbBytesRead = strlen((char *)usbRXArray);
 800fdac:	480f      	ldr	r0, [pc, #60]	; (800fdec <readUSBData+0x68>)
 800fdae:	f7f0 fa51 	bl	8000254 <strlen>
 800fdb2:	4603      	mov	r3, r0
 800fdb4:	80fb      	strh	r3, [r7, #6]
		if (usbBytesRead > 0)
 800fdb6:	88fb      	ldrh	r3, [r7, #6]
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d00a      	beq.n	800fdd2 <readUSBData+0x4e>
		{
			parse((char *)usbRXArray);
 800fdbc:	480b      	ldr	r0, [pc, #44]	; (800fdec <readUSBData+0x68>)
 800fdbe:	f7ff f99b 	bl	800f0f8 <parse>
			memset(usbRXArray, 0, APP_RX_DATA_SIZE);
 800fdc2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fdc6:	2100      	movs	r1, #0
 800fdc8:	4808      	ldr	r0, [pc, #32]	; (800fdec <readUSBData+0x68>)
 800fdca:	f000 fdb1 	bl	8010930 <memset>
			usbBytesRead = 0;
 800fdce:	2300      	movs	r3, #0
 800fdd0:	80fb      	strh	r3, [r7, #6]
		}
		lastUSBDataRead = HAL_GetTick();
 800fdd2:	f7f2 fa43 	bl	800225c <HAL_GetTick>
 800fdd6:	4603      	mov	r3, r0
 800fdd8:	4a03      	ldr	r2, [pc, #12]	; (800fde8 <readUSBData+0x64>)
 800fdda:	6013      	str	r3, [r2, #0]
	}
	return usbBytesRead;
 800fddc:	88fb      	ldrh	r3, [r7, #6]
}
 800fdde:	4618      	mov	r0, r3
 800fde0:	3708      	adds	r7, #8
 800fde2:	46bd      	mov	sp, r7
 800fde4:	bd80      	pop	{r7, pc}
 800fde6:	bf00      	nop
 800fde8:	200016b0 	.word	0x200016b0
 800fdec:	20000eb0 	.word	0x20000eb0
 800fdf0:	200040fc 	.word	0x200040fc

0800fdf4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800fdf4:	b580      	push	{r7, lr}
 800fdf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800fdf8:	2200      	movs	r2, #0
 800fdfa:	4912      	ldr	r1, [pc, #72]	; (800fe44 <MX_USB_DEVICE_Init+0x50>)
 800fdfc:	4812      	ldr	r0, [pc, #72]	; (800fe48 <MX_USB_DEVICE_Init+0x54>)
 800fdfe:	f7fb fbf3 	bl	800b5e8 <USBD_Init>
 800fe02:	4603      	mov	r3, r0
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d001      	beq.n	800fe0c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800fe08:	f7f1 fcd0 	bl	80017ac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800fe0c:	490f      	ldr	r1, [pc, #60]	; (800fe4c <MX_USB_DEVICE_Init+0x58>)
 800fe0e:	480e      	ldr	r0, [pc, #56]	; (800fe48 <MX_USB_DEVICE_Init+0x54>)
 800fe10:	f7fb fc20 	bl	800b654 <USBD_RegisterClass>
 800fe14:	4603      	mov	r3, r0
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d001      	beq.n	800fe1e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800fe1a:	f7f1 fcc7 	bl	80017ac <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800fe1e:	490c      	ldr	r1, [pc, #48]	; (800fe50 <MX_USB_DEVICE_Init+0x5c>)
 800fe20:	4809      	ldr	r0, [pc, #36]	; (800fe48 <MX_USB_DEVICE_Init+0x54>)
 800fe22:	f7fb fb75 	bl	800b510 <USBD_CDC_RegisterInterface>
 800fe26:	4603      	mov	r3, r0
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d001      	beq.n	800fe30 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800fe2c:	f7f1 fcbe 	bl	80017ac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800fe30:	4805      	ldr	r0, [pc, #20]	; (800fe48 <MX_USB_DEVICE_Init+0x54>)
 800fe32:	f7fb fc30 	bl	800b696 <USBD_Start>
 800fe36:	4603      	mov	r3, r0
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d001      	beq.n	800fe40 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800fe3c:	f7f1 fcb6 	bl	80017ac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800fe40:	bf00      	nop
 800fe42:	bd80      	pop	{r7, pc}
 800fe44:	200001c0 	.word	0x200001c0
 800fe48:	200040fc 	.word	0x200040fc
 800fe4c:	20000034 	.word	0x20000034
 800fe50:	200001ac 	.word	0x200001ac

0800fe54 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800fe54:	b580      	push	{r7, lr}
 800fe56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800fe58:	2200      	movs	r2, #0
 800fe5a:	4905      	ldr	r1, [pc, #20]	; (800fe70 <CDC_Init_FS+0x1c>)
 800fe5c:	4805      	ldr	r0, [pc, #20]	; (800fe74 <CDC_Init_FS+0x20>)
 800fe5e:	f7fb fb6c 	bl	800b53a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800fe62:	4905      	ldr	r1, [pc, #20]	; (800fe78 <CDC_Init_FS+0x24>)
 800fe64:	4803      	ldr	r0, [pc, #12]	; (800fe74 <CDC_Init_FS+0x20>)
 800fe66:	f7fb fb81 	bl	800b56c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800fe6a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800fe6c:	4618      	mov	r0, r3
 800fe6e:	bd80      	pop	{r7, pc}
 800fe70:	20004bcc 	.word	0x20004bcc
 800fe74:	200040fc 	.word	0x200040fc
 800fe78:	200043cc 	.word	0x200043cc

0800fe7c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800fe7c:	b480      	push	{r7}
 800fe7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800fe80:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800fe82:	4618      	mov	r0, r3
 800fe84:	46bd      	mov	sp, r7
 800fe86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe8a:	4770      	bx	lr

0800fe8c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800fe8c:	b480      	push	{r7}
 800fe8e:	b083      	sub	sp, #12
 800fe90:	af00      	add	r7, sp, #0
 800fe92:	4603      	mov	r3, r0
 800fe94:	6039      	str	r1, [r7, #0]
 800fe96:	71fb      	strb	r3, [r7, #7]
 800fe98:	4613      	mov	r3, r2
 800fe9a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800fe9c:	79fb      	ldrb	r3, [r7, #7]
 800fe9e:	2b23      	cmp	r3, #35	; 0x23
 800fea0:	d84a      	bhi.n	800ff38 <CDC_Control_FS+0xac>
 800fea2:	a201      	add	r2, pc, #4	; (adr r2, 800fea8 <CDC_Control_FS+0x1c>)
 800fea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fea8:	0800ff39 	.word	0x0800ff39
 800feac:	0800ff39 	.word	0x0800ff39
 800feb0:	0800ff39 	.word	0x0800ff39
 800feb4:	0800ff39 	.word	0x0800ff39
 800feb8:	0800ff39 	.word	0x0800ff39
 800febc:	0800ff39 	.word	0x0800ff39
 800fec0:	0800ff39 	.word	0x0800ff39
 800fec4:	0800ff39 	.word	0x0800ff39
 800fec8:	0800ff39 	.word	0x0800ff39
 800fecc:	0800ff39 	.word	0x0800ff39
 800fed0:	0800ff39 	.word	0x0800ff39
 800fed4:	0800ff39 	.word	0x0800ff39
 800fed8:	0800ff39 	.word	0x0800ff39
 800fedc:	0800ff39 	.word	0x0800ff39
 800fee0:	0800ff39 	.word	0x0800ff39
 800fee4:	0800ff39 	.word	0x0800ff39
 800fee8:	0800ff39 	.word	0x0800ff39
 800feec:	0800ff39 	.word	0x0800ff39
 800fef0:	0800ff39 	.word	0x0800ff39
 800fef4:	0800ff39 	.word	0x0800ff39
 800fef8:	0800ff39 	.word	0x0800ff39
 800fefc:	0800ff39 	.word	0x0800ff39
 800ff00:	0800ff39 	.word	0x0800ff39
 800ff04:	0800ff39 	.word	0x0800ff39
 800ff08:	0800ff39 	.word	0x0800ff39
 800ff0c:	0800ff39 	.word	0x0800ff39
 800ff10:	0800ff39 	.word	0x0800ff39
 800ff14:	0800ff39 	.word	0x0800ff39
 800ff18:	0800ff39 	.word	0x0800ff39
 800ff1c:	0800ff39 	.word	0x0800ff39
 800ff20:	0800ff39 	.word	0x0800ff39
 800ff24:	0800ff39 	.word	0x0800ff39
 800ff28:	0800ff39 	.word	0x0800ff39
 800ff2c:	0800ff39 	.word	0x0800ff39
 800ff30:	0800ff39 	.word	0x0800ff39
 800ff34:	0800ff39 	.word	0x0800ff39
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ff38:	bf00      	nop
  }

  return (USBD_OK);
 800ff3a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ff3c:	4618      	mov	r0, r3
 800ff3e:	370c      	adds	r7, #12
 800ff40:	46bd      	mov	sp, r7
 800ff42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff46:	4770      	bx	lr

0800ff48 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ff48:	b580      	push	{r7, lr}
 800ff4a:	b082      	sub	sp, #8
 800ff4c:	af00      	add	r7, sp, #0
 800ff4e:	6078      	str	r0, [r7, #4]
 800ff50:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ff52:	6879      	ldr	r1, [r7, #4]
 800ff54:	4805      	ldr	r0, [pc, #20]	; (800ff6c <CDC_Receive_FS+0x24>)
 800ff56:	f7fb fb09 	bl	800b56c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ff5a:	4804      	ldr	r0, [pc, #16]	; (800ff6c <CDC_Receive_FS+0x24>)
 800ff5c:	f7fb fb1a 	bl	800b594 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ff60:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ff62:	4618      	mov	r0, r3
 800ff64:	3708      	adds	r7, #8
 800ff66:	46bd      	mov	sp, r7
 800ff68:	bd80      	pop	{r7, pc}
 800ff6a:	bf00      	nop
 800ff6c:	200040fc 	.word	0x200040fc

0800ff70 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ff70:	b480      	push	{r7}
 800ff72:	b087      	sub	sp, #28
 800ff74:	af00      	add	r7, sp, #0
 800ff76:	60f8      	str	r0, [r7, #12]
 800ff78:	60b9      	str	r1, [r7, #8]
 800ff7a:	4613      	mov	r3, r2
 800ff7c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ff7e:	2300      	movs	r3, #0
 800ff80:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ff82:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ff86:	4618      	mov	r0, r3
 800ff88:	371c      	adds	r7, #28
 800ff8a:	46bd      	mov	sp, r7
 800ff8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff90:	4770      	bx	lr
	...

0800ff94 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ff94:	b480      	push	{r7}
 800ff96:	b083      	sub	sp, #12
 800ff98:	af00      	add	r7, sp, #0
 800ff9a:	4603      	mov	r3, r0
 800ff9c:	6039      	str	r1, [r7, #0]
 800ff9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ffa0:	683b      	ldr	r3, [r7, #0]
 800ffa2:	2212      	movs	r2, #18
 800ffa4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ffa6:	4b03      	ldr	r3, [pc, #12]	; (800ffb4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ffa8:	4618      	mov	r0, r3
 800ffaa:	370c      	adds	r7, #12
 800ffac:	46bd      	mov	sp, r7
 800ffae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffb2:	4770      	bx	lr
 800ffb4:	200001e0 	.word	0x200001e0

0800ffb8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ffb8:	b480      	push	{r7}
 800ffba:	b083      	sub	sp, #12
 800ffbc:	af00      	add	r7, sp, #0
 800ffbe:	4603      	mov	r3, r0
 800ffc0:	6039      	str	r1, [r7, #0]
 800ffc2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ffc4:	683b      	ldr	r3, [r7, #0]
 800ffc6:	2204      	movs	r2, #4
 800ffc8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ffca:	4b03      	ldr	r3, [pc, #12]	; (800ffd8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ffcc:	4618      	mov	r0, r3
 800ffce:	370c      	adds	r7, #12
 800ffd0:	46bd      	mov	sp, r7
 800ffd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffd6:	4770      	bx	lr
 800ffd8:	20000200 	.word	0x20000200

0800ffdc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ffdc:	b580      	push	{r7, lr}
 800ffde:	b082      	sub	sp, #8
 800ffe0:	af00      	add	r7, sp, #0
 800ffe2:	4603      	mov	r3, r0
 800ffe4:	6039      	str	r1, [r7, #0]
 800ffe6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ffe8:	79fb      	ldrb	r3, [r7, #7]
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d105      	bne.n	800fffa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ffee:	683a      	ldr	r2, [r7, #0]
 800fff0:	4907      	ldr	r1, [pc, #28]	; (8010010 <USBD_FS_ProductStrDescriptor+0x34>)
 800fff2:	4808      	ldr	r0, [pc, #32]	; (8010014 <USBD_FS_ProductStrDescriptor+0x38>)
 800fff4:	f7fc fb56 	bl	800c6a4 <USBD_GetString>
 800fff8:	e004      	b.n	8010004 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800fffa:	683a      	ldr	r2, [r7, #0]
 800fffc:	4904      	ldr	r1, [pc, #16]	; (8010010 <USBD_FS_ProductStrDescriptor+0x34>)
 800fffe:	4805      	ldr	r0, [pc, #20]	; (8010014 <USBD_FS_ProductStrDescriptor+0x38>)
 8010000:	f7fc fb50 	bl	800c6a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010004:	4b02      	ldr	r3, [pc, #8]	; (8010010 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8010006:	4618      	mov	r0, r3
 8010008:	3708      	adds	r7, #8
 801000a:	46bd      	mov	sp, r7
 801000c:	bd80      	pop	{r7, pc}
 801000e:	bf00      	nop
 8010010:	200053cc 	.word	0x200053cc
 8010014:	08013668 	.word	0x08013668

08010018 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010018:	b580      	push	{r7, lr}
 801001a:	b082      	sub	sp, #8
 801001c:	af00      	add	r7, sp, #0
 801001e:	4603      	mov	r3, r0
 8010020:	6039      	str	r1, [r7, #0]
 8010022:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010024:	683a      	ldr	r2, [r7, #0]
 8010026:	4904      	ldr	r1, [pc, #16]	; (8010038 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010028:	4804      	ldr	r0, [pc, #16]	; (801003c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801002a:	f7fc fb3b 	bl	800c6a4 <USBD_GetString>
  return USBD_StrDesc;
 801002e:	4b02      	ldr	r3, [pc, #8]	; (8010038 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8010030:	4618      	mov	r0, r3
 8010032:	3708      	adds	r7, #8
 8010034:	46bd      	mov	sp, r7
 8010036:	bd80      	pop	{r7, pc}
 8010038:	200053cc 	.word	0x200053cc
 801003c:	0801367c 	.word	0x0801367c

08010040 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010040:	b580      	push	{r7, lr}
 8010042:	b082      	sub	sp, #8
 8010044:	af00      	add	r7, sp, #0
 8010046:	4603      	mov	r3, r0
 8010048:	6039      	str	r1, [r7, #0]
 801004a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801004c:	683b      	ldr	r3, [r7, #0]
 801004e:	221a      	movs	r2, #26
 8010050:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8010052:	f000 f855 	bl	8010100 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8010056:	4b02      	ldr	r3, [pc, #8]	; (8010060 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8010058:	4618      	mov	r0, r3
 801005a:	3708      	adds	r7, #8
 801005c:	46bd      	mov	sp, r7
 801005e:	bd80      	pop	{r7, pc}
 8010060:	20000204 	.word	0x20000204

08010064 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010064:	b580      	push	{r7, lr}
 8010066:	b082      	sub	sp, #8
 8010068:	af00      	add	r7, sp, #0
 801006a:	4603      	mov	r3, r0
 801006c:	6039      	str	r1, [r7, #0]
 801006e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010070:	79fb      	ldrb	r3, [r7, #7]
 8010072:	2b00      	cmp	r3, #0
 8010074:	d105      	bne.n	8010082 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010076:	683a      	ldr	r2, [r7, #0]
 8010078:	4907      	ldr	r1, [pc, #28]	; (8010098 <USBD_FS_ConfigStrDescriptor+0x34>)
 801007a:	4808      	ldr	r0, [pc, #32]	; (801009c <USBD_FS_ConfigStrDescriptor+0x38>)
 801007c:	f7fc fb12 	bl	800c6a4 <USBD_GetString>
 8010080:	e004      	b.n	801008c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010082:	683a      	ldr	r2, [r7, #0]
 8010084:	4904      	ldr	r1, [pc, #16]	; (8010098 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010086:	4805      	ldr	r0, [pc, #20]	; (801009c <USBD_FS_ConfigStrDescriptor+0x38>)
 8010088:	f7fc fb0c 	bl	800c6a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 801008c:	4b02      	ldr	r3, [pc, #8]	; (8010098 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801008e:	4618      	mov	r0, r3
 8010090:	3708      	adds	r7, #8
 8010092:	46bd      	mov	sp, r7
 8010094:	bd80      	pop	{r7, pc}
 8010096:	bf00      	nop
 8010098:	200053cc 	.word	0x200053cc
 801009c:	08013698 	.word	0x08013698

080100a0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80100a0:	b580      	push	{r7, lr}
 80100a2:	b082      	sub	sp, #8
 80100a4:	af00      	add	r7, sp, #0
 80100a6:	4603      	mov	r3, r0
 80100a8:	6039      	str	r1, [r7, #0]
 80100aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80100ac:	79fb      	ldrb	r3, [r7, #7]
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d105      	bne.n	80100be <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80100b2:	683a      	ldr	r2, [r7, #0]
 80100b4:	4907      	ldr	r1, [pc, #28]	; (80100d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80100b6:	4808      	ldr	r0, [pc, #32]	; (80100d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80100b8:	f7fc faf4 	bl	800c6a4 <USBD_GetString>
 80100bc:	e004      	b.n	80100c8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80100be:	683a      	ldr	r2, [r7, #0]
 80100c0:	4904      	ldr	r1, [pc, #16]	; (80100d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80100c2:	4805      	ldr	r0, [pc, #20]	; (80100d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80100c4:	f7fc faee 	bl	800c6a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80100c8:	4b02      	ldr	r3, [pc, #8]	; (80100d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80100ca:	4618      	mov	r0, r3
 80100cc:	3708      	adds	r7, #8
 80100ce:	46bd      	mov	sp, r7
 80100d0:	bd80      	pop	{r7, pc}
 80100d2:	bf00      	nop
 80100d4:	200053cc 	.word	0x200053cc
 80100d8:	080136a4 	.word	0x080136a4

080100dc <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80100dc:	b480      	push	{r7}
 80100de:	b083      	sub	sp, #12
 80100e0:	af00      	add	r7, sp, #0
 80100e2:	4603      	mov	r3, r0
 80100e4:	6039      	str	r1, [r7, #0]
 80100e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80100e8:	683b      	ldr	r3, [r7, #0]
 80100ea:	220c      	movs	r2, #12
 80100ec:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80100ee:	4b03      	ldr	r3, [pc, #12]	; (80100fc <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80100f0:	4618      	mov	r0, r3
 80100f2:	370c      	adds	r7, #12
 80100f4:	46bd      	mov	sp, r7
 80100f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100fa:	4770      	bx	lr
 80100fc:	200001f4 	.word	0x200001f4

08010100 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010100:	b580      	push	{r7, lr}
 8010102:	b084      	sub	sp, #16
 8010104:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8010106:	4b0f      	ldr	r3, [pc, #60]	; (8010144 <Get_SerialNum+0x44>)
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801010c:	4b0e      	ldr	r3, [pc, #56]	; (8010148 <Get_SerialNum+0x48>)
 801010e:	681b      	ldr	r3, [r3, #0]
 8010110:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8010112:	4b0e      	ldr	r3, [pc, #56]	; (801014c <Get_SerialNum+0x4c>)
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010118:	68fa      	ldr	r2, [r7, #12]
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	4413      	add	r3, r2
 801011e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010120:	68fb      	ldr	r3, [r7, #12]
 8010122:	2b00      	cmp	r3, #0
 8010124:	d009      	beq.n	801013a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010126:	2208      	movs	r2, #8
 8010128:	4909      	ldr	r1, [pc, #36]	; (8010150 <Get_SerialNum+0x50>)
 801012a:	68f8      	ldr	r0, [r7, #12]
 801012c:	f000 f814 	bl	8010158 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010130:	2204      	movs	r2, #4
 8010132:	4908      	ldr	r1, [pc, #32]	; (8010154 <Get_SerialNum+0x54>)
 8010134:	68b8      	ldr	r0, [r7, #8]
 8010136:	f000 f80f 	bl	8010158 <IntToUnicode>
  }
}
 801013a:	bf00      	nop
 801013c:	3710      	adds	r7, #16
 801013e:	46bd      	mov	sp, r7
 8010140:	bd80      	pop	{r7, pc}
 8010142:	bf00      	nop
 8010144:	1ff0f420 	.word	0x1ff0f420
 8010148:	1ff0f424 	.word	0x1ff0f424
 801014c:	1ff0f428 	.word	0x1ff0f428
 8010150:	20000206 	.word	0x20000206
 8010154:	20000216 	.word	0x20000216

08010158 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010158:	b480      	push	{r7}
 801015a:	b087      	sub	sp, #28
 801015c:	af00      	add	r7, sp, #0
 801015e:	60f8      	str	r0, [r7, #12]
 8010160:	60b9      	str	r1, [r7, #8]
 8010162:	4613      	mov	r3, r2
 8010164:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010166:	2300      	movs	r3, #0
 8010168:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801016a:	2300      	movs	r3, #0
 801016c:	75fb      	strb	r3, [r7, #23]
 801016e:	e027      	b.n	80101c0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	0f1b      	lsrs	r3, r3, #28
 8010174:	2b09      	cmp	r3, #9
 8010176:	d80b      	bhi.n	8010190 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010178:	68fb      	ldr	r3, [r7, #12]
 801017a:	0f1b      	lsrs	r3, r3, #28
 801017c:	b2da      	uxtb	r2, r3
 801017e:	7dfb      	ldrb	r3, [r7, #23]
 8010180:	005b      	lsls	r3, r3, #1
 8010182:	4619      	mov	r1, r3
 8010184:	68bb      	ldr	r3, [r7, #8]
 8010186:	440b      	add	r3, r1
 8010188:	3230      	adds	r2, #48	; 0x30
 801018a:	b2d2      	uxtb	r2, r2
 801018c:	701a      	strb	r2, [r3, #0]
 801018e:	e00a      	b.n	80101a6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	0f1b      	lsrs	r3, r3, #28
 8010194:	b2da      	uxtb	r2, r3
 8010196:	7dfb      	ldrb	r3, [r7, #23]
 8010198:	005b      	lsls	r3, r3, #1
 801019a:	4619      	mov	r1, r3
 801019c:	68bb      	ldr	r3, [r7, #8]
 801019e:	440b      	add	r3, r1
 80101a0:	3237      	adds	r2, #55	; 0x37
 80101a2:	b2d2      	uxtb	r2, r2
 80101a4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80101a6:	68fb      	ldr	r3, [r7, #12]
 80101a8:	011b      	lsls	r3, r3, #4
 80101aa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80101ac:	7dfb      	ldrb	r3, [r7, #23]
 80101ae:	005b      	lsls	r3, r3, #1
 80101b0:	3301      	adds	r3, #1
 80101b2:	68ba      	ldr	r2, [r7, #8]
 80101b4:	4413      	add	r3, r2
 80101b6:	2200      	movs	r2, #0
 80101b8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80101ba:	7dfb      	ldrb	r3, [r7, #23]
 80101bc:	3301      	adds	r3, #1
 80101be:	75fb      	strb	r3, [r7, #23]
 80101c0:	7dfa      	ldrb	r2, [r7, #23]
 80101c2:	79fb      	ldrb	r3, [r7, #7]
 80101c4:	429a      	cmp	r2, r3
 80101c6:	d3d3      	bcc.n	8010170 <IntToUnicode+0x18>
  }
}
 80101c8:	bf00      	nop
 80101ca:	bf00      	nop
 80101cc:	371c      	adds	r7, #28
 80101ce:	46bd      	mov	sp, r7
 80101d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101d4:	4770      	bx	lr
	...

080101d8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80101d8:	b580      	push	{r7, lr}
 80101da:	b08a      	sub	sp, #40	; 0x28
 80101dc:	af00      	add	r7, sp, #0
 80101de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80101e0:	f107 0314 	add.w	r3, r7, #20
 80101e4:	2200      	movs	r2, #0
 80101e6:	601a      	str	r2, [r3, #0]
 80101e8:	605a      	str	r2, [r3, #4]
 80101ea:	609a      	str	r2, [r3, #8]
 80101ec:	60da      	str	r2, [r3, #12]
 80101ee:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	681b      	ldr	r3, [r3, #0]
 80101f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80101f8:	d149      	bne.n	801028e <HAL_PCD_MspInit+0xb6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80101fa:	4b27      	ldr	r3, [pc, #156]	; (8010298 <HAL_PCD_MspInit+0xc0>)
 80101fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80101fe:	4a26      	ldr	r2, [pc, #152]	; (8010298 <HAL_PCD_MspInit+0xc0>)
 8010200:	f043 0301 	orr.w	r3, r3, #1
 8010204:	6313      	str	r3, [r2, #48]	; 0x30
 8010206:	4b24      	ldr	r3, [pc, #144]	; (8010298 <HAL_PCD_MspInit+0xc0>)
 8010208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801020a:	f003 0301 	and.w	r3, r3, #1
 801020e:	613b      	str	r3, [r7, #16]
 8010210:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8010212:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010216:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010218:	2300      	movs	r3, #0
 801021a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801021c:	2300      	movs	r3, #0
 801021e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010220:	f107 0314 	add.w	r3, r7, #20
 8010224:	4619      	mov	r1, r3
 8010226:	481d      	ldr	r0, [pc, #116]	; (801029c <HAL_PCD_MspInit+0xc4>)
 8010228:	f7f3 fb8c 	bl	8003944 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_DM___White_Wire_Pin|USB_DP___Green_Wire_Pin;
 801022c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8010230:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010232:	2302      	movs	r3, #2
 8010234:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010236:	2300      	movs	r3, #0
 8010238:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801023a:	2303      	movs	r3, #3
 801023c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801023e:	230a      	movs	r3, #10
 8010240:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010242:	f107 0314 	add.w	r3, r7, #20
 8010246:	4619      	mov	r1, r3
 8010248:	4814      	ldr	r0, [pc, #80]	; (801029c <HAL_PCD_MspInit+0xc4>)
 801024a:	f7f3 fb7b 	bl	8003944 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801024e:	4b12      	ldr	r3, [pc, #72]	; (8010298 <HAL_PCD_MspInit+0xc0>)
 8010250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010252:	4a11      	ldr	r2, [pc, #68]	; (8010298 <HAL_PCD_MspInit+0xc0>)
 8010254:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010258:	6353      	str	r3, [r2, #52]	; 0x34
 801025a:	4b0f      	ldr	r3, [pc, #60]	; (8010298 <HAL_PCD_MspInit+0xc0>)
 801025c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801025e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010262:	60fb      	str	r3, [r7, #12]
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	4b0c      	ldr	r3, [pc, #48]	; (8010298 <HAL_PCD_MspInit+0xc0>)
 8010268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801026a:	4a0b      	ldr	r2, [pc, #44]	; (8010298 <HAL_PCD_MspInit+0xc0>)
 801026c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010270:	6453      	str	r3, [r2, #68]	; 0x44
 8010272:	4b09      	ldr	r3, [pc, #36]	; (8010298 <HAL_PCD_MspInit+0xc0>)
 8010274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010276:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801027a:	60bb      	str	r3, [r7, #8]
 801027c:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801027e:	2200      	movs	r2, #0
 8010280:	2100      	movs	r1, #0
 8010282:	2043      	movs	r0, #67	; 0x43
 8010284:	f7f2 fba1 	bl	80029ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010288:	2043      	movs	r0, #67	; 0x43
 801028a:	f7f2 fbba 	bl	8002a02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801028e:	bf00      	nop
 8010290:	3728      	adds	r7, #40	; 0x28
 8010292:	46bd      	mov	sp, r7
 8010294:	bd80      	pop	{r7, pc}
 8010296:	bf00      	nop
 8010298:	40023800 	.word	0x40023800
 801029c:	40020000 	.word	0x40020000

080102a0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80102a0:	b580      	push	{r7, lr}
 80102a2:	b082      	sub	sp, #8
 80102a4:	af00      	add	r7, sp, #0
 80102a6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80102b4:	4619      	mov	r1, r3
 80102b6:	4610      	mov	r0, r2
 80102b8:	f7fb fa38 	bl	800b72c <USBD_LL_SetupStage>
}
 80102bc:	bf00      	nop
 80102be:	3708      	adds	r7, #8
 80102c0:	46bd      	mov	sp, r7
 80102c2:	bd80      	pop	{r7, pc}

080102c4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80102c4:	b580      	push	{r7, lr}
 80102c6:	b082      	sub	sp, #8
 80102c8:	af00      	add	r7, sp, #0
 80102ca:	6078      	str	r0, [r7, #4]
 80102cc:	460b      	mov	r3, r1
 80102ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 80102d6:	78fa      	ldrb	r2, [r7, #3]
 80102d8:	6879      	ldr	r1, [r7, #4]
 80102da:	4613      	mov	r3, r2
 80102dc:	00db      	lsls	r3, r3, #3
 80102de:	1a9b      	subs	r3, r3, r2
 80102e0:	009b      	lsls	r3, r3, #2
 80102e2:	440b      	add	r3, r1
 80102e4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80102e8:	681a      	ldr	r2, [r3, #0]
 80102ea:	78fb      	ldrb	r3, [r7, #3]
 80102ec:	4619      	mov	r1, r3
 80102ee:	f7fb fa72 	bl	800b7d6 <USBD_LL_DataOutStage>
}
 80102f2:	bf00      	nop
 80102f4:	3708      	adds	r7, #8
 80102f6:	46bd      	mov	sp, r7
 80102f8:	bd80      	pop	{r7, pc}

080102fa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80102fa:	b580      	push	{r7, lr}
 80102fc:	b082      	sub	sp, #8
 80102fe:	af00      	add	r7, sp, #0
 8010300:	6078      	str	r0, [r7, #4]
 8010302:	460b      	mov	r3, r1
 8010304:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 801030c:	78fa      	ldrb	r2, [r7, #3]
 801030e:	6879      	ldr	r1, [r7, #4]
 8010310:	4613      	mov	r3, r2
 8010312:	00db      	lsls	r3, r3, #3
 8010314:	1a9b      	subs	r3, r3, r2
 8010316:	009b      	lsls	r3, r3, #2
 8010318:	440b      	add	r3, r1
 801031a:	3348      	adds	r3, #72	; 0x48
 801031c:	681a      	ldr	r2, [r3, #0]
 801031e:	78fb      	ldrb	r3, [r7, #3]
 8010320:	4619      	mov	r1, r3
 8010322:	f7fb fabb 	bl	800b89c <USBD_LL_DataInStage>
}
 8010326:	bf00      	nop
 8010328:	3708      	adds	r7, #8
 801032a:	46bd      	mov	sp, r7
 801032c:	bd80      	pop	{r7, pc}

0801032e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801032e:	b580      	push	{r7, lr}
 8010330:	b082      	sub	sp, #8
 8010332:	af00      	add	r7, sp, #0
 8010334:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801033c:	4618      	mov	r0, r3
 801033e:	f7fb fbbf 	bl	800bac0 <USBD_LL_SOF>
}
 8010342:	bf00      	nop
 8010344:	3708      	adds	r7, #8
 8010346:	46bd      	mov	sp, r7
 8010348:	bd80      	pop	{r7, pc}

0801034a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801034a:	b580      	push	{r7, lr}
 801034c:	b084      	sub	sp, #16
 801034e:	af00      	add	r7, sp, #0
 8010350:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010352:	2301      	movs	r3, #1
 8010354:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	68db      	ldr	r3, [r3, #12]
 801035a:	2b00      	cmp	r3, #0
 801035c:	d102      	bne.n	8010364 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801035e:	2300      	movs	r3, #0
 8010360:	73fb      	strb	r3, [r7, #15]
 8010362:	e008      	b.n	8010376 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	68db      	ldr	r3, [r3, #12]
 8010368:	2b02      	cmp	r3, #2
 801036a:	d102      	bne.n	8010372 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801036c:	2301      	movs	r3, #1
 801036e:	73fb      	strb	r3, [r7, #15]
 8010370:	e001      	b.n	8010376 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8010372:	f7f1 fa1b 	bl	80017ac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801037c:	7bfa      	ldrb	r2, [r7, #15]
 801037e:	4611      	mov	r1, r2
 8010380:	4618      	mov	r0, r3
 8010382:	f7fb fb62 	bl	800ba4a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801038c:	4618      	mov	r0, r3
 801038e:	f7fb fb1b 	bl	800b9c8 <USBD_LL_Reset>
}
 8010392:	bf00      	nop
 8010394:	3710      	adds	r7, #16
 8010396:	46bd      	mov	sp, r7
 8010398:	bd80      	pop	{r7, pc}
	...

0801039c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801039c:	b580      	push	{r7, lr}
 801039e:	b082      	sub	sp, #8
 80103a0:	af00      	add	r7, sp, #0
 80103a2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80103aa:	4618      	mov	r0, r3
 80103ac:	f7fb fb5d 	bl	800ba6a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	687a      	ldr	r2, [r7, #4]
 80103bc:	6812      	ldr	r2, [r2, #0]
 80103be:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80103c2:	f043 0301 	orr.w	r3, r3, #1
 80103c6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	6a1b      	ldr	r3, [r3, #32]
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d005      	beq.n	80103dc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80103d0:	4b04      	ldr	r3, [pc, #16]	; (80103e4 <HAL_PCD_SuspendCallback+0x48>)
 80103d2:	691b      	ldr	r3, [r3, #16]
 80103d4:	4a03      	ldr	r2, [pc, #12]	; (80103e4 <HAL_PCD_SuspendCallback+0x48>)
 80103d6:	f043 0306 	orr.w	r3, r3, #6
 80103da:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80103dc:	bf00      	nop
 80103de:	3708      	adds	r7, #8
 80103e0:	46bd      	mov	sp, r7
 80103e2:	bd80      	pop	{r7, pc}
 80103e4:	e000ed00 	.word	0xe000ed00

080103e8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80103e8:	b580      	push	{r7, lr}
 80103ea:	b082      	sub	sp, #8
 80103ec:	af00      	add	r7, sp, #0
 80103ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80103f6:	4618      	mov	r0, r3
 80103f8:	f7fb fb4c 	bl	800ba94 <USBD_LL_Resume>
}
 80103fc:	bf00      	nop
 80103fe:	3708      	adds	r7, #8
 8010400:	46bd      	mov	sp, r7
 8010402:	bd80      	pop	{r7, pc}

08010404 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010404:	b580      	push	{r7, lr}
 8010406:	b082      	sub	sp, #8
 8010408:	af00      	add	r7, sp, #0
 801040a:	6078      	str	r0, [r7, #4]
 801040c:	460b      	mov	r3, r1
 801040e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8010416:	78fa      	ldrb	r2, [r7, #3]
 8010418:	4611      	mov	r1, r2
 801041a:	4618      	mov	r0, r3
 801041c:	f7fb fb77 	bl	800bb0e <USBD_LL_IsoOUTIncomplete>
}
 8010420:	bf00      	nop
 8010422:	3708      	adds	r7, #8
 8010424:	46bd      	mov	sp, r7
 8010426:	bd80      	pop	{r7, pc}

08010428 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010428:	b580      	push	{r7, lr}
 801042a:	b082      	sub	sp, #8
 801042c:	af00      	add	r7, sp, #0
 801042e:	6078      	str	r0, [r7, #4]
 8010430:	460b      	mov	r3, r1
 8010432:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801043a:	78fa      	ldrb	r2, [r7, #3]
 801043c:	4611      	mov	r1, r2
 801043e:	4618      	mov	r0, r3
 8010440:	f7fb fb58 	bl	800baf4 <USBD_LL_IsoINIncomplete>
}
 8010444:	bf00      	nop
 8010446:	3708      	adds	r7, #8
 8010448:	46bd      	mov	sp, r7
 801044a:	bd80      	pop	{r7, pc}

0801044c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801044c:	b580      	push	{r7, lr}
 801044e:	b082      	sub	sp, #8
 8010450:	af00      	add	r7, sp, #0
 8010452:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801045a:	4618      	mov	r0, r3
 801045c:	f7fb fb64 	bl	800bb28 <USBD_LL_DevConnected>
}
 8010460:	bf00      	nop
 8010462:	3708      	adds	r7, #8
 8010464:	46bd      	mov	sp, r7
 8010466:	bd80      	pop	{r7, pc}

08010468 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010468:	b580      	push	{r7, lr}
 801046a:	b082      	sub	sp, #8
 801046c:	af00      	add	r7, sp, #0
 801046e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8010476:	4618      	mov	r0, r3
 8010478:	f7fb fb61 	bl	800bb3e <USBD_LL_DevDisconnected>
}
 801047c:	bf00      	nop
 801047e:	3708      	adds	r7, #8
 8010480:	46bd      	mov	sp, r7
 8010482:	bd80      	pop	{r7, pc}

08010484 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010484:	b580      	push	{r7, lr}
 8010486:	b082      	sub	sp, #8
 8010488:	af00      	add	r7, sp, #0
 801048a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	781b      	ldrb	r3, [r3, #0]
 8010490:	2b00      	cmp	r3, #0
 8010492:	d13c      	bne.n	801050e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8010494:	4a20      	ldr	r2, [pc, #128]	; (8010518 <USBD_LL_Init+0x94>)
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
  pdev->pData = &hpcd_USB_OTG_FS;
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	4a1e      	ldr	r2, [pc, #120]	; (8010518 <USBD_LL_Init+0x94>)
 80104a0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80104a4:	4b1c      	ldr	r3, [pc, #112]	; (8010518 <USBD_LL_Init+0x94>)
 80104a6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80104aa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80104ac:	4b1a      	ldr	r3, [pc, #104]	; (8010518 <USBD_LL_Init+0x94>)
 80104ae:	2206      	movs	r2, #6
 80104b0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80104b2:	4b19      	ldr	r3, [pc, #100]	; (8010518 <USBD_LL_Init+0x94>)
 80104b4:	2202      	movs	r2, #2
 80104b6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80104b8:	4b17      	ldr	r3, [pc, #92]	; (8010518 <USBD_LL_Init+0x94>)
 80104ba:	2200      	movs	r2, #0
 80104bc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80104be:	4b16      	ldr	r3, [pc, #88]	; (8010518 <USBD_LL_Init+0x94>)
 80104c0:	2202      	movs	r2, #2
 80104c2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80104c4:	4b14      	ldr	r3, [pc, #80]	; (8010518 <USBD_LL_Init+0x94>)
 80104c6:	2200      	movs	r2, #0
 80104c8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80104ca:	4b13      	ldr	r3, [pc, #76]	; (8010518 <USBD_LL_Init+0x94>)
 80104cc:	2200      	movs	r2, #0
 80104ce:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80104d0:	4b11      	ldr	r3, [pc, #68]	; (8010518 <USBD_LL_Init+0x94>)
 80104d2:	2200      	movs	r2, #0
 80104d4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80104d6:	4b10      	ldr	r3, [pc, #64]	; (8010518 <USBD_LL_Init+0x94>)
 80104d8:	2201      	movs	r2, #1
 80104da:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80104dc:	4b0e      	ldr	r3, [pc, #56]	; (8010518 <USBD_LL_Init+0x94>)
 80104de:	2200      	movs	r2, #0
 80104e0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80104e2:	480d      	ldr	r0, [pc, #52]	; (8010518 <USBD_LL_Init+0x94>)
 80104e4:	f7f3 fd17 	bl	8003f16 <HAL_PCD_Init>
 80104e8:	4603      	mov	r3, r0
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d001      	beq.n	80104f2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80104ee:	f7f1 f95d 	bl	80017ac <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80104f2:	2180      	movs	r1, #128	; 0x80
 80104f4:	4808      	ldr	r0, [pc, #32]	; (8010518 <USBD_LL_Init+0x94>)
 80104f6:	f7f4 fe98 	bl	800522a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80104fa:	2240      	movs	r2, #64	; 0x40
 80104fc:	2100      	movs	r1, #0
 80104fe:	4806      	ldr	r0, [pc, #24]	; (8010518 <USBD_LL_Init+0x94>)
 8010500:	f7f4 fe4c 	bl	800519c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8010504:	2280      	movs	r2, #128	; 0x80
 8010506:	2101      	movs	r1, #1
 8010508:	4803      	ldr	r0, [pc, #12]	; (8010518 <USBD_LL_Init+0x94>)
 801050a:	f7f4 fe47 	bl	800519c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801050e:	2300      	movs	r3, #0
}
 8010510:	4618      	mov	r0, r3
 8010512:	3708      	adds	r7, #8
 8010514:	46bd      	mov	sp, r7
 8010516:	bd80      	pop	{r7, pc}
 8010518:	200055cc 	.word	0x200055cc

0801051c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801051c:	b580      	push	{r7, lr}
 801051e:	b084      	sub	sp, #16
 8010520:	af00      	add	r7, sp, #0
 8010522:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010524:	2300      	movs	r3, #0
 8010526:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010528:	2300      	movs	r3, #0
 801052a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010532:	4618      	mov	r0, r3
 8010534:	f7f3 fe13 	bl	800415e <HAL_PCD_Start>
 8010538:	4603      	mov	r3, r0
 801053a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801053c:	7bfb      	ldrb	r3, [r7, #15]
 801053e:	4618      	mov	r0, r3
 8010540:	f000 f97e 	bl	8010840 <USBD_Get_USB_Status>
 8010544:	4603      	mov	r3, r0
 8010546:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010548:	7bbb      	ldrb	r3, [r7, #14]
}
 801054a:	4618      	mov	r0, r3
 801054c:	3710      	adds	r7, #16
 801054e:	46bd      	mov	sp, r7
 8010550:	bd80      	pop	{r7, pc}

08010552 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010552:	b580      	push	{r7, lr}
 8010554:	b084      	sub	sp, #16
 8010556:	af00      	add	r7, sp, #0
 8010558:	6078      	str	r0, [r7, #4]
 801055a:	4608      	mov	r0, r1
 801055c:	4611      	mov	r1, r2
 801055e:	461a      	mov	r2, r3
 8010560:	4603      	mov	r3, r0
 8010562:	70fb      	strb	r3, [r7, #3]
 8010564:	460b      	mov	r3, r1
 8010566:	70bb      	strb	r3, [r7, #2]
 8010568:	4613      	mov	r3, r2
 801056a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801056c:	2300      	movs	r3, #0
 801056e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010570:	2300      	movs	r3, #0
 8010572:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801057a:	78bb      	ldrb	r3, [r7, #2]
 801057c:	883a      	ldrh	r2, [r7, #0]
 801057e:	78f9      	ldrb	r1, [r7, #3]
 8010580:	f7f4 fa13 	bl	80049aa <HAL_PCD_EP_Open>
 8010584:	4603      	mov	r3, r0
 8010586:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010588:	7bfb      	ldrb	r3, [r7, #15]
 801058a:	4618      	mov	r0, r3
 801058c:	f000 f958 	bl	8010840 <USBD_Get_USB_Status>
 8010590:	4603      	mov	r3, r0
 8010592:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010594:	7bbb      	ldrb	r3, [r7, #14]
}
 8010596:	4618      	mov	r0, r3
 8010598:	3710      	adds	r7, #16
 801059a:	46bd      	mov	sp, r7
 801059c:	bd80      	pop	{r7, pc}

0801059e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801059e:	b580      	push	{r7, lr}
 80105a0:	b084      	sub	sp, #16
 80105a2:	af00      	add	r7, sp, #0
 80105a4:	6078      	str	r0, [r7, #4]
 80105a6:	460b      	mov	r3, r1
 80105a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80105aa:	2300      	movs	r3, #0
 80105ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80105ae:	2300      	movs	r3, #0
 80105b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80105b8:	78fa      	ldrb	r2, [r7, #3]
 80105ba:	4611      	mov	r1, r2
 80105bc:	4618      	mov	r0, r3
 80105be:	f7f4 fa5c 	bl	8004a7a <HAL_PCD_EP_Close>
 80105c2:	4603      	mov	r3, r0
 80105c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80105c6:	7bfb      	ldrb	r3, [r7, #15]
 80105c8:	4618      	mov	r0, r3
 80105ca:	f000 f939 	bl	8010840 <USBD_Get_USB_Status>
 80105ce:	4603      	mov	r3, r0
 80105d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80105d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80105d4:	4618      	mov	r0, r3
 80105d6:	3710      	adds	r7, #16
 80105d8:	46bd      	mov	sp, r7
 80105da:	bd80      	pop	{r7, pc}

080105dc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80105dc:	b580      	push	{r7, lr}
 80105de:	b084      	sub	sp, #16
 80105e0:	af00      	add	r7, sp, #0
 80105e2:	6078      	str	r0, [r7, #4]
 80105e4:	460b      	mov	r3, r1
 80105e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80105e8:	2300      	movs	r3, #0
 80105ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80105ec:	2300      	movs	r3, #0
 80105ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80105f6:	78fa      	ldrb	r2, [r7, #3]
 80105f8:	4611      	mov	r1, r2
 80105fa:	4618      	mov	r0, r3
 80105fc:	f7f4 fb34 	bl	8004c68 <HAL_PCD_EP_SetStall>
 8010600:	4603      	mov	r3, r0
 8010602:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010604:	7bfb      	ldrb	r3, [r7, #15]
 8010606:	4618      	mov	r0, r3
 8010608:	f000 f91a 	bl	8010840 <USBD_Get_USB_Status>
 801060c:	4603      	mov	r3, r0
 801060e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010610:	7bbb      	ldrb	r3, [r7, #14]
}
 8010612:	4618      	mov	r0, r3
 8010614:	3710      	adds	r7, #16
 8010616:	46bd      	mov	sp, r7
 8010618:	bd80      	pop	{r7, pc}

0801061a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801061a:	b580      	push	{r7, lr}
 801061c:	b084      	sub	sp, #16
 801061e:	af00      	add	r7, sp, #0
 8010620:	6078      	str	r0, [r7, #4]
 8010622:	460b      	mov	r3, r1
 8010624:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010626:	2300      	movs	r3, #0
 8010628:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801062a:	2300      	movs	r3, #0
 801062c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010634:	78fa      	ldrb	r2, [r7, #3]
 8010636:	4611      	mov	r1, r2
 8010638:	4618      	mov	r0, r3
 801063a:	f7f4 fb79 	bl	8004d30 <HAL_PCD_EP_ClrStall>
 801063e:	4603      	mov	r3, r0
 8010640:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010642:	7bfb      	ldrb	r3, [r7, #15]
 8010644:	4618      	mov	r0, r3
 8010646:	f000 f8fb 	bl	8010840 <USBD_Get_USB_Status>
 801064a:	4603      	mov	r3, r0
 801064c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801064e:	7bbb      	ldrb	r3, [r7, #14]
}
 8010650:	4618      	mov	r0, r3
 8010652:	3710      	adds	r7, #16
 8010654:	46bd      	mov	sp, r7
 8010656:	bd80      	pop	{r7, pc}

08010658 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010658:	b480      	push	{r7}
 801065a:	b085      	sub	sp, #20
 801065c:	af00      	add	r7, sp, #0
 801065e:	6078      	str	r0, [r7, #4]
 8010660:	460b      	mov	r3, r1
 8010662:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801066a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801066c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010670:	2b00      	cmp	r3, #0
 8010672:	da0b      	bge.n	801068c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010674:	78fb      	ldrb	r3, [r7, #3]
 8010676:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801067a:	68f9      	ldr	r1, [r7, #12]
 801067c:	4613      	mov	r3, r2
 801067e:	00db      	lsls	r3, r3, #3
 8010680:	1a9b      	subs	r3, r3, r2
 8010682:	009b      	lsls	r3, r3, #2
 8010684:	440b      	add	r3, r1
 8010686:	333e      	adds	r3, #62	; 0x3e
 8010688:	781b      	ldrb	r3, [r3, #0]
 801068a:	e00b      	b.n	80106a4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801068c:	78fb      	ldrb	r3, [r7, #3]
 801068e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010692:	68f9      	ldr	r1, [r7, #12]
 8010694:	4613      	mov	r3, r2
 8010696:	00db      	lsls	r3, r3, #3
 8010698:	1a9b      	subs	r3, r3, r2
 801069a:	009b      	lsls	r3, r3, #2
 801069c:	440b      	add	r3, r1
 801069e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80106a2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80106a4:	4618      	mov	r0, r3
 80106a6:	3714      	adds	r7, #20
 80106a8:	46bd      	mov	sp, r7
 80106aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ae:	4770      	bx	lr

080106b0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80106b0:	b580      	push	{r7, lr}
 80106b2:	b084      	sub	sp, #16
 80106b4:	af00      	add	r7, sp, #0
 80106b6:	6078      	str	r0, [r7, #4]
 80106b8:	460b      	mov	r3, r1
 80106ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80106bc:	2300      	movs	r3, #0
 80106be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80106c0:	2300      	movs	r3, #0
 80106c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80106ca:	78fa      	ldrb	r2, [r7, #3]
 80106cc:	4611      	mov	r1, r2
 80106ce:	4618      	mov	r0, r3
 80106d0:	f7f4 f946 	bl	8004960 <HAL_PCD_SetAddress>
 80106d4:	4603      	mov	r3, r0
 80106d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80106d8:	7bfb      	ldrb	r3, [r7, #15]
 80106da:	4618      	mov	r0, r3
 80106dc:	f000 f8b0 	bl	8010840 <USBD_Get_USB_Status>
 80106e0:	4603      	mov	r3, r0
 80106e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80106e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80106e6:	4618      	mov	r0, r3
 80106e8:	3710      	adds	r7, #16
 80106ea:	46bd      	mov	sp, r7
 80106ec:	bd80      	pop	{r7, pc}

080106ee <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80106ee:	b580      	push	{r7, lr}
 80106f0:	b086      	sub	sp, #24
 80106f2:	af00      	add	r7, sp, #0
 80106f4:	60f8      	str	r0, [r7, #12]
 80106f6:	607a      	str	r2, [r7, #4]
 80106f8:	603b      	str	r3, [r7, #0]
 80106fa:	460b      	mov	r3, r1
 80106fc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80106fe:	2300      	movs	r3, #0
 8010700:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010702:	2300      	movs	r3, #0
 8010704:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010706:	68fb      	ldr	r3, [r7, #12]
 8010708:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801070c:	7af9      	ldrb	r1, [r7, #11]
 801070e:	683b      	ldr	r3, [r7, #0]
 8010710:	687a      	ldr	r2, [r7, #4]
 8010712:	f7f4 fa5f 	bl	8004bd4 <HAL_PCD_EP_Transmit>
 8010716:	4603      	mov	r3, r0
 8010718:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801071a:	7dfb      	ldrb	r3, [r7, #23]
 801071c:	4618      	mov	r0, r3
 801071e:	f000 f88f 	bl	8010840 <USBD_Get_USB_Status>
 8010722:	4603      	mov	r3, r0
 8010724:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010726:	7dbb      	ldrb	r3, [r7, #22]
}
 8010728:	4618      	mov	r0, r3
 801072a:	3718      	adds	r7, #24
 801072c:	46bd      	mov	sp, r7
 801072e:	bd80      	pop	{r7, pc}

08010730 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010730:	b580      	push	{r7, lr}
 8010732:	b086      	sub	sp, #24
 8010734:	af00      	add	r7, sp, #0
 8010736:	60f8      	str	r0, [r7, #12]
 8010738:	607a      	str	r2, [r7, #4]
 801073a:	603b      	str	r3, [r7, #0]
 801073c:	460b      	mov	r3, r1
 801073e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010740:	2300      	movs	r3, #0
 8010742:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010744:	2300      	movs	r3, #0
 8010746:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801074e:	7af9      	ldrb	r1, [r7, #11]
 8010750:	683b      	ldr	r3, [r7, #0]
 8010752:	687a      	ldr	r2, [r7, #4]
 8010754:	f7f4 f9db 	bl	8004b0e <HAL_PCD_EP_Receive>
 8010758:	4603      	mov	r3, r0
 801075a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801075c:	7dfb      	ldrb	r3, [r7, #23]
 801075e:	4618      	mov	r0, r3
 8010760:	f000 f86e 	bl	8010840 <USBD_Get_USB_Status>
 8010764:	4603      	mov	r3, r0
 8010766:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010768:	7dbb      	ldrb	r3, [r7, #22]
}
 801076a:	4618      	mov	r0, r3
 801076c:	3718      	adds	r7, #24
 801076e:	46bd      	mov	sp, r7
 8010770:	bd80      	pop	{r7, pc}

08010772 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010772:	b580      	push	{r7, lr}
 8010774:	b082      	sub	sp, #8
 8010776:	af00      	add	r7, sp, #0
 8010778:	6078      	str	r0, [r7, #4]
 801077a:	460b      	mov	r3, r1
 801077c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010784:	78fa      	ldrb	r2, [r7, #3]
 8010786:	4611      	mov	r1, r2
 8010788:	4618      	mov	r0, r3
 801078a:	f7f4 fa0b 	bl	8004ba4 <HAL_PCD_EP_GetRxCount>
 801078e:	4603      	mov	r3, r0
}
 8010790:	4618      	mov	r0, r3
 8010792:	3708      	adds	r7, #8
 8010794:	46bd      	mov	sp, r7
 8010796:	bd80      	pop	{r7, pc}

08010798 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8010798:	b580      	push	{r7, lr}
 801079a:	b082      	sub	sp, #8
 801079c:	af00      	add	r7, sp, #0
 801079e:	6078      	str	r0, [r7, #4]
 80107a0:	460b      	mov	r3, r1
 80107a2:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80107a4:	78fb      	ldrb	r3, [r7, #3]
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d002      	beq.n	80107b0 <HAL_PCDEx_LPM_Callback+0x18>
 80107aa:	2b01      	cmp	r3, #1
 80107ac:	d01f      	beq.n	80107ee <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 80107ae:	e03b      	b.n	8010828 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	6a1b      	ldr	r3, [r3, #32]
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d007      	beq.n	80107c8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80107b8:	f000 f83c 	bl	8010834 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80107bc:	4b1c      	ldr	r3, [pc, #112]	; (8010830 <HAL_PCDEx_LPM_Callback+0x98>)
 80107be:	691b      	ldr	r3, [r3, #16]
 80107c0:	4a1b      	ldr	r2, [pc, #108]	; (8010830 <HAL_PCDEx_LPM_Callback+0x98>)
 80107c2:	f023 0306 	bic.w	r3, r3, #6
 80107c6:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	681b      	ldr	r3, [r3, #0]
 80107cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80107d0:	681b      	ldr	r3, [r3, #0]
 80107d2:	687a      	ldr	r2, [r7, #4]
 80107d4:	6812      	ldr	r2, [r2, #0]
 80107d6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80107da:	f023 0301 	bic.w	r3, r3, #1
 80107de:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80107e6:	4618      	mov	r0, r3
 80107e8:	f7fb f954 	bl	800ba94 <USBD_LL_Resume>
    break;
 80107ec:	e01c      	b.n	8010828 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80107f6:	681b      	ldr	r3, [r3, #0]
 80107f8:	687a      	ldr	r2, [r7, #4]
 80107fa:	6812      	ldr	r2, [r2, #0]
 80107fc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010800:	f043 0301 	orr.w	r3, r3, #1
 8010804:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801080c:	4618      	mov	r0, r3
 801080e:	f7fb f92c 	bl	800ba6a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	6a1b      	ldr	r3, [r3, #32]
 8010816:	2b00      	cmp	r3, #0
 8010818:	d005      	beq.n	8010826 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801081a:	4b05      	ldr	r3, [pc, #20]	; (8010830 <HAL_PCDEx_LPM_Callback+0x98>)
 801081c:	691b      	ldr	r3, [r3, #16]
 801081e:	4a04      	ldr	r2, [pc, #16]	; (8010830 <HAL_PCDEx_LPM_Callback+0x98>)
 8010820:	f043 0306 	orr.w	r3, r3, #6
 8010824:	6113      	str	r3, [r2, #16]
    break;
 8010826:	bf00      	nop
}
 8010828:	bf00      	nop
 801082a:	3708      	adds	r7, #8
 801082c:	46bd      	mov	sp, r7
 801082e:	bd80      	pop	{r7, pc}
 8010830:	e000ed00 	.word	0xe000ed00

08010834 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8010834:	b580      	push	{r7, lr}
 8010836:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8010838:	f7f0 ff1a 	bl	8001670 <SystemClock_Config>
}
 801083c:	bf00      	nop
 801083e:	bd80      	pop	{r7, pc}

08010840 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010840:	b480      	push	{r7}
 8010842:	b085      	sub	sp, #20
 8010844:	af00      	add	r7, sp, #0
 8010846:	4603      	mov	r3, r0
 8010848:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801084a:	2300      	movs	r3, #0
 801084c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801084e:	79fb      	ldrb	r3, [r7, #7]
 8010850:	2b03      	cmp	r3, #3
 8010852:	d817      	bhi.n	8010884 <USBD_Get_USB_Status+0x44>
 8010854:	a201      	add	r2, pc, #4	; (adr r2, 801085c <USBD_Get_USB_Status+0x1c>)
 8010856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801085a:	bf00      	nop
 801085c:	0801086d 	.word	0x0801086d
 8010860:	08010873 	.word	0x08010873
 8010864:	08010879 	.word	0x08010879
 8010868:	0801087f 	.word	0x0801087f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801086c:	2300      	movs	r3, #0
 801086e:	73fb      	strb	r3, [r7, #15]
    break;
 8010870:	e00b      	b.n	801088a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010872:	2303      	movs	r3, #3
 8010874:	73fb      	strb	r3, [r7, #15]
    break;
 8010876:	e008      	b.n	801088a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010878:	2301      	movs	r3, #1
 801087a:	73fb      	strb	r3, [r7, #15]
    break;
 801087c:	e005      	b.n	801088a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801087e:	2303      	movs	r3, #3
 8010880:	73fb      	strb	r3, [r7, #15]
    break;
 8010882:	e002      	b.n	801088a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010884:	2303      	movs	r3, #3
 8010886:	73fb      	strb	r3, [r7, #15]
    break;
 8010888:	bf00      	nop
  }
  return usb_status;
 801088a:	7bfb      	ldrb	r3, [r7, #15]
}
 801088c:	4618      	mov	r0, r3
 801088e:	3714      	adds	r7, #20
 8010890:	46bd      	mov	sp, r7
 8010892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010896:	4770      	bx	lr

08010898 <atof>:
 8010898:	2100      	movs	r1, #0
 801089a:	f000 befb 	b.w	8011694 <strtod>
	...

080108a0 <__errno>:
 80108a0:	4b01      	ldr	r3, [pc, #4]	; (80108a8 <__errno+0x8>)
 80108a2:	6818      	ldr	r0, [r3, #0]
 80108a4:	4770      	bx	lr
 80108a6:	bf00      	nop
 80108a8:	20000220 	.word	0x20000220

080108ac <__libc_init_array>:
 80108ac:	b570      	push	{r4, r5, r6, lr}
 80108ae:	4d0d      	ldr	r5, [pc, #52]	; (80108e4 <__libc_init_array+0x38>)
 80108b0:	4c0d      	ldr	r4, [pc, #52]	; (80108e8 <__libc_init_array+0x3c>)
 80108b2:	1b64      	subs	r4, r4, r5
 80108b4:	10a4      	asrs	r4, r4, #2
 80108b6:	2600      	movs	r6, #0
 80108b8:	42a6      	cmp	r6, r4
 80108ba:	d109      	bne.n	80108d0 <__libc_init_array+0x24>
 80108bc:	4d0b      	ldr	r5, [pc, #44]	; (80108ec <__libc_init_array+0x40>)
 80108be:	4c0c      	ldr	r4, [pc, #48]	; (80108f0 <__libc_init_array+0x44>)
 80108c0:	f002 fe6a 	bl	8013598 <_init>
 80108c4:	1b64      	subs	r4, r4, r5
 80108c6:	10a4      	asrs	r4, r4, #2
 80108c8:	2600      	movs	r6, #0
 80108ca:	42a6      	cmp	r6, r4
 80108cc:	d105      	bne.n	80108da <__libc_init_array+0x2e>
 80108ce:	bd70      	pop	{r4, r5, r6, pc}
 80108d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80108d4:	4798      	blx	r3
 80108d6:	3601      	adds	r6, #1
 80108d8:	e7ee      	b.n	80108b8 <__libc_init_array+0xc>
 80108da:	f855 3b04 	ldr.w	r3, [r5], #4
 80108de:	4798      	blx	r3
 80108e0:	3601      	adds	r6, #1
 80108e2:	e7f2      	b.n	80108ca <__libc_init_array+0x1e>
 80108e4:	08013c54 	.word	0x08013c54
 80108e8:	08013c54 	.word	0x08013c54
 80108ec:	08013c54 	.word	0x08013c54
 80108f0:	08013c58 	.word	0x08013c58

080108f4 <malloc>:
 80108f4:	4b02      	ldr	r3, [pc, #8]	; (8010900 <malloc+0xc>)
 80108f6:	4601      	mov	r1, r0
 80108f8:	6818      	ldr	r0, [r3, #0]
 80108fa:	f000 b871 	b.w	80109e0 <_malloc_r>
 80108fe:	bf00      	nop
 8010900:	20000220 	.word	0x20000220

08010904 <free>:
 8010904:	4b02      	ldr	r3, [pc, #8]	; (8010910 <free+0xc>)
 8010906:	4601      	mov	r1, r0
 8010908:	6818      	ldr	r0, [r3, #0]
 801090a:	f000 b819 	b.w	8010940 <_free_r>
 801090e:	bf00      	nop
 8010910:	20000220 	.word	0x20000220

08010914 <memcpy>:
 8010914:	440a      	add	r2, r1
 8010916:	4291      	cmp	r1, r2
 8010918:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801091c:	d100      	bne.n	8010920 <memcpy+0xc>
 801091e:	4770      	bx	lr
 8010920:	b510      	push	{r4, lr}
 8010922:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010926:	f803 4f01 	strb.w	r4, [r3, #1]!
 801092a:	4291      	cmp	r1, r2
 801092c:	d1f9      	bne.n	8010922 <memcpy+0xe>
 801092e:	bd10      	pop	{r4, pc}

08010930 <memset>:
 8010930:	4402      	add	r2, r0
 8010932:	4603      	mov	r3, r0
 8010934:	4293      	cmp	r3, r2
 8010936:	d100      	bne.n	801093a <memset+0xa>
 8010938:	4770      	bx	lr
 801093a:	f803 1b01 	strb.w	r1, [r3], #1
 801093e:	e7f9      	b.n	8010934 <memset+0x4>

08010940 <_free_r>:
 8010940:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010942:	2900      	cmp	r1, #0
 8010944:	d048      	beq.n	80109d8 <_free_r+0x98>
 8010946:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801094a:	9001      	str	r0, [sp, #4]
 801094c:	2b00      	cmp	r3, #0
 801094e:	f1a1 0404 	sub.w	r4, r1, #4
 8010952:	bfb8      	it	lt
 8010954:	18e4      	addlt	r4, r4, r3
 8010956:	f001 fa2b 	bl	8011db0 <__malloc_lock>
 801095a:	4a20      	ldr	r2, [pc, #128]	; (80109dc <_free_r+0x9c>)
 801095c:	9801      	ldr	r0, [sp, #4]
 801095e:	6813      	ldr	r3, [r2, #0]
 8010960:	4615      	mov	r5, r2
 8010962:	b933      	cbnz	r3, 8010972 <_free_r+0x32>
 8010964:	6063      	str	r3, [r4, #4]
 8010966:	6014      	str	r4, [r2, #0]
 8010968:	b003      	add	sp, #12
 801096a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801096e:	f001 ba25 	b.w	8011dbc <__malloc_unlock>
 8010972:	42a3      	cmp	r3, r4
 8010974:	d90b      	bls.n	801098e <_free_r+0x4e>
 8010976:	6821      	ldr	r1, [r4, #0]
 8010978:	1862      	adds	r2, r4, r1
 801097a:	4293      	cmp	r3, r2
 801097c:	bf04      	itt	eq
 801097e:	681a      	ldreq	r2, [r3, #0]
 8010980:	685b      	ldreq	r3, [r3, #4]
 8010982:	6063      	str	r3, [r4, #4]
 8010984:	bf04      	itt	eq
 8010986:	1852      	addeq	r2, r2, r1
 8010988:	6022      	streq	r2, [r4, #0]
 801098a:	602c      	str	r4, [r5, #0]
 801098c:	e7ec      	b.n	8010968 <_free_r+0x28>
 801098e:	461a      	mov	r2, r3
 8010990:	685b      	ldr	r3, [r3, #4]
 8010992:	b10b      	cbz	r3, 8010998 <_free_r+0x58>
 8010994:	42a3      	cmp	r3, r4
 8010996:	d9fa      	bls.n	801098e <_free_r+0x4e>
 8010998:	6811      	ldr	r1, [r2, #0]
 801099a:	1855      	adds	r5, r2, r1
 801099c:	42a5      	cmp	r5, r4
 801099e:	d10b      	bne.n	80109b8 <_free_r+0x78>
 80109a0:	6824      	ldr	r4, [r4, #0]
 80109a2:	4421      	add	r1, r4
 80109a4:	1854      	adds	r4, r2, r1
 80109a6:	42a3      	cmp	r3, r4
 80109a8:	6011      	str	r1, [r2, #0]
 80109aa:	d1dd      	bne.n	8010968 <_free_r+0x28>
 80109ac:	681c      	ldr	r4, [r3, #0]
 80109ae:	685b      	ldr	r3, [r3, #4]
 80109b0:	6053      	str	r3, [r2, #4]
 80109b2:	4421      	add	r1, r4
 80109b4:	6011      	str	r1, [r2, #0]
 80109b6:	e7d7      	b.n	8010968 <_free_r+0x28>
 80109b8:	d902      	bls.n	80109c0 <_free_r+0x80>
 80109ba:	230c      	movs	r3, #12
 80109bc:	6003      	str	r3, [r0, #0]
 80109be:	e7d3      	b.n	8010968 <_free_r+0x28>
 80109c0:	6825      	ldr	r5, [r4, #0]
 80109c2:	1961      	adds	r1, r4, r5
 80109c4:	428b      	cmp	r3, r1
 80109c6:	bf04      	itt	eq
 80109c8:	6819      	ldreq	r1, [r3, #0]
 80109ca:	685b      	ldreq	r3, [r3, #4]
 80109cc:	6063      	str	r3, [r4, #4]
 80109ce:	bf04      	itt	eq
 80109d0:	1949      	addeq	r1, r1, r5
 80109d2:	6021      	streq	r1, [r4, #0]
 80109d4:	6054      	str	r4, [r2, #4]
 80109d6:	e7c7      	b.n	8010968 <_free_r+0x28>
 80109d8:	b003      	add	sp, #12
 80109da:	bd30      	pop	{r4, r5, pc}
 80109dc:	200016b4 	.word	0x200016b4

080109e0 <_malloc_r>:
 80109e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109e2:	1ccd      	adds	r5, r1, #3
 80109e4:	f025 0503 	bic.w	r5, r5, #3
 80109e8:	3508      	adds	r5, #8
 80109ea:	2d0c      	cmp	r5, #12
 80109ec:	bf38      	it	cc
 80109ee:	250c      	movcc	r5, #12
 80109f0:	2d00      	cmp	r5, #0
 80109f2:	4606      	mov	r6, r0
 80109f4:	db01      	blt.n	80109fa <_malloc_r+0x1a>
 80109f6:	42a9      	cmp	r1, r5
 80109f8:	d903      	bls.n	8010a02 <_malloc_r+0x22>
 80109fa:	230c      	movs	r3, #12
 80109fc:	6033      	str	r3, [r6, #0]
 80109fe:	2000      	movs	r0, #0
 8010a00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010a02:	f001 f9d5 	bl	8011db0 <__malloc_lock>
 8010a06:	4921      	ldr	r1, [pc, #132]	; (8010a8c <_malloc_r+0xac>)
 8010a08:	680a      	ldr	r2, [r1, #0]
 8010a0a:	4614      	mov	r4, r2
 8010a0c:	b99c      	cbnz	r4, 8010a36 <_malloc_r+0x56>
 8010a0e:	4f20      	ldr	r7, [pc, #128]	; (8010a90 <_malloc_r+0xb0>)
 8010a10:	683b      	ldr	r3, [r7, #0]
 8010a12:	b923      	cbnz	r3, 8010a1e <_malloc_r+0x3e>
 8010a14:	4621      	mov	r1, r4
 8010a16:	4630      	mov	r0, r6
 8010a18:	f000 f83c 	bl	8010a94 <_sbrk_r>
 8010a1c:	6038      	str	r0, [r7, #0]
 8010a1e:	4629      	mov	r1, r5
 8010a20:	4630      	mov	r0, r6
 8010a22:	f000 f837 	bl	8010a94 <_sbrk_r>
 8010a26:	1c43      	adds	r3, r0, #1
 8010a28:	d123      	bne.n	8010a72 <_malloc_r+0x92>
 8010a2a:	230c      	movs	r3, #12
 8010a2c:	6033      	str	r3, [r6, #0]
 8010a2e:	4630      	mov	r0, r6
 8010a30:	f001 f9c4 	bl	8011dbc <__malloc_unlock>
 8010a34:	e7e3      	b.n	80109fe <_malloc_r+0x1e>
 8010a36:	6823      	ldr	r3, [r4, #0]
 8010a38:	1b5b      	subs	r3, r3, r5
 8010a3a:	d417      	bmi.n	8010a6c <_malloc_r+0x8c>
 8010a3c:	2b0b      	cmp	r3, #11
 8010a3e:	d903      	bls.n	8010a48 <_malloc_r+0x68>
 8010a40:	6023      	str	r3, [r4, #0]
 8010a42:	441c      	add	r4, r3
 8010a44:	6025      	str	r5, [r4, #0]
 8010a46:	e004      	b.n	8010a52 <_malloc_r+0x72>
 8010a48:	6863      	ldr	r3, [r4, #4]
 8010a4a:	42a2      	cmp	r2, r4
 8010a4c:	bf0c      	ite	eq
 8010a4e:	600b      	streq	r3, [r1, #0]
 8010a50:	6053      	strne	r3, [r2, #4]
 8010a52:	4630      	mov	r0, r6
 8010a54:	f001 f9b2 	bl	8011dbc <__malloc_unlock>
 8010a58:	f104 000b 	add.w	r0, r4, #11
 8010a5c:	1d23      	adds	r3, r4, #4
 8010a5e:	f020 0007 	bic.w	r0, r0, #7
 8010a62:	1ac2      	subs	r2, r0, r3
 8010a64:	d0cc      	beq.n	8010a00 <_malloc_r+0x20>
 8010a66:	1a1b      	subs	r3, r3, r0
 8010a68:	50a3      	str	r3, [r4, r2]
 8010a6a:	e7c9      	b.n	8010a00 <_malloc_r+0x20>
 8010a6c:	4622      	mov	r2, r4
 8010a6e:	6864      	ldr	r4, [r4, #4]
 8010a70:	e7cc      	b.n	8010a0c <_malloc_r+0x2c>
 8010a72:	1cc4      	adds	r4, r0, #3
 8010a74:	f024 0403 	bic.w	r4, r4, #3
 8010a78:	42a0      	cmp	r0, r4
 8010a7a:	d0e3      	beq.n	8010a44 <_malloc_r+0x64>
 8010a7c:	1a21      	subs	r1, r4, r0
 8010a7e:	4630      	mov	r0, r6
 8010a80:	f000 f808 	bl	8010a94 <_sbrk_r>
 8010a84:	3001      	adds	r0, #1
 8010a86:	d1dd      	bne.n	8010a44 <_malloc_r+0x64>
 8010a88:	e7cf      	b.n	8010a2a <_malloc_r+0x4a>
 8010a8a:	bf00      	nop
 8010a8c:	200016b4 	.word	0x200016b4
 8010a90:	200016b8 	.word	0x200016b8

08010a94 <_sbrk_r>:
 8010a94:	b538      	push	{r3, r4, r5, lr}
 8010a96:	4d06      	ldr	r5, [pc, #24]	; (8010ab0 <_sbrk_r+0x1c>)
 8010a98:	2300      	movs	r3, #0
 8010a9a:	4604      	mov	r4, r0
 8010a9c:	4608      	mov	r0, r1
 8010a9e:	602b      	str	r3, [r5, #0]
 8010aa0:	f7f1 f8c4 	bl	8001c2c <_sbrk>
 8010aa4:	1c43      	adds	r3, r0, #1
 8010aa6:	d102      	bne.n	8010aae <_sbrk_r+0x1a>
 8010aa8:	682b      	ldr	r3, [r5, #0]
 8010aaa:	b103      	cbz	r3, 8010aae <_sbrk_r+0x1a>
 8010aac:	6023      	str	r3, [r4, #0]
 8010aae:	bd38      	pop	{r3, r4, r5, pc}
 8010ab0:	200059d0 	.word	0x200059d0

08010ab4 <sulp>:
 8010ab4:	b570      	push	{r4, r5, r6, lr}
 8010ab6:	4604      	mov	r4, r0
 8010ab8:	460d      	mov	r5, r1
 8010aba:	4616      	mov	r6, r2
 8010abc:	ec45 4b10 	vmov	d0, r4, r5
 8010ac0:	f001 fcee 	bl	80124a0 <__ulp>
 8010ac4:	b17e      	cbz	r6, 8010ae6 <sulp+0x32>
 8010ac6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010aca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	dd09      	ble.n	8010ae6 <sulp+0x32>
 8010ad2:	051b      	lsls	r3, r3, #20
 8010ad4:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8010ad8:	2000      	movs	r0, #0
 8010ada:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8010ade:	ec41 0b17 	vmov	d7, r0, r1
 8010ae2:	ee20 0b07 	vmul.f64	d0, d0, d7
 8010ae6:	bd70      	pop	{r4, r5, r6, pc}

08010ae8 <_strtod_l>:
 8010ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010aec:	ed2d 8b0c 	vpush	{d8-d13}
 8010af0:	b09d      	sub	sp, #116	; 0x74
 8010af2:	461f      	mov	r7, r3
 8010af4:	2300      	movs	r3, #0
 8010af6:	9318      	str	r3, [sp, #96]	; 0x60
 8010af8:	4ba6      	ldr	r3, [pc, #664]	; (8010d94 <_strtod_l+0x2ac>)
 8010afa:	9213      	str	r2, [sp, #76]	; 0x4c
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	9308      	str	r3, [sp, #32]
 8010b00:	4604      	mov	r4, r0
 8010b02:	4618      	mov	r0, r3
 8010b04:	468a      	mov	sl, r1
 8010b06:	f7ef fba5 	bl	8000254 <strlen>
 8010b0a:	f04f 0800 	mov.w	r8, #0
 8010b0e:	4605      	mov	r5, r0
 8010b10:	f04f 0900 	mov.w	r9, #0
 8010b14:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8010b18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010b1a:	781a      	ldrb	r2, [r3, #0]
 8010b1c:	2a2b      	cmp	r2, #43	; 0x2b
 8010b1e:	d04d      	beq.n	8010bbc <_strtod_l+0xd4>
 8010b20:	d83a      	bhi.n	8010b98 <_strtod_l+0xb0>
 8010b22:	2a0d      	cmp	r2, #13
 8010b24:	d833      	bhi.n	8010b8e <_strtod_l+0xa6>
 8010b26:	2a08      	cmp	r2, #8
 8010b28:	d833      	bhi.n	8010b92 <_strtod_l+0xaa>
 8010b2a:	2a00      	cmp	r2, #0
 8010b2c:	d03d      	beq.n	8010baa <_strtod_l+0xc2>
 8010b2e:	2300      	movs	r3, #0
 8010b30:	930b      	str	r3, [sp, #44]	; 0x2c
 8010b32:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8010b34:	7833      	ldrb	r3, [r6, #0]
 8010b36:	2b30      	cmp	r3, #48	; 0x30
 8010b38:	f040 80b6 	bne.w	8010ca8 <_strtod_l+0x1c0>
 8010b3c:	7873      	ldrb	r3, [r6, #1]
 8010b3e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010b42:	2b58      	cmp	r3, #88	; 0x58
 8010b44:	d16d      	bne.n	8010c22 <_strtod_l+0x13a>
 8010b46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010b48:	9301      	str	r3, [sp, #4]
 8010b4a:	ab18      	add	r3, sp, #96	; 0x60
 8010b4c:	9702      	str	r7, [sp, #8]
 8010b4e:	9300      	str	r3, [sp, #0]
 8010b50:	4a91      	ldr	r2, [pc, #580]	; (8010d98 <_strtod_l+0x2b0>)
 8010b52:	ab19      	add	r3, sp, #100	; 0x64
 8010b54:	a917      	add	r1, sp, #92	; 0x5c
 8010b56:	4620      	mov	r0, r4
 8010b58:	f000 fe10 	bl	801177c <__gethex>
 8010b5c:	f010 0507 	ands.w	r5, r0, #7
 8010b60:	4607      	mov	r7, r0
 8010b62:	d005      	beq.n	8010b70 <_strtod_l+0x88>
 8010b64:	2d06      	cmp	r5, #6
 8010b66:	d12b      	bne.n	8010bc0 <_strtod_l+0xd8>
 8010b68:	3601      	adds	r6, #1
 8010b6a:	2300      	movs	r3, #0
 8010b6c:	9617      	str	r6, [sp, #92]	; 0x5c
 8010b6e:	930b      	str	r3, [sp, #44]	; 0x2c
 8010b70:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	f040 856e 	bne.w	8011654 <_strtod_l+0xb6c>
 8010b78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010b7a:	b1e3      	cbz	r3, 8010bb6 <_strtod_l+0xce>
 8010b7c:	ec49 8b17 	vmov	d7, r8, r9
 8010b80:	eeb1 0b47 	vneg.f64	d0, d7
 8010b84:	b01d      	add	sp, #116	; 0x74
 8010b86:	ecbd 8b0c 	vpop	{d8-d13}
 8010b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b8e:	2a20      	cmp	r2, #32
 8010b90:	d1cd      	bne.n	8010b2e <_strtod_l+0x46>
 8010b92:	3301      	adds	r3, #1
 8010b94:	9317      	str	r3, [sp, #92]	; 0x5c
 8010b96:	e7bf      	b.n	8010b18 <_strtod_l+0x30>
 8010b98:	2a2d      	cmp	r2, #45	; 0x2d
 8010b9a:	d1c8      	bne.n	8010b2e <_strtod_l+0x46>
 8010b9c:	2201      	movs	r2, #1
 8010b9e:	920b      	str	r2, [sp, #44]	; 0x2c
 8010ba0:	1c5a      	adds	r2, r3, #1
 8010ba2:	9217      	str	r2, [sp, #92]	; 0x5c
 8010ba4:	785b      	ldrb	r3, [r3, #1]
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d1c3      	bne.n	8010b32 <_strtod_l+0x4a>
 8010baa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010bac:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	f040 854d 	bne.w	8011650 <_strtod_l+0xb68>
 8010bb6:	ec49 8b10 	vmov	d0, r8, r9
 8010bba:	e7e3      	b.n	8010b84 <_strtod_l+0x9c>
 8010bbc:	2200      	movs	r2, #0
 8010bbe:	e7ee      	b.n	8010b9e <_strtod_l+0xb6>
 8010bc0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010bc2:	b13a      	cbz	r2, 8010bd4 <_strtod_l+0xec>
 8010bc4:	2135      	movs	r1, #53	; 0x35
 8010bc6:	a81a      	add	r0, sp, #104	; 0x68
 8010bc8:	f001 fd76 	bl	80126b8 <__copybits>
 8010bcc:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010bce:	4620      	mov	r0, r4
 8010bd0:	f001 f93a 	bl	8011e48 <_Bfree>
 8010bd4:	3d01      	subs	r5, #1
 8010bd6:	2d05      	cmp	r5, #5
 8010bd8:	d807      	bhi.n	8010bea <_strtod_l+0x102>
 8010bda:	e8df f005 	tbb	[pc, r5]
 8010bde:	0b0e      	.short	0x0b0e
 8010be0:	030e1d18 	.word	0x030e1d18
 8010be4:	f04f 0900 	mov.w	r9, #0
 8010be8:	46c8      	mov	r8, r9
 8010bea:	073b      	lsls	r3, r7, #28
 8010bec:	d5c0      	bpl.n	8010b70 <_strtod_l+0x88>
 8010bee:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8010bf2:	e7bd      	b.n	8010b70 <_strtod_l+0x88>
 8010bf4:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
 8010bf8:	e7f7      	b.n	8010bea <_strtod_l+0x102>
 8010bfa:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
 8010bfe:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8010c00:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8010c04:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8010c08:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8010c0c:	e7ed      	b.n	8010bea <_strtod_l+0x102>
 8010c0e:	f8df 918c 	ldr.w	r9, [pc, #396]	; 8010d9c <_strtod_l+0x2b4>
 8010c12:	f04f 0800 	mov.w	r8, #0
 8010c16:	e7e8      	b.n	8010bea <_strtod_l+0x102>
 8010c18:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8010c1c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8010c20:	e7e3      	b.n	8010bea <_strtod_l+0x102>
 8010c22:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010c24:	1c5a      	adds	r2, r3, #1
 8010c26:	9217      	str	r2, [sp, #92]	; 0x5c
 8010c28:	785b      	ldrb	r3, [r3, #1]
 8010c2a:	2b30      	cmp	r3, #48	; 0x30
 8010c2c:	d0f9      	beq.n	8010c22 <_strtod_l+0x13a>
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	d09e      	beq.n	8010b70 <_strtod_l+0x88>
 8010c32:	2301      	movs	r3, #1
 8010c34:	9306      	str	r3, [sp, #24]
 8010c36:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010c38:	930c      	str	r3, [sp, #48]	; 0x30
 8010c3a:	2300      	movs	r3, #0
 8010c3c:	9304      	str	r3, [sp, #16]
 8010c3e:	930a      	str	r3, [sp, #40]	; 0x28
 8010c40:	461e      	mov	r6, r3
 8010c42:	220a      	movs	r2, #10
 8010c44:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8010c46:	f890 b000 	ldrb.w	fp, [r0]
 8010c4a:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
 8010c4e:	b2d9      	uxtb	r1, r3
 8010c50:	2909      	cmp	r1, #9
 8010c52:	d92b      	bls.n	8010cac <_strtod_l+0x1c4>
 8010c54:	9908      	ldr	r1, [sp, #32]
 8010c56:	462a      	mov	r2, r5
 8010c58:	f001 fd8a 	bl	8012770 <strncmp>
 8010c5c:	2800      	cmp	r0, #0
 8010c5e:	d035      	beq.n	8010ccc <_strtod_l+0x1e4>
 8010c60:	2000      	movs	r0, #0
 8010c62:	465a      	mov	r2, fp
 8010c64:	4633      	mov	r3, r6
 8010c66:	4683      	mov	fp, r0
 8010c68:	4601      	mov	r1, r0
 8010c6a:	2a65      	cmp	r2, #101	; 0x65
 8010c6c:	d001      	beq.n	8010c72 <_strtod_l+0x18a>
 8010c6e:	2a45      	cmp	r2, #69	; 0x45
 8010c70:	d118      	bne.n	8010ca4 <_strtod_l+0x1bc>
 8010c72:	b91b      	cbnz	r3, 8010c7c <_strtod_l+0x194>
 8010c74:	9b06      	ldr	r3, [sp, #24]
 8010c76:	4303      	orrs	r3, r0
 8010c78:	d097      	beq.n	8010baa <_strtod_l+0xc2>
 8010c7a:	2300      	movs	r3, #0
 8010c7c:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 8010c80:	f10a 0201 	add.w	r2, sl, #1
 8010c84:	9217      	str	r2, [sp, #92]	; 0x5c
 8010c86:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8010c8a:	2a2b      	cmp	r2, #43	; 0x2b
 8010c8c:	d077      	beq.n	8010d7e <_strtod_l+0x296>
 8010c8e:	2a2d      	cmp	r2, #45	; 0x2d
 8010c90:	d07d      	beq.n	8010d8e <_strtod_l+0x2a6>
 8010c92:	f04f 0e00 	mov.w	lr, #0
 8010c96:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8010c9a:	2d09      	cmp	r5, #9
 8010c9c:	f240 8084 	bls.w	8010da8 <_strtod_l+0x2c0>
 8010ca0:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8010ca4:	2500      	movs	r5, #0
 8010ca6:	e09f      	b.n	8010de8 <_strtod_l+0x300>
 8010ca8:	2300      	movs	r3, #0
 8010caa:	e7c3      	b.n	8010c34 <_strtod_l+0x14c>
 8010cac:	2e08      	cmp	r6, #8
 8010cae:	bfd5      	itete	le
 8010cb0:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8010cb2:	9904      	ldrgt	r1, [sp, #16]
 8010cb4:	fb02 3301 	mlale	r3, r2, r1, r3
 8010cb8:	fb02 3301 	mlagt	r3, r2, r1, r3
 8010cbc:	f100 0001 	add.w	r0, r0, #1
 8010cc0:	bfd4      	ite	le
 8010cc2:	930a      	strle	r3, [sp, #40]	; 0x28
 8010cc4:	9304      	strgt	r3, [sp, #16]
 8010cc6:	3601      	adds	r6, #1
 8010cc8:	9017      	str	r0, [sp, #92]	; 0x5c
 8010cca:	e7bb      	b.n	8010c44 <_strtod_l+0x15c>
 8010ccc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010cce:	195a      	adds	r2, r3, r5
 8010cd0:	9217      	str	r2, [sp, #92]	; 0x5c
 8010cd2:	5d5a      	ldrb	r2, [r3, r5]
 8010cd4:	b3ae      	cbz	r6, 8010d42 <_strtod_l+0x25a>
 8010cd6:	4683      	mov	fp, r0
 8010cd8:	4633      	mov	r3, r6
 8010cda:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8010cde:	2909      	cmp	r1, #9
 8010ce0:	d912      	bls.n	8010d08 <_strtod_l+0x220>
 8010ce2:	2101      	movs	r1, #1
 8010ce4:	e7c1      	b.n	8010c6a <_strtod_l+0x182>
 8010ce6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010ce8:	1c5a      	adds	r2, r3, #1
 8010cea:	9217      	str	r2, [sp, #92]	; 0x5c
 8010cec:	785a      	ldrb	r2, [r3, #1]
 8010cee:	3001      	adds	r0, #1
 8010cf0:	2a30      	cmp	r2, #48	; 0x30
 8010cf2:	d0f8      	beq.n	8010ce6 <_strtod_l+0x1fe>
 8010cf4:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8010cf8:	2b08      	cmp	r3, #8
 8010cfa:	f200 84b0 	bhi.w	801165e <_strtod_l+0xb76>
 8010cfe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010d00:	930c      	str	r3, [sp, #48]	; 0x30
 8010d02:	4683      	mov	fp, r0
 8010d04:	2000      	movs	r0, #0
 8010d06:	4603      	mov	r3, r0
 8010d08:	3a30      	subs	r2, #48	; 0x30
 8010d0a:	f100 0101 	add.w	r1, r0, #1
 8010d0e:	d012      	beq.n	8010d36 <_strtod_l+0x24e>
 8010d10:	448b      	add	fp, r1
 8010d12:	eb00 0c03 	add.w	ip, r0, r3
 8010d16:	4619      	mov	r1, r3
 8010d18:	250a      	movs	r5, #10
 8010d1a:	4561      	cmp	r1, ip
 8010d1c:	d113      	bne.n	8010d46 <_strtod_l+0x25e>
 8010d1e:	1819      	adds	r1, r3, r0
 8010d20:	2908      	cmp	r1, #8
 8010d22:	f103 0301 	add.w	r3, r3, #1
 8010d26:	4403      	add	r3, r0
 8010d28:	dc1d      	bgt.n	8010d66 <_strtod_l+0x27e>
 8010d2a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8010d2c:	210a      	movs	r1, #10
 8010d2e:	fb01 2200 	mla	r2, r1, r0, r2
 8010d32:	920a      	str	r2, [sp, #40]	; 0x28
 8010d34:	2100      	movs	r1, #0
 8010d36:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010d38:	1c50      	adds	r0, r2, #1
 8010d3a:	9017      	str	r0, [sp, #92]	; 0x5c
 8010d3c:	7852      	ldrb	r2, [r2, #1]
 8010d3e:	4608      	mov	r0, r1
 8010d40:	e7cb      	b.n	8010cda <_strtod_l+0x1f2>
 8010d42:	4630      	mov	r0, r6
 8010d44:	e7d4      	b.n	8010cf0 <_strtod_l+0x208>
 8010d46:	2908      	cmp	r1, #8
 8010d48:	dc04      	bgt.n	8010d54 <_strtod_l+0x26c>
 8010d4a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8010d4c:	436f      	muls	r7, r5
 8010d4e:	970a      	str	r7, [sp, #40]	; 0x28
 8010d50:	3101      	adds	r1, #1
 8010d52:	e7e2      	b.n	8010d1a <_strtod_l+0x232>
 8010d54:	f101 0e01 	add.w	lr, r1, #1
 8010d58:	f1be 0f10 	cmp.w	lr, #16
 8010d5c:	bfde      	ittt	le
 8010d5e:	9f04      	ldrle	r7, [sp, #16]
 8010d60:	436f      	mulle	r7, r5
 8010d62:	9704      	strle	r7, [sp, #16]
 8010d64:	e7f4      	b.n	8010d50 <_strtod_l+0x268>
 8010d66:	2b10      	cmp	r3, #16
 8010d68:	bfdf      	itttt	le
 8010d6a:	9804      	ldrle	r0, [sp, #16]
 8010d6c:	210a      	movle	r1, #10
 8010d6e:	fb01 2200 	mlale	r2, r1, r0, r2
 8010d72:	9204      	strle	r2, [sp, #16]
 8010d74:	e7de      	b.n	8010d34 <_strtod_l+0x24c>
 8010d76:	f04f 0b00 	mov.w	fp, #0
 8010d7a:	2101      	movs	r1, #1
 8010d7c:	e77a      	b.n	8010c74 <_strtod_l+0x18c>
 8010d7e:	f04f 0e00 	mov.w	lr, #0
 8010d82:	f10a 0202 	add.w	r2, sl, #2
 8010d86:	9217      	str	r2, [sp, #92]	; 0x5c
 8010d88:	f89a 2002 	ldrb.w	r2, [sl, #2]
 8010d8c:	e783      	b.n	8010c96 <_strtod_l+0x1ae>
 8010d8e:	f04f 0e01 	mov.w	lr, #1
 8010d92:	e7f6      	b.n	8010d82 <_strtod_l+0x29a>
 8010d94:	080139f4 	.word	0x080139f4
 8010d98:	08013928 	.word	0x08013928
 8010d9c:	7ff00000 	.word	0x7ff00000
 8010da0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010da2:	1c55      	adds	r5, r2, #1
 8010da4:	9517      	str	r5, [sp, #92]	; 0x5c
 8010da6:	7852      	ldrb	r2, [r2, #1]
 8010da8:	2a30      	cmp	r2, #48	; 0x30
 8010daa:	d0f9      	beq.n	8010da0 <_strtod_l+0x2b8>
 8010dac:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8010db0:	2d08      	cmp	r5, #8
 8010db2:	f63f af77 	bhi.w	8010ca4 <_strtod_l+0x1bc>
 8010db6:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8010dba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010dbc:	9208      	str	r2, [sp, #32]
 8010dbe:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010dc0:	1c55      	adds	r5, r2, #1
 8010dc2:	9517      	str	r5, [sp, #92]	; 0x5c
 8010dc4:	7852      	ldrb	r2, [r2, #1]
 8010dc6:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8010dca:	2f09      	cmp	r7, #9
 8010dcc:	d937      	bls.n	8010e3e <_strtod_l+0x356>
 8010dce:	9f08      	ldr	r7, [sp, #32]
 8010dd0:	1bed      	subs	r5, r5, r7
 8010dd2:	2d08      	cmp	r5, #8
 8010dd4:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8010dd8:	dc02      	bgt.n	8010de0 <_strtod_l+0x2f8>
 8010dda:	4565      	cmp	r5, ip
 8010ddc:	bfa8      	it	ge
 8010dde:	4665      	movge	r5, ip
 8010de0:	f1be 0f00 	cmp.w	lr, #0
 8010de4:	d000      	beq.n	8010de8 <_strtod_l+0x300>
 8010de6:	426d      	negs	r5, r5
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d14f      	bne.n	8010e8c <_strtod_l+0x3a4>
 8010dec:	9b06      	ldr	r3, [sp, #24]
 8010dee:	4303      	orrs	r3, r0
 8010df0:	f47f aebe 	bne.w	8010b70 <_strtod_l+0x88>
 8010df4:	2900      	cmp	r1, #0
 8010df6:	f47f aed8 	bne.w	8010baa <_strtod_l+0xc2>
 8010dfa:	2a69      	cmp	r2, #105	; 0x69
 8010dfc:	d027      	beq.n	8010e4e <_strtod_l+0x366>
 8010dfe:	dc24      	bgt.n	8010e4a <_strtod_l+0x362>
 8010e00:	2a49      	cmp	r2, #73	; 0x49
 8010e02:	d024      	beq.n	8010e4e <_strtod_l+0x366>
 8010e04:	2a4e      	cmp	r2, #78	; 0x4e
 8010e06:	f47f aed0 	bne.w	8010baa <_strtod_l+0xc2>
 8010e0a:	499b      	ldr	r1, [pc, #620]	; (8011078 <_strtod_l+0x590>)
 8010e0c:	a817      	add	r0, sp, #92	; 0x5c
 8010e0e:	f000 ff0d 	bl	8011c2c <__match>
 8010e12:	2800      	cmp	r0, #0
 8010e14:	f43f aec9 	beq.w	8010baa <_strtod_l+0xc2>
 8010e18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010e1a:	781b      	ldrb	r3, [r3, #0]
 8010e1c:	2b28      	cmp	r3, #40	; 0x28
 8010e1e:	d12d      	bne.n	8010e7c <_strtod_l+0x394>
 8010e20:	4996      	ldr	r1, [pc, #600]	; (801107c <_strtod_l+0x594>)
 8010e22:	aa1a      	add	r2, sp, #104	; 0x68
 8010e24:	a817      	add	r0, sp, #92	; 0x5c
 8010e26:	f000 ff15 	bl	8011c54 <__hexnan>
 8010e2a:	2805      	cmp	r0, #5
 8010e2c:	d126      	bne.n	8010e7c <_strtod_l+0x394>
 8010e2e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010e30:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8010e34:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8010e38:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8010e3c:	e698      	b.n	8010b70 <_strtod_l+0x88>
 8010e3e:	250a      	movs	r5, #10
 8010e40:	fb05 250c 	mla	r5, r5, ip, r2
 8010e44:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 8010e48:	e7b9      	b.n	8010dbe <_strtod_l+0x2d6>
 8010e4a:	2a6e      	cmp	r2, #110	; 0x6e
 8010e4c:	e7db      	b.n	8010e06 <_strtod_l+0x31e>
 8010e4e:	498c      	ldr	r1, [pc, #560]	; (8011080 <_strtod_l+0x598>)
 8010e50:	a817      	add	r0, sp, #92	; 0x5c
 8010e52:	f000 feeb 	bl	8011c2c <__match>
 8010e56:	2800      	cmp	r0, #0
 8010e58:	f43f aea7 	beq.w	8010baa <_strtod_l+0xc2>
 8010e5c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010e5e:	4989      	ldr	r1, [pc, #548]	; (8011084 <_strtod_l+0x59c>)
 8010e60:	3b01      	subs	r3, #1
 8010e62:	a817      	add	r0, sp, #92	; 0x5c
 8010e64:	9317      	str	r3, [sp, #92]	; 0x5c
 8010e66:	f000 fee1 	bl	8011c2c <__match>
 8010e6a:	b910      	cbnz	r0, 8010e72 <_strtod_l+0x38a>
 8010e6c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010e6e:	3301      	adds	r3, #1
 8010e70:	9317      	str	r3, [sp, #92]	; 0x5c
 8010e72:	f8df 9224 	ldr.w	r9, [pc, #548]	; 8011098 <_strtod_l+0x5b0>
 8010e76:	f04f 0800 	mov.w	r8, #0
 8010e7a:	e679      	b.n	8010b70 <_strtod_l+0x88>
 8010e7c:	4882      	ldr	r0, [pc, #520]	; (8011088 <_strtod_l+0x5a0>)
 8010e7e:	f001 fc6f 	bl	8012760 <nan>
 8010e82:	ed8d 0b04 	vstr	d0, [sp, #16]
 8010e86:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8010e8a:	e671      	b.n	8010b70 <_strtod_l+0x88>
 8010e8c:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 8010e90:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8010e94:	eba5 020b 	sub.w	r2, r5, fp
 8010e98:	2e00      	cmp	r6, #0
 8010e9a:	bf08      	it	eq
 8010e9c:	461e      	moveq	r6, r3
 8010e9e:	2b10      	cmp	r3, #16
 8010ea0:	ed8d 7b08 	vstr	d7, [sp, #32]
 8010ea4:	9206      	str	r2, [sp, #24]
 8010ea6:	461a      	mov	r2, r3
 8010ea8:	bfa8      	it	ge
 8010eaa:	2210      	movge	r2, #16
 8010eac:	2b09      	cmp	r3, #9
 8010eae:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8010eb2:	dd0e      	ble.n	8010ed2 <_strtod_l+0x3ea>
 8010eb4:	4975      	ldr	r1, [pc, #468]	; (801108c <_strtod_l+0x5a4>)
 8010eb6:	eddd 7a04 	vldr	s15, [sp, #16]
 8010eba:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8010ebe:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 8010ec2:	ed9d 5b08 	vldr	d5, [sp, #32]
 8010ec6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8010eca:	eea5 7b06 	vfma.f64	d7, d5, d6
 8010ece:	ec59 8b17 	vmov	r8, r9, d7
 8010ed2:	2b0f      	cmp	r3, #15
 8010ed4:	dc37      	bgt.n	8010f46 <_strtod_l+0x45e>
 8010ed6:	9906      	ldr	r1, [sp, #24]
 8010ed8:	2900      	cmp	r1, #0
 8010eda:	f43f ae49 	beq.w	8010b70 <_strtod_l+0x88>
 8010ede:	dd23      	ble.n	8010f28 <_strtod_l+0x440>
 8010ee0:	2916      	cmp	r1, #22
 8010ee2:	dc0b      	bgt.n	8010efc <_strtod_l+0x414>
 8010ee4:	4b69      	ldr	r3, [pc, #420]	; (801108c <_strtod_l+0x5a4>)
 8010ee6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8010eea:	ed93 7b00 	vldr	d7, [r3]
 8010eee:	ec49 8b16 	vmov	d6, r8, r9
 8010ef2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010ef6:	ec59 8b17 	vmov	r8, r9, d7
 8010efa:	e639      	b.n	8010b70 <_strtod_l+0x88>
 8010efc:	9806      	ldr	r0, [sp, #24]
 8010efe:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8010f02:	4281      	cmp	r1, r0
 8010f04:	db1f      	blt.n	8010f46 <_strtod_l+0x45e>
 8010f06:	4a61      	ldr	r2, [pc, #388]	; (801108c <_strtod_l+0x5a4>)
 8010f08:	f1c3 030f 	rsb	r3, r3, #15
 8010f0c:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8010f10:	ed91 7b00 	vldr	d7, [r1]
 8010f14:	ec49 8b16 	vmov	d6, r8, r9
 8010f18:	1ac3      	subs	r3, r0, r3
 8010f1a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8010f1e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010f22:	ed92 6b00 	vldr	d6, [r2]
 8010f26:	e7e4      	b.n	8010ef2 <_strtod_l+0x40a>
 8010f28:	9906      	ldr	r1, [sp, #24]
 8010f2a:	3116      	adds	r1, #22
 8010f2c:	db0b      	blt.n	8010f46 <_strtod_l+0x45e>
 8010f2e:	4b57      	ldr	r3, [pc, #348]	; (801108c <_strtod_l+0x5a4>)
 8010f30:	ebab 0505 	sub.w	r5, fp, r5
 8010f34:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8010f38:	ed95 7b00 	vldr	d7, [r5]
 8010f3c:	ec49 8b16 	vmov	d6, r8, r9
 8010f40:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8010f44:	e7d7      	b.n	8010ef6 <_strtod_l+0x40e>
 8010f46:	9906      	ldr	r1, [sp, #24]
 8010f48:	1a9a      	subs	r2, r3, r2
 8010f4a:	440a      	add	r2, r1
 8010f4c:	2a00      	cmp	r2, #0
 8010f4e:	dd74      	ble.n	801103a <_strtod_l+0x552>
 8010f50:	f012 000f 	ands.w	r0, r2, #15
 8010f54:	d00a      	beq.n	8010f6c <_strtod_l+0x484>
 8010f56:	494d      	ldr	r1, [pc, #308]	; (801108c <_strtod_l+0x5a4>)
 8010f58:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8010f5c:	ed91 7b00 	vldr	d7, [r1]
 8010f60:	ec49 8b16 	vmov	d6, r8, r9
 8010f64:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010f68:	ec59 8b17 	vmov	r8, r9, d7
 8010f6c:	f032 020f 	bics.w	r2, r2, #15
 8010f70:	d04f      	beq.n	8011012 <_strtod_l+0x52a>
 8010f72:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8010f76:	dd22      	ble.n	8010fbe <_strtod_l+0x4d6>
 8010f78:	2500      	movs	r5, #0
 8010f7a:	462e      	mov	r6, r5
 8010f7c:	950a      	str	r5, [sp, #40]	; 0x28
 8010f7e:	462f      	mov	r7, r5
 8010f80:	2322      	movs	r3, #34	; 0x22
 8010f82:	f8df 9114 	ldr.w	r9, [pc, #276]	; 8011098 <_strtod_l+0x5b0>
 8010f86:	6023      	str	r3, [r4, #0]
 8010f88:	f04f 0800 	mov.w	r8, #0
 8010f8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	f43f adee 	beq.w	8010b70 <_strtod_l+0x88>
 8010f94:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010f96:	4620      	mov	r0, r4
 8010f98:	f000 ff56 	bl	8011e48 <_Bfree>
 8010f9c:	4639      	mov	r1, r7
 8010f9e:	4620      	mov	r0, r4
 8010fa0:	f000 ff52 	bl	8011e48 <_Bfree>
 8010fa4:	4631      	mov	r1, r6
 8010fa6:	4620      	mov	r0, r4
 8010fa8:	f000 ff4e 	bl	8011e48 <_Bfree>
 8010fac:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010fae:	4620      	mov	r0, r4
 8010fb0:	f000 ff4a 	bl	8011e48 <_Bfree>
 8010fb4:	4629      	mov	r1, r5
 8010fb6:	4620      	mov	r0, r4
 8010fb8:	f000 ff46 	bl	8011e48 <_Bfree>
 8010fbc:	e5d8      	b.n	8010b70 <_strtod_l+0x88>
 8010fbe:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8010fc2:	2000      	movs	r0, #0
 8010fc4:	4f32      	ldr	r7, [pc, #200]	; (8011090 <_strtod_l+0x5a8>)
 8010fc6:	1112      	asrs	r2, r2, #4
 8010fc8:	4601      	mov	r1, r0
 8010fca:	2a01      	cmp	r2, #1
 8010fcc:	dc24      	bgt.n	8011018 <_strtod_l+0x530>
 8010fce:	b108      	cbz	r0, 8010fd4 <_strtod_l+0x4ec>
 8010fd0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8010fd4:	4a2e      	ldr	r2, [pc, #184]	; (8011090 <_strtod_l+0x5a8>)
 8010fd6:	482f      	ldr	r0, [pc, #188]	; (8011094 <_strtod_l+0x5ac>)
 8010fd8:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8010fdc:	ed91 7b00 	vldr	d7, [r1]
 8010fe0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8010fe4:	ec49 8b16 	vmov	d6, r8, r9
 8010fe8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010fec:	ed8d 7b04 	vstr	d7, [sp, #16]
 8010ff0:	9905      	ldr	r1, [sp, #20]
 8010ff2:	4a29      	ldr	r2, [pc, #164]	; (8011098 <_strtod_l+0x5b0>)
 8010ff4:	400a      	ands	r2, r1
 8010ff6:	4282      	cmp	r2, r0
 8010ff8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8010ffc:	d8bc      	bhi.n	8010f78 <_strtod_l+0x490>
 8010ffe:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8011002:	4282      	cmp	r2, r0
 8011004:	bf86      	itte	hi
 8011006:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 801109c <_strtod_l+0x5b4>
 801100a:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 801100e:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8011012:	2200      	movs	r2, #0
 8011014:	9204      	str	r2, [sp, #16]
 8011016:	e07f      	b.n	8011118 <_strtod_l+0x630>
 8011018:	f012 0f01 	tst.w	r2, #1
 801101c:	d00a      	beq.n	8011034 <_strtod_l+0x54c>
 801101e:	eb07 00c1 	add.w	r0, r7, r1, lsl #3
 8011022:	ed90 7b00 	vldr	d7, [r0]
 8011026:	ed9d 6b04 	vldr	d6, [sp, #16]
 801102a:	ee26 7b07 	vmul.f64	d7, d6, d7
 801102e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011032:	2001      	movs	r0, #1
 8011034:	3101      	adds	r1, #1
 8011036:	1052      	asrs	r2, r2, #1
 8011038:	e7c7      	b.n	8010fca <_strtod_l+0x4e2>
 801103a:	d0ea      	beq.n	8011012 <_strtod_l+0x52a>
 801103c:	4252      	negs	r2, r2
 801103e:	f012 000f 	ands.w	r0, r2, #15
 8011042:	d00a      	beq.n	801105a <_strtod_l+0x572>
 8011044:	4911      	ldr	r1, [pc, #68]	; (801108c <_strtod_l+0x5a4>)
 8011046:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801104a:	ed91 7b00 	vldr	d7, [r1]
 801104e:	ec49 8b16 	vmov	d6, r8, r9
 8011052:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8011056:	ec59 8b17 	vmov	r8, r9, d7
 801105a:	1112      	asrs	r2, r2, #4
 801105c:	d0d9      	beq.n	8011012 <_strtod_l+0x52a>
 801105e:	2a1f      	cmp	r2, #31
 8011060:	dd1e      	ble.n	80110a0 <_strtod_l+0x5b8>
 8011062:	2500      	movs	r5, #0
 8011064:	462e      	mov	r6, r5
 8011066:	950a      	str	r5, [sp, #40]	; 0x28
 8011068:	462f      	mov	r7, r5
 801106a:	2322      	movs	r3, #34	; 0x22
 801106c:	f04f 0800 	mov.w	r8, #0
 8011070:	f04f 0900 	mov.w	r9, #0
 8011074:	6023      	str	r3, [r4, #0]
 8011076:	e789      	b.n	8010f8c <_strtod_l+0x4a4>
 8011078:	08013925 	.word	0x08013925
 801107c:	0801393c 	.word	0x0801393c
 8011080:	0801391c 	.word	0x0801391c
 8011084:	0801391f 	.word	0x0801391f
 8011088:	08013bb7 	.word	0x08013bb7
 801108c:	08013aa8 	.word	0x08013aa8
 8011090:	08013a80 	.word	0x08013a80
 8011094:	7ca00000 	.word	0x7ca00000
 8011098:	7ff00000 	.word	0x7ff00000
 801109c:	7fefffff 	.word	0x7fefffff
 80110a0:	f012 0110 	ands.w	r1, r2, #16
 80110a4:	bf18      	it	ne
 80110a6:	216a      	movne	r1, #106	; 0x6a
 80110a8:	e9cd 8908 	strd	r8, r9, [sp, #32]
 80110ac:	9104      	str	r1, [sp, #16]
 80110ae:	49c0      	ldr	r1, [pc, #768]	; (80113b0 <_strtod_l+0x8c8>)
 80110b0:	2000      	movs	r0, #0
 80110b2:	07d7      	lsls	r7, r2, #31
 80110b4:	d508      	bpl.n	80110c8 <_strtod_l+0x5e0>
 80110b6:	ed9d 6b08 	vldr	d6, [sp, #32]
 80110ba:	ed91 7b00 	vldr	d7, [r1]
 80110be:	ee26 7b07 	vmul.f64	d7, d6, d7
 80110c2:	ed8d 7b08 	vstr	d7, [sp, #32]
 80110c6:	2001      	movs	r0, #1
 80110c8:	1052      	asrs	r2, r2, #1
 80110ca:	f101 0108 	add.w	r1, r1, #8
 80110ce:	d1f0      	bne.n	80110b2 <_strtod_l+0x5ca>
 80110d0:	b108      	cbz	r0, 80110d6 <_strtod_l+0x5ee>
 80110d2:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 80110d6:	9a04      	ldr	r2, [sp, #16]
 80110d8:	b1ba      	cbz	r2, 801110a <_strtod_l+0x622>
 80110da:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80110de:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 80110e2:	2a00      	cmp	r2, #0
 80110e4:	4649      	mov	r1, r9
 80110e6:	dd10      	ble.n	801110a <_strtod_l+0x622>
 80110e8:	2a1f      	cmp	r2, #31
 80110ea:	f340 8132 	ble.w	8011352 <_strtod_l+0x86a>
 80110ee:	2a34      	cmp	r2, #52	; 0x34
 80110f0:	bfde      	ittt	le
 80110f2:	3a20      	suble	r2, #32
 80110f4:	f04f 30ff 	movle.w	r0, #4294967295	; 0xffffffff
 80110f8:	fa00 f202 	lslle.w	r2, r0, r2
 80110fc:	f04f 0800 	mov.w	r8, #0
 8011100:	bfcc      	ite	gt
 8011102:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8011106:	ea02 0901 	andle.w	r9, r2, r1
 801110a:	ec49 8b17 	vmov	d7, r8, r9
 801110e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011116:	d0a4      	beq.n	8011062 <_strtod_l+0x57a>
 8011118:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801111a:	9200      	str	r2, [sp, #0]
 801111c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801111e:	4632      	mov	r2, r6
 8011120:	4620      	mov	r0, r4
 8011122:	f000 fefd 	bl	8011f20 <__s2b>
 8011126:	900a      	str	r0, [sp, #40]	; 0x28
 8011128:	2800      	cmp	r0, #0
 801112a:	f43f af25 	beq.w	8010f78 <_strtod_l+0x490>
 801112e:	9b06      	ldr	r3, [sp, #24]
 8011130:	ebab 0505 	sub.w	r5, fp, r5
 8011134:	2b00      	cmp	r3, #0
 8011136:	bfb4      	ite	lt
 8011138:	462b      	movlt	r3, r5
 801113a:	2300      	movge	r3, #0
 801113c:	930c      	str	r3, [sp, #48]	; 0x30
 801113e:	9b06      	ldr	r3, [sp, #24]
 8011140:	ed9f 9b95 	vldr	d9, [pc, #596]	; 8011398 <_strtod_l+0x8b0>
 8011144:	ed9f ab96 	vldr	d10, [pc, #600]	; 80113a0 <_strtod_l+0x8b8>
 8011148:	ed9f bb97 	vldr	d11, [pc, #604]	; 80113a8 <_strtod_l+0x8c0>
 801114c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011150:	2500      	movs	r5, #0
 8011152:	9312      	str	r3, [sp, #72]	; 0x48
 8011154:	462e      	mov	r6, r5
 8011156:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011158:	4620      	mov	r0, r4
 801115a:	6859      	ldr	r1, [r3, #4]
 801115c:	f000 fe34 	bl	8011dc8 <_Balloc>
 8011160:	4607      	mov	r7, r0
 8011162:	2800      	cmp	r0, #0
 8011164:	f43f af0c 	beq.w	8010f80 <_strtod_l+0x498>
 8011168:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801116a:	691a      	ldr	r2, [r3, #16]
 801116c:	3202      	adds	r2, #2
 801116e:	f103 010c 	add.w	r1, r3, #12
 8011172:	0092      	lsls	r2, r2, #2
 8011174:	300c      	adds	r0, #12
 8011176:	f7ff fbcd 	bl	8010914 <memcpy>
 801117a:	ec49 8b10 	vmov	d0, r8, r9
 801117e:	aa1a      	add	r2, sp, #104	; 0x68
 8011180:	a919      	add	r1, sp, #100	; 0x64
 8011182:	4620      	mov	r0, r4
 8011184:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8011188:	f001 fa06 	bl	8012598 <__d2b>
 801118c:	9018      	str	r0, [sp, #96]	; 0x60
 801118e:	2800      	cmp	r0, #0
 8011190:	f43f aef6 	beq.w	8010f80 <_strtod_l+0x498>
 8011194:	2101      	movs	r1, #1
 8011196:	4620      	mov	r0, r4
 8011198:	f000 ff5c 	bl	8012054 <__i2b>
 801119c:	4606      	mov	r6, r0
 801119e:	2800      	cmp	r0, #0
 80111a0:	f43f aeee 	beq.w	8010f80 <_strtod_l+0x498>
 80111a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80111a6:	991a      	ldr	r1, [sp, #104]	; 0x68
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	bfab      	itete	ge
 80111ac:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80111ae:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80111b0:	f8dd a048 	ldrge.w	sl, [sp, #72]	; 0x48
 80111b4:	f8dd b030 	ldrlt.w	fp, [sp, #48]	; 0x30
 80111b8:	bfac      	ite	ge
 80111ba:	eb03 0b02 	addge.w	fp, r3, r2
 80111be:	eba2 0a03 	sublt.w	sl, r2, r3
 80111c2:	9a04      	ldr	r2, [sp, #16]
 80111c4:	1a9b      	subs	r3, r3, r2
 80111c6:	440b      	add	r3, r1
 80111c8:	4a7a      	ldr	r2, [pc, #488]	; (80113b4 <_strtod_l+0x8cc>)
 80111ca:	3b01      	subs	r3, #1
 80111cc:	4293      	cmp	r3, r2
 80111ce:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 80111d2:	f280 80d1 	bge.w	8011378 <_strtod_l+0x890>
 80111d6:	1ad2      	subs	r2, r2, r3
 80111d8:	2a1f      	cmp	r2, #31
 80111da:	eba1 0102 	sub.w	r1, r1, r2
 80111de:	f04f 0001 	mov.w	r0, #1
 80111e2:	f300 80bd 	bgt.w	8011360 <_strtod_l+0x878>
 80111e6:	fa00 f302 	lsl.w	r3, r0, r2
 80111ea:	930e      	str	r3, [sp, #56]	; 0x38
 80111ec:	2300      	movs	r3, #0
 80111ee:	930d      	str	r3, [sp, #52]	; 0x34
 80111f0:	eb0b 0301 	add.w	r3, fp, r1
 80111f4:	9a04      	ldr	r2, [sp, #16]
 80111f6:	459b      	cmp	fp, r3
 80111f8:	448a      	add	sl, r1
 80111fa:	4492      	add	sl, r2
 80111fc:	465a      	mov	r2, fp
 80111fe:	bfa8      	it	ge
 8011200:	461a      	movge	r2, r3
 8011202:	4552      	cmp	r2, sl
 8011204:	bfa8      	it	ge
 8011206:	4652      	movge	r2, sl
 8011208:	2a00      	cmp	r2, #0
 801120a:	bfc2      	ittt	gt
 801120c:	1a9b      	subgt	r3, r3, r2
 801120e:	ebaa 0a02 	subgt.w	sl, sl, r2
 8011212:	ebab 0b02 	subgt.w	fp, fp, r2
 8011216:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011218:	2a00      	cmp	r2, #0
 801121a:	dd18      	ble.n	801124e <_strtod_l+0x766>
 801121c:	4631      	mov	r1, r6
 801121e:	4620      	mov	r0, r4
 8011220:	9315      	str	r3, [sp, #84]	; 0x54
 8011222:	f000 ffd3 	bl	80121cc <__pow5mult>
 8011226:	4606      	mov	r6, r0
 8011228:	2800      	cmp	r0, #0
 801122a:	f43f aea9 	beq.w	8010f80 <_strtod_l+0x498>
 801122e:	4601      	mov	r1, r0
 8011230:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8011232:	4620      	mov	r0, r4
 8011234:	f000 ff24 	bl	8012080 <__multiply>
 8011238:	9014      	str	r0, [sp, #80]	; 0x50
 801123a:	2800      	cmp	r0, #0
 801123c:	f43f aea0 	beq.w	8010f80 <_strtod_l+0x498>
 8011240:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011242:	4620      	mov	r0, r4
 8011244:	f000 fe00 	bl	8011e48 <_Bfree>
 8011248:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801124a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801124c:	9218      	str	r2, [sp, #96]	; 0x60
 801124e:	2b00      	cmp	r3, #0
 8011250:	f300 8097 	bgt.w	8011382 <_strtod_l+0x89a>
 8011254:	9b06      	ldr	r3, [sp, #24]
 8011256:	2b00      	cmp	r3, #0
 8011258:	dd08      	ble.n	801126c <_strtod_l+0x784>
 801125a:	4639      	mov	r1, r7
 801125c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801125e:	4620      	mov	r0, r4
 8011260:	f000 ffb4 	bl	80121cc <__pow5mult>
 8011264:	4607      	mov	r7, r0
 8011266:	2800      	cmp	r0, #0
 8011268:	f43f ae8a 	beq.w	8010f80 <_strtod_l+0x498>
 801126c:	f1ba 0f00 	cmp.w	sl, #0
 8011270:	dd08      	ble.n	8011284 <_strtod_l+0x79c>
 8011272:	4639      	mov	r1, r7
 8011274:	4652      	mov	r2, sl
 8011276:	4620      	mov	r0, r4
 8011278:	f001 f802 	bl	8012280 <__lshift>
 801127c:	4607      	mov	r7, r0
 801127e:	2800      	cmp	r0, #0
 8011280:	f43f ae7e 	beq.w	8010f80 <_strtod_l+0x498>
 8011284:	f1bb 0f00 	cmp.w	fp, #0
 8011288:	dd08      	ble.n	801129c <_strtod_l+0x7b4>
 801128a:	4631      	mov	r1, r6
 801128c:	465a      	mov	r2, fp
 801128e:	4620      	mov	r0, r4
 8011290:	f000 fff6 	bl	8012280 <__lshift>
 8011294:	4606      	mov	r6, r0
 8011296:	2800      	cmp	r0, #0
 8011298:	f43f ae72 	beq.w	8010f80 <_strtod_l+0x498>
 801129c:	9918      	ldr	r1, [sp, #96]	; 0x60
 801129e:	463a      	mov	r2, r7
 80112a0:	4620      	mov	r0, r4
 80112a2:	f001 f875 	bl	8012390 <__mdiff>
 80112a6:	4605      	mov	r5, r0
 80112a8:	2800      	cmp	r0, #0
 80112aa:	f43f ae69 	beq.w	8010f80 <_strtod_l+0x498>
 80112ae:	2300      	movs	r3, #0
 80112b0:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 80112b4:	60c3      	str	r3, [r0, #12]
 80112b6:	4631      	mov	r1, r6
 80112b8:	f001 f84e 	bl	8012358 <__mcmp>
 80112bc:	2800      	cmp	r0, #0
 80112be:	da7f      	bge.n	80113c0 <_strtod_l+0x8d8>
 80112c0:	ea5a 0308 	orrs.w	r3, sl, r8
 80112c4:	f040 80a5 	bne.w	8011412 <_strtod_l+0x92a>
 80112c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	f040 80a0 	bne.w	8011412 <_strtod_l+0x92a>
 80112d2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80112d6:	0d1b      	lsrs	r3, r3, #20
 80112d8:	051b      	lsls	r3, r3, #20
 80112da:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80112de:	f240 8098 	bls.w	8011412 <_strtod_l+0x92a>
 80112e2:	696b      	ldr	r3, [r5, #20]
 80112e4:	b91b      	cbnz	r3, 80112ee <_strtod_l+0x806>
 80112e6:	692b      	ldr	r3, [r5, #16]
 80112e8:	2b01      	cmp	r3, #1
 80112ea:	f340 8092 	ble.w	8011412 <_strtod_l+0x92a>
 80112ee:	4629      	mov	r1, r5
 80112f0:	2201      	movs	r2, #1
 80112f2:	4620      	mov	r0, r4
 80112f4:	f000 ffc4 	bl	8012280 <__lshift>
 80112f8:	4631      	mov	r1, r6
 80112fa:	4605      	mov	r5, r0
 80112fc:	f001 f82c 	bl	8012358 <__mcmp>
 8011300:	2800      	cmp	r0, #0
 8011302:	f340 8086 	ble.w	8011412 <_strtod_l+0x92a>
 8011306:	9904      	ldr	r1, [sp, #16]
 8011308:	4a2b      	ldr	r2, [pc, #172]	; (80113b8 <_strtod_l+0x8d0>)
 801130a:	464b      	mov	r3, r9
 801130c:	2900      	cmp	r1, #0
 801130e:	f000 80a1 	beq.w	8011454 <_strtod_l+0x96c>
 8011312:	ea02 0109 	and.w	r1, r2, r9
 8011316:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801131a:	f300 809b 	bgt.w	8011454 <_strtod_l+0x96c>
 801131e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8011322:	f77f aea2 	ble.w	801106a <_strtod_l+0x582>
 8011326:	4a25      	ldr	r2, [pc, #148]	; (80113bc <_strtod_l+0x8d4>)
 8011328:	2300      	movs	r3, #0
 801132a:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 801132e:	ed9d 6b10 	vldr	d6, [sp, #64]	; 0x40
 8011332:	ec49 8b17 	vmov	d7, r8, r9
 8011336:	ee27 7b06 	vmul.f64	d7, d7, d6
 801133a:	ed8d 7b04 	vstr	d7, [sp, #16]
 801133e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8011342:	4313      	orrs	r3, r2
 8011344:	bf08      	it	eq
 8011346:	2322      	moveq	r3, #34	; 0x22
 8011348:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801134c:	bf08      	it	eq
 801134e:	6023      	streq	r3, [r4, #0]
 8011350:	e620      	b.n	8010f94 <_strtod_l+0x4ac>
 8011352:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8011356:	fa01 f202 	lsl.w	r2, r1, r2
 801135a:	ea02 0808 	and.w	r8, r2, r8
 801135e:	e6d4      	b.n	801110a <_strtod_l+0x622>
 8011360:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8011364:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8011368:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 801136c:	33e2      	adds	r3, #226	; 0xe2
 801136e:	fa00 f303 	lsl.w	r3, r0, r3
 8011372:	e9cd 300d 	strd	r3, r0, [sp, #52]	; 0x34
 8011376:	e73b      	b.n	80111f0 <_strtod_l+0x708>
 8011378:	2000      	movs	r0, #0
 801137a:	2301      	movs	r3, #1
 801137c:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
 8011380:	e736      	b.n	80111f0 <_strtod_l+0x708>
 8011382:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011384:	461a      	mov	r2, r3
 8011386:	4620      	mov	r0, r4
 8011388:	f000 ff7a 	bl	8012280 <__lshift>
 801138c:	9018      	str	r0, [sp, #96]	; 0x60
 801138e:	2800      	cmp	r0, #0
 8011390:	f47f af60 	bne.w	8011254 <_strtod_l+0x76c>
 8011394:	e5f4      	b.n	8010f80 <_strtod_l+0x498>
 8011396:	bf00      	nop
 8011398:	94a03595 	.word	0x94a03595
 801139c:	3fcfffff 	.word	0x3fcfffff
 80113a0:	94a03595 	.word	0x94a03595
 80113a4:	3fdfffff 	.word	0x3fdfffff
 80113a8:	35afe535 	.word	0x35afe535
 80113ac:	3fe00000 	.word	0x3fe00000
 80113b0:	08013950 	.word	0x08013950
 80113b4:	fffffc02 	.word	0xfffffc02
 80113b8:	7ff00000 	.word	0x7ff00000
 80113bc:	39500000 	.word	0x39500000
 80113c0:	46cb      	mov	fp, r9
 80113c2:	d165      	bne.n	8011490 <_strtod_l+0x9a8>
 80113c4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80113c8:	f1ba 0f00 	cmp.w	sl, #0
 80113cc:	d02a      	beq.n	8011424 <_strtod_l+0x93c>
 80113ce:	4aaa      	ldr	r2, [pc, #680]	; (8011678 <_strtod_l+0xb90>)
 80113d0:	4293      	cmp	r3, r2
 80113d2:	d12b      	bne.n	801142c <_strtod_l+0x944>
 80113d4:	9b04      	ldr	r3, [sp, #16]
 80113d6:	4641      	mov	r1, r8
 80113d8:	b1fb      	cbz	r3, 801141a <_strtod_l+0x932>
 80113da:	4aa8      	ldr	r2, [pc, #672]	; (801167c <_strtod_l+0xb94>)
 80113dc:	ea09 0202 	and.w	r2, r9, r2
 80113e0:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80113e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80113e8:	d81a      	bhi.n	8011420 <_strtod_l+0x938>
 80113ea:	0d12      	lsrs	r2, r2, #20
 80113ec:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80113f0:	fa00 f303 	lsl.w	r3, r0, r3
 80113f4:	4299      	cmp	r1, r3
 80113f6:	d119      	bne.n	801142c <_strtod_l+0x944>
 80113f8:	4ba1      	ldr	r3, [pc, #644]	; (8011680 <_strtod_l+0xb98>)
 80113fa:	459b      	cmp	fp, r3
 80113fc:	d102      	bne.n	8011404 <_strtod_l+0x91c>
 80113fe:	3101      	adds	r1, #1
 8011400:	f43f adbe 	beq.w	8010f80 <_strtod_l+0x498>
 8011404:	4b9d      	ldr	r3, [pc, #628]	; (801167c <_strtod_l+0xb94>)
 8011406:	ea0b 0303 	and.w	r3, fp, r3
 801140a:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 801140e:	f04f 0800 	mov.w	r8, #0
 8011412:	9b04      	ldr	r3, [sp, #16]
 8011414:	2b00      	cmp	r3, #0
 8011416:	d186      	bne.n	8011326 <_strtod_l+0x83e>
 8011418:	e5bc      	b.n	8010f94 <_strtod_l+0x4ac>
 801141a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801141e:	e7e9      	b.n	80113f4 <_strtod_l+0x90c>
 8011420:	4603      	mov	r3, r0
 8011422:	e7e7      	b.n	80113f4 <_strtod_l+0x90c>
 8011424:	ea53 0308 	orrs.w	r3, r3, r8
 8011428:	f43f af6d 	beq.w	8011306 <_strtod_l+0x81e>
 801142c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801142e:	b1db      	cbz	r3, 8011468 <_strtod_l+0x980>
 8011430:	ea13 0f0b 	tst.w	r3, fp
 8011434:	d0ed      	beq.n	8011412 <_strtod_l+0x92a>
 8011436:	9a04      	ldr	r2, [sp, #16]
 8011438:	4640      	mov	r0, r8
 801143a:	4649      	mov	r1, r9
 801143c:	f1ba 0f00 	cmp.w	sl, #0
 8011440:	d016      	beq.n	8011470 <_strtod_l+0x988>
 8011442:	f7ff fb37 	bl	8010ab4 <sulp>
 8011446:	ed9d 7b08 	vldr	d7, [sp, #32]
 801144a:	ee37 7b00 	vadd.f64	d7, d7, d0
 801144e:	ec59 8b17 	vmov	r8, r9, d7
 8011452:	e7de      	b.n	8011412 <_strtod_l+0x92a>
 8011454:	4013      	ands	r3, r2
 8011456:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801145a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801145e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8011462:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8011466:	e7d4      	b.n	8011412 <_strtod_l+0x92a>
 8011468:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801146a:	ea13 0f08 	tst.w	r3, r8
 801146e:	e7e1      	b.n	8011434 <_strtod_l+0x94c>
 8011470:	f7ff fb20 	bl	8010ab4 <sulp>
 8011474:	ed9d 7b08 	vldr	d7, [sp, #32]
 8011478:	ee37 7b40 	vsub.f64	d7, d7, d0
 801147c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011480:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011488:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 801148c:	d1c1      	bne.n	8011412 <_strtod_l+0x92a>
 801148e:	e5ec      	b.n	801106a <_strtod_l+0x582>
 8011490:	4631      	mov	r1, r6
 8011492:	4628      	mov	r0, r5
 8011494:	f001 f8dc 	bl	8012650 <__ratio>
 8011498:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 801149c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80114a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114a4:	d867      	bhi.n	8011576 <_strtod_l+0xa8e>
 80114a6:	f1ba 0f00 	cmp.w	sl, #0
 80114aa:	d044      	beq.n	8011536 <_strtod_l+0xa4e>
 80114ac:	4b75      	ldr	r3, [pc, #468]	; (8011684 <_strtod_l+0xb9c>)
 80114ae:	2200      	movs	r2, #0
 80114b0:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 80114b4:	4971      	ldr	r1, [pc, #452]	; (801167c <_strtod_l+0xb94>)
 80114b6:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8011690 <_strtod_l+0xba8>
 80114ba:	ea0b 0001 	and.w	r0, fp, r1
 80114be:	4560      	cmp	r0, ip
 80114c0:	900d      	str	r0, [sp, #52]	; 0x34
 80114c2:	f040 808b 	bne.w	80115dc <_strtod_l+0xaf4>
 80114c6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80114ca:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 80114ce:	ec49 8b10 	vmov	d0, r8, r9
 80114d2:	ec43 2b1c 	vmov	d12, r2, r3
 80114d6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80114da:	f000 ffe1 	bl	80124a0 <__ulp>
 80114de:	ec49 8b1d 	vmov	d13, r8, r9
 80114e2:	eeac db00 	vfma.f64	d13, d12, d0
 80114e6:	ed8d db0e 	vstr	d13, [sp, #56]	; 0x38
 80114ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80114ec:	4963      	ldr	r1, [pc, #396]	; (801167c <_strtod_l+0xb94>)
 80114ee:	4a66      	ldr	r2, [pc, #408]	; (8011688 <_strtod_l+0xba0>)
 80114f0:	4019      	ands	r1, r3
 80114f2:	4291      	cmp	r1, r2
 80114f4:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 80114f8:	d947      	bls.n	801158a <_strtod_l+0xaa2>
 80114fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80114fc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8011500:	4293      	cmp	r3, r2
 8011502:	d103      	bne.n	801150c <_strtod_l+0xa24>
 8011504:	9b08      	ldr	r3, [sp, #32]
 8011506:	3301      	adds	r3, #1
 8011508:	f43f ad3a 	beq.w	8010f80 <_strtod_l+0x498>
 801150c:	f8df 9170 	ldr.w	r9, [pc, #368]	; 8011680 <_strtod_l+0xb98>
 8011510:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8011514:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011516:	4620      	mov	r0, r4
 8011518:	f000 fc96 	bl	8011e48 <_Bfree>
 801151c:	4639      	mov	r1, r7
 801151e:	4620      	mov	r0, r4
 8011520:	f000 fc92 	bl	8011e48 <_Bfree>
 8011524:	4631      	mov	r1, r6
 8011526:	4620      	mov	r0, r4
 8011528:	f000 fc8e 	bl	8011e48 <_Bfree>
 801152c:	4629      	mov	r1, r5
 801152e:	4620      	mov	r0, r4
 8011530:	f000 fc8a 	bl	8011e48 <_Bfree>
 8011534:	e60f      	b.n	8011156 <_strtod_l+0x66e>
 8011536:	f1b8 0f00 	cmp.w	r8, #0
 801153a:	d112      	bne.n	8011562 <_strtod_l+0xa7a>
 801153c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011540:	b9b3      	cbnz	r3, 8011570 <_strtod_l+0xa88>
 8011542:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8011546:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801154a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801154e:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8011552:	d401      	bmi.n	8011558 <_strtod_l+0xa70>
 8011554:	ee20 8b08 	vmul.f64	d8, d0, d8
 8011558:	eeb1 7b48 	vneg.f64	d7, d8
 801155c:	ec53 2b17 	vmov	r2, r3, d7
 8011560:	e7a8      	b.n	80114b4 <_strtod_l+0x9cc>
 8011562:	f1b8 0f01 	cmp.w	r8, #1
 8011566:	d103      	bne.n	8011570 <_strtod_l+0xa88>
 8011568:	f1b9 0f00 	cmp.w	r9, #0
 801156c:	f43f ad7d 	beq.w	801106a <_strtod_l+0x582>
 8011570:	4b46      	ldr	r3, [pc, #280]	; (801168c <_strtod_l+0xba4>)
 8011572:	2200      	movs	r2, #0
 8011574:	e79c      	b.n	80114b0 <_strtod_l+0x9c8>
 8011576:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 801157a:	ee20 8b08 	vmul.f64	d8, d0, d8
 801157e:	f1ba 0f00 	cmp.w	sl, #0
 8011582:	d0e9      	beq.n	8011558 <_strtod_l+0xa70>
 8011584:	ec53 2b18 	vmov	r2, r3, d8
 8011588:	e794      	b.n	80114b4 <_strtod_l+0x9cc>
 801158a:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801158e:	9b04      	ldr	r3, [sp, #16]
 8011590:	2b00      	cmp	r3, #0
 8011592:	d1bf      	bne.n	8011514 <_strtod_l+0xa2c>
 8011594:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8011598:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801159a:	0d1b      	lsrs	r3, r3, #20
 801159c:	051b      	lsls	r3, r3, #20
 801159e:	429a      	cmp	r2, r3
 80115a0:	d1b8      	bne.n	8011514 <_strtod_l+0xa2c>
 80115a2:	ec51 0b18 	vmov	r0, r1, d8
 80115a6:	f7ef f887 	bl	80006b8 <__aeabi_d2lz>
 80115aa:	f7ef f83f 	bl	800062c <__aeabi_l2d>
 80115ae:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80115b2:	ec41 0b17 	vmov	d7, r0, r1
 80115b6:	ea43 0308 	orr.w	r3, r3, r8
 80115ba:	ea53 030a 	orrs.w	r3, r3, sl
 80115be:	ee38 8b47 	vsub.f64	d8, d8, d7
 80115c2:	d03e      	beq.n	8011642 <_strtod_l+0xb5a>
 80115c4:	eeb4 8bca 	vcmpe.f64	d8, d10
 80115c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115cc:	f53f ace2 	bmi.w	8010f94 <_strtod_l+0x4ac>
 80115d0:	eeb4 8bcb 	vcmpe.f64	d8, d11
 80115d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115d8:	dd9c      	ble.n	8011514 <_strtod_l+0xa2c>
 80115da:	e4db      	b.n	8010f94 <_strtod_l+0x4ac>
 80115dc:	9904      	ldr	r1, [sp, #16]
 80115de:	b301      	cbz	r1, 8011622 <_strtod_l+0xb3a>
 80115e0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80115e2:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 80115e6:	d81c      	bhi.n	8011622 <_strtod_l+0xb3a>
 80115e8:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8011670 <_strtod_l+0xb88>
 80115ec:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80115f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115f4:	d811      	bhi.n	801161a <_strtod_l+0xb32>
 80115f6:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 80115fa:	ee18 3a10 	vmov	r3, s16
 80115fe:	2b01      	cmp	r3, #1
 8011600:	bf38      	it	cc
 8011602:	2301      	movcc	r3, #1
 8011604:	ee08 3a10 	vmov	s16, r3
 8011608:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 801160c:	f1ba 0f00 	cmp.w	sl, #0
 8011610:	d114      	bne.n	801163c <_strtod_l+0xb54>
 8011612:	eeb1 7b48 	vneg.f64	d7, d8
 8011616:	ec53 2b17 	vmov	r2, r3, d7
 801161a:	980d      	ldr	r0, [sp, #52]	; 0x34
 801161c:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 8011620:	1a0b      	subs	r3, r1, r0
 8011622:	ed9d 0b08 	vldr	d0, [sp, #32]
 8011626:	ec43 2b1c 	vmov	d12, r2, r3
 801162a:	f000 ff39 	bl	80124a0 <__ulp>
 801162e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8011632:	eeac 7b00 	vfma.f64	d7, d12, d0
 8011636:	ec59 8b17 	vmov	r8, r9, d7
 801163a:	e7a8      	b.n	801158e <_strtod_l+0xaa6>
 801163c:	ec53 2b18 	vmov	r2, r3, d8
 8011640:	e7eb      	b.n	801161a <_strtod_l+0xb32>
 8011642:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8011646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801164a:	f57f af63 	bpl.w	8011514 <_strtod_l+0xa2c>
 801164e:	e4a1      	b.n	8010f94 <_strtod_l+0x4ac>
 8011650:	2300      	movs	r3, #0
 8011652:	930b      	str	r3, [sp, #44]	; 0x2c
 8011654:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8011656:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011658:	6013      	str	r3, [r2, #0]
 801165a:	f7ff ba8d 	b.w	8010b78 <_strtod_l+0x90>
 801165e:	2a65      	cmp	r2, #101	; 0x65
 8011660:	f43f ab89 	beq.w	8010d76 <_strtod_l+0x28e>
 8011664:	2a45      	cmp	r2, #69	; 0x45
 8011666:	f43f ab86 	beq.w	8010d76 <_strtod_l+0x28e>
 801166a:	2101      	movs	r1, #1
 801166c:	f7ff bbbe 	b.w	8010dec <_strtod_l+0x304>
 8011670:	ffc00000 	.word	0xffc00000
 8011674:	41dfffff 	.word	0x41dfffff
 8011678:	000fffff 	.word	0x000fffff
 801167c:	7ff00000 	.word	0x7ff00000
 8011680:	7fefffff 	.word	0x7fefffff
 8011684:	3ff00000 	.word	0x3ff00000
 8011688:	7c9fffff 	.word	0x7c9fffff
 801168c:	bff00000 	.word	0xbff00000
 8011690:	7fe00000 	.word	0x7fe00000

08011694 <strtod>:
 8011694:	460a      	mov	r2, r1
 8011696:	4601      	mov	r1, r0
 8011698:	4802      	ldr	r0, [pc, #8]	; (80116a4 <strtod+0x10>)
 801169a:	4b03      	ldr	r3, [pc, #12]	; (80116a8 <strtod+0x14>)
 801169c:	6800      	ldr	r0, [r0, #0]
 801169e:	f7ff ba23 	b.w	8010ae8 <_strtod_l>
 80116a2:	bf00      	nop
 80116a4:	20000220 	.word	0x20000220
 80116a8:	20000288 	.word	0x20000288

080116ac <rshift>:
 80116ac:	6903      	ldr	r3, [r0, #16]
 80116ae:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80116b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80116b6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80116ba:	f100 0414 	add.w	r4, r0, #20
 80116be:	dd45      	ble.n	801174c <rshift+0xa0>
 80116c0:	f011 011f 	ands.w	r1, r1, #31
 80116c4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80116c8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80116cc:	d10c      	bne.n	80116e8 <rshift+0x3c>
 80116ce:	f100 0710 	add.w	r7, r0, #16
 80116d2:	4629      	mov	r1, r5
 80116d4:	42b1      	cmp	r1, r6
 80116d6:	d334      	bcc.n	8011742 <rshift+0x96>
 80116d8:	1a9b      	subs	r3, r3, r2
 80116da:	009b      	lsls	r3, r3, #2
 80116dc:	1eea      	subs	r2, r5, #3
 80116de:	4296      	cmp	r6, r2
 80116e0:	bf38      	it	cc
 80116e2:	2300      	movcc	r3, #0
 80116e4:	4423      	add	r3, r4
 80116e6:	e015      	b.n	8011714 <rshift+0x68>
 80116e8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80116ec:	f1c1 0820 	rsb	r8, r1, #32
 80116f0:	40cf      	lsrs	r7, r1
 80116f2:	f105 0e04 	add.w	lr, r5, #4
 80116f6:	46a1      	mov	r9, r4
 80116f8:	4576      	cmp	r6, lr
 80116fa:	46f4      	mov	ip, lr
 80116fc:	d815      	bhi.n	801172a <rshift+0x7e>
 80116fe:	1a9b      	subs	r3, r3, r2
 8011700:	009a      	lsls	r2, r3, #2
 8011702:	3a04      	subs	r2, #4
 8011704:	3501      	adds	r5, #1
 8011706:	42ae      	cmp	r6, r5
 8011708:	bf38      	it	cc
 801170a:	2200      	movcc	r2, #0
 801170c:	18a3      	adds	r3, r4, r2
 801170e:	50a7      	str	r7, [r4, r2]
 8011710:	b107      	cbz	r7, 8011714 <rshift+0x68>
 8011712:	3304      	adds	r3, #4
 8011714:	1b1a      	subs	r2, r3, r4
 8011716:	42a3      	cmp	r3, r4
 8011718:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801171c:	bf08      	it	eq
 801171e:	2300      	moveq	r3, #0
 8011720:	6102      	str	r2, [r0, #16]
 8011722:	bf08      	it	eq
 8011724:	6143      	streq	r3, [r0, #20]
 8011726:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801172a:	f8dc c000 	ldr.w	ip, [ip]
 801172e:	fa0c fc08 	lsl.w	ip, ip, r8
 8011732:	ea4c 0707 	orr.w	r7, ip, r7
 8011736:	f849 7b04 	str.w	r7, [r9], #4
 801173a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801173e:	40cf      	lsrs	r7, r1
 8011740:	e7da      	b.n	80116f8 <rshift+0x4c>
 8011742:	f851 cb04 	ldr.w	ip, [r1], #4
 8011746:	f847 cf04 	str.w	ip, [r7, #4]!
 801174a:	e7c3      	b.n	80116d4 <rshift+0x28>
 801174c:	4623      	mov	r3, r4
 801174e:	e7e1      	b.n	8011714 <rshift+0x68>

08011750 <__hexdig_fun>:
 8011750:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8011754:	2b09      	cmp	r3, #9
 8011756:	d802      	bhi.n	801175e <__hexdig_fun+0xe>
 8011758:	3820      	subs	r0, #32
 801175a:	b2c0      	uxtb	r0, r0
 801175c:	4770      	bx	lr
 801175e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8011762:	2b05      	cmp	r3, #5
 8011764:	d801      	bhi.n	801176a <__hexdig_fun+0x1a>
 8011766:	3847      	subs	r0, #71	; 0x47
 8011768:	e7f7      	b.n	801175a <__hexdig_fun+0xa>
 801176a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801176e:	2b05      	cmp	r3, #5
 8011770:	d801      	bhi.n	8011776 <__hexdig_fun+0x26>
 8011772:	3827      	subs	r0, #39	; 0x27
 8011774:	e7f1      	b.n	801175a <__hexdig_fun+0xa>
 8011776:	2000      	movs	r0, #0
 8011778:	4770      	bx	lr
	...

0801177c <__gethex>:
 801177c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011780:	ed2d 8b02 	vpush	{d8}
 8011784:	b089      	sub	sp, #36	; 0x24
 8011786:	ee08 0a10 	vmov	s16, r0
 801178a:	9304      	str	r3, [sp, #16]
 801178c:	4bbc      	ldr	r3, [pc, #752]	; (8011a80 <__gethex+0x304>)
 801178e:	681b      	ldr	r3, [r3, #0]
 8011790:	9301      	str	r3, [sp, #4]
 8011792:	4618      	mov	r0, r3
 8011794:	468b      	mov	fp, r1
 8011796:	4690      	mov	r8, r2
 8011798:	f7ee fd5c 	bl	8000254 <strlen>
 801179c:	9b01      	ldr	r3, [sp, #4]
 801179e:	f8db 2000 	ldr.w	r2, [fp]
 80117a2:	4403      	add	r3, r0
 80117a4:	4682      	mov	sl, r0
 80117a6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80117aa:	9305      	str	r3, [sp, #20]
 80117ac:	1c93      	adds	r3, r2, #2
 80117ae:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80117b2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80117b6:	32fe      	adds	r2, #254	; 0xfe
 80117b8:	18d1      	adds	r1, r2, r3
 80117ba:	461f      	mov	r7, r3
 80117bc:	f813 0b01 	ldrb.w	r0, [r3], #1
 80117c0:	9100      	str	r1, [sp, #0]
 80117c2:	2830      	cmp	r0, #48	; 0x30
 80117c4:	d0f8      	beq.n	80117b8 <__gethex+0x3c>
 80117c6:	f7ff ffc3 	bl	8011750 <__hexdig_fun>
 80117ca:	4604      	mov	r4, r0
 80117cc:	2800      	cmp	r0, #0
 80117ce:	d13a      	bne.n	8011846 <__gethex+0xca>
 80117d0:	9901      	ldr	r1, [sp, #4]
 80117d2:	4652      	mov	r2, sl
 80117d4:	4638      	mov	r0, r7
 80117d6:	f000 ffcb 	bl	8012770 <strncmp>
 80117da:	4605      	mov	r5, r0
 80117dc:	2800      	cmp	r0, #0
 80117de:	d168      	bne.n	80118b2 <__gethex+0x136>
 80117e0:	f817 000a 	ldrb.w	r0, [r7, sl]
 80117e4:	eb07 060a 	add.w	r6, r7, sl
 80117e8:	f7ff ffb2 	bl	8011750 <__hexdig_fun>
 80117ec:	2800      	cmp	r0, #0
 80117ee:	d062      	beq.n	80118b6 <__gethex+0x13a>
 80117f0:	4633      	mov	r3, r6
 80117f2:	7818      	ldrb	r0, [r3, #0]
 80117f4:	2830      	cmp	r0, #48	; 0x30
 80117f6:	461f      	mov	r7, r3
 80117f8:	f103 0301 	add.w	r3, r3, #1
 80117fc:	d0f9      	beq.n	80117f2 <__gethex+0x76>
 80117fe:	f7ff ffa7 	bl	8011750 <__hexdig_fun>
 8011802:	2301      	movs	r3, #1
 8011804:	fab0 f480 	clz	r4, r0
 8011808:	0964      	lsrs	r4, r4, #5
 801180a:	4635      	mov	r5, r6
 801180c:	9300      	str	r3, [sp, #0]
 801180e:	463a      	mov	r2, r7
 8011810:	4616      	mov	r6, r2
 8011812:	3201      	adds	r2, #1
 8011814:	7830      	ldrb	r0, [r6, #0]
 8011816:	f7ff ff9b 	bl	8011750 <__hexdig_fun>
 801181a:	2800      	cmp	r0, #0
 801181c:	d1f8      	bne.n	8011810 <__gethex+0x94>
 801181e:	9901      	ldr	r1, [sp, #4]
 8011820:	4652      	mov	r2, sl
 8011822:	4630      	mov	r0, r6
 8011824:	f000 ffa4 	bl	8012770 <strncmp>
 8011828:	b980      	cbnz	r0, 801184c <__gethex+0xd0>
 801182a:	b94d      	cbnz	r5, 8011840 <__gethex+0xc4>
 801182c:	eb06 050a 	add.w	r5, r6, sl
 8011830:	462a      	mov	r2, r5
 8011832:	4616      	mov	r6, r2
 8011834:	3201      	adds	r2, #1
 8011836:	7830      	ldrb	r0, [r6, #0]
 8011838:	f7ff ff8a 	bl	8011750 <__hexdig_fun>
 801183c:	2800      	cmp	r0, #0
 801183e:	d1f8      	bne.n	8011832 <__gethex+0xb6>
 8011840:	1bad      	subs	r5, r5, r6
 8011842:	00ad      	lsls	r5, r5, #2
 8011844:	e004      	b.n	8011850 <__gethex+0xd4>
 8011846:	2400      	movs	r4, #0
 8011848:	4625      	mov	r5, r4
 801184a:	e7e0      	b.n	801180e <__gethex+0x92>
 801184c:	2d00      	cmp	r5, #0
 801184e:	d1f7      	bne.n	8011840 <__gethex+0xc4>
 8011850:	7833      	ldrb	r3, [r6, #0]
 8011852:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8011856:	2b50      	cmp	r3, #80	; 0x50
 8011858:	d13b      	bne.n	80118d2 <__gethex+0x156>
 801185a:	7873      	ldrb	r3, [r6, #1]
 801185c:	2b2b      	cmp	r3, #43	; 0x2b
 801185e:	d02c      	beq.n	80118ba <__gethex+0x13e>
 8011860:	2b2d      	cmp	r3, #45	; 0x2d
 8011862:	d02e      	beq.n	80118c2 <__gethex+0x146>
 8011864:	1c71      	adds	r1, r6, #1
 8011866:	f04f 0900 	mov.w	r9, #0
 801186a:	7808      	ldrb	r0, [r1, #0]
 801186c:	f7ff ff70 	bl	8011750 <__hexdig_fun>
 8011870:	1e43      	subs	r3, r0, #1
 8011872:	b2db      	uxtb	r3, r3
 8011874:	2b18      	cmp	r3, #24
 8011876:	d82c      	bhi.n	80118d2 <__gethex+0x156>
 8011878:	f1a0 0210 	sub.w	r2, r0, #16
 801187c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011880:	f7ff ff66 	bl	8011750 <__hexdig_fun>
 8011884:	1e43      	subs	r3, r0, #1
 8011886:	b2db      	uxtb	r3, r3
 8011888:	2b18      	cmp	r3, #24
 801188a:	d91d      	bls.n	80118c8 <__gethex+0x14c>
 801188c:	f1b9 0f00 	cmp.w	r9, #0
 8011890:	d000      	beq.n	8011894 <__gethex+0x118>
 8011892:	4252      	negs	r2, r2
 8011894:	4415      	add	r5, r2
 8011896:	f8cb 1000 	str.w	r1, [fp]
 801189a:	b1e4      	cbz	r4, 80118d6 <__gethex+0x15a>
 801189c:	9b00      	ldr	r3, [sp, #0]
 801189e:	2b00      	cmp	r3, #0
 80118a0:	bf14      	ite	ne
 80118a2:	2700      	movne	r7, #0
 80118a4:	2706      	moveq	r7, #6
 80118a6:	4638      	mov	r0, r7
 80118a8:	b009      	add	sp, #36	; 0x24
 80118aa:	ecbd 8b02 	vpop	{d8}
 80118ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118b2:	463e      	mov	r6, r7
 80118b4:	4625      	mov	r5, r4
 80118b6:	2401      	movs	r4, #1
 80118b8:	e7ca      	b.n	8011850 <__gethex+0xd4>
 80118ba:	f04f 0900 	mov.w	r9, #0
 80118be:	1cb1      	adds	r1, r6, #2
 80118c0:	e7d3      	b.n	801186a <__gethex+0xee>
 80118c2:	f04f 0901 	mov.w	r9, #1
 80118c6:	e7fa      	b.n	80118be <__gethex+0x142>
 80118c8:	230a      	movs	r3, #10
 80118ca:	fb03 0202 	mla	r2, r3, r2, r0
 80118ce:	3a10      	subs	r2, #16
 80118d0:	e7d4      	b.n	801187c <__gethex+0x100>
 80118d2:	4631      	mov	r1, r6
 80118d4:	e7df      	b.n	8011896 <__gethex+0x11a>
 80118d6:	1bf3      	subs	r3, r6, r7
 80118d8:	3b01      	subs	r3, #1
 80118da:	4621      	mov	r1, r4
 80118dc:	2b07      	cmp	r3, #7
 80118de:	dc0b      	bgt.n	80118f8 <__gethex+0x17c>
 80118e0:	ee18 0a10 	vmov	r0, s16
 80118e4:	f000 fa70 	bl	8011dc8 <_Balloc>
 80118e8:	4604      	mov	r4, r0
 80118ea:	b940      	cbnz	r0, 80118fe <__gethex+0x182>
 80118ec:	4b65      	ldr	r3, [pc, #404]	; (8011a84 <__gethex+0x308>)
 80118ee:	4602      	mov	r2, r0
 80118f0:	21de      	movs	r1, #222	; 0xde
 80118f2:	4865      	ldr	r0, [pc, #404]	; (8011a88 <__gethex+0x30c>)
 80118f4:	f000 ff5c 	bl	80127b0 <__assert_func>
 80118f8:	3101      	adds	r1, #1
 80118fa:	105b      	asrs	r3, r3, #1
 80118fc:	e7ee      	b.n	80118dc <__gethex+0x160>
 80118fe:	f100 0914 	add.w	r9, r0, #20
 8011902:	f04f 0b00 	mov.w	fp, #0
 8011906:	f1ca 0301 	rsb	r3, sl, #1
 801190a:	f8cd 9008 	str.w	r9, [sp, #8]
 801190e:	f8cd b000 	str.w	fp, [sp]
 8011912:	9306      	str	r3, [sp, #24]
 8011914:	42b7      	cmp	r7, r6
 8011916:	d340      	bcc.n	801199a <__gethex+0x21e>
 8011918:	9802      	ldr	r0, [sp, #8]
 801191a:	9b00      	ldr	r3, [sp, #0]
 801191c:	f840 3b04 	str.w	r3, [r0], #4
 8011920:	eba0 0009 	sub.w	r0, r0, r9
 8011924:	1080      	asrs	r0, r0, #2
 8011926:	0146      	lsls	r6, r0, #5
 8011928:	6120      	str	r0, [r4, #16]
 801192a:	4618      	mov	r0, r3
 801192c:	f000 fb42 	bl	8011fb4 <__hi0bits>
 8011930:	1a30      	subs	r0, r6, r0
 8011932:	f8d8 6000 	ldr.w	r6, [r8]
 8011936:	42b0      	cmp	r0, r6
 8011938:	dd63      	ble.n	8011a02 <__gethex+0x286>
 801193a:	1b87      	subs	r7, r0, r6
 801193c:	4639      	mov	r1, r7
 801193e:	4620      	mov	r0, r4
 8011940:	f000 fedd 	bl	80126fe <__any_on>
 8011944:	4682      	mov	sl, r0
 8011946:	b1a8      	cbz	r0, 8011974 <__gethex+0x1f8>
 8011948:	1e7b      	subs	r3, r7, #1
 801194a:	1159      	asrs	r1, r3, #5
 801194c:	f003 021f 	and.w	r2, r3, #31
 8011950:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8011954:	f04f 0a01 	mov.w	sl, #1
 8011958:	fa0a f202 	lsl.w	r2, sl, r2
 801195c:	420a      	tst	r2, r1
 801195e:	d009      	beq.n	8011974 <__gethex+0x1f8>
 8011960:	4553      	cmp	r3, sl
 8011962:	dd05      	ble.n	8011970 <__gethex+0x1f4>
 8011964:	1eb9      	subs	r1, r7, #2
 8011966:	4620      	mov	r0, r4
 8011968:	f000 fec9 	bl	80126fe <__any_on>
 801196c:	2800      	cmp	r0, #0
 801196e:	d145      	bne.n	80119fc <__gethex+0x280>
 8011970:	f04f 0a02 	mov.w	sl, #2
 8011974:	4639      	mov	r1, r7
 8011976:	4620      	mov	r0, r4
 8011978:	f7ff fe98 	bl	80116ac <rshift>
 801197c:	443d      	add	r5, r7
 801197e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011982:	42ab      	cmp	r3, r5
 8011984:	da4c      	bge.n	8011a20 <__gethex+0x2a4>
 8011986:	ee18 0a10 	vmov	r0, s16
 801198a:	4621      	mov	r1, r4
 801198c:	f000 fa5c 	bl	8011e48 <_Bfree>
 8011990:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011992:	2300      	movs	r3, #0
 8011994:	6013      	str	r3, [r2, #0]
 8011996:	27a3      	movs	r7, #163	; 0xa3
 8011998:	e785      	b.n	80118a6 <__gethex+0x12a>
 801199a:	1e73      	subs	r3, r6, #1
 801199c:	9a05      	ldr	r2, [sp, #20]
 801199e:	9303      	str	r3, [sp, #12]
 80119a0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80119a4:	4293      	cmp	r3, r2
 80119a6:	d019      	beq.n	80119dc <__gethex+0x260>
 80119a8:	f1bb 0f20 	cmp.w	fp, #32
 80119ac:	d107      	bne.n	80119be <__gethex+0x242>
 80119ae:	9b02      	ldr	r3, [sp, #8]
 80119b0:	9a00      	ldr	r2, [sp, #0]
 80119b2:	f843 2b04 	str.w	r2, [r3], #4
 80119b6:	9302      	str	r3, [sp, #8]
 80119b8:	2300      	movs	r3, #0
 80119ba:	9300      	str	r3, [sp, #0]
 80119bc:	469b      	mov	fp, r3
 80119be:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80119c2:	f7ff fec5 	bl	8011750 <__hexdig_fun>
 80119c6:	9b00      	ldr	r3, [sp, #0]
 80119c8:	f000 000f 	and.w	r0, r0, #15
 80119cc:	fa00 f00b 	lsl.w	r0, r0, fp
 80119d0:	4303      	orrs	r3, r0
 80119d2:	9300      	str	r3, [sp, #0]
 80119d4:	f10b 0b04 	add.w	fp, fp, #4
 80119d8:	9b03      	ldr	r3, [sp, #12]
 80119da:	e00d      	b.n	80119f8 <__gethex+0x27c>
 80119dc:	9b03      	ldr	r3, [sp, #12]
 80119de:	9a06      	ldr	r2, [sp, #24]
 80119e0:	4413      	add	r3, r2
 80119e2:	42bb      	cmp	r3, r7
 80119e4:	d3e0      	bcc.n	80119a8 <__gethex+0x22c>
 80119e6:	4618      	mov	r0, r3
 80119e8:	9901      	ldr	r1, [sp, #4]
 80119ea:	9307      	str	r3, [sp, #28]
 80119ec:	4652      	mov	r2, sl
 80119ee:	f000 febf 	bl	8012770 <strncmp>
 80119f2:	9b07      	ldr	r3, [sp, #28]
 80119f4:	2800      	cmp	r0, #0
 80119f6:	d1d7      	bne.n	80119a8 <__gethex+0x22c>
 80119f8:	461e      	mov	r6, r3
 80119fa:	e78b      	b.n	8011914 <__gethex+0x198>
 80119fc:	f04f 0a03 	mov.w	sl, #3
 8011a00:	e7b8      	b.n	8011974 <__gethex+0x1f8>
 8011a02:	da0a      	bge.n	8011a1a <__gethex+0x29e>
 8011a04:	1a37      	subs	r7, r6, r0
 8011a06:	4621      	mov	r1, r4
 8011a08:	ee18 0a10 	vmov	r0, s16
 8011a0c:	463a      	mov	r2, r7
 8011a0e:	f000 fc37 	bl	8012280 <__lshift>
 8011a12:	1bed      	subs	r5, r5, r7
 8011a14:	4604      	mov	r4, r0
 8011a16:	f100 0914 	add.w	r9, r0, #20
 8011a1a:	f04f 0a00 	mov.w	sl, #0
 8011a1e:	e7ae      	b.n	801197e <__gethex+0x202>
 8011a20:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8011a24:	42a8      	cmp	r0, r5
 8011a26:	dd72      	ble.n	8011b0e <__gethex+0x392>
 8011a28:	1b45      	subs	r5, r0, r5
 8011a2a:	42ae      	cmp	r6, r5
 8011a2c:	dc36      	bgt.n	8011a9c <__gethex+0x320>
 8011a2e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011a32:	2b02      	cmp	r3, #2
 8011a34:	d02a      	beq.n	8011a8c <__gethex+0x310>
 8011a36:	2b03      	cmp	r3, #3
 8011a38:	d02c      	beq.n	8011a94 <__gethex+0x318>
 8011a3a:	2b01      	cmp	r3, #1
 8011a3c:	d115      	bne.n	8011a6a <__gethex+0x2ee>
 8011a3e:	42ae      	cmp	r6, r5
 8011a40:	d113      	bne.n	8011a6a <__gethex+0x2ee>
 8011a42:	2e01      	cmp	r6, #1
 8011a44:	d10b      	bne.n	8011a5e <__gethex+0x2e2>
 8011a46:	9a04      	ldr	r2, [sp, #16]
 8011a48:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011a4c:	6013      	str	r3, [r2, #0]
 8011a4e:	2301      	movs	r3, #1
 8011a50:	6123      	str	r3, [r4, #16]
 8011a52:	f8c9 3000 	str.w	r3, [r9]
 8011a56:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011a58:	2762      	movs	r7, #98	; 0x62
 8011a5a:	601c      	str	r4, [r3, #0]
 8011a5c:	e723      	b.n	80118a6 <__gethex+0x12a>
 8011a5e:	1e71      	subs	r1, r6, #1
 8011a60:	4620      	mov	r0, r4
 8011a62:	f000 fe4c 	bl	80126fe <__any_on>
 8011a66:	2800      	cmp	r0, #0
 8011a68:	d1ed      	bne.n	8011a46 <__gethex+0x2ca>
 8011a6a:	ee18 0a10 	vmov	r0, s16
 8011a6e:	4621      	mov	r1, r4
 8011a70:	f000 f9ea 	bl	8011e48 <_Bfree>
 8011a74:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011a76:	2300      	movs	r3, #0
 8011a78:	6013      	str	r3, [r2, #0]
 8011a7a:	2750      	movs	r7, #80	; 0x50
 8011a7c:	e713      	b.n	80118a6 <__gethex+0x12a>
 8011a7e:	bf00      	nop
 8011a80:	080139f4 	.word	0x080139f4
 8011a84:	08013978 	.word	0x08013978
 8011a88:	08013989 	.word	0x08013989
 8011a8c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d1eb      	bne.n	8011a6a <__gethex+0x2ee>
 8011a92:	e7d8      	b.n	8011a46 <__gethex+0x2ca>
 8011a94:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d1d5      	bne.n	8011a46 <__gethex+0x2ca>
 8011a9a:	e7e6      	b.n	8011a6a <__gethex+0x2ee>
 8011a9c:	1e6f      	subs	r7, r5, #1
 8011a9e:	f1ba 0f00 	cmp.w	sl, #0
 8011aa2:	d131      	bne.n	8011b08 <__gethex+0x38c>
 8011aa4:	b127      	cbz	r7, 8011ab0 <__gethex+0x334>
 8011aa6:	4639      	mov	r1, r7
 8011aa8:	4620      	mov	r0, r4
 8011aaa:	f000 fe28 	bl	80126fe <__any_on>
 8011aae:	4682      	mov	sl, r0
 8011ab0:	117b      	asrs	r3, r7, #5
 8011ab2:	2101      	movs	r1, #1
 8011ab4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8011ab8:	f007 071f 	and.w	r7, r7, #31
 8011abc:	fa01 f707 	lsl.w	r7, r1, r7
 8011ac0:	421f      	tst	r7, r3
 8011ac2:	4629      	mov	r1, r5
 8011ac4:	4620      	mov	r0, r4
 8011ac6:	bf18      	it	ne
 8011ac8:	f04a 0a02 	orrne.w	sl, sl, #2
 8011acc:	1b76      	subs	r6, r6, r5
 8011ace:	f7ff fded 	bl	80116ac <rshift>
 8011ad2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8011ad6:	2702      	movs	r7, #2
 8011ad8:	f1ba 0f00 	cmp.w	sl, #0
 8011adc:	d048      	beq.n	8011b70 <__gethex+0x3f4>
 8011ade:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011ae2:	2b02      	cmp	r3, #2
 8011ae4:	d015      	beq.n	8011b12 <__gethex+0x396>
 8011ae6:	2b03      	cmp	r3, #3
 8011ae8:	d017      	beq.n	8011b1a <__gethex+0x39e>
 8011aea:	2b01      	cmp	r3, #1
 8011aec:	d109      	bne.n	8011b02 <__gethex+0x386>
 8011aee:	f01a 0f02 	tst.w	sl, #2
 8011af2:	d006      	beq.n	8011b02 <__gethex+0x386>
 8011af4:	f8d9 0000 	ldr.w	r0, [r9]
 8011af8:	ea4a 0a00 	orr.w	sl, sl, r0
 8011afc:	f01a 0f01 	tst.w	sl, #1
 8011b00:	d10e      	bne.n	8011b20 <__gethex+0x3a4>
 8011b02:	f047 0710 	orr.w	r7, r7, #16
 8011b06:	e033      	b.n	8011b70 <__gethex+0x3f4>
 8011b08:	f04f 0a01 	mov.w	sl, #1
 8011b0c:	e7d0      	b.n	8011ab0 <__gethex+0x334>
 8011b0e:	2701      	movs	r7, #1
 8011b10:	e7e2      	b.n	8011ad8 <__gethex+0x35c>
 8011b12:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011b14:	f1c3 0301 	rsb	r3, r3, #1
 8011b18:	9315      	str	r3, [sp, #84]	; 0x54
 8011b1a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011b1c:	2b00      	cmp	r3, #0
 8011b1e:	d0f0      	beq.n	8011b02 <__gethex+0x386>
 8011b20:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011b24:	f104 0314 	add.w	r3, r4, #20
 8011b28:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8011b2c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8011b30:	f04f 0c00 	mov.w	ip, #0
 8011b34:	4618      	mov	r0, r3
 8011b36:	f853 2b04 	ldr.w	r2, [r3], #4
 8011b3a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8011b3e:	d01c      	beq.n	8011b7a <__gethex+0x3fe>
 8011b40:	3201      	adds	r2, #1
 8011b42:	6002      	str	r2, [r0, #0]
 8011b44:	2f02      	cmp	r7, #2
 8011b46:	f104 0314 	add.w	r3, r4, #20
 8011b4a:	d13f      	bne.n	8011bcc <__gethex+0x450>
 8011b4c:	f8d8 2000 	ldr.w	r2, [r8]
 8011b50:	3a01      	subs	r2, #1
 8011b52:	42b2      	cmp	r2, r6
 8011b54:	d10a      	bne.n	8011b6c <__gethex+0x3f0>
 8011b56:	1171      	asrs	r1, r6, #5
 8011b58:	2201      	movs	r2, #1
 8011b5a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011b5e:	f006 061f 	and.w	r6, r6, #31
 8011b62:	fa02 f606 	lsl.w	r6, r2, r6
 8011b66:	421e      	tst	r6, r3
 8011b68:	bf18      	it	ne
 8011b6a:	4617      	movne	r7, r2
 8011b6c:	f047 0720 	orr.w	r7, r7, #32
 8011b70:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011b72:	601c      	str	r4, [r3, #0]
 8011b74:	9b04      	ldr	r3, [sp, #16]
 8011b76:	601d      	str	r5, [r3, #0]
 8011b78:	e695      	b.n	80118a6 <__gethex+0x12a>
 8011b7a:	4299      	cmp	r1, r3
 8011b7c:	f843 cc04 	str.w	ip, [r3, #-4]
 8011b80:	d8d8      	bhi.n	8011b34 <__gethex+0x3b8>
 8011b82:	68a3      	ldr	r3, [r4, #8]
 8011b84:	459b      	cmp	fp, r3
 8011b86:	db19      	blt.n	8011bbc <__gethex+0x440>
 8011b88:	6861      	ldr	r1, [r4, #4]
 8011b8a:	ee18 0a10 	vmov	r0, s16
 8011b8e:	3101      	adds	r1, #1
 8011b90:	f000 f91a 	bl	8011dc8 <_Balloc>
 8011b94:	4681      	mov	r9, r0
 8011b96:	b918      	cbnz	r0, 8011ba0 <__gethex+0x424>
 8011b98:	4b1a      	ldr	r3, [pc, #104]	; (8011c04 <__gethex+0x488>)
 8011b9a:	4602      	mov	r2, r0
 8011b9c:	2184      	movs	r1, #132	; 0x84
 8011b9e:	e6a8      	b.n	80118f2 <__gethex+0x176>
 8011ba0:	6922      	ldr	r2, [r4, #16]
 8011ba2:	3202      	adds	r2, #2
 8011ba4:	f104 010c 	add.w	r1, r4, #12
 8011ba8:	0092      	lsls	r2, r2, #2
 8011baa:	300c      	adds	r0, #12
 8011bac:	f7fe feb2 	bl	8010914 <memcpy>
 8011bb0:	4621      	mov	r1, r4
 8011bb2:	ee18 0a10 	vmov	r0, s16
 8011bb6:	f000 f947 	bl	8011e48 <_Bfree>
 8011bba:	464c      	mov	r4, r9
 8011bbc:	6923      	ldr	r3, [r4, #16]
 8011bbe:	1c5a      	adds	r2, r3, #1
 8011bc0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011bc4:	6122      	str	r2, [r4, #16]
 8011bc6:	2201      	movs	r2, #1
 8011bc8:	615a      	str	r2, [r3, #20]
 8011bca:	e7bb      	b.n	8011b44 <__gethex+0x3c8>
 8011bcc:	6922      	ldr	r2, [r4, #16]
 8011bce:	455a      	cmp	r2, fp
 8011bd0:	dd0b      	ble.n	8011bea <__gethex+0x46e>
 8011bd2:	2101      	movs	r1, #1
 8011bd4:	4620      	mov	r0, r4
 8011bd6:	f7ff fd69 	bl	80116ac <rshift>
 8011bda:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011bde:	3501      	adds	r5, #1
 8011be0:	42ab      	cmp	r3, r5
 8011be2:	f6ff aed0 	blt.w	8011986 <__gethex+0x20a>
 8011be6:	2701      	movs	r7, #1
 8011be8:	e7c0      	b.n	8011b6c <__gethex+0x3f0>
 8011bea:	f016 061f 	ands.w	r6, r6, #31
 8011bee:	d0fa      	beq.n	8011be6 <__gethex+0x46a>
 8011bf0:	449a      	add	sl, r3
 8011bf2:	f1c6 0620 	rsb	r6, r6, #32
 8011bf6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8011bfa:	f000 f9db 	bl	8011fb4 <__hi0bits>
 8011bfe:	42b0      	cmp	r0, r6
 8011c00:	dbe7      	blt.n	8011bd2 <__gethex+0x456>
 8011c02:	e7f0      	b.n	8011be6 <__gethex+0x46a>
 8011c04:	08013978 	.word	0x08013978

08011c08 <L_shift>:
 8011c08:	f1c2 0208 	rsb	r2, r2, #8
 8011c0c:	0092      	lsls	r2, r2, #2
 8011c0e:	b570      	push	{r4, r5, r6, lr}
 8011c10:	f1c2 0620 	rsb	r6, r2, #32
 8011c14:	6843      	ldr	r3, [r0, #4]
 8011c16:	6804      	ldr	r4, [r0, #0]
 8011c18:	fa03 f506 	lsl.w	r5, r3, r6
 8011c1c:	432c      	orrs	r4, r5
 8011c1e:	40d3      	lsrs	r3, r2
 8011c20:	6004      	str	r4, [r0, #0]
 8011c22:	f840 3f04 	str.w	r3, [r0, #4]!
 8011c26:	4288      	cmp	r0, r1
 8011c28:	d3f4      	bcc.n	8011c14 <L_shift+0xc>
 8011c2a:	bd70      	pop	{r4, r5, r6, pc}

08011c2c <__match>:
 8011c2c:	b530      	push	{r4, r5, lr}
 8011c2e:	6803      	ldr	r3, [r0, #0]
 8011c30:	3301      	adds	r3, #1
 8011c32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011c36:	b914      	cbnz	r4, 8011c3e <__match+0x12>
 8011c38:	6003      	str	r3, [r0, #0]
 8011c3a:	2001      	movs	r0, #1
 8011c3c:	bd30      	pop	{r4, r5, pc}
 8011c3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011c42:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8011c46:	2d19      	cmp	r5, #25
 8011c48:	bf98      	it	ls
 8011c4a:	3220      	addls	r2, #32
 8011c4c:	42a2      	cmp	r2, r4
 8011c4e:	d0f0      	beq.n	8011c32 <__match+0x6>
 8011c50:	2000      	movs	r0, #0
 8011c52:	e7f3      	b.n	8011c3c <__match+0x10>

08011c54 <__hexnan>:
 8011c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c58:	680b      	ldr	r3, [r1, #0]
 8011c5a:	6801      	ldr	r1, [r0, #0]
 8011c5c:	115e      	asrs	r6, r3, #5
 8011c5e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011c62:	f013 031f 	ands.w	r3, r3, #31
 8011c66:	b087      	sub	sp, #28
 8011c68:	bf18      	it	ne
 8011c6a:	3604      	addne	r6, #4
 8011c6c:	2500      	movs	r5, #0
 8011c6e:	1f37      	subs	r7, r6, #4
 8011c70:	4682      	mov	sl, r0
 8011c72:	4690      	mov	r8, r2
 8011c74:	9301      	str	r3, [sp, #4]
 8011c76:	f846 5c04 	str.w	r5, [r6, #-4]
 8011c7a:	46b9      	mov	r9, r7
 8011c7c:	463c      	mov	r4, r7
 8011c7e:	9502      	str	r5, [sp, #8]
 8011c80:	46ab      	mov	fp, r5
 8011c82:	784a      	ldrb	r2, [r1, #1]
 8011c84:	1c4b      	adds	r3, r1, #1
 8011c86:	9303      	str	r3, [sp, #12]
 8011c88:	b342      	cbz	r2, 8011cdc <__hexnan+0x88>
 8011c8a:	4610      	mov	r0, r2
 8011c8c:	9105      	str	r1, [sp, #20]
 8011c8e:	9204      	str	r2, [sp, #16]
 8011c90:	f7ff fd5e 	bl	8011750 <__hexdig_fun>
 8011c94:	2800      	cmp	r0, #0
 8011c96:	d14f      	bne.n	8011d38 <__hexnan+0xe4>
 8011c98:	9a04      	ldr	r2, [sp, #16]
 8011c9a:	9905      	ldr	r1, [sp, #20]
 8011c9c:	2a20      	cmp	r2, #32
 8011c9e:	d818      	bhi.n	8011cd2 <__hexnan+0x7e>
 8011ca0:	9b02      	ldr	r3, [sp, #8]
 8011ca2:	459b      	cmp	fp, r3
 8011ca4:	dd13      	ble.n	8011cce <__hexnan+0x7a>
 8011ca6:	454c      	cmp	r4, r9
 8011ca8:	d206      	bcs.n	8011cb8 <__hexnan+0x64>
 8011caa:	2d07      	cmp	r5, #7
 8011cac:	dc04      	bgt.n	8011cb8 <__hexnan+0x64>
 8011cae:	462a      	mov	r2, r5
 8011cb0:	4649      	mov	r1, r9
 8011cb2:	4620      	mov	r0, r4
 8011cb4:	f7ff ffa8 	bl	8011c08 <L_shift>
 8011cb8:	4544      	cmp	r4, r8
 8011cba:	d950      	bls.n	8011d5e <__hexnan+0x10a>
 8011cbc:	2300      	movs	r3, #0
 8011cbe:	f1a4 0904 	sub.w	r9, r4, #4
 8011cc2:	f844 3c04 	str.w	r3, [r4, #-4]
 8011cc6:	f8cd b008 	str.w	fp, [sp, #8]
 8011cca:	464c      	mov	r4, r9
 8011ccc:	461d      	mov	r5, r3
 8011cce:	9903      	ldr	r1, [sp, #12]
 8011cd0:	e7d7      	b.n	8011c82 <__hexnan+0x2e>
 8011cd2:	2a29      	cmp	r2, #41	; 0x29
 8011cd4:	d156      	bne.n	8011d84 <__hexnan+0x130>
 8011cd6:	3102      	adds	r1, #2
 8011cd8:	f8ca 1000 	str.w	r1, [sl]
 8011cdc:	f1bb 0f00 	cmp.w	fp, #0
 8011ce0:	d050      	beq.n	8011d84 <__hexnan+0x130>
 8011ce2:	454c      	cmp	r4, r9
 8011ce4:	d206      	bcs.n	8011cf4 <__hexnan+0xa0>
 8011ce6:	2d07      	cmp	r5, #7
 8011ce8:	dc04      	bgt.n	8011cf4 <__hexnan+0xa0>
 8011cea:	462a      	mov	r2, r5
 8011cec:	4649      	mov	r1, r9
 8011cee:	4620      	mov	r0, r4
 8011cf0:	f7ff ff8a 	bl	8011c08 <L_shift>
 8011cf4:	4544      	cmp	r4, r8
 8011cf6:	d934      	bls.n	8011d62 <__hexnan+0x10e>
 8011cf8:	f1a8 0204 	sub.w	r2, r8, #4
 8011cfc:	4623      	mov	r3, r4
 8011cfe:	f853 1b04 	ldr.w	r1, [r3], #4
 8011d02:	f842 1f04 	str.w	r1, [r2, #4]!
 8011d06:	429f      	cmp	r7, r3
 8011d08:	d2f9      	bcs.n	8011cfe <__hexnan+0xaa>
 8011d0a:	1b3b      	subs	r3, r7, r4
 8011d0c:	f023 0303 	bic.w	r3, r3, #3
 8011d10:	3304      	adds	r3, #4
 8011d12:	3401      	adds	r4, #1
 8011d14:	3e03      	subs	r6, #3
 8011d16:	42b4      	cmp	r4, r6
 8011d18:	bf88      	it	hi
 8011d1a:	2304      	movhi	r3, #4
 8011d1c:	4443      	add	r3, r8
 8011d1e:	2200      	movs	r2, #0
 8011d20:	f843 2b04 	str.w	r2, [r3], #4
 8011d24:	429f      	cmp	r7, r3
 8011d26:	d2fb      	bcs.n	8011d20 <__hexnan+0xcc>
 8011d28:	683b      	ldr	r3, [r7, #0]
 8011d2a:	b91b      	cbnz	r3, 8011d34 <__hexnan+0xe0>
 8011d2c:	4547      	cmp	r7, r8
 8011d2e:	d127      	bne.n	8011d80 <__hexnan+0x12c>
 8011d30:	2301      	movs	r3, #1
 8011d32:	603b      	str	r3, [r7, #0]
 8011d34:	2005      	movs	r0, #5
 8011d36:	e026      	b.n	8011d86 <__hexnan+0x132>
 8011d38:	3501      	adds	r5, #1
 8011d3a:	2d08      	cmp	r5, #8
 8011d3c:	f10b 0b01 	add.w	fp, fp, #1
 8011d40:	dd06      	ble.n	8011d50 <__hexnan+0xfc>
 8011d42:	4544      	cmp	r4, r8
 8011d44:	d9c3      	bls.n	8011cce <__hexnan+0x7a>
 8011d46:	2300      	movs	r3, #0
 8011d48:	f844 3c04 	str.w	r3, [r4, #-4]
 8011d4c:	2501      	movs	r5, #1
 8011d4e:	3c04      	subs	r4, #4
 8011d50:	6822      	ldr	r2, [r4, #0]
 8011d52:	f000 000f 	and.w	r0, r0, #15
 8011d56:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8011d5a:	6022      	str	r2, [r4, #0]
 8011d5c:	e7b7      	b.n	8011cce <__hexnan+0x7a>
 8011d5e:	2508      	movs	r5, #8
 8011d60:	e7b5      	b.n	8011cce <__hexnan+0x7a>
 8011d62:	9b01      	ldr	r3, [sp, #4]
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	d0df      	beq.n	8011d28 <__hexnan+0xd4>
 8011d68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011d6c:	f1c3 0320 	rsb	r3, r3, #32
 8011d70:	fa22 f303 	lsr.w	r3, r2, r3
 8011d74:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011d78:	401a      	ands	r2, r3
 8011d7a:	f846 2c04 	str.w	r2, [r6, #-4]
 8011d7e:	e7d3      	b.n	8011d28 <__hexnan+0xd4>
 8011d80:	3f04      	subs	r7, #4
 8011d82:	e7d1      	b.n	8011d28 <__hexnan+0xd4>
 8011d84:	2004      	movs	r0, #4
 8011d86:	b007      	add	sp, #28
 8011d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011d8c <__ascii_mbtowc>:
 8011d8c:	b082      	sub	sp, #8
 8011d8e:	b901      	cbnz	r1, 8011d92 <__ascii_mbtowc+0x6>
 8011d90:	a901      	add	r1, sp, #4
 8011d92:	b142      	cbz	r2, 8011da6 <__ascii_mbtowc+0x1a>
 8011d94:	b14b      	cbz	r3, 8011daa <__ascii_mbtowc+0x1e>
 8011d96:	7813      	ldrb	r3, [r2, #0]
 8011d98:	600b      	str	r3, [r1, #0]
 8011d9a:	7812      	ldrb	r2, [r2, #0]
 8011d9c:	1e10      	subs	r0, r2, #0
 8011d9e:	bf18      	it	ne
 8011da0:	2001      	movne	r0, #1
 8011da2:	b002      	add	sp, #8
 8011da4:	4770      	bx	lr
 8011da6:	4610      	mov	r0, r2
 8011da8:	e7fb      	b.n	8011da2 <__ascii_mbtowc+0x16>
 8011daa:	f06f 0001 	mvn.w	r0, #1
 8011dae:	e7f8      	b.n	8011da2 <__ascii_mbtowc+0x16>

08011db0 <__malloc_lock>:
 8011db0:	4801      	ldr	r0, [pc, #4]	; (8011db8 <__malloc_lock+0x8>)
 8011db2:	f000 bd2e 	b.w	8012812 <__retarget_lock_acquire_recursive>
 8011db6:	bf00      	nop
 8011db8:	200059d8 	.word	0x200059d8

08011dbc <__malloc_unlock>:
 8011dbc:	4801      	ldr	r0, [pc, #4]	; (8011dc4 <__malloc_unlock+0x8>)
 8011dbe:	f000 bd29 	b.w	8012814 <__retarget_lock_release_recursive>
 8011dc2:	bf00      	nop
 8011dc4:	200059d8 	.word	0x200059d8

08011dc8 <_Balloc>:
 8011dc8:	b570      	push	{r4, r5, r6, lr}
 8011dca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011dcc:	4604      	mov	r4, r0
 8011dce:	460d      	mov	r5, r1
 8011dd0:	b976      	cbnz	r6, 8011df0 <_Balloc+0x28>
 8011dd2:	2010      	movs	r0, #16
 8011dd4:	f7fe fd8e 	bl	80108f4 <malloc>
 8011dd8:	4602      	mov	r2, r0
 8011dda:	6260      	str	r0, [r4, #36]	; 0x24
 8011ddc:	b920      	cbnz	r0, 8011de8 <_Balloc+0x20>
 8011dde:	4b18      	ldr	r3, [pc, #96]	; (8011e40 <_Balloc+0x78>)
 8011de0:	4818      	ldr	r0, [pc, #96]	; (8011e44 <_Balloc+0x7c>)
 8011de2:	2166      	movs	r1, #102	; 0x66
 8011de4:	f000 fce4 	bl	80127b0 <__assert_func>
 8011de8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011dec:	6006      	str	r6, [r0, #0]
 8011dee:	60c6      	str	r6, [r0, #12]
 8011df0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011df2:	68f3      	ldr	r3, [r6, #12]
 8011df4:	b183      	cbz	r3, 8011e18 <_Balloc+0x50>
 8011df6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011df8:	68db      	ldr	r3, [r3, #12]
 8011dfa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011dfe:	b9b8      	cbnz	r0, 8011e30 <_Balloc+0x68>
 8011e00:	2101      	movs	r1, #1
 8011e02:	fa01 f605 	lsl.w	r6, r1, r5
 8011e06:	1d72      	adds	r2, r6, #5
 8011e08:	0092      	lsls	r2, r2, #2
 8011e0a:	4620      	mov	r0, r4
 8011e0c:	f000 fc98 	bl	8012740 <_calloc_r>
 8011e10:	b160      	cbz	r0, 8011e2c <_Balloc+0x64>
 8011e12:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011e16:	e00e      	b.n	8011e36 <_Balloc+0x6e>
 8011e18:	2221      	movs	r2, #33	; 0x21
 8011e1a:	2104      	movs	r1, #4
 8011e1c:	4620      	mov	r0, r4
 8011e1e:	f000 fc8f 	bl	8012740 <_calloc_r>
 8011e22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011e24:	60f0      	str	r0, [r6, #12]
 8011e26:	68db      	ldr	r3, [r3, #12]
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d1e4      	bne.n	8011df6 <_Balloc+0x2e>
 8011e2c:	2000      	movs	r0, #0
 8011e2e:	bd70      	pop	{r4, r5, r6, pc}
 8011e30:	6802      	ldr	r2, [r0, #0]
 8011e32:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011e36:	2300      	movs	r3, #0
 8011e38:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011e3c:	e7f7      	b.n	8011e2e <_Balloc+0x66>
 8011e3e:	bf00      	nop
 8011e40:	08013a08 	.word	0x08013a08
 8011e44:	08013a1f 	.word	0x08013a1f

08011e48 <_Bfree>:
 8011e48:	b570      	push	{r4, r5, r6, lr}
 8011e4a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011e4c:	4605      	mov	r5, r0
 8011e4e:	460c      	mov	r4, r1
 8011e50:	b976      	cbnz	r6, 8011e70 <_Bfree+0x28>
 8011e52:	2010      	movs	r0, #16
 8011e54:	f7fe fd4e 	bl	80108f4 <malloc>
 8011e58:	4602      	mov	r2, r0
 8011e5a:	6268      	str	r0, [r5, #36]	; 0x24
 8011e5c:	b920      	cbnz	r0, 8011e68 <_Bfree+0x20>
 8011e5e:	4b09      	ldr	r3, [pc, #36]	; (8011e84 <_Bfree+0x3c>)
 8011e60:	4809      	ldr	r0, [pc, #36]	; (8011e88 <_Bfree+0x40>)
 8011e62:	218a      	movs	r1, #138	; 0x8a
 8011e64:	f000 fca4 	bl	80127b0 <__assert_func>
 8011e68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011e6c:	6006      	str	r6, [r0, #0]
 8011e6e:	60c6      	str	r6, [r0, #12]
 8011e70:	b13c      	cbz	r4, 8011e82 <_Bfree+0x3a>
 8011e72:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011e74:	6862      	ldr	r2, [r4, #4]
 8011e76:	68db      	ldr	r3, [r3, #12]
 8011e78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011e7c:	6021      	str	r1, [r4, #0]
 8011e7e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011e82:	bd70      	pop	{r4, r5, r6, pc}
 8011e84:	08013a08 	.word	0x08013a08
 8011e88:	08013a1f 	.word	0x08013a1f

08011e8c <__multadd>:
 8011e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e90:	690e      	ldr	r6, [r1, #16]
 8011e92:	4607      	mov	r7, r0
 8011e94:	4698      	mov	r8, r3
 8011e96:	460c      	mov	r4, r1
 8011e98:	f101 0014 	add.w	r0, r1, #20
 8011e9c:	2300      	movs	r3, #0
 8011e9e:	6805      	ldr	r5, [r0, #0]
 8011ea0:	b2a9      	uxth	r1, r5
 8011ea2:	fb02 8101 	mla	r1, r2, r1, r8
 8011ea6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8011eaa:	0c2d      	lsrs	r5, r5, #16
 8011eac:	fb02 c505 	mla	r5, r2, r5, ip
 8011eb0:	b289      	uxth	r1, r1
 8011eb2:	3301      	adds	r3, #1
 8011eb4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8011eb8:	429e      	cmp	r6, r3
 8011eba:	f840 1b04 	str.w	r1, [r0], #4
 8011ebe:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8011ec2:	dcec      	bgt.n	8011e9e <__multadd+0x12>
 8011ec4:	f1b8 0f00 	cmp.w	r8, #0
 8011ec8:	d022      	beq.n	8011f10 <__multadd+0x84>
 8011eca:	68a3      	ldr	r3, [r4, #8]
 8011ecc:	42b3      	cmp	r3, r6
 8011ece:	dc19      	bgt.n	8011f04 <__multadd+0x78>
 8011ed0:	6861      	ldr	r1, [r4, #4]
 8011ed2:	4638      	mov	r0, r7
 8011ed4:	3101      	adds	r1, #1
 8011ed6:	f7ff ff77 	bl	8011dc8 <_Balloc>
 8011eda:	4605      	mov	r5, r0
 8011edc:	b928      	cbnz	r0, 8011eea <__multadd+0x5e>
 8011ede:	4602      	mov	r2, r0
 8011ee0:	4b0d      	ldr	r3, [pc, #52]	; (8011f18 <__multadd+0x8c>)
 8011ee2:	480e      	ldr	r0, [pc, #56]	; (8011f1c <__multadd+0x90>)
 8011ee4:	21b5      	movs	r1, #181	; 0xb5
 8011ee6:	f000 fc63 	bl	80127b0 <__assert_func>
 8011eea:	6922      	ldr	r2, [r4, #16]
 8011eec:	3202      	adds	r2, #2
 8011eee:	f104 010c 	add.w	r1, r4, #12
 8011ef2:	0092      	lsls	r2, r2, #2
 8011ef4:	300c      	adds	r0, #12
 8011ef6:	f7fe fd0d 	bl	8010914 <memcpy>
 8011efa:	4621      	mov	r1, r4
 8011efc:	4638      	mov	r0, r7
 8011efe:	f7ff ffa3 	bl	8011e48 <_Bfree>
 8011f02:	462c      	mov	r4, r5
 8011f04:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8011f08:	3601      	adds	r6, #1
 8011f0a:	f8c3 8014 	str.w	r8, [r3, #20]
 8011f0e:	6126      	str	r6, [r4, #16]
 8011f10:	4620      	mov	r0, r4
 8011f12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f16:	bf00      	nop
 8011f18:	08013978 	.word	0x08013978
 8011f1c:	08013a1f 	.word	0x08013a1f

08011f20 <__s2b>:
 8011f20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011f24:	460c      	mov	r4, r1
 8011f26:	4615      	mov	r5, r2
 8011f28:	461f      	mov	r7, r3
 8011f2a:	2209      	movs	r2, #9
 8011f2c:	3308      	adds	r3, #8
 8011f2e:	4606      	mov	r6, r0
 8011f30:	fb93 f3f2 	sdiv	r3, r3, r2
 8011f34:	2100      	movs	r1, #0
 8011f36:	2201      	movs	r2, #1
 8011f38:	429a      	cmp	r2, r3
 8011f3a:	db09      	blt.n	8011f50 <__s2b+0x30>
 8011f3c:	4630      	mov	r0, r6
 8011f3e:	f7ff ff43 	bl	8011dc8 <_Balloc>
 8011f42:	b940      	cbnz	r0, 8011f56 <__s2b+0x36>
 8011f44:	4602      	mov	r2, r0
 8011f46:	4b19      	ldr	r3, [pc, #100]	; (8011fac <__s2b+0x8c>)
 8011f48:	4819      	ldr	r0, [pc, #100]	; (8011fb0 <__s2b+0x90>)
 8011f4a:	21ce      	movs	r1, #206	; 0xce
 8011f4c:	f000 fc30 	bl	80127b0 <__assert_func>
 8011f50:	0052      	lsls	r2, r2, #1
 8011f52:	3101      	adds	r1, #1
 8011f54:	e7f0      	b.n	8011f38 <__s2b+0x18>
 8011f56:	9b08      	ldr	r3, [sp, #32]
 8011f58:	6143      	str	r3, [r0, #20]
 8011f5a:	2d09      	cmp	r5, #9
 8011f5c:	f04f 0301 	mov.w	r3, #1
 8011f60:	6103      	str	r3, [r0, #16]
 8011f62:	dd16      	ble.n	8011f92 <__s2b+0x72>
 8011f64:	f104 0909 	add.w	r9, r4, #9
 8011f68:	46c8      	mov	r8, r9
 8011f6a:	442c      	add	r4, r5
 8011f6c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8011f70:	4601      	mov	r1, r0
 8011f72:	3b30      	subs	r3, #48	; 0x30
 8011f74:	220a      	movs	r2, #10
 8011f76:	4630      	mov	r0, r6
 8011f78:	f7ff ff88 	bl	8011e8c <__multadd>
 8011f7c:	45a0      	cmp	r8, r4
 8011f7e:	d1f5      	bne.n	8011f6c <__s2b+0x4c>
 8011f80:	f1a5 0408 	sub.w	r4, r5, #8
 8011f84:	444c      	add	r4, r9
 8011f86:	1b2d      	subs	r5, r5, r4
 8011f88:	1963      	adds	r3, r4, r5
 8011f8a:	42bb      	cmp	r3, r7
 8011f8c:	db04      	blt.n	8011f98 <__s2b+0x78>
 8011f8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011f92:	340a      	adds	r4, #10
 8011f94:	2509      	movs	r5, #9
 8011f96:	e7f6      	b.n	8011f86 <__s2b+0x66>
 8011f98:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011f9c:	4601      	mov	r1, r0
 8011f9e:	3b30      	subs	r3, #48	; 0x30
 8011fa0:	220a      	movs	r2, #10
 8011fa2:	4630      	mov	r0, r6
 8011fa4:	f7ff ff72 	bl	8011e8c <__multadd>
 8011fa8:	e7ee      	b.n	8011f88 <__s2b+0x68>
 8011faa:	bf00      	nop
 8011fac:	08013978 	.word	0x08013978
 8011fb0:	08013a1f 	.word	0x08013a1f

08011fb4 <__hi0bits>:
 8011fb4:	0c03      	lsrs	r3, r0, #16
 8011fb6:	041b      	lsls	r3, r3, #16
 8011fb8:	b9d3      	cbnz	r3, 8011ff0 <__hi0bits+0x3c>
 8011fba:	0400      	lsls	r0, r0, #16
 8011fbc:	2310      	movs	r3, #16
 8011fbe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8011fc2:	bf04      	itt	eq
 8011fc4:	0200      	lsleq	r0, r0, #8
 8011fc6:	3308      	addeq	r3, #8
 8011fc8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011fcc:	bf04      	itt	eq
 8011fce:	0100      	lsleq	r0, r0, #4
 8011fd0:	3304      	addeq	r3, #4
 8011fd2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011fd6:	bf04      	itt	eq
 8011fd8:	0080      	lsleq	r0, r0, #2
 8011fda:	3302      	addeq	r3, #2
 8011fdc:	2800      	cmp	r0, #0
 8011fde:	db05      	blt.n	8011fec <__hi0bits+0x38>
 8011fe0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011fe4:	f103 0301 	add.w	r3, r3, #1
 8011fe8:	bf08      	it	eq
 8011fea:	2320      	moveq	r3, #32
 8011fec:	4618      	mov	r0, r3
 8011fee:	4770      	bx	lr
 8011ff0:	2300      	movs	r3, #0
 8011ff2:	e7e4      	b.n	8011fbe <__hi0bits+0xa>

08011ff4 <__lo0bits>:
 8011ff4:	6803      	ldr	r3, [r0, #0]
 8011ff6:	f013 0207 	ands.w	r2, r3, #7
 8011ffa:	4601      	mov	r1, r0
 8011ffc:	d00b      	beq.n	8012016 <__lo0bits+0x22>
 8011ffe:	07da      	lsls	r2, r3, #31
 8012000:	d424      	bmi.n	801204c <__lo0bits+0x58>
 8012002:	0798      	lsls	r0, r3, #30
 8012004:	bf49      	itett	mi
 8012006:	085b      	lsrmi	r3, r3, #1
 8012008:	089b      	lsrpl	r3, r3, #2
 801200a:	2001      	movmi	r0, #1
 801200c:	600b      	strmi	r3, [r1, #0]
 801200e:	bf5c      	itt	pl
 8012010:	600b      	strpl	r3, [r1, #0]
 8012012:	2002      	movpl	r0, #2
 8012014:	4770      	bx	lr
 8012016:	b298      	uxth	r0, r3
 8012018:	b9b0      	cbnz	r0, 8012048 <__lo0bits+0x54>
 801201a:	0c1b      	lsrs	r3, r3, #16
 801201c:	2010      	movs	r0, #16
 801201e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8012022:	bf04      	itt	eq
 8012024:	0a1b      	lsreq	r3, r3, #8
 8012026:	3008      	addeq	r0, #8
 8012028:	071a      	lsls	r2, r3, #28
 801202a:	bf04      	itt	eq
 801202c:	091b      	lsreq	r3, r3, #4
 801202e:	3004      	addeq	r0, #4
 8012030:	079a      	lsls	r2, r3, #30
 8012032:	bf04      	itt	eq
 8012034:	089b      	lsreq	r3, r3, #2
 8012036:	3002      	addeq	r0, #2
 8012038:	07da      	lsls	r2, r3, #31
 801203a:	d403      	bmi.n	8012044 <__lo0bits+0x50>
 801203c:	085b      	lsrs	r3, r3, #1
 801203e:	f100 0001 	add.w	r0, r0, #1
 8012042:	d005      	beq.n	8012050 <__lo0bits+0x5c>
 8012044:	600b      	str	r3, [r1, #0]
 8012046:	4770      	bx	lr
 8012048:	4610      	mov	r0, r2
 801204a:	e7e8      	b.n	801201e <__lo0bits+0x2a>
 801204c:	2000      	movs	r0, #0
 801204e:	4770      	bx	lr
 8012050:	2020      	movs	r0, #32
 8012052:	4770      	bx	lr

08012054 <__i2b>:
 8012054:	b510      	push	{r4, lr}
 8012056:	460c      	mov	r4, r1
 8012058:	2101      	movs	r1, #1
 801205a:	f7ff feb5 	bl	8011dc8 <_Balloc>
 801205e:	4602      	mov	r2, r0
 8012060:	b928      	cbnz	r0, 801206e <__i2b+0x1a>
 8012062:	4b05      	ldr	r3, [pc, #20]	; (8012078 <__i2b+0x24>)
 8012064:	4805      	ldr	r0, [pc, #20]	; (801207c <__i2b+0x28>)
 8012066:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801206a:	f000 fba1 	bl	80127b0 <__assert_func>
 801206e:	2301      	movs	r3, #1
 8012070:	6144      	str	r4, [r0, #20]
 8012072:	6103      	str	r3, [r0, #16]
 8012074:	bd10      	pop	{r4, pc}
 8012076:	bf00      	nop
 8012078:	08013978 	.word	0x08013978
 801207c:	08013a1f 	.word	0x08013a1f

08012080 <__multiply>:
 8012080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012084:	4614      	mov	r4, r2
 8012086:	690a      	ldr	r2, [r1, #16]
 8012088:	6923      	ldr	r3, [r4, #16]
 801208a:	429a      	cmp	r2, r3
 801208c:	bfb8      	it	lt
 801208e:	460b      	movlt	r3, r1
 8012090:	460d      	mov	r5, r1
 8012092:	bfbc      	itt	lt
 8012094:	4625      	movlt	r5, r4
 8012096:	461c      	movlt	r4, r3
 8012098:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801209c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80120a0:	68ab      	ldr	r3, [r5, #8]
 80120a2:	6869      	ldr	r1, [r5, #4]
 80120a4:	eb0a 0709 	add.w	r7, sl, r9
 80120a8:	42bb      	cmp	r3, r7
 80120aa:	b085      	sub	sp, #20
 80120ac:	bfb8      	it	lt
 80120ae:	3101      	addlt	r1, #1
 80120b0:	f7ff fe8a 	bl	8011dc8 <_Balloc>
 80120b4:	b930      	cbnz	r0, 80120c4 <__multiply+0x44>
 80120b6:	4602      	mov	r2, r0
 80120b8:	4b42      	ldr	r3, [pc, #264]	; (80121c4 <__multiply+0x144>)
 80120ba:	4843      	ldr	r0, [pc, #268]	; (80121c8 <__multiply+0x148>)
 80120bc:	f240 115d 	movw	r1, #349	; 0x15d
 80120c0:	f000 fb76 	bl	80127b0 <__assert_func>
 80120c4:	f100 0614 	add.w	r6, r0, #20
 80120c8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80120cc:	4633      	mov	r3, r6
 80120ce:	2200      	movs	r2, #0
 80120d0:	4543      	cmp	r3, r8
 80120d2:	d31e      	bcc.n	8012112 <__multiply+0x92>
 80120d4:	f105 0c14 	add.w	ip, r5, #20
 80120d8:	f104 0314 	add.w	r3, r4, #20
 80120dc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80120e0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80120e4:	9202      	str	r2, [sp, #8]
 80120e6:	ebac 0205 	sub.w	r2, ip, r5
 80120ea:	3a15      	subs	r2, #21
 80120ec:	f022 0203 	bic.w	r2, r2, #3
 80120f0:	3204      	adds	r2, #4
 80120f2:	f105 0115 	add.w	r1, r5, #21
 80120f6:	458c      	cmp	ip, r1
 80120f8:	bf38      	it	cc
 80120fa:	2204      	movcc	r2, #4
 80120fc:	9201      	str	r2, [sp, #4]
 80120fe:	9a02      	ldr	r2, [sp, #8]
 8012100:	9303      	str	r3, [sp, #12]
 8012102:	429a      	cmp	r2, r3
 8012104:	d808      	bhi.n	8012118 <__multiply+0x98>
 8012106:	2f00      	cmp	r7, #0
 8012108:	dc55      	bgt.n	80121b6 <__multiply+0x136>
 801210a:	6107      	str	r7, [r0, #16]
 801210c:	b005      	add	sp, #20
 801210e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012112:	f843 2b04 	str.w	r2, [r3], #4
 8012116:	e7db      	b.n	80120d0 <__multiply+0x50>
 8012118:	f8b3 a000 	ldrh.w	sl, [r3]
 801211c:	f1ba 0f00 	cmp.w	sl, #0
 8012120:	d020      	beq.n	8012164 <__multiply+0xe4>
 8012122:	f105 0e14 	add.w	lr, r5, #20
 8012126:	46b1      	mov	r9, r6
 8012128:	2200      	movs	r2, #0
 801212a:	f85e 4b04 	ldr.w	r4, [lr], #4
 801212e:	f8d9 b000 	ldr.w	fp, [r9]
 8012132:	b2a1      	uxth	r1, r4
 8012134:	fa1f fb8b 	uxth.w	fp, fp
 8012138:	fb0a b101 	mla	r1, sl, r1, fp
 801213c:	4411      	add	r1, r2
 801213e:	f8d9 2000 	ldr.w	r2, [r9]
 8012142:	0c24      	lsrs	r4, r4, #16
 8012144:	0c12      	lsrs	r2, r2, #16
 8012146:	fb0a 2404 	mla	r4, sl, r4, r2
 801214a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801214e:	b289      	uxth	r1, r1
 8012150:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8012154:	45f4      	cmp	ip, lr
 8012156:	f849 1b04 	str.w	r1, [r9], #4
 801215a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801215e:	d8e4      	bhi.n	801212a <__multiply+0xaa>
 8012160:	9901      	ldr	r1, [sp, #4]
 8012162:	5072      	str	r2, [r6, r1]
 8012164:	9a03      	ldr	r2, [sp, #12]
 8012166:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801216a:	3304      	adds	r3, #4
 801216c:	f1b9 0f00 	cmp.w	r9, #0
 8012170:	d01f      	beq.n	80121b2 <__multiply+0x132>
 8012172:	6834      	ldr	r4, [r6, #0]
 8012174:	f105 0114 	add.w	r1, r5, #20
 8012178:	46b6      	mov	lr, r6
 801217a:	f04f 0a00 	mov.w	sl, #0
 801217e:	880a      	ldrh	r2, [r1, #0]
 8012180:	f8be b002 	ldrh.w	fp, [lr, #2]
 8012184:	fb09 b202 	mla	r2, r9, r2, fp
 8012188:	4492      	add	sl, r2
 801218a:	b2a4      	uxth	r4, r4
 801218c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8012190:	f84e 4b04 	str.w	r4, [lr], #4
 8012194:	f851 4b04 	ldr.w	r4, [r1], #4
 8012198:	f8be 2000 	ldrh.w	r2, [lr]
 801219c:	0c24      	lsrs	r4, r4, #16
 801219e:	fb09 2404 	mla	r4, r9, r4, r2
 80121a2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80121a6:	458c      	cmp	ip, r1
 80121a8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80121ac:	d8e7      	bhi.n	801217e <__multiply+0xfe>
 80121ae:	9a01      	ldr	r2, [sp, #4]
 80121b0:	50b4      	str	r4, [r6, r2]
 80121b2:	3604      	adds	r6, #4
 80121b4:	e7a3      	b.n	80120fe <__multiply+0x7e>
 80121b6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	d1a5      	bne.n	801210a <__multiply+0x8a>
 80121be:	3f01      	subs	r7, #1
 80121c0:	e7a1      	b.n	8012106 <__multiply+0x86>
 80121c2:	bf00      	nop
 80121c4:	08013978 	.word	0x08013978
 80121c8:	08013a1f 	.word	0x08013a1f

080121cc <__pow5mult>:
 80121cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80121d0:	4615      	mov	r5, r2
 80121d2:	f012 0203 	ands.w	r2, r2, #3
 80121d6:	4606      	mov	r6, r0
 80121d8:	460f      	mov	r7, r1
 80121da:	d007      	beq.n	80121ec <__pow5mult+0x20>
 80121dc:	4c25      	ldr	r4, [pc, #148]	; (8012274 <__pow5mult+0xa8>)
 80121de:	3a01      	subs	r2, #1
 80121e0:	2300      	movs	r3, #0
 80121e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80121e6:	f7ff fe51 	bl	8011e8c <__multadd>
 80121ea:	4607      	mov	r7, r0
 80121ec:	10ad      	asrs	r5, r5, #2
 80121ee:	d03d      	beq.n	801226c <__pow5mult+0xa0>
 80121f0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80121f2:	b97c      	cbnz	r4, 8012214 <__pow5mult+0x48>
 80121f4:	2010      	movs	r0, #16
 80121f6:	f7fe fb7d 	bl	80108f4 <malloc>
 80121fa:	4602      	mov	r2, r0
 80121fc:	6270      	str	r0, [r6, #36]	; 0x24
 80121fe:	b928      	cbnz	r0, 801220c <__pow5mult+0x40>
 8012200:	4b1d      	ldr	r3, [pc, #116]	; (8012278 <__pow5mult+0xac>)
 8012202:	481e      	ldr	r0, [pc, #120]	; (801227c <__pow5mult+0xb0>)
 8012204:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8012208:	f000 fad2 	bl	80127b0 <__assert_func>
 801220c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012210:	6004      	str	r4, [r0, #0]
 8012212:	60c4      	str	r4, [r0, #12]
 8012214:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012218:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801221c:	b94c      	cbnz	r4, 8012232 <__pow5mult+0x66>
 801221e:	f240 2171 	movw	r1, #625	; 0x271
 8012222:	4630      	mov	r0, r6
 8012224:	f7ff ff16 	bl	8012054 <__i2b>
 8012228:	2300      	movs	r3, #0
 801222a:	f8c8 0008 	str.w	r0, [r8, #8]
 801222e:	4604      	mov	r4, r0
 8012230:	6003      	str	r3, [r0, #0]
 8012232:	f04f 0900 	mov.w	r9, #0
 8012236:	07eb      	lsls	r3, r5, #31
 8012238:	d50a      	bpl.n	8012250 <__pow5mult+0x84>
 801223a:	4639      	mov	r1, r7
 801223c:	4622      	mov	r2, r4
 801223e:	4630      	mov	r0, r6
 8012240:	f7ff ff1e 	bl	8012080 <__multiply>
 8012244:	4639      	mov	r1, r7
 8012246:	4680      	mov	r8, r0
 8012248:	4630      	mov	r0, r6
 801224a:	f7ff fdfd 	bl	8011e48 <_Bfree>
 801224e:	4647      	mov	r7, r8
 8012250:	106d      	asrs	r5, r5, #1
 8012252:	d00b      	beq.n	801226c <__pow5mult+0xa0>
 8012254:	6820      	ldr	r0, [r4, #0]
 8012256:	b938      	cbnz	r0, 8012268 <__pow5mult+0x9c>
 8012258:	4622      	mov	r2, r4
 801225a:	4621      	mov	r1, r4
 801225c:	4630      	mov	r0, r6
 801225e:	f7ff ff0f 	bl	8012080 <__multiply>
 8012262:	6020      	str	r0, [r4, #0]
 8012264:	f8c0 9000 	str.w	r9, [r0]
 8012268:	4604      	mov	r4, r0
 801226a:	e7e4      	b.n	8012236 <__pow5mult+0x6a>
 801226c:	4638      	mov	r0, r7
 801226e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012272:	bf00      	nop
 8012274:	08013b70 	.word	0x08013b70
 8012278:	08013a08 	.word	0x08013a08
 801227c:	08013a1f 	.word	0x08013a1f

08012280 <__lshift>:
 8012280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012284:	460c      	mov	r4, r1
 8012286:	6849      	ldr	r1, [r1, #4]
 8012288:	6923      	ldr	r3, [r4, #16]
 801228a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801228e:	68a3      	ldr	r3, [r4, #8]
 8012290:	4607      	mov	r7, r0
 8012292:	4691      	mov	r9, r2
 8012294:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012298:	f108 0601 	add.w	r6, r8, #1
 801229c:	42b3      	cmp	r3, r6
 801229e:	db0b      	blt.n	80122b8 <__lshift+0x38>
 80122a0:	4638      	mov	r0, r7
 80122a2:	f7ff fd91 	bl	8011dc8 <_Balloc>
 80122a6:	4605      	mov	r5, r0
 80122a8:	b948      	cbnz	r0, 80122be <__lshift+0x3e>
 80122aa:	4602      	mov	r2, r0
 80122ac:	4b28      	ldr	r3, [pc, #160]	; (8012350 <__lshift+0xd0>)
 80122ae:	4829      	ldr	r0, [pc, #164]	; (8012354 <__lshift+0xd4>)
 80122b0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80122b4:	f000 fa7c 	bl	80127b0 <__assert_func>
 80122b8:	3101      	adds	r1, #1
 80122ba:	005b      	lsls	r3, r3, #1
 80122bc:	e7ee      	b.n	801229c <__lshift+0x1c>
 80122be:	2300      	movs	r3, #0
 80122c0:	f100 0114 	add.w	r1, r0, #20
 80122c4:	f100 0210 	add.w	r2, r0, #16
 80122c8:	4618      	mov	r0, r3
 80122ca:	4553      	cmp	r3, sl
 80122cc:	db33      	blt.n	8012336 <__lshift+0xb6>
 80122ce:	6920      	ldr	r0, [r4, #16]
 80122d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80122d4:	f104 0314 	add.w	r3, r4, #20
 80122d8:	f019 091f 	ands.w	r9, r9, #31
 80122dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80122e0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80122e4:	d02b      	beq.n	801233e <__lshift+0xbe>
 80122e6:	f1c9 0e20 	rsb	lr, r9, #32
 80122ea:	468a      	mov	sl, r1
 80122ec:	2200      	movs	r2, #0
 80122ee:	6818      	ldr	r0, [r3, #0]
 80122f0:	fa00 f009 	lsl.w	r0, r0, r9
 80122f4:	4302      	orrs	r2, r0
 80122f6:	f84a 2b04 	str.w	r2, [sl], #4
 80122fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80122fe:	459c      	cmp	ip, r3
 8012300:	fa22 f20e 	lsr.w	r2, r2, lr
 8012304:	d8f3      	bhi.n	80122ee <__lshift+0x6e>
 8012306:	ebac 0304 	sub.w	r3, ip, r4
 801230a:	3b15      	subs	r3, #21
 801230c:	f023 0303 	bic.w	r3, r3, #3
 8012310:	3304      	adds	r3, #4
 8012312:	f104 0015 	add.w	r0, r4, #21
 8012316:	4584      	cmp	ip, r0
 8012318:	bf38      	it	cc
 801231a:	2304      	movcc	r3, #4
 801231c:	50ca      	str	r2, [r1, r3]
 801231e:	b10a      	cbz	r2, 8012324 <__lshift+0xa4>
 8012320:	f108 0602 	add.w	r6, r8, #2
 8012324:	3e01      	subs	r6, #1
 8012326:	4638      	mov	r0, r7
 8012328:	612e      	str	r6, [r5, #16]
 801232a:	4621      	mov	r1, r4
 801232c:	f7ff fd8c 	bl	8011e48 <_Bfree>
 8012330:	4628      	mov	r0, r5
 8012332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012336:	f842 0f04 	str.w	r0, [r2, #4]!
 801233a:	3301      	adds	r3, #1
 801233c:	e7c5      	b.n	80122ca <__lshift+0x4a>
 801233e:	3904      	subs	r1, #4
 8012340:	f853 2b04 	ldr.w	r2, [r3], #4
 8012344:	f841 2f04 	str.w	r2, [r1, #4]!
 8012348:	459c      	cmp	ip, r3
 801234a:	d8f9      	bhi.n	8012340 <__lshift+0xc0>
 801234c:	e7ea      	b.n	8012324 <__lshift+0xa4>
 801234e:	bf00      	nop
 8012350:	08013978 	.word	0x08013978
 8012354:	08013a1f 	.word	0x08013a1f

08012358 <__mcmp>:
 8012358:	b530      	push	{r4, r5, lr}
 801235a:	6902      	ldr	r2, [r0, #16]
 801235c:	690c      	ldr	r4, [r1, #16]
 801235e:	1b12      	subs	r2, r2, r4
 8012360:	d10e      	bne.n	8012380 <__mcmp+0x28>
 8012362:	f100 0314 	add.w	r3, r0, #20
 8012366:	3114      	adds	r1, #20
 8012368:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801236c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012370:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012374:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012378:	42a5      	cmp	r5, r4
 801237a:	d003      	beq.n	8012384 <__mcmp+0x2c>
 801237c:	d305      	bcc.n	801238a <__mcmp+0x32>
 801237e:	2201      	movs	r2, #1
 8012380:	4610      	mov	r0, r2
 8012382:	bd30      	pop	{r4, r5, pc}
 8012384:	4283      	cmp	r3, r0
 8012386:	d3f3      	bcc.n	8012370 <__mcmp+0x18>
 8012388:	e7fa      	b.n	8012380 <__mcmp+0x28>
 801238a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801238e:	e7f7      	b.n	8012380 <__mcmp+0x28>

08012390 <__mdiff>:
 8012390:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012394:	460c      	mov	r4, r1
 8012396:	4606      	mov	r6, r0
 8012398:	4611      	mov	r1, r2
 801239a:	4620      	mov	r0, r4
 801239c:	4617      	mov	r7, r2
 801239e:	f7ff ffdb 	bl	8012358 <__mcmp>
 80123a2:	1e05      	subs	r5, r0, #0
 80123a4:	d110      	bne.n	80123c8 <__mdiff+0x38>
 80123a6:	4629      	mov	r1, r5
 80123a8:	4630      	mov	r0, r6
 80123aa:	f7ff fd0d 	bl	8011dc8 <_Balloc>
 80123ae:	b930      	cbnz	r0, 80123be <__mdiff+0x2e>
 80123b0:	4b39      	ldr	r3, [pc, #228]	; (8012498 <__mdiff+0x108>)
 80123b2:	4602      	mov	r2, r0
 80123b4:	f240 2132 	movw	r1, #562	; 0x232
 80123b8:	4838      	ldr	r0, [pc, #224]	; (801249c <__mdiff+0x10c>)
 80123ba:	f000 f9f9 	bl	80127b0 <__assert_func>
 80123be:	2301      	movs	r3, #1
 80123c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80123c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123c8:	bfa4      	itt	ge
 80123ca:	463b      	movge	r3, r7
 80123cc:	4627      	movge	r7, r4
 80123ce:	4630      	mov	r0, r6
 80123d0:	6879      	ldr	r1, [r7, #4]
 80123d2:	bfa6      	itte	ge
 80123d4:	461c      	movge	r4, r3
 80123d6:	2500      	movge	r5, #0
 80123d8:	2501      	movlt	r5, #1
 80123da:	f7ff fcf5 	bl	8011dc8 <_Balloc>
 80123de:	b920      	cbnz	r0, 80123ea <__mdiff+0x5a>
 80123e0:	4b2d      	ldr	r3, [pc, #180]	; (8012498 <__mdiff+0x108>)
 80123e2:	4602      	mov	r2, r0
 80123e4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80123e8:	e7e6      	b.n	80123b8 <__mdiff+0x28>
 80123ea:	693e      	ldr	r6, [r7, #16]
 80123ec:	60c5      	str	r5, [r0, #12]
 80123ee:	6925      	ldr	r5, [r4, #16]
 80123f0:	f107 0114 	add.w	r1, r7, #20
 80123f4:	f104 0914 	add.w	r9, r4, #20
 80123f8:	f100 0e14 	add.w	lr, r0, #20
 80123fc:	f107 0210 	add.w	r2, r7, #16
 8012400:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8012404:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8012408:	46f2      	mov	sl, lr
 801240a:	2700      	movs	r7, #0
 801240c:	f859 3b04 	ldr.w	r3, [r9], #4
 8012410:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012414:	fa1f f883 	uxth.w	r8, r3
 8012418:	fa17 f78b 	uxtah	r7, r7, fp
 801241c:	0c1b      	lsrs	r3, r3, #16
 801241e:	eba7 0808 	sub.w	r8, r7, r8
 8012422:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012426:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801242a:	fa1f f888 	uxth.w	r8, r8
 801242e:	141f      	asrs	r7, r3, #16
 8012430:	454d      	cmp	r5, r9
 8012432:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8012436:	f84a 3b04 	str.w	r3, [sl], #4
 801243a:	d8e7      	bhi.n	801240c <__mdiff+0x7c>
 801243c:	1b2b      	subs	r3, r5, r4
 801243e:	3b15      	subs	r3, #21
 8012440:	f023 0303 	bic.w	r3, r3, #3
 8012444:	3304      	adds	r3, #4
 8012446:	3415      	adds	r4, #21
 8012448:	42a5      	cmp	r5, r4
 801244a:	bf38      	it	cc
 801244c:	2304      	movcc	r3, #4
 801244e:	4419      	add	r1, r3
 8012450:	4473      	add	r3, lr
 8012452:	469e      	mov	lr, r3
 8012454:	460d      	mov	r5, r1
 8012456:	4565      	cmp	r5, ip
 8012458:	d30e      	bcc.n	8012478 <__mdiff+0xe8>
 801245a:	f10c 0203 	add.w	r2, ip, #3
 801245e:	1a52      	subs	r2, r2, r1
 8012460:	f022 0203 	bic.w	r2, r2, #3
 8012464:	3903      	subs	r1, #3
 8012466:	458c      	cmp	ip, r1
 8012468:	bf38      	it	cc
 801246a:	2200      	movcc	r2, #0
 801246c:	441a      	add	r2, r3
 801246e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8012472:	b17b      	cbz	r3, 8012494 <__mdiff+0x104>
 8012474:	6106      	str	r6, [r0, #16]
 8012476:	e7a5      	b.n	80123c4 <__mdiff+0x34>
 8012478:	f855 8b04 	ldr.w	r8, [r5], #4
 801247c:	fa17 f488 	uxtah	r4, r7, r8
 8012480:	1422      	asrs	r2, r4, #16
 8012482:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8012486:	b2a4      	uxth	r4, r4
 8012488:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801248c:	f84e 4b04 	str.w	r4, [lr], #4
 8012490:	1417      	asrs	r7, r2, #16
 8012492:	e7e0      	b.n	8012456 <__mdiff+0xc6>
 8012494:	3e01      	subs	r6, #1
 8012496:	e7ea      	b.n	801246e <__mdiff+0xde>
 8012498:	08013978 	.word	0x08013978
 801249c:	08013a1f 	.word	0x08013a1f

080124a0 <__ulp>:
 80124a0:	b082      	sub	sp, #8
 80124a2:	ed8d 0b00 	vstr	d0, [sp]
 80124a6:	9b01      	ldr	r3, [sp, #4]
 80124a8:	4912      	ldr	r1, [pc, #72]	; (80124f4 <__ulp+0x54>)
 80124aa:	4019      	ands	r1, r3
 80124ac:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80124b0:	2900      	cmp	r1, #0
 80124b2:	dd05      	ble.n	80124c0 <__ulp+0x20>
 80124b4:	2200      	movs	r2, #0
 80124b6:	460b      	mov	r3, r1
 80124b8:	ec43 2b10 	vmov	d0, r2, r3
 80124bc:	b002      	add	sp, #8
 80124be:	4770      	bx	lr
 80124c0:	4249      	negs	r1, r1
 80124c2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80124c6:	ea4f 5021 	mov.w	r0, r1, asr #20
 80124ca:	f04f 0200 	mov.w	r2, #0
 80124ce:	f04f 0300 	mov.w	r3, #0
 80124d2:	da04      	bge.n	80124de <__ulp+0x3e>
 80124d4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80124d8:	fa41 f300 	asr.w	r3, r1, r0
 80124dc:	e7ec      	b.n	80124b8 <__ulp+0x18>
 80124de:	f1a0 0114 	sub.w	r1, r0, #20
 80124e2:	291e      	cmp	r1, #30
 80124e4:	bfda      	itte	le
 80124e6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80124ea:	fa20 f101 	lsrle.w	r1, r0, r1
 80124ee:	2101      	movgt	r1, #1
 80124f0:	460a      	mov	r2, r1
 80124f2:	e7e1      	b.n	80124b8 <__ulp+0x18>
 80124f4:	7ff00000 	.word	0x7ff00000

080124f8 <__b2d>:
 80124f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124fa:	6905      	ldr	r5, [r0, #16]
 80124fc:	f100 0714 	add.w	r7, r0, #20
 8012500:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8012504:	1f2e      	subs	r6, r5, #4
 8012506:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801250a:	4620      	mov	r0, r4
 801250c:	f7ff fd52 	bl	8011fb4 <__hi0bits>
 8012510:	f1c0 0320 	rsb	r3, r0, #32
 8012514:	280a      	cmp	r0, #10
 8012516:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8012594 <__b2d+0x9c>
 801251a:	600b      	str	r3, [r1, #0]
 801251c:	dc14      	bgt.n	8012548 <__b2d+0x50>
 801251e:	f1c0 0e0b 	rsb	lr, r0, #11
 8012522:	fa24 f10e 	lsr.w	r1, r4, lr
 8012526:	42b7      	cmp	r7, r6
 8012528:	ea41 030c 	orr.w	r3, r1, ip
 801252c:	bf34      	ite	cc
 801252e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8012532:	2100      	movcs	r1, #0
 8012534:	3015      	adds	r0, #21
 8012536:	fa04 f000 	lsl.w	r0, r4, r0
 801253a:	fa21 f10e 	lsr.w	r1, r1, lr
 801253e:	ea40 0201 	orr.w	r2, r0, r1
 8012542:	ec43 2b10 	vmov	d0, r2, r3
 8012546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012548:	42b7      	cmp	r7, r6
 801254a:	bf3a      	itte	cc
 801254c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8012550:	f1a5 0608 	subcc.w	r6, r5, #8
 8012554:	2100      	movcs	r1, #0
 8012556:	380b      	subs	r0, #11
 8012558:	d017      	beq.n	801258a <__b2d+0x92>
 801255a:	f1c0 0c20 	rsb	ip, r0, #32
 801255e:	fa04 f500 	lsl.w	r5, r4, r0
 8012562:	42be      	cmp	r6, r7
 8012564:	fa21 f40c 	lsr.w	r4, r1, ip
 8012568:	ea45 0504 	orr.w	r5, r5, r4
 801256c:	bf8c      	ite	hi
 801256e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8012572:	2400      	movls	r4, #0
 8012574:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8012578:	fa01 f000 	lsl.w	r0, r1, r0
 801257c:	fa24 f40c 	lsr.w	r4, r4, ip
 8012580:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8012584:	ea40 0204 	orr.w	r2, r0, r4
 8012588:	e7db      	b.n	8012542 <__b2d+0x4a>
 801258a:	ea44 030c 	orr.w	r3, r4, ip
 801258e:	460a      	mov	r2, r1
 8012590:	e7d7      	b.n	8012542 <__b2d+0x4a>
 8012592:	bf00      	nop
 8012594:	3ff00000 	.word	0x3ff00000

08012598 <__d2b>:
 8012598:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801259c:	4689      	mov	r9, r1
 801259e:	2101      	movs	r1, #1
 80125a0:	ec57 6b10 	vmov	r6, r7, d0
 80125a4:	4690      	mov	r8, r2
 80125a6:	f7ff fc0f 	bl	8011dc8 <_Balloc>
 80125aa:	4604      	mov	r4, r0
 80125ac:	b930      	cbnz	r0, 80125bc <__d2b+0x24>
 80125ae:	4602      	mov	r2, r0
 80125b0:	4b25      	ldr	r3, [pc, #148]	; (8012648 <__d2b+0xb0>)
 80125b2:	4826      	ldr	r0, [pc, #152]	; (801264c <__d2b+0xb4>)
 80125b4:	f240 310a 	movw	r1, #778	; 0x30a
 80125b8:	f000 f8fa 	bl	80127b0 <__assert_func>
 80125bc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80125c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80125c4:	bb35      	cbnz	r5, 8012614 <__d2b+0x7c>
 80125c6:	2e00      	cmp	r6, #0
 80125c8:	9301      	str	r3, [sp, #4]
 80125ca:	d028      	beq.n	801261e <__d2b+0x86>
 80125cc:	4668      	mov	r0, sp
 80125ce:	9600      	str	r6, [sp, #0]
 80125d0:	f7ff fd10 	bl	8011ff4 <__lo0bits>
 80125d4:	9900      	ldr	r1, [sp, #0]
 80125d6:	b300      	cbz	r0, 801261a <__d2b+0x82>
 80125d8:	9a01      	ldr	r2, [sp, #4]
 80125da:	f1c0 0320 	rsb	r3, r0, #32
 80125de:	fa02 f303 	lsl.w	r3, r2, r3
 80125e2:	430b      	orrs	r3, r1
 80125e4:	40c2      	lsrs	r2, r0
 80125e6:	6163      	str	r3, [r4, #20]
 80125e8:	9201      	str	r2, [sp, #4]
 80125ea:	9b01      	ldr	r3, [sp, #4]
 80125ec:	61a3      	str	r3, [r4, #24]
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	bf14      	ite	ne
 80125f2:	2202      	movne	r2, #2
 80125f4:	2201      	moveq	r2, #1
 80125f6:	6122      	str	r2, [r4, #16]
 80125f8:	b1d5      	cbz	r5, 8012630 <__d2b+0x98>
 80125fa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80125fe:	4405      	add	r5, r0
 8012600:	f8c9 5000 	str.w	r5, [r9]
 8012604:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012608:	f8c8 0000 	str.w	r0, [r8]
 801260c:	4620      	mov	r0, r4
 801260e:	b003      	add	sp, #12
 8012610:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012614:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012618:	e7d5      	b.n	80125c6 <__d2b+0x2e>
 801261a:	6161      	str	r1, [r4, #20]
 801261c:	e7e5      	b.n	80125ea <__d2b+0x52>
 801261e:	a801      	add	r0, sp, #4
 8012620:	f7ff fce8 	bl	8011ff4 <__lo0bits>
 8012624:	9b01      	ldr	r3, [sp, #4]
 8012626:	6163      	str	r3, [r4, #20]
 8012628:	2201      	movs	r2, #1
 801262a:	6122      	str	r2, [r4, #16]
 801262c:	3020      	adds	r0, #32
 801262e:	e7e3      	b.n	80125f8 <__d2b+0x60>
 8012630:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012634:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012638:	f8c9 0000 	str.w	r0, [r9]
 801263c:	6918      	ldr	r0, [r3, #16]
 801263e:	f7ff fcb9 	bl	8011fb4 <__hi0bits>
 8012642:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012646:	e7df      	b.n	8012608 <__d2b+0x70>
 8012648:	08013978 	.word	0x08013978
 801264c:	08013a1f 	.word	0x08013a1f

08012650 <__ratio>:
 8012650:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012654:	468a      	mov	sl, r1
 8012656:	4669      	mov	r1, sp
 8012658:	4683      	mov	fp, r0
 801265a:	f7ff ff4d 	bl	80124f8 <__b2d>
 801265e:	a901      	add	r1, sp, #4
 8012660:	4650      	mov	r0, sl
 8012662:	ec59 8b10 	vmov	r8, r9, d0
 8012666:	ee10 6a10 	vmov	r6, s0
 801266a:	f7ff ff45 	bl	80124f8 <__b2d>
 801266e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8012672:	f8da 2010 	ldr.w	r2, [sl, #16]
 8012676:	eba3 0c02 	sub.w	ip, r3, r2
 801267a:	e9dd 3200 	ldrd	r3, r2, [sp]
 801267e:	1a9b      	subs	r3, r3, r2
 8012680:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8012684:	ec55 4b10 	vmov	r4, r5, d0
 8012688:	2b00      	cmp	r3, #0
 801268a:	ee10 0a10 	vmov	r0, s0
 801268e:	bfce      	itee	gt
 8012690:	464a      	movgt	r2, r9
 8012692:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012696:	462a      	movle	r2, r5
 8012698:	464f      	mov	r7, r9
 801269a:	4629      	mov	r1, r5
 801269c:	bfcc      	ite	gt
 801269e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80126a2:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 80126a6:	ec47 6b17 	vmov	d7, r6, r7
 80126aa:	ec41 0b16 	vmov	d6, r0, r1
 80126ae:	ee87 0b06 	vdiv.f64	d0, d7, d6
 80126b2:	b003      	add	sp, #12
 80126b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080126b8 <__copybits>:
 80126b8:	3901      	subs	r1, #1
 80126ba:	b570      	push	{r4, r5, r6, lr}
 80126bc:	1149      	asrs	r1, r1, #5
 80126be:	6914      	ldr	r4, [r2, #16]
 80126c0:	3101      	adds	r1, #1
 80126c2:	f102 0314 	add.w	r3, r2, #20
 80126c6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80126ca:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80126ce:	1f05      	subs	r5, r0, #4
 80126d0:	42a3      	cmp	r3, r4
 80126d2:	d30c      	bcc.n	80126ee <__copybits+0x36>
 80126d4:	1aa3      	subs	r3, r4, r2
 80126d6:	3b11      	subs	r3, #17
 80126d8:	f023 0303 	bic.w	r3, r3, #3
 80126dc:	3211      	adds	r2, #17
 80126de:	42a2      	cmp	r2, r4
 80126e0:	bf88      	it	hi
 80126e2:	2300      	movhi	r3, #0
 80126e4:	4418      	add	r0, r3
 80126e6:	2300      	movs	r3, #0
 80126e8:	4288      	cmp	r0, r1
 80126ea:	d305      	bcc.n	80126f8 <__copybits+0x40>
 80126ec:	bd70      	pop	{r4, r5, r6, pc}
 80126ee:	f853 6b04 	ldr.w	r6, [r3], #4
 80126f2:	f845 6f04 	str.w	r6, [r5, #4]!
 80126f6:	e7eb      	b.n	80126d0 <__copybits+0x18>
 80126f8:	f840 3b04 	str.w	r3, [r0], #4
 80126fc:	e7f4      	b.n	80126e8 <__copybits+0x30>

080126fe <__any_on>:
 80126fe:	f100 0214 	add.w	r2, r0, #20
 8012702:	6900      	ldr	r0, [r0, #16]
 8012704:	114b      	asrs	r3, r1, #5
 8012706:	4298      	cmp	r0, r3
 8012708:	b510      	push	{r4, lr}
 801270a:	db11      	blt.n	8012730 <__any_on+0x32>
 801270c:	dd0a      	ble.n	8012724 <__any_on+0x26>
 801270e:	f011 011f 	ands.w	r1, r1, #31
 8012712:	d007      	beq.n	8012724 <__any_on+0x26>
 8012714:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8012718:	fa24 f001 	lsr.w	r0, r4, r1
 801271c:	fa00 f101 	lsl.w	r1, r0, r1
 8012720:	428c      	cmp	r4, r1
 8012722:	d10b      	bne.n	801273c <__any_on+0x3e>
 8012724:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012728:	4293      	cmp	r3, r2
 801272a:	d803      	bhi.n	8012734 <__any_on+0x36>
 801272c:	2000      	movs	r0, #0
 801272e:	bd10      	pop	{r4, pc}
 8012730:	4603      	mov	r3, r0
 8012732:	e7f7      	b.n	8012724 <__any_on+0x26>
 8012734:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012738:	2900      	cmp	r1, #0
 801273a:	d0f5      	beq.n	8012728 <__any_on+0x2a>
 801273c:	2001      	movs	r0, #1
 801273e:	e7f6      	b.n	801272e <__any_on+0x30>

08012740 <_calloc_r>:
 8012740:	b513      	push	{r0, r1, r4, lr}
 8012742:	434a      	muls	r2, r1
 8012744:	4611      	mov	r1, r2
 8012746:	9201      	str	r2, [sp, #4]
 8012748:	f7fe f94a 	bl	80109e0 <_malloc_r>
 801274c:	4604      	mov	r4, r0
 801274e:	b118      	cbz	r0, 8012758 <_calloc_r+0x18>
 8012750:	9a01      	ldr	r2, [sp, #4]
 8012752:	2100      	movs	r1, #0
 8012754:	f7fe f8ec 	bl	8010930 <memset>
 8012758:	4620      	mov	r0, r4
 801275a:	b002      	add	sp, #8
 801275c:	bd10      	pop	{r4, pc}
	...

08012760 <nan>:
 8012760:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012768 <nan+0x8>
 8012764:	4770      	bx	lr
 8012766:	bf00      	nop
 8012768:	00000000 	.word	0x00000000
 801276c:	7ff80000 	.word	0x7ff80000

08012770 <strncmp>:
 8012770:	b510      	push	{r4, lr}
 8012772:	b16a      	cbz	r2, 8012790 <strncmp+0x20>
 8012774:	3901      	subs	r1, #1
 8012776:	1884      	adds	r4, r0, r2
 8012778:	f810 3b01 	ldrb.w	r3, [r0], #1
 801277c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8012780:	4293      	cmp	r3, r2
 8012782:	d103      	bne.n	801278c <strncmp+0x1c>
 8012784:	42a0      	cmp	r0, r4
 8012786:	d001      	beq.n	801278c <strncmp+0x1c>
 8012788:	2b00      	cmp	r3, #0
 801278a:	d1f5      	bne.n	8012778 <strncmp+0x8>
 801278c:	1a98      	subs	r0, r3, r2
 801278e:	bd10      	pop	{r4, pc}
 8012790:	4610      	mov	r0, r2
 8012792:	e7fc      	b.n	801278e <strncmp+0x1e>

08012794 <__ascii_wctomb>:
 8012794:	b149      	cbz	r1, 80127aa <__ascii_wctomb+0x16>
 8012796:	2aff      	cmp	r2, #255	; 0xff
 8012798:	bf85      	ittet	hi
 801279a:	238a      	movhi	r3, #138	; 0x8a
 801279c:	6003      	strhi	r3, [r0, #0]
 801279e:	700a      	strbls	r2, [r1, #0]
 80127a0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80127a4:	bf98      	it	ls
 80127a6:	2001      	movls	r0, #1
 80127a8:	4770      	bx	lr
 80127aa:	4608      	mov	r0, r1
 80127ac:	4770      	bx	lr
	...

080127b0 <__assert_func>:
 80127b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80127b2:	4614      	mov	r4, r2
 80127b4:	461a      	mov	r2, r3
 80127b6:	4b09      	ldr	r3, [pc, #36]	; (80127dc <__assert_func+0x2c>)
 80127b8:	681b      	ldr	r3, [r3, #0]
 80127ba:	4605      	mov	r5, r0
 80127bc:	68d8      	ldr	r0, [r3, #12]
 80127be:	b14c      	cbz	r4, 80127d4 <__assert_func+0x24>
 80127c0:	4b07      	ldr	r3, [pc, #28]	; (80127e0 <__assert_func+0x30>)
 80127c2:	9100      	str	r1, [sp, #0]
 80127c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80127c8:	4906      	ldr	r1, [pc, #24]	; (80127e4 <__assert_func+0x34>)
 80127ca:	462b      	mov	r3, r5
 80127cc:	f000 f80e 	bl	80127ec <fiprintf>
 80127d0:	f000 fbce 	bl	8012f70 <abort>
 80127d4:	4b04      	ldr	r3, [pc, #16]	; (80127e8 <__assert_func+0x38>)
 80127d6:	461c      	mov	r4, r3
 80127d8:	e7f3      	b.n	80127c2 <__assert_func+0x12>
 80127da:	bf00      	nop
 80127dc:	20000220 	.word	0x20000220
 80127e0:	08013b7c 	.word	0x08013b7c
 80127e4:	08013b89 	.word	0x08013b89
 80127e8:	08013bb7 	.word	0x08013bb7

080127ec <fiprintf>:
 80127ec:	b40e      	push	{r1, r2, r3}
 80127ee:	b503      	push	{r0, r1, lr}
 80127f0:	4601      	mov	r1, r0
 80127f2:	ab03      	add	r3, sp, #12
 80127f4:	4805      	ldr	r0, [pc, #20]	; (801280c <fiprintf+0x20>)
 80127f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80127fa:	6800      	ldr	r0, [r0, #0]
 80127fc:	9301      	str	r3, [sp, #4]
 80127fe:	f000 f833 	bl	8012868 <_vfiprintf_r>
 8012802:	b002      	add	sp, #8
 8012804:	f85d eb04 	ldr.w	lr, [sp], #4
 8012808:	b003      	add	sp, #12
 801280a:	4770      	bx	lr
 801280c:	20000220 	.word	0x20000220

08012810 <__retarget_lock_init_recursive>:
 8012810:	4770      	bx	lr

08012812 <__retarget_lock_acquire_recursive>:
 8012812:	4770      	bx	lr

08012814 <__retarget_lock_release_recursive>:
 8012814:	4770      	bx	lr

08012816 <__sfputc_r>:
 8012816:	6893      	ldr	r3, [r2, #8]
 8012818:	3b01      	subs	r3, #1
 801281a:	2b00      	cmp	r3, #0
 801281c:	b410      	push	{r4}
 801281e:	6093      	str	r3, [r2, #8]
 8012820:	da08      	bge.n	8012834 <__sfputc_r+0x1e>
 8012822:	6994      	ldr	r4, [r2, #24]
 8012824:	42a3      	cmp	r3, r4
 8012826:	db01      	blt.n	801282c <__sfputc_r+0x16>
 8012828:	290a      	cmp	r1, #10
 801282a:	d103      	bne.n	8012834 <__sfputc_r+0x1e>
 801282c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012830:	f000 bade 	b.w	8012df0 <__swbuf_r>
 8012834:	6813      	ldr	r3, [r2, #0]
 8012836:	1c58      	adds	r0, r3, #1
 8012838:	6010      	str	r0, [r2, #0]
 801283a:	7019      	strb	r1, [r3, #0]
 801283c:	4608      	mov	r0, r1
 801283e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012842:	4770      	bx	lr

08012844 <__sfputs_r>:
 8012844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012846:	4606      	mov	r6, r0
 8012848:	460f      	mov	r7, r1
 801284a:	4614      	mov	r4, r2
 801284c:	18d5      	adds	r5, r2, r3
 801284e:	42ac      	cmp	r4, r5
 8012850:	d101      	bne.n	8012856 <__sfputs_r+0x12>
 8012852:	2000      	movs	r0, #0
 8012854:	e007      	b.n	8012866 <__sfputs_r+0x22>
 8012856:	f814 1b01 	ldrb.w	r1, [r4], #1
 801285a:	463a      	mov	r2, r7
 801285c:	4630      	mov	r0, r6
 801285e:	f7ff ffda 	bl	8012816 <__sfputc_r>
 8012862:	1c43      	adds	r3, r0, #1
 8012864:	d1f3      	bne.n	801284e <__sfputs_r+0xa>
 8012866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012868 <_vfiprintf_r>:
 8012868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801286c:	460d      	mov	r5, r1
 801286e:	b09d      	sub	sp, #116	; 0x74
 8012870:	4614      	mov	r4, r2
 8012872:	4698      	mov	r8, r3
 8012874:	4606      	mov	r6, r0
 8012876:	b118      	cbz	r0, 8012880 <_vfiprintf_r+0x18>
 8012878:	6983      	ldr	r3, [r0, #24]
 801287a:	b90b      	cbnz	r3, 8012880 <_vfiprintf_r+0x18>
 801287c:	f000 fc9a 	bl	80131b4 <__sinit>
 8012880:	4b89      	ldr	r3, [pc, #548]	; (8012aa8 <_vfiprintf_r+0x240>)
 8012882:	429d      	cmp	r5, r3
 8012884:	d11b      	bne.n	80128be <_vfiprintf_r+0x56>
 8012886:	6875      	ldr	r5, [r6, #4]
 8012888:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801288a:	07d9      	lsls	r1, r3, #31
 801288c:	d405      	bmi.n	801289a <_vfiprintf_r+0x32>
 801288e:	89ab      	ldrh	r3, [r5, #12]
 8012890:	059a      	lsls	r2, r3, #22
 8012892:	d402      	bmi.n	801289a <_vfiprintf_r+0x32>
 8012894:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012896:	f7ff ffbc 	bl	8012812 <__retarget_lock_acquire_recursive>
 801289a:	89ab      	ldrh	r3, [r5, #12]
 801289c:	071b      	lsls	r3, r3, #28
 801289e:	d501      	bpl.n	80128a4 <_vfiprintf_r+0x3c>
 80128a0:	692b      	ldr	r3, [r5, #16]
 80128a2:	b9eb      	cbnz	r3, 80128e0 <_vfiprintf_r+0x78>
 80128a4:	4629      	mov	r1, r5
 80128a6:	4630      	mov	r0, r6
 80128a8:	f000 faf4 	bl	8012e94 <__swsetup_r>
 80128ac:	b1c0      	cbz	r0, 80128e0 <_vfiprintf_r+0x78>
 80128ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80128b0:	07dc      	lsls	r4, r3, #31
 80128b2:	d50e      	bpl.n	80128d2 <_vfiprintf_r+0x6a>
 80128b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80128b8:	b01d      	add	sp, #116	; 0x74
 80128ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128be:	4b7b      	ldr	r3, [pc, #492]	; (8012aac <_vfiprintf_r+0x244>)
 80128c0:	429d      	cmp	r5, r3
 80128c2:	d101      	bne.n	80128c8 <_vfiprintf_r+0x60>
 80128c4:	68b5      	ldr	r5, [r6, #8]
 80128c6:	e7df      	b.n	8012888 <_vfiprintf_r+0x20>
 80128c8:	4b79      	ldr	r3, [pc, #484]	; (8012ab0 <_vfiprintf_r+0x248>)
 80128ca:	429d      	cmp	r5, r3
 80128cc:	bf08      	it	eq
 80128ce:	68f5      	ldreq	r5, [r6, #12]
 80128d0:	e7da      	b.n	8012888 <_vfiprintf_r+0x20>
 80128d2:	89ab      	ldrh	r3, [r5, #12]
 80128d4:	0598      	lsls	r0, r3, #22
 80128d6:	d4ed      	bmi.n	80128b4 <_vfiprintf_r+0x4c>
 80128d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80128da:	f7ff ff9b 	bl	8012814 <__retarget_lock_release_recursive>
 80128de:	e7e9      	b.n	80128b4 <_vfiprintf_r+0x4c>
 80128e0:	2300      	movs	r3, #0
 80128e2:	9309      	str	r3, [sp, #36]	; 0x24
 80128e4:	2320      	movs	r3, #32
 80128e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80128ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80128ee:	2330      	movs	r3, #48	; 0x30
 80128f0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012ab4 <_vfiprintf_r+0x24c>
 80128f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80128f8:	f04f 0901 	mov.w	r9, #1
 80128fc:	4623      	mov	r3, r4
 80128fe:	469a      	mov	sl, r3
 8012900:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012904:	b10a      	cbz	r2, 801290a <_vfiprintf_r+0xa2>
 8012906:	2a25      	cmp	r2, #37	; 0x25
 8012908:	d1f9      	bne.n	80128fe <_vfiprintf_r+0x96>
 801290a:	ebba 0b04 	subs.w	fp, sl, r4
 801290e:	d00b      	beq.n	8012928 <_vfiprintf_r+0xc0>
 8012910:	465b      	mov	r3, fp
 8012912:	4622      	mov	r2, r4
 8012914:	4629      	mov	r1, r5
 8012916:	4630      	mov	r0, r6
 8012918:	f7ff ff94 	bl	8012844 <__sfputs_r>
 801291c:	3001      	adds	r0, #1
 801291e:	f000 80aa 	beq.w	8012a76 <_vfiprintf_r+0x20e>
 8012922:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012924:	445a      	add	r2, fp
 8012926:	9209      	str	r2, [sp, #36]	; 0x24
 8012928:	f89a 3000 	ldrb.w	r3, [sl]
 801292c:	2b00      	cmp	r3, #0
 801292e:	f000 80a2 	beq.w	8012a76 <_vfiprintf_r+0x20e>
 8012932:	2300      	movs	r3, #0
 8012934:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012938:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801293c:	f10a 0a01 	add.w	sl, sl, #1
 8012940:	9304      	str	r3, [sp, #16]
 8012942:	9307      	str	r3, [sp, #28]
 8012944:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012948:	931a      	str	r3, [sp, #104]	; 0x68
 801294a:	4654      	mov	r4, sl
 801294c:	2205      	movs	r2, #5
 801294e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012952:	4858      	ldr	r0, [pc, #352]	; (8012ab4 <_vfiprintf_r+0x24c>)
 8012954:	f7ed fc8c 	bl	8000270 <memchr>
 8012958:	9a04      	ldr	r2, [sp, #16]
 801295a:	b9d8      	cbnz	r0, 8012994 <_vfiprintf_r+0x12c>
 801295c:	06d1      	lsls	r1, r2, #27
 801295e:	bf44      	itt	mi
 8012960:	2320      	movmi	r3, #32
 8012962:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012966:	0713      	lsls	r3, r2, #28
 8012968:	bf44      	itt	mi
 801296a:	232b      	movmi	r3, #43	; 0x2b
 801296c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012970:	f89a 3000 	ldrb.w	r3, [sl]
 8012974:	2b2a      	cmp	r3, #42	; 0x2a
 8012976:	d015      	beq.n	80129a4 <_vfiprintf_r+0x13c>
 8012978:	9a07      	ldr	r2, [sp, #28]
 801297a:	4654      	mov	r4, sl
 801297c:	2000      	movs	r0, #0
 801297e:	f04f 0c0a 	mov.w	ip, #10
 8012982:	4621      	mov	r1, r4
 8012984:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012988:	3b30      	subs	r3, #48	; 0x30
 801298a:	2b09      	cmp	r3, #9
 801298c:	d94e      	bls.n	8012a2c <_vfiprintf_r+0x1c4>
 801298e:	b1b0      	cbz	r0, 80129be <_vfiprintf_r+0x156>
 8012990:	9207      	str	r2, [sp, #28]
 8012992:	e014      	b.n	80129be <_vfiprintf_r+0x156>
 8012994:	eba0 0308 	sub.w	r3, r0, r8
 8012998:	fa09 f303 	lsl.w	r3, r9, r3
 801299c:	4313      	orrs	r3, r2
 801299e:	9304      	str	r3, [sp, #16]
 80129a0:	46a2      	mov	sl, r4
 80129a2:	e7d2      	b.n	801294a <_vfiprintf_r+0xe2>
 80129a4:	9b03      	ldr	r3, [sp, #12]
 80129a6:	1d19      	adds	r1, r3, #4
 80129a8:	681b      	ldr	r3, [r3, #0]
 80129aa:	9103      	str	r1, [sp, #12]
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	bfbb      	ittet	lt
 80129b0:	425b      	neglt	r3, r3
 80129b2:	f042 0202 	orrlt.w	r2, r2, #2
 80129b6:	9307      	strge	r3, [sp, #28]
 80129b8:	9307      	strlt	r3, [sp, #28]
 80129ba:	bfb8      	it	lt
 80129bc:	9204      	strlt	r2, [sp, #16]
 80129be:	7823      	ldrb	r3, [r4, #0]
 80129c0:	2b2e      	cmp	r3, #46	; 0x2e
 80129c2:	d10c      	bne.n	80129de <_vfiprintf_r+0x176>
 80129c4:	7863      	ldrb	r3, [r4, #1]
 80129c6:	2b2a      	cmp	r3, #42	; 0x2a
 80129c8:	d135      	bne.n	8012a36 <_vfiprintf_r+0x1ce>
 80129ca:	9b03      	ldr	r3, [sp, #12]
 80129cc:	1d1a      	adds	r2, r3, #4
 80129ce:	681b      	ldr	r3, [r3, #0]
 80129d0:	9203      	str	r2, [sp, #12]
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	bfb8      	it	lt
 80129d6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80129da:	3402      	adds	r4, #2
 80129dc:	9305      	str	r3, [sp, #20]
 80129de:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012ac4 <_vfiprintf_r+0x25c>
 80129e2:	7821      	ldrb	r1, [r4, #0]
 80129e4:	2203      	movs	r2, #3
 80129e6:	4650      	mov	r0, sl
 80129e8:	f7ed fc42 	bl	8000270 <memchr>
 80129ec:	b140      	cbz	r0, 8012a00 <_vfiprintf_r+0x198>
 80129ee:	2340      	movs	r3, #64	; 0x40
 80129f0:	eba0 000a 	sub.w	r0, r0, sl
 80129f4:	fa03 f000 	lsl.w	r0, r3, r0
 80129f8:	9b04      	ldr	r3, [sp, #16]
 80129fa:	4303      	orrs	r3, r0
 80129fc:	3401      	adds	r4, #1
 80129fe:	9304      	str	r3, [sp, #16]
 8012a00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012a04:	482c      	ldr	r0, [pc, #176]	; (8012ab8 <_vfiprintf_r+0x250>)
 8012a06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012a0a:	2206      	movs	r2, #6
 8012a0c:	f7ed fc30 	bl	8000270 <memchr>
 8012a10:	2800      	cmp	r0, #0
 8012a12:	d03f      	beq.n	8012a94 <_vfiprintf_r+0x22c>
 8012a14:	4b29      	ldr	r3, [pc, #164]	; (8012abc <_vfiprintf_r+0x254>)
 8012a16:	bb1b      	cbnz	r3, 8012a60 <_vfiprintf_r+0x1f8>
 8012a18:	9b03      	ldr	r3, [sp, #12]
 8012a1a:	3307      	adds	r3, #7
 8012a1c:	f023 0307 	bic.w	r3, r3, #7
 8012a20:	3308      	adds	r3, #8
 8012a22:	9303      	str	r3, [sp, #12]
 8012a24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012a26:	443b      	add	r3, r7
 8012a28:	9309      	str	r3, [sp, #36]	; 0x24
 8012a2a:	e767      	b.n	80128fc <_vfiprintf_r+0x94>
 8012a2c:	fb0c 3202 	mla	r2, ip, r2, r3
 8012a30:	460c      	mov	r4, r1
 8012a32:	2001      	movs	r0, #1
 8012a34:	e7a5      	b.n	8012982 <_vfiprintf_r+0x11a>
 8012a36:	2300      	movs	r3, #0
 8012a38:	3401      	adds	r4, #1
 8012a3a:	9305      	str	r3, [sp, #20]
 8012a3c:	4619      	mov	r1, r3
 8012a3e:	f04f 0c0a 	mov.w	ip, #10
 8012a42:	4620      	mov	r0, r4
 8012a44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012a48:	3a30      	subs	r2, #48	; 0x30
 8012a4a:	2a09      	cmp	r2, #9
 8012a4c:	d903      	bls.n	8012a56 <_vfiprintf_r+0x1ee>
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	d0c5      	beq.n	80129de <_vfiprintf_r+0x176>
 8012a52:	9105      	str	r1, [sp, #20]
 8012a54:	e7c3      	b.n	80129de <_vfiprintf_r+0x176>
 8012a56:	fb0c 2101 	mla	r1, ip, r1, r2
 8012a5a:	4604      	mov	r4, r0
 8012a5c:	2301      	movs	r3, #1
 8012a5e:	e7f0      	b.n	8012a42 <_vfiprintf_r+0x1da>
 8012a60:	ab03      	add	r3, sp, #12
 8012a62:	9300      	str	r3, [sp, #0]
 8012a64:	462a      	mov	r2, r5
 8012a66:	4b16      	ldr	r3, [pc, #88]	; (8012ac0 <_vfiprintf_r+0x258>)
 8012a68:	a904      	add	r1, sp, #16
 8012a6a:	4630      	mov	r0, r6
 8012a6c:	f3af 8000 	nop.w
 8012a70:	4607      	mov	r7, r0
 8012a72:	1c78      	adds	r0, r7, #1
 8012a74:	d1d6      	bne.n	8012a24 <_vfiprintf_r+0x1bc>
 8012a76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012a78:	07d9      	lsls	r1, r3, #31
 8012a7a:	d405      	bmi.n	8012a88 <_vfiprintf_r+0x220>
 8012a7c:	89ab      	ldrh	r3, [r5, #12]
 8012a7e:	059a      	lsls	r2, r3, #22
 8012a80:	d402      	bmi.n	8012a88 <_vfiprintf_r+0x220>
 8012a82:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012a84:	f7ff fec6 	bl	8012814 <__retarget_lock_release_recursive>
 8012a88:	89ab      	ldrh	r3, [r5, #12]
 8012a8a:	065b      	lsls	r3, r3, #25
 8012a8c:	f53f af12 	bmi.w	80128b4 <_vfiprintf_r+0x4c>
 8012a90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012a92:	e711      	b.n	80128b8 <_vfiprintf_r+0x50>
 8012a94:	ab03      	add	r3, sp, #12
 8012a96:	9300      	str	r3, [sp, #0]
 8012a98:	462a      	mov	r2, r5
 8012a9a:	4b09      	ldr	r3, [pc, #36]	; (8012ac0 <_vfiprintf_r+0x258>)
 8012a9c:	a904      	add	r1, sp, #16
 8012a9e:	4630      	mov	r0, r6
 8012aa0:	f000 f880 	bl	8012ba4 <_printf_i>
 8012aa4:	e7e4      	b.n	8012a70 <_vfiprintf_r+0x208>
 8012aa6:	bf00      	nop
 8012aa8:	08013c0c 	.word	0x08013c0c
 8012aac:	08013c2c 	.word	0x08013c2c
 8012ab0:	08013bec 	.word	0x08013bec
 8012ab4:	08013bb8 	.word	0x08013bb8
 8012ab8:	08013bc2 	.word	0x08013bc2
 8012abc:	00000000 	.word	0x00000000
 8012ac0:	08012845 	.word	0x08012845
 8012ac4:	08013bbe 	.word	0x08013bbe

08012ac8 <_printf_common>:
 8012ac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012acc:	4616      	mov	r6, r2
 8012ace:	4699      	mov	r9, r3
 8012ad0:	688a      	ldr	r2, [r1, #8]
 8012ad2:	690b      	ldr	r3, [r1, #16]
 8012ad4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012ad8:	4293      	cmp	r3, r2
 8012ada:	bfb8      	it	lt
 8012adc:	4613      	movlt	r3, r2
 8012ade:	6033      	str	r3, [r6, #0]
 8012ae0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012ae4:	4607      	mov	r7, r0
 8012ae6:	460c      	mov	r4, r1
 8012ae8:	b10a      	cbz	r2, 8012aee <_printf_common+0x26>
 8012aea:	3301      	adds	r3, #1
 8012aec:	6033      	str	r3, [r6, #0]
 8012aee:	6823      	ldr	r3, [r4, #0]
 8012af0:	0699      	lsls	r1, r3, #26
 8012af2:	bf42      	ittt	mi
 8012af4:	6833      	ldrmi	r3, [r6, #0]
 8012af6:	3302      	addmi	r3, #2
 8012af8:	6033      	strmi	r3, [r6, #0]
 8012afa:	6825      	ldr	r5, [r4, #0]
 8012afc:	f015 0506 	ands.w	r5, r5, #6
 8012b00:	d106      	bne.n	8012b10 <_printf_common+0x48>
 8012b02:	f104 0a19 	add.w	sl, r4, #25
 8012b06:	68e3      	ldr	r3, [r4, #12]
 8012b08:	6832      	ldr	r2, [r6, #0]
 8012b0a:	1a9b      	subs	r3, r3, r2
 8012b0c:	42ab      	cmp	r3, r5
 8012b0e:	dc26      	bgt.n	8012b5e <_printf_common+0x96>
 8012b10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012b14:	1e13      	subs	r3, r2, #0
 8012b16:	6822      	ldr	r2, [r4, #0]
 8012b18:	bf18      	it	ne
 8012b1a:	2301      	movne	r3, #1
 8012b1c:	0692      	lsls	r2, r2, #26
 8012b1e:	d42b      	bmi.n	8012b78 <_printf_common+0xb0>
 8012b20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012b24:	4649      	mov	r1, r9
 8012b26:	4638      	mov	r0, r7
 8012b28:	47c0      	blx	r8
 8012b2a:	3001      	adds	r0, #1
 8012b2c:	d01e      	beq.n	8012b6c <_printf_common+0xa4>
 8012b2e:	6823      	ldr	r3, [r4, #0]
 8012b30:	68e5      	ldr	r5, [r4, #12]
 8012b32:	6832      	ldr	r2, [r6, #0]
 8012b34:	f003 0306 	and.w	r3, r3, #6
 8012b38:	2b04      	cmp	r3, #4
 8012b3a:	bf08      	it	eq
 8012b3c:	1aad      	subeq	r5, r5, r2
 8012b3e:	68a3      	ldr	r3, [r4, #8]
 8012b40:	6922      	ldr	r2, [r4, #16]
 8012b42:	bf0c      	ite	eq
 8012b44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012b48:	2500      	movne	r5, #0
 8012b4a:	4293      	cmp	r3, r2
 8012b4c:	bfc4      	itt	gt
 8012b4e:	1a9b      	subgt	r3, r3, r2
 8012b50:	18ed      	addgt	r5, r5, r3
 8012b52:	2600      	movs	r6, #0
 8012b54:	341a      	adds	r4, #26
 8012b56:	42b5      	cmp	r5, r6
 8012b58:	d11a      	bne.n	8012b90 <_printf_common+0xc8>
 8012b5a:	2000      	movs	r0, #0
 8012b5c:	e008      	b.n	8012b70 <_printf_common+0xa8>
 8012b5e:	2301      	movs	r3, #1
 8012b60:	4652      	mov	r2, sl
 8012b62:	4649      	mov	r1, r9
 8012b64:	4638      	mov	r0, r7
 8012b66:	47c0      	blx	r8
 8012b68:	3001      	adds	r0, #1
 8012b6a:	d103      	bne.n	8012b74 <_printf_common+0xac>
 8012b6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012b70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012b74:	3501      	adds	r5, #1
 8012b76:	e7c6      	b.n	8012b06 <_printf_common+0x3e>
 8012b78:	18e1      	adds	r1, r4, r3
 8012b7a:	1c5a      	adds	r2, r3, #1
 8012b7c:	2030      	movs	r0, #48	; 0x30
 8012b7e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012b82:	4422      	add	r2, r4
 8012b84:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012b88:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012b8c:	3302      	adds	r3, #2
 8012b8e:	e7c7      	b.n	8012b20 <_printf_common+0x58>
 8012b90:	2301      	movs	r3, #1
 8012b92:	4622      	mov	r2, r4
 8012b94:	4649      	mov	r1, r9
 8012b96:	4638      	mov	r0, r7
 8012b98:	47c0      	blx	r8
 8012b9a:	3001      	adds	r0, #1
 8012b9c:	d0e6      	beq.n	8012b6c <_printf_common+0xa4>
 8012b9e:	3601      	adds	r6, #1
 8012ba0:	e7d9      	b.n	8012b56 <_printf_common+0x8e>
	...

08012ba4 <_printf_i>:
 8012ba4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012ba8:	460c      	mov	r4, r1
 8012baa:	4691      	mov	r9, r2
 8012bac:	7e27      	ldrb	r7, [r4, #24]
 8012bae:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012bb0:	2f78      	cmp	r7, #120	; 0x78
 8012bb2:	4680      	mov	r8, r0
 8012bb4:	469a      	mov	sl, r3
 8012bb6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012bba:	d807      	bhi.n	8012bcc <_printf_i+0x28>
 8012bbc:	2f62      	cmp	r7, #98	; 0x62
 8012bbe:	d80a      	bhi.n	8012bd6 <_printf_i+0x32>
 8012bc0:	2f00      	cmp	r7, #0
 8012bc2:	f000 80d8 	beq.w	8012d76 <_printf_i+0x1d2>
 8012bc6:	2f58      	cmp	r7, #88	; 0x58
 8012bc8:	f000 80a3 	beq.w	8012d12 <_printf_i+0x16e>
 8012bcc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8012bd0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012bd4:	e03a      	b.n	8012c4c <_printf_i+0xa8>
 8012bd6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012bda:	2b15      	cmp	r3, #21
 8012bdc:	d8f6      	bhi.n	8012bcc <_printf_i+0x28>
 8012bde:	a001      	add	r0, pc, #4	; (adr r0, 8012be4 <_printf_i+0x40>)
 8012be0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8012be4:	08012c3d 	.word	0x08012c3d
 8012be8:	08012c51 	.word	0x08012c51
 8012bec:	08012bcd 	.word	0x08012bcd
 8012bf0:	08012bcd 	.word	0x08012bcd
 8012bf4:	08012bcd 	.word	0x08012bcd
 8012bf8:	08012bcd 	.word	0x08012bcd
 8012bfc:	08012c51 	.word	0x08012c51
 8012c00:	08012bcd 	.word	0x08012bcd
 8012c04:	08012bcd 	.word	0x08012bcd
 8012c08:	08012bcd 	.word	0x08012bcd
 8012c0c:	08012bcd 	.word	0x08012bcd
 8012c10:	08012d5d 	.word	0x08012d5d
 8012c14:	08012c81 	.word	0x08012c81
 8012c18:	08012d3f 	.word	0x08012d3f
 8012c1c:	08012bcd 	.word	0x08012bcd
 8012c20:	08012bcd 	.word	0x08012bcd
 8012c24:	08012d7f 	.word	0x08012d7f
 8012c28:	08012bcd 	.word	0x08012bcd
 8012c2c:	08012c81 	.word	0x08012c81
 8012c30:	08012bcd 	.word	0x08012bcd
 8012c34:	08012bcd 	.word	0x08012bcd
 8012c38:	08012d47 	.word	0x08012d47
 8012c3c:	680b      	ldr	r3, [r1, #0]
 8012c3e:	1d1a      	adds	r2, r3, #4
 8012c40:	681b      	ldr	r3, [r3, #0]
 8012c42:	600a      	str	r2, [r1, #0]
 8012c44:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8012c48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012c4c:	2301      	movs	r3, #1
 8012c4e:	e0a3      	b.n	8012d98 <_printf_i+0x1f4>
 8012c50:	6825      	ldr	r5, [r4, #0]
 8012c52:	6808      	ldr	r0, [r1, #0]
 8012c54:	062e      	lsls	r6, r5, #24
 8012c56:	f100 0304 	add.w	r3, r0, #4
 8012c5a:	d50a      	bpl.n	8012c72 <_printf_i+0xce>
 8012c5c:	6805      	ldr	r5, [r0, #0]
 8012c5e:	600b      	str	r3, [r1, #0]
 8012c60:	2d00      	cmp	r5, #0
 8012c62:	da03      	bge.n	8012c6c <_printf_i+0xc8>
 8012c64:	232d      	movs	r3, #45	; 0x2d
 8012c66:	426d      	negs	r5, r5
 8012c68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012c6c:	485e      	ldr	r0, [pc, #376]	; (8012de8 <_printf_i+0x244>)
 8012c6e:	230a      	movs	r3, #10
 8012c70:	e019      	b.n	8012ca6 <_printf_i+0x102>
 8012c72:	f015 0f40 	tst.w	r5, #64	; 0x40
 8012c76:	6805      	ldr	r5, [r0, #0]
 8012c78:	600b      	str	r3, [r1, #0]
 8012c7a:	bf18      	it	ne
 8012c7c:	b22d      	sxthne	r5, r5
 8012c7e:	e7ef      	b.n	8012c60 <_printf_i+0xbc>
 8012c80:	680b      	ldr	r3, [r1, #0]
 8012c82:	6825      	ldr	r5, [r4, #0]
 8012c84:	1d18      	adds	r0, r3, #4
 8012c86:	6008      	str	r0, [r1, #0]
 8012c88:	0628      	lsls	r0, r5, #24
 8012c8a:	d501      	bpl.n	8012c90 <_printf_i+0xec>
 8012c8c:	681d      	ldr	r5, [r3, #0]
 8012c8e:	e002      	b.n	8012c96 <_printf_i+0xf2>
 8012c90:	0669      	lsls	r1, r5, #25
 8012c92:	d5fb      	bpl.n	8012c8c <_printf_i+0xe8>
 8012c94:	881d      	ldrh	r5, [r3, #0]
 8012c96:	4854      	ldr	r0, [pc, #336]	; (8012de8 <_printf_i+0x244>)
 8012c98:	2f6f      	cmp	r7, #111	; 0x6f
 8012c9a:	bf0c      	ite	eq
 8012c9c:	2308      	moveq	r3, #8
 8012c9e:	230a      	movne	r3, #10
 8012ca0:	2100      	movs	r1, #0
 8012ca2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012ca6:	6866      	ldr	r6, [r4, #4]
 8012ca8:	60a6      	str	r6, [r4, #8]
 8012caa:	2e00      	cmp	r6, #0
 8012cac:	bfa2      	ittt	ge
 8012cae:	6821      	ldrge	r1, [r4, #0]
 8012cb0:	f021 0104 	bicge.w	r1, r1, #4
 8012cb4:	6021      	strge	r1, [r4, #0]
 8012cb6:	b90d      	cbnz	r5, 8012cbc <_printf_i+0x118>
 8012cb8:	2e00      	cmp	r6, #0
 8012cba:	d04d      	beq.n	8012d58 <_printf_i+0x1b4>
 8012cbc:	4616      	mov	r6, r2
 8012cbe:	fbb5 f1f3 	udiv	r1, r5, r3
 8012cc2:	fb03 5711 	mls	r7, r3, r1, r5
 8012cc6:	5dc7      	ldrb	r7, [r0, r7]
 8012cc8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012ccc:	462f      	mov	r7, r5
 8012cce:	42bb      	cmp	r3, r7
 8012cd0:	460d      	mov	r5, r1
 8012cd2:	d9f4      	bls.n	8012cbe <_printf_i+0x11a>
 8012cd4:	2b08      	cmp	r3, #8
 8012cd6:	d10b      	bne.n	8012cf0 <_printf_i+0x14c>
 8012cd8:	6823      	ldr	r3, [r4, #0]
 8012cda:	07df      	lsls	r7, r3, #31
 8012cdc:	d508      	bpl.n	8012cf0 <_printf_i+0x14c>
 8012cde:	6923      	ldr	r3, [r4, #16]
 8012ce0:	6861      	ldr	r1, [r4, #4]
 8012ce2:	4299      	cmp	r1, r3
 8012ce4:	bfde      	ittt	le
 8012ce6:	2330      	movle	r3, #48	; 0x30
 8012ce8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012cec:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8012cf0:	1b92      	subs	r2, r2, r6
 8012cf2:	6122      	str	r2, [r4, #16]
 8012cf4:	f8cd a000 	str.w	sl, [sp]
 8012cf8:	464b      	mov	r3, r9
 8012cfa:	aa03      	add	r2, sp, #12
 8012cfc:	4621      	mov	r1, r4
 8012cfe:	4640      	mov	r0, r8
 8012d00:	f7ff fee2 	bl	8012ac8 <_printf_common>
 8012d04:	3001      	adds	r0, #1
 8012d06:	d14c      	bne.n	8012da2 <_printf_i+0x1fe>
 8012d08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012d0c:	b004      	add	sp, #16
 8012d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d12:	4835      	ldr	r0, [pc, #212]	; (8012de8 <_printf_i+0x244>)
 8012d14:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8012d18:	6823      	ldr	r3, [r4, #0]
 8012d1a:	680e      	ldr	r6, [r1, #0]
 8012d1c:	061f      	lsls	r7, r3, #24
 8012d1e:	f856 5b04 	ldr.w	r5, [r6], #4
 8012d22:	600e      	str	r6, [r1, #0]
 8012d24:	d514      	bpl.n	8012d50 <_printf_i+0x1ac>
 8012d26:	07d9      	lsls	r1, r3, #31
 8012d28:	bf44      	itt	mi
 8012d2a:	f043 0320 	orrmi.w	r3, r3, #32
 8012d2e:	6023      	strmi	r3, [r4, #0]
 8012d30:	b91d      	cbnz	r5, 8012d3a <_printf_i+0x196>
 8012d32:	6823      	ldr	r3, [r4, #0]
 8012d34:	f023 0320 	bic.w	r3, r3, #32
 8012d38:	6023      	str	r3, [r4, #0]
 8012d3a:	2310      	movs	r3, #16
 8012d3c:	e7b0      	b.n	8012ca0 <_printf_i+0xfc>
 8012d3e:	6823      	ldr	r3, [r4, #0]
 8012d40:	f043 0320 	orr.w	r3, r3, #32
 8012d44:	6023      	str	r3, [r4, #0]
 8012d46:	2378      	movs	r3, #120	; 0x78
 8012d48:	4828      	ldr	r0, [pc, #160]	; (8012dec <_printf_i+0x248>)
 8012d4a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012d4e:	e7e3      	b.n	8012d18 <_printf_i+0x174>
 8012d50:	065e      	lsls	r6, r3, #25
 8012d52:	bf48      	it	mi
 8012d54:	b2ad      	uxthmi	r5, r5
 8012d56:	e7e6      	b.n	8012d26 <_printf_i+0x182>
 8012d58:	4616      	mov	r6, r2
 8012d5a:	e7bb      	b.n	8012cd4 <_printf_i+0x130>
 8012d5c:	680b      	ldr	r3, [r1, #0]
 8012d5e:	6826      	ldr	r6, [r4, #0]
 8012d60:	6960      	ldr	r0, [r4, #20]
 8012d62:	1d1d      	adds	r5, r3, #4
 8012d64:	600d      	str	r5, [r1, #0]
 8012d66:	0635      	lsls	r5, r6, #24
 8012d68:	681b      	ldr	r3, [r3, #0]
 8012d6a:	d501      	bpl.n	8012d70 <_printf_i+0x1cc>
 8012d6c:	6018      	str	r0, [r3, #0]
 8012d6e:	e002      	b.n	8012d76 <_printf_i+0x1d2>
 8012d70:	0671      	lsls	r1, r6, #25
 8012d72:	d5fb      	bpl.n	8012d6c <_printf_i+0x1c8>
 8012d74:	8018      	strh	r0, [r3, #0]
 8012d76:	2300      	movs	r3, #0
 8012d78:	6123      	str	r3, [r4, #16]
 8012d7a:	4616      	mov	r6, r2
 8012d7c:	e7ba      	b.n	8012cf4 <_printf_i+0x150>
 8012d7e:	680b      	ldr	r3, [r1, #0]
 8012d80:	1d1a      	adds	r2, r3, #4
 8012d82:	600a      	str	r2, [r1, #0]
 8012d84:	681e      	ldr	r6, [r3, #0]
 8012d86:	6862      	ldr	r2, [r4, #4]
 8012d88:	2100      	movs	r1, #0
 8012d8a:	4630      	mov	r0, r6
 8012d8c:	f7ed fa70 	bl	8000270 <memchr>
 8012d90:	b108      	cbz	r0, 8012d96 <_printf_i+0x1f2>
 8012d92:	1b80      	subs	r0, r0, r6
 8012d94:	6060      	str	r0, [r4, #4]
 8012d96:	6863      	ldr	r3, [r4, #4]
 8012d98:	6123      	str	r3, [r4, #16]
 8012d9a:	2300      	movs	r3, #0
 8012d9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012da0:	e7a8      	b.n	8012cf4 <_printf_i+0x150>
 8012da2:	6923      	ldr	r3, [r4, #16]
 8012da4:	4632      	mov	r2, r6
 8012da6:	4649      	mov	r1, r9
 8012da8:	4640      	mov	r0, r8
 8012daa:	47d0      	blx	sl
 8012dac:	3001      	adds	r0, #1
 8012dae:	d0ab      	beq.n	8012d08 <_printf_i+0x164>
 8012db0:	6823      	ldr	r3, [r4, #0]
 8012db2:	079b      	lsls	r3, r3, #30
 8012db4:	d413      	bmi.n	8012dde <_printf_i+0x23a>
 8012db6:	68e0      	ldr	r0, [r4, #12]
 8012db8:	9b03      	ldr	r3, [sp, #12]
 8012dba:	4298      	cmp	r0, r3
 8012dbc:	bfb8      	it	lt
 8012dbe:	4618      	movlt	r0, r3
 8012dc0:	e7a4      	b.n	8012d0c <_printf_i+0x168>
 8012dc2:	2301      	movs	r3, #1
 8012dc4:	4632      	mov	r2, r6
 8012dc6:	4649      	mov	r1, r9
 8012dc8:	4640      	mov	r0, r8
 8012dca:	47d0      	blx	sl
 8012dcc:	3001      	adds	r0, #1
 8012dce:	d09b      	beq.n	8012d08 <_printf_i+0x164>
 8012dd0:	3501      	adds	r5, #1
 8012dd2:	68e3      	ldr	r3, [r4, #12]
 8012dd4:	9903      	ldr	r1, [sp, #12]
 8012dd6:	1a5b      	subs	r3, r3, r1
 8012dd8:	42ab      	cmp	r3, r5
 8012dda:	dcf2      	bgt.n	8012dc2 <_printf_i+0x21e>
 8012ddc:	e7eb      	b.n	8012db6 <_printf_i+0x212>
 8012dde:	2500      	movs	r5, #0
 8012de0:	f104 0619 	add.w	r6, r4, #25
 8012de4:	e7f5      	b.n	8012dd2 <_printf_i+0x22e>
 8012de6:	bf00      	nop
 8012de8:	08013bc9 	.word	0x08013bc9
 8012dec:	08013bda 	.word	0x08013bda

08012df0 <__swbuf_r>:
 8012df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012df2:	460e      	mov	r6, r1
 8012df4:	4614      	mov	r4, r2
 8012df6:	4605      	mov	r5, r0
 8012df8:	b118      	cbz	r0, 8012e02 <__swbuf_r+0x12>
 8012dfa:	6983      	ldr	r3, [r0, #24]
 8012dfc:	b90b      	cbnz	r3, 8012e02 <__swbuf_r+0x12>
 8012dfe:	f000 f9d9 	bl	80131b4 <__sinit>
 8012e02:	4b21      	ldr	r3, [pc, #132]	; (8012e88 <__swbuf_r+0x98>)
 8012e04:	429c      	cmp	r4, r3
 8012e06:	d12b      	bne.n	8012e60 <__swbuf_r+0x70>
 8012e08:	686c      	ldr	r4, [r5, #4]
 8012e0a:	69a3      	ldr	r3, [r4, #24]
 8012e0c:	60a3      	str	r3, [r4, #8]
 8012e0e:	89a3      	ldrh	r3, [r4, #12]
 8012e10:	071a      	lsls	r2, r3, #28
 8012e12:	d52f      	bpl.n	8012e74 <__swbuf_r+0x84>
 8012e14:	6923      	ldr	r3, [r4, #16]
 8012e16:	b36b      	cbz	r3, 8012e74 <__swbuf_r+0x84>
 8012e18:	6923      	ldr	r3, [r4, #16]
 8012e1a:	6820      	ldr	r0, [r4, #0]
 8012e1c:	1ac0      	subs	r0, r0, r3
 8012e1e:	6963      	ldr	r3, [r4, #20]
 8012e20:	b2f6      	uxtb	r6, r6
 8012e22:	4283      	cmp	r3, r0
 8012e24:	4637      	mov	r7, r6
 8012e26:	dc04      	bgt.n	8012e32 <__swbuf_r+0x42>
 8012e28:	4621      	mov	r1, r4
 8012e2a:	4628      	mov	r0, r5
 8012e2c:	f000 f92e 	bl	801308c <_fflush_r>
 8012e30:	bb30      	cbnz	r0, 8012e80 <__swbuf_r+0x90>
 8012e32:	68a3      	ldr	r3, [r4, #8]
 8012e34:	3b01      	subs	r3, #1
 8012e36:	60a3      	str	r3, [r4, #8]
 8012e38:	6823      	ldr	r3, [r4, #0]
 8012e3a:	1c5a      	adds	r2, r3, #1
 8012e3c:	6022      	str	r2, [r4, #0]
 8012e3e:	701e      	strb	r6, [r3, #0]
 8012e40:	6963      	ldr	r3, [r4, #20]
 8012e42:	3001      	adds	r0, #1
 8012e44:	4283      	cmp	r3, r0
 8012e46:	d004      	beq.n	8012e52 <__swbuf_r+0x62>
 8012e48:	89a3      	ldrh	r3, [r4, #12]
 8012e4a:	07db      	lsls	r3, r3, #31
 8012e4c:	d506      	bpl.n	8012e5c <__swbuf_r+0x6c>
 8012e4e:	2e0a      	cmp	r6, #10
 8012e50:	d104      	bne.n	8012e5c <__swbuf_r+0x6c>
 8012e52:	4621      	mov	r1, r4
 8012e54:	4628      	mov	r0, r5
 8012e56:	f000 f919 	bl	801308c <_fflush_r>
 8012e5a:	b988      	cbnz	r0, 8012e80 <__swbuf_r+0x90>
 8012e5c:	4638      	mov	r0, r7
 8012e5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012e60:	4b0a      	ldr	r3, [pc, #40]	; (8012e8c <__swbuf_r+0x9c>)
 8012e62:	429c      	cmp	r4, r3
 8012e64:	d101      	bne.n	8012e6a <__swbuf_r+0x7a>
 8012e66:	68ac      	ldr	r4, [r5, #8]
 8012e68:	e7cf      	b.n	8012e0a <__swbuf_r+0x1a>
 8012e6a:	4b09      	ldr	r3, [pc, #36]	; (8012e90 <__swbuf_r+0xa0>)
 8012e6c:	429c      	cmp	r4, r3
 8012e6e:	bf08      	it	eq
 8012e70:	68ec      	ldreq	r4, [r5, #12]
 8012e72:	e7ca      	b.n	8012e0a <__swbuf_r+0x1a>
 8012e74:	4621      	mov	r1, r4
 8012e76:	4628      	mov	r0, r5
 8012e78:	f000 f80c 	bl	8012e94 <__swsetup_r>
 8012e7c:	2800      	cmp	r0, #0
 8012e7e:	d0cb      	beq.n	8012e18 <__swbuf_r+0x28>
 8012e80:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8012e84:	e7ea      	b.n	8012e5c <__swbuf_r+0x6c>
 8012e86:	bf00      	nop
 8012e88:	08013c0c 	.word	0x08013c0c
 8012e8c:	08013c2c 	.word	0x08013c2c
 8012e90:	08013bec 	.word	0x08013bec

08012e94 <__swsetup_r>:
 8012e94:	4b32      	ldr	r3, [pc, #200]	; (8012f60 <__swsetup_r+0xcc>)
 8012e96:	b570      	push	{r4, r5, r6, lr}
 8012e98:	681d      	ldr	r5, [r3, #0]
 8012e9a:	4606      	mov	r6, r0
 8012e9c:	460c      	mov	r4, r1
 8012e9e:	b125      	cbz	r5, 8012eaa <__swsetup_r+0x16>
 8012ea0:	69ab      	ldr	r3, [r5, #24]
 8012ea2:	b913      	cbnz	r3, 8012eaa <__swsetup_r+0x16>
 8012ea4:	4628      	mov	r0, r5
 8012ea6:	f000 f985 	bl	80131b4 <__sinit>
 8012eaa:	4b2e      	ldr	r3, [pc, #184]	; (8012f64 <__swsetup_r+0xd0>)
 8012eac:	429c      	cmp	r4, r3
 8012eae:	d10f      	bne.n	8012ed0 <__swsetup_r+0x3c>
 8012eb0:	686c      	ldr	r4, [r5, #4]
 8012eb2:	89a3      	ldrh	r3, [r4, #12]
 8012eb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012eb8:	0719      	lsls	r1, r3, #28
 8012eba:	d42c      	bmi.n	8012f16 <__swsetup_r+0x82>
 8012ebc:	06dd      	lsls	r5, r3, #27
 8012ebe:	d411      	bmi.n	8012ee4 <__swsetup_r+0x50>
 8012ec0:	2309      	movs	r3, #9
 8012ec2:	6033      	str	r3, [r6, #0]
 8012ec4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012ec8:	81a3      	strh	r3, [r4, #12]
 8012eca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012ece:	e03e      	b.n	8012f4e <__swsetup_r+0xba>
 8012ed0:	4b25      	ldr	r3, [pc, #148]	; (8012f68 <__swsetup_r+0xd4>)
 8012ed2:	429c      	cmp	r4, r3
 8012ed4:	d101      	bne.n	8012eda <__swsetup_r+0x46>
 8012ed6:	68ac      	ldr	r4, [r5, #8]
 8012ed8:	e7eb      	b.n	8012eb2 <__swsetup_r+0x1e>
 8012eda:	4b24      	ldr	r3, [pc, #144]	; (8012f6c <__swsetup_r+0xd8>)
 8012edc:	429c      	cmp	r4, r3
 8012ede:	bf08      	it	eq
 8012ee0:	68ec      	ldreq	r4, [r5, #12]
 8012ee2:	e7e6      	b.n	8012eb2 <__swsetup_r+0x1e>
 8012ee4:	0758      	lsls	r0, r3, #29
 8012ee6:	d512      	bpl.n	8012f0e <__swsetup_r+0x7a>
 8012ee8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012eea:	b141      	cbz	r1, 8012efe <__swsetup_r+0x6a>
 8012eec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012ef0:	4299      	cmp	r1, r3
 8012ef2:	d002      	beq.n	8012efa <__swsetup_r+0x66>
 8012ef4:	4630      	mov	r0, r6
 8012ef6:	f7fd fd23 	bl	8010940 <_free_r>
 8012efa:	2300      	movs	r3, #0
 8012efc:	6363      	str	r3, [r4, #52]	; 0x34
 8012efe:	89a3      	ldrh	r3, [r4, #12]
 8012f00:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012f04:	81a3      	strh	r3, [r4, #12]
 8012f06:	2300      	movs	r3, #0
 8012f08:	6063      	str	r3, [r4, #4]
 8012f0a:	6923      	ldr	r3, [r4, #16]
 8012f0c:	6023      	str	r3, [r4, #0]
 8012f0e:	89a3      	ldrh	r3, [r4, #12]
 8012f10:	f043 0308 	orr.w	r3, r3, #8
 8012f14:	81a3      	strh	r3, [r4, #12]
 8012f16:	6923      	ldr	r3, [r4, #16]
 8012f18:	b94b      	cbnz	r3, 8012f2e <__swsetup_r+0x9a>
 8012f1a:	89a3      	ldrh	r3, [r4, #12]
 8012f1c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012f20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012f24:	d003      	beq.n	8012f2e <__swsetup_r+0x9a>
 8012f26:	4621      	mov	r1, r4
 8012f28:	4630      	mov	r0, r6
 8012f2a:	f000 fa05 	bl	8013338 <__smakebuf_r>
 8012f2e:	89a0      	ldrh	r0, [r4, #12]
 8012f30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012f34:	f010 0301 	ands.w	r3, r0, #1
 8012f38:	d00a      	beq.n	8012f50 <__swsetup_r+0xbc>
 8012f3a:	2300      	movs	r3, #0
 8012f3c:	60a3      	str	r3, [r4, #8]
 8012f3e:	6963      	ldr	r3, [r4, #20]
 8012f40:	425b      	negs	r3, r3
 8012f42:	61a3      	str	r3, [r4, #24]
 8012f44:	6923      	ldr	r3, [r4, #16]
 8012f46:	b943      	cbnz	r3, 8012f5a <__swsetup_r+0xc6>
 8012f48:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012f4c:	d1ba      	bne.n	8012ec4 <__swsetup_r+0x30>
 8012f4e:	bd70      	pop	{r4, r5, r6, pc}
 8012f50:	0781      	lsls	r1, r0, #30
 8012f52:	bf58      	it	pl
 8012f54:	6963      	ldrpl	r3, [r4, #20]
 8012f56:	60a3      	str	r3, [r4, #8]
 8012f58:	e7f4      	b.n	8012f44 <__swsetup_r+0xb0>
 8012f5a:	2000      	movs	r0, #0
 8012f5c:	e7f7      	b.n	8012f4e <__swsetup_r+0xba>
 8012f5e:	bf00      	nop
 8012f60:	20000220 	.word	0x20000220
 8012f64:	08013c0c 	.word	0x08013c0c
 8012f68:	08013c2c 	.word	0x08013c2c
 8012f6c:	08013bec 	.word	0x08013bec

08012f70 <abort>:
 8012f70:	b508      	push	{r3, lr}
 8012f72:	2006      	movs	r0, #6
 8012f74:	f000 fa48 	bl	8013408 <raise>
 8012f78:	2001      	movs	r0, #1
 8012f7a:	f7ee fddf 	bl	8001b3c <_exit>
	...

08012f80 <__sflush_r>:
 8012f80:	898a      	ldrh	r2, [r1, #12]
 8012f82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f86:	4605      	mov	r5, r0
 8012f88:	0710      	lsls	r0, r2, #28
 8012f8a:	460c      	mov	r4, r1
 8012f8c:	d458      	bmi.n	8013040 <__sflush_r+0xc0>
 8012f8e:	684b      	ldr	r3, [r1, #4]
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	dc05      	bgt.n	8012fa0 <__sflush_r+0x20>
 8012f94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	dc02      	bgt.n	8012fa0 <__sflush_r+0x20>
 8012f9a:	2000      	movs	r0, #0
 8012f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012fa0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012fa2:	2e00      	cmp	r6, #0
 8012fa4:	d0f9      	beq.n	8012f9a <__sflush_r+0x1a>
 8012fa6:	2300      	movs	r3, #0
 8012fa8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012fac:	682f      	ldr	r7, [r5, #0]
 8012fae:	602b      	str	r3, [r5, #0]
 8012fb0:	d032      	beq.n	8013018 <__sflush_r+0x98>
 8012fb2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012fb4:	89a3      	ldrh	r3, [r4, #12]
 8012fb6:	075a      	lsls	r2, r3, #29
 8012fb8:	d505      	bpl.n	8012fc6 <__sflush_r+0x46>
 8012fba:	6863      	ldr	r3, [r4, #4]
 8012fbc:	1ac0      	subs	r0, r0, r3
 8012fbe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012fc0:	b10b      	cbz	r3, 8012fc6 <__sflush_r+0x46>
 8012fc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012fc4:	1ac0      	subs	r0, r0, r3
 8012fc6:	2300      	movs	r3, #0
 8012fc8:	4602      	mov	r2, r0
 8012fca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012fcc:	6a21      	ldr	r1, [r4, #32]
 8012fce:	4628      	mov	r0, r5
 8012fd0:	47b0      	blx	r6
 8012fd2:	1c43      	adds	r3, r0, #1
 8012fd4:	89a3      	ldrh	r3, [r4, #12]
 8012fd6:	d106      	bne.n	8012fe6 <__sflush_r+0x66>
 8012fd8:	6829      	ldr	r1, [r5, #0]
 8012fda:	291d      	cmp	r1, #29
 8012fdc:	d82c      	bhi.n	8013038 <__sflush_r+0xb8>
 8012fde:	4a2a      	ldr	r2, [pc, #168]	; (8013088 <__sflush_r+0x108>)
 8012fe0:	40ca      	lsrs	r2, r1
 8012fe2:	07d6      	lsls	r6, r2, #31
 8012fe4:	d528      	bpl.n	8013038 <__sflush_r+0xb8>
 8012fe6:	2200      	movs	r2, #0
 8012fe8:	6062      	str	r2, [r4, #4]
 8012fea:	04d9      	lsls	r1, r3, #19
 8012fec:	6922      	ldr	r2, [r4, #16]
 8012fee:	6022      	str	r2, [r4, #0]
 8012ff0:	d504      	bpl.n	8012ffc <__sflush_r+0x7c>
 8012ff2:	1c42      	adds	r2, r0, #1
 8012ff4:	d101      	bne.n	8012ffa <__sflush_r+0x7a>
 8012ff6:	682b      	ldr	r3, [r5, #0]
 8012ff8:	b903      	cbnz	r3, 8012ffc <__sflush_r+0x7c>
 8012ffa:	6560      	str	r0, [r4, #84]	; 0x54
 8012ffc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012ffe:	602f      	str	r7, [r5, #0]
 8013000:	2900      	cmp	r1, #0
 8013002:	d0ca      	beq.n	8012f9a <__sflush_r+0x1a>
 8013004:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013008:	4299      	cmp	r1, r3
 801300a:	d002      	beq.n	8013012 <__sflush_r+0x92>
 801300c:	4628      	mov	r0, r5
 801300e:	f7fd fc97 	bl	8010940 <_free_r>
 8013012:	2000      	movs	r0, #0
 8013014:	6360      	str	r0, [r4, #52]	; 0x34
 8013016:	e7c1      	b.n	8012f9c <__sflush_r+0x1c>
 8013018:	6a21      	ldr	r1, [r4, #32]
 801301a:	2301      	movs	r3, #1
 801301c:	4628      	mov	r0, r5
 801301e:	47b0      	blx	r6
 8013020:	1c41      	adds	r1, r0, #1
 8013022:	d1c7      	bne.n	8012fb4 <__sflush_r+0x34>
 8013024:	682b      	ldr	r3, [r5, #0]
 8013026:	2b00      	cmp	r3, #0
 8013028:	d0c4      	beq.n	8012fb4 <__sflush_r+0x34>
 801302a:	2b1d      	cmp	r3, #29
 801302c:	d001      	beq.n	8013032 <__sflush_r+0xb2>
 801302e:	2b16      	cmp	r3, #22
 8013030:	d101      	bne.n	8013036 <__sflush_r+0xb6>
 8013032:	602f      	str	r7, [r5, #0]
 8013034:	e7b1      	b.n	8012f9a <__sflush_r+0x1a>
 8013036:	89a3      	ldrh	r3, [r4, #12]
 8013038:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801303c:	81a3      	strh	r3, [r4, #12]
 801303e:	e7ad      	b.n	8012f9c <__sflush_r+0x1c>
 8013040:	690f      	ldr	r7, [r1, #16]
 8013042:	2f00      	cmp	r7, #0
 8013044:	d0a9      	beq.n	8012f9a <__sflush_r+0x1a>
 8013046:	0793      	lsls	r3, r2, #30
 8013048:	680e      	ldr	r6, [r1, #0]
 801304a:	bf08      	it	eq
 801304c:	694b      	ldreq	r3, [r1, #20]
 801304e:	600f      	str	r7, [r1, #0]
 8013050:	bf18      	it	ne
 8013052:	2300      	movne	r3, #0
 8013054:	eba6 0807 	sub.w	r8, r6, r7
 8013058:	608b      	str	r3, [r1, #8]
 801305a:	f1b8 0f00 	cmp.w	r8, #0
 801305e:	dd9c      	ble.n	8012f9a <__sflush_r+0x1a>
 8013060:	6a21      	ldr	r1, [r4, #32]
 8013062:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013064:	4643      	mov	r3, r8
 8013066:	463a      	mov	r2, r7
 8013068:	4628      	mov	r0, r5
 801306a:	47b0      	blx	r6
 801306c:	2800      	cmp	r0, #0
 801306e:	dc06      	bgt.n	801307e <__sflush_r+0xfe>
 8013070:	89a3      	ldrh	r3, [r4, #12]
 8013072:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013076:	81a3      	strh	r3, [r4, #12]
 8013078:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801307c:	e78e      	b.n	8012f9c <__sflush_r+0x1c>
 801307e:	4407      	add	r7, r0
 8013080:	eba8 0800 	sub.w	r8, r8, r0
 8013084:	e7e9      	b.n	801305a <__sflush_r+0xda>
 8013086:	bf00      	nop
 8013088:	20400001 	.word	0x20400001

0801308c <_fflush_r>:
 801308c:	b538      	push	{r3, r4, r5, lr}
 801308e:	690b      	ldr	r3, [r1, #16]
 8013090:	4605      	mov	r5, r0
 8013092:	460c      	mov	r4, r1
 8013094:	b913      	cbnz	r3, 801309c <_fflush_r+0x10>
 8013096:	2500      	movs	r5, #0
 8013098:	4628      	mov	r0, r5
 801309a:	bd38      	pop	{r3, r4, r5, pc}
 801309c:	b118      	cbz	r0, 80130a6 <_fflush_r+0x1a>
 801309e:	6983      	ldr	r3, [r0, #24]
 80130a0:	b90b      	cbnz	r3, 80130a6 <_fflush_r+0x1a>
 80130a2:	f000 f887 	bl	80131b4 <__sinit>
 80130a6:	4b14      	ldr	r3, [pc, #80]	; (80130f8 <_fflush_r+0x6c>)
 80130a8:	429c      	cmp	r4, r3
 80130aa:	d11b      	bne.n	80130e4 <_fflush_r+0x58>
 80130ac:	686c      	ldr	r4, [r5, #4]
 80130ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80130b2:	2b00      	cmp	r3, #0
 80130b4:	d0ef      	beq.n	8013096 <_fflush_r+0xa>
 80130b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80130b8:	07d0      	lsls	r0, r2, #31
 80130ba:	d404      	bmi.n	80130c6 <_fflush_r+0x3a>
 80130bc:	0599      	lsls	r1, r3, #22
 80130be:	d402      	bmi.n	80130c6 <_fflush_r+0x3a>
 80130c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80130c2:	f7ff fba6 	bl	8012812 <__retarget_lock_acquire_recursive>
 80130c6:	4628      	mov	r0, r5
 80130c8:	4621      	mov	r1, r4
 80130ca:	f7ff ff59 	bl	8012f80 <__sflush_r>
 80130ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80130d0:	07da      	lsls	r2, r3, #31
 80130d2:	4605      	mov	r5, r0
 80130d4:	d4e0      	bmi.n	8013098 <_fflush_r+0xc>
 80130d6:	89a3      	ldrh	r3, [r4, #12]
 80130d8:	059b      	lsls	r3, r3, #22
 80130da:	d4dd      	bmi.n	8013098 <_fflush_r+0xc>
 80130dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80130de:	f7ff fb99 	bl	8012814 <__retarget_lock_release_recursive>
 80130e2:	e7d9      	b.n	8013098 <_fflush_r+0xc>
 80130e4:	4b05      	ldr	r3, [pc, #20]	; (80130fc <_fflush_r+0x70>)
 80130e6:	429c      	cmp	r4, r3
 80130e8:	d101      	bne.n	80130ee <_fflush_r+0x62>
 80130ea:	68ac      	ldr	r4, [r5, #8]
 80130ec:	e7df      	b.n	80130ae <_fflush_r+0x22>
 80130ee:	4b04      	ldr	r3, [pc, #16]	; (8013100 <_fflush_r+0x74>)
 80130f0:	429c      	cmp	r4, r3
 80130f2:	bf08      	it	eq
 80130f4:	68ec      	ldreq	r4, [r5, #12]
 80130f6:	e7da      	b.n	80130ae <_fflush_r+0x22>
 80130f8:	08013c0c 	.word	0x08013c0c
 80130fc:	08013c2c 	.word	0x08013c2c
 8013100:	08013bec 	.word	0x08013bec

08013104 <std>:
 8013104:	2300      	movs	r3, #0
 8013106:	b510      	push	{r4, lr}
 8013108:	4604      	mov	r4, r0
 801310a:	e9c0 3300 	strd	r3, r3, [r0]
 801310e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013112:	6083      	str	r3, [r0, #8]
 8013114:	8181      	strh	r1, [r0, #12]
 8013116:	6643      	str	r3, [r0, #100]	; 0x64
 8013118:	81c2      	strh	r2, [r0, #14]
 801311a:	6183      	str	r3, [r0, #24]
 801311c:	4619      	mov	r1, r3
 801311e:	2208      	movs	r2, #8
 8013120:	305c      	adds	r0, #92	; 0x5c
 8013122:	f7fd fc05 	bl	8010930 <memset>
 8013126:	4b05      	ldr	r3, [pc, #20]	; (801313c <std+0x38>)
 8013128:	6263      	str	r3, [r4, #36]	; 0x24
 801312a:	4b05      	ldr	r3, [pc, #20]	; (8013140 <std+0x3c>)
 801312c:	62a3      	str	r3, [r4, #40]	; 0x28
 801312e:	4b05      	ldr	r3, [pc, #20]	; (8013144 <std+0x40>)
 8013130:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013132:	4b05      	ldr	r3, [pc, #20]	; (8013148 <std+0x44>)
 8013134:	6224      	str	r4, [r4, #32]
 8013136:	6323      	str	r3, [r4, #48]	; 0x30
 8013138:	bd10      	pop	{r4, pc}
 801313a:	bf00      	nop
 801313c:	08013441 	.word	0x08013441
 8013140:	08013463 	.word	0x08013463
 8013144:	0801349b 	.word	0x0801349b
 8013148:	080134bf 	.word	0x080134bf

0801314c <_cleanup_r>:
 801314c:	4901      	ldr	r1, [pc, #4]	; (8013154 <_cleanup_r+0x8>)
 801314e:	f000 b8af 	b.w	80132b0 <_fwalk_reent>
 8013152:	bf00      	nop
 8013154:	0801308d 	.word	0x0801308d

08013158 <__sfmoreglue>:
 8013158:	b570      	push	{r4, r5, r6, lr}
 801315a:	1e4a      	subs	r2, r1, #1
 801315c:	2568      	movs	r5, #104	; 0x68
 801315e:	4355      	muls	r5, r2
 8013160:	460e      	mov	r6, r1
 8013162:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013166:	f7fd fc3b 	bl	80109e0 <_malloc_r>
 801316a:	4604      	mov	r4, r0
 801316c:	b140      	cbz	r0, 8013180 <__sfmoreglue+0x28>
 801316e:	2100      	movs	r1, #0
 8013170:	e9c0 1600 	strd	r1, r6, [r0]
 8013174:	300c      	adds	r0, #12
 8013176:	60a0      	str	r0, [r4, #8]
 8013178:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801317c:	f7fd fbd8 	bl	8010930 <memset>
 8013180:	4620      	mov	r0, r4
 8013182:	bd70      	pop	{r4, r5, r6, pc}

08013184 <__sfp_lock_acquire>:
 8013184:	4801      	ldr	r0, [pc, #4]	; (801318c <__sfp_lock_acquire+0x8>)
 8013186:	f7ff bb44 	b.w	8012812 <__retarget_lock_acquire_recursive>
 801318a:	bf00      	nop
 801318c:	200059dc 	.word	0x200059dc

08013190 <__sfp_lock_release>:
 8013190:	4801      	ldr	r0, [pc, #4]	; (8013198 <__sfp_lock_release+0x8>)
 8013192:	f7ff bb3f 	b.w	8012814 <__retarget_lock_release_recursive>
 8013196:	bf00      	nop
 8013198:	200059dc 	.word	0x200059dc

0801319c <__sinit_lock_acquire>:
 801319c:	4801      	ldr	r0, [pc, #4]	; (80131a4 <__sinit_lock_acquire+0x8>)
 801319e:	f7ff bb38 	b.w	8012812 <__retarget_lock_acquire_recursive>
 80131a2:	bf00      	nop
 80131a4:	200059d7 	.word	0x200059d7

080131a8 <__sinit_lock_release>:
 80131a8:	4801      	ldr	r0, [pc, #4]	; (80131b0 <__sinit_lock_release+0x8>)
 80131aa:	f7ff bb33 	b.w	8012814 <__retarget_lock_release_recursive>
 80131ae:	bf00      	nop
 80131b0:	200059d7 	.word	0x200059d7

080131b4 <__sinit>:
 80131b4:	b510      	push	{r4, lr}
 80131b6:	4604      	mov	r4, r0
 80131b8:	f7ff fff0 	bl	801319c <__sinit_lock_acquire>
 80131bc:	69a3      	ldr	r3, [r4, #24]
 80131be:	b11b      	cbz	r3, 80131c8 <__sinit+0x14>
 80131c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80131c4:	f7ff bff0 	b.w	80131a8 <__sinit_lock_release>
 80131c8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80131cc:	6523      	str	r3, [r4, #80]	; 0x50
 80131ce:	4b13      	ldr	r3, [pc, #76]	; (801321c <__sinit+0x68>)
 80131d0:	4a13      	ldr	r2, [pc, #76]	; (8013220 <__sinit+0x6c>)
 80131d2:	681b      	ldr	r3, [r3, #0]
 80131d4:	62a2      	str	r2, [r4, #40]	; 0x28
 80131d6:	42a3      	cmp	r3, r4
 80131d8:	bf04      	itt	eq
 80131da:	2301      	moveq	r3, #1
 80131dc:	61a3      	streq	r3, [r4, #24]
 80131de:	4620      	mov	r0, r4
 80131e0:	f000 f820 	bl	8013224 <__sfp>
 80131e4:	6060      	str	r0, [r4, #4]
 80131e6:	4620      	mov	r0, r4
 80131e8:	f000 f81c 	bl	8013224 <__sfp>
 80131ec:	60a0      	str	r0, [r4, #8]
 80131ee:	4620      	mov	r0, r4
 80131f0:	f000 f818 	bl	8013224 <__sfp>
 80131f4:	2200      	movs	r2, #0
 80131f6:	60e0      	str	r0, [r4, #12]
 80131f8:	2104      	movs	r1, #4
 80131fa:	6860      	ldr	r0, [r4, #4]
 80131fc:	f7ff ff82 	bl	8013104 <std>
 8013200:	68a0      	ldr	r0, [r4, #8]
 8013202:	2201      	movs	r2, #1
 8013204:	2109      	movs	r1, #9
 8013206:	f7ff ff7d 	bl	8013104 <std>
 801320a:	68e0      	ldr	r0, [r4, #12]
 801320c:	2202      	movs	r2, #2
 801320e:	2112      	movs	r1, #18
 8013210:	f7ff ff78 	bl	8013104 <std>
 8013214:	2301      	movs	r3, #1
 8013216:	61a3      	str	r3, [r4, #24]
 8013218:	e7d2      	b.n	80131c0 <__sinit+0xc>
 801321a:	bf00      	nop
 801321c:	08013918 	.word	0x08013918
 8013220:	0801314d 	.word	0x0801314d

08013224 <__sfp>:
 8013224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013226:	4607      	mov	r7, r0
 8013228:	f7ff ffac 	bl	8013184 <__sfp_lock_acquire>
 801322c:	4b1e      	ldr	r3, [pc, #120]	; (80132a8 <__sfp+0x84>)
 801322e:	681e      	ldr	r6, [r3, #0]
 8013230:	69b3      	ldr	r3, [r6, #24]
 8013232:	b913      	cbnz	r3, 801323a <__sfp+0x16>
 8013234:	4630      	mov	r0, r6
 8013236:	f7ff ffbd 	bl	80131b4 <__sinit>
 801323a:	3648      	adds	r6, #72	; 0x48
 801323c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013240:	3b01      	subs	r3, #1
 8013242:	d503      	bpl.n	801324c <__sfp+0x28>
 8013244:	6833      	ldr	r3, [r6, #0]
 8013246:	b30b      	cbz	r3, 801328c <__sfp+0x68>
 8013248:	6836      	ldr	r6, [r6, #0]
 801324a:	e7f7      	b.n	801323c <__sfp+0x18>
 801324c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013250:	b9d5      	cbnz	r5, 8013288 <__sfp+0x64>
 8013252:	4b16      	ldr	r3, [pc, #88]	; (80132ac <__sfp+0x88>)
 8013254:	60e3      	str	r3, [r4, #12]
 8013256:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801325a:	6665      	str	r5, [r4, #100]	; 0x64
 801325c:	f7ff fad8 	bl	8012810 <__retarget_lock_init_recursive>
 8013260:	f7ff ff96 	bl	8013190 <__sfp_lock_release>
 8013264:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013268:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801326c:	6025      	str	r5, [r4, #0]
 801326e:	61a5      	str	r5, [r4, #24]
 8013270:	2208      	movs	r2, #8
 8013272:	4629      	mov	r1, r5
 8013274:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013278:	f7fd fb5a 	bl	8010930 <memset>
 801327c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013280:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013284:	4620      	mov	r0, r4
 8013286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013288:	3468      	adds	r4, #104	; 0x68
 801328a:	e7d9      	b.n	8013240 <__sfp+0x1c>
 801328c:	2104      	movs	r1, #4
 801328e:	4638      	mov	r0, r7
 8013290:	f7ff ff62 	bl	8013158 <__sfmoreglue>
 8013294:	4604      	mov	r4, r0
 8013296:	6030      	str	r0, [r6, #0]
 8013298:	2800      	cmp	r0, #0
 801329a:	d1d5      	bne.n	8013248 <__sfp+0x24>
 801329c:	f7ff ff78 	bl	8013190 <__sfp_lock_release>
 80132a0:	230c      	movs	r3, #12
 80132a2:	603b      	str	r3, [r7, #0]
 80132a4:	e7ee      	b.n	8013284 <__sfp+0x60>
 80132a6:	bf00      	nop
 80132a8:	08013918 	.word	0x08013918
 80132ac:	ffff0001 	.word	0xffff0001

080132b0 <_fwalk_reent>:
 80132b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80132b4:	4606      	mov	r6, r0
 80132b6:	4688      	mov	r8, r1
 80132b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80132bc:	2700      	movs	r7, #0
 80132be:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80132c2:	f1b9 0901 	subs.w	r9, r9, #1
 80132c6:	d505      	bpl.n	80132d4 <_fwalk_reent+0x24>
 80132c8:	6824      	ldr	r4, [r4, #0]
 80132ca:	2c00      	cmp	r4, #0
 80132cc:	d1f7      	bne.n	80132be <_fwalk_reent+0xe>
 80132ce:	4638      	mov	r0, r7
 80132d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80132d4:	89ab      	ldrh	r3, [r5, #12]
 80132d6:	2b01      	cmp	r3, #1
 80132d8:	d907      	bls.n	80132ea <_fwalk_reent+0x3a>
 80132da:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80132de:	3301      	adds	r3, #1
 80132e0:	d003      	beq.n	80132ea <_fwalk_reent+0x3a>
 80132e2:	4629      	mov	r1, r5
 80132e4:	4630      	mov	r0, r6
 80132e6:	47c0      	blx	r8
 80132e8:	4307      	orrs	r7, r0
 80132ea:	3568      	adds	r5, #104	; 0x68
 80132ec:	e7e9      	b.n	80132c2 <_fwalk_reent+0x12>

080132ee <__swhatbuf_r>:
 80132ee:	b570      	push	{r4, r5, r6, lr}
 80132f0:	460e      	mov	r6, r1
 80132f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80132f6:	2900      	cmp	r1, #0
 80132f8:	b096      	sub	sp, #88	; 0x58
 80132fa:	4614      	mov	r4, r2
 80132fc:	461d      	mov	r5, r3
 80132fe:	da07      	bge.n	8013310 <__swhatbuf_r+0x22>
 8013300:	2300      	movs	r3, #0
 8013302:	602b      	str	r3, [r5, #0]
 8013304:	89b3      	ldrh	r3, [r6, #12]
 8013306:	061a      	lsls	r2, r3, #24
 8013308:	d410      	bmi.n	801332c <__swhatbuf_r+0x3e>
 801330a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801330e:	e00e      	b.n	801332e <__swhatbuf_r+0x40>
 8013310:	466a      	mov	r2, sp
 8013312:	f000 f8fb 	bl	801350c <_fstat_r>
 8013316:	2800      	cmp	r0, #0
 8013318:	dbf2      	blt.n	8013300 <__swhatbuf_r+0x12>
 801331a:	9a01      	ldr	r2, [sp, #4]
 801331c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013320:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013324:	425a      	negs	r2, r3
 8013326:	415a      	adcs	r2, r3
 8013328:	602a      	str	r2, [r5, #0]
 801332a:	e7ee      	b.n	801330a <__swhatbuf_r+0x1c>
 801332c:	2340      	movs	r3, #64	; 0x40
 801332e:	2000      	movs	r0, #0
 8013330:	6023      	str	r3, [r4, #0]
 8013332:	b016      	add	sp, #88	; 0x58
 8013334:	bd70      	pop	{r4, r5, r6, pc}
	...

08013338 <__smakebuf_r>:
 8013338:	898b      	ldrh	r3, [r1, #12]
 801333a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801333c:	079d      	lsls	r5, r3, #30
 801333e:	4606      	mov	r6, r0
 8013340:	460c      	mov	r4, r1
 8013342:	d507      	bpl.n	8013354 <__smakebuf_r+0x1c>
 8013344:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013348:	6023      	str	r3, [r4, #0]
 801334a:	6123      	str	r3, [r4, #16]
 801334c:	2301      	movs	r3, #1
 801334e:	6163      	str	r3, [r4, #20]
 8013350:	b002      	add	sp, #8
 8013352:	bd70      	pop	{r4, r5, r6, pc}
 8013354:	ab01      	add	r3, sp, #4
 8013356:	466a      	mov	r2, sp
 8013358:	f7ff ffc9 	bl	80132ee <__swhatbuf_r>
 801335c:	9900      	ldr	r1, [sp, #0]
 801335e:	4605      	mov	r5, r0
 8013360:	4630      	mov	r0, r6
 8013362:	f7fd fb3d 	bl	80109e0 <_malloc_r>
 8013366:	b948      	cbnz	r0, 801337c <__smakebuf_r+0x44>
 8013368:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801336c:	059a      	lsls	r2, r3, #22
 801336e:	d4ef      	bmi.n	8013350 <__smakebuf_r+0x18>
 8013370:	f023 0303 	bic.w	r3, r3, #3
 8013374:	f043 0302 	orr.w	r3, r3, #2
 8013378:	81a3      	strh	r3, [r4, #12]
 801337a:	e7e3      	b.n	8013344 <__smakebuf_r+0xc>
 801337c:	4b0d      	ldr	r3, [pc, #52]	; (80133b4 <__smakebuf_r+0x7c>)
 801337e:	62b3      	str	r3, [r6, #40]	; 0x28
 8013380:	89a3      	ldrh	r3, [r4, #12]
 8013382:	6020      	str	r0, [r4, #0]
 8013384:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013388:	81a3      	strh	r3, [r4, #12]
 801338a:	9b00      	ldr	r3, [sp, #0]
 801338c:	6163      	str	r3, [r4, #20]
 801338e:	9b01      	ldr	r3, [sp, #4]
 8013390:	6120      	str	r0, [r4, #16]
 8013392:	b15b      	cbz	r3, 80133ac <__smakebuf_r+0x74>
 8013394:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013398:	4630      	mov	r0, r6
 801339a:	f000 f8c9 	bl	8013530 <_isatty_r>
 801339e:	b128      	cbz	r0, 80133ac <__smakebuf_r+0x74>
 80133a0:	89a3      	ldrh	r3, [r4, #12]
 80133a2:	f023 0303 	bic.w	r3, r3, #3
 80133a6:	f043 0301 	orr.w	r3, r3, #1
 80133aa:	81a3      	strh	r3, [r4, #12]
 80133ac:	89a0      	ldrh	r0, [r4, #12]
 80133ae:	4305      	orrs	r5, r0
 80133b0:	81a5      	strh	r5, [r4, #12]
 80133b2:	e7cd      	b.n	8013350 <__smakebuf_r+0x18>
 80133b4:	0801314d 	.word	0x0801314d

080133b8 <_raise_r>:
 80133b8:	291f      	cmp	r1, #31
 80133ba:	b538      	push	{r3, r4, r5, lr}
 80133bc:	4604      	mov	r4, r0
 80133be:	460d      	mov	r5, r1
 80133c0:	d904      	bls.n	80133cc <_raise_r+0x14>
 80133c2:	2316      	movs	r3, #22
 80133c4:	6003      	str	r3, [r0, #0]
 80133c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80133ca:	bd38      	pop	{r3, r4, r5, pc}
 80133cc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80133ce:	b112      	cbz	r2, 80133d6 <_raise_r+0x1e>
 80133d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80133d4:	b94b      	cbnz	r3, 80133ea <_raise_r+0x32>
 80133d6:	4620      	mov	r0, r4
 80133d8:	f000 f830 	bl	801343c <_getpid_r>
 80133dc:	462a      	mov	r2, r5
 80133de:	4601      	mov	r1, r0
 80133e0:	4620      	mov	r0, r4
 80133e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80133e6:	f000 b817 	b.w	8013418 <_kill_r>
 80133ea:	2b01      	cmp	r3, #1
 80133ec:	d00a      	beq.n	8013404 <_raise_r+0x4c>
 80133ee:	1c59      	adds	r1, r3, #1
 80133f0:	d103      	bne.n	80133fa <_raise_r+0x42>
 80133f2:	2316      	movs	r3, #22
 80133f4:	6003      	str	r3, [r0, #0]
 80133f6:	2001      	movs	r0, #1
 80133f8:	e7e7      	b.n	80133ca <_raise_r+0x12>
 80133fa:	2400      	movs	r4, #0
 80133fc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013400:	4628      	mov	r0, r5
 8013402:	4798      	blx	r3
 8013404:	2000      	movs	r0, #0
 8013406:	e7e0      	b.n	80133ca <_raise_r+0x12>

08013408 <raise>:
 8013408:	4b02      	ldr	r3, [pc, #8]	; (8013414 <raise+0xc>)
 801340a:	4601      	mov	r1, r0
 801340c:	6818      	ldr	r0, [r3, #0]
 801340e:	f7ff bfd3 	b.w	80133b8 <_raise_r>
 8013412:	bf00      	nop
 8013414:	20000220 	.word	0x20000220

08013418 <_kill_r>:
 8013418:	b538      	push	{r3, r4, r5, lr}
 801341a:	4d07      	ldr	r5, [pc, #28]	; (8013438 <_kill_r+0x20>)
 801341c:	2300      	movs	r3, #0
 801341e:	4604      	mov	r4, r0
 8013420:	4608      	mov	r0, r1
 8013422:	4611      	mov	r1, r2
 8013424:	602b      	str	r3, [r5, #0]
 8013426:	f7ee fb79 	bl	8001b1c <_kill>
 801342a:	1c43      	adds	r3, r0, #1
 801342c:	d102      	bne.n	8013434 <_kill_r+0x1c>
 801342e:	682b      	ldr	r3, [r5, #0]
 8013430:	b103      	cbz	r3, 8013434 <_kill_r+0x1c>
 8013432:	6023      	str	r3, [r4, #0]
 8013434:	bd38      	pop	{r3, r4, r5, pc}
 8013436:	bf00      	nop
 8013438:	200059d0 	.word	0x200059d0

0801343c <_getpid_r>:
 801343c:	f7ee bb66 	b.w	8001b0c <_getpid>

08013440 <__sread>:
 8013440:	b510      	push	{r4, lr}
 8013442:	460c      	mov	r4, r1
 8013444:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013448:	f000 f894 	bl	8013574 <_read_r>
 801344c:	2800      	cmp	r0, #0
 801344e:	bfab      	itete	ge
 8013450:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013452:	89a3      	ldrhlt	r3, [r4, #12]
 8013454:	181b      	addge	r3, r3, r0
 8013456:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801345a:	bfac      	ite	ge
 801345c:	6563      	strge	r3, [r4, #84]	; 0x54
 801345e:	81a3      	strhlt	r3, [r4, #12]
 8013460:	bd10      	pop	{r4, pc}

08013462 <__swrite>:
 8013462:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013466:	461f      	mov	r7, r3
 8013468:	898b      	ldrh	r3, [r1, #12]
 801346a:	05db      	lsls	r3, r3, #23
 801346c:	4605      	mov	r5, r0
 801346e:	460c      	mov	r4, r1
 8013470:	4616      	mov	r6, r2
 8013472:	d505      	bpl.n	8013480 <__swrite+0x1e>
 8013474:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013478:	2302      	movs	r3, #2
 801347a:	2200      	movs	r2, #0
 801347c:	f000 f868 	bl	8013550 <_lseek_r>
 8013480:	89a3      	ldrh	r3, [r4, #12]
 8013482:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013486:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801348a:	81a3      	strh	r3, [r4, #12]
 801348c:	4632      	mov	r2, r6
 801348e:	463b      	mov	r3, r7
 8013490:	4628      	mov	r0, r5
 8013492:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013496:	f000 b817 	b.w	80134c8 <_write_r>

0801349a <__sseek>:
 801349a:	b510      	push	{r4, lr}
 801349c:	460c      	mov	r4, r1
 801349e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80134a2:	f000 f855 	bl	8013550 <_lseek_r>
 80134a6:	1c43      	adds	r3, r0, #1
 80134a8:	89a3      	ldrh	r3, [r4, #12]
 80134aa:	bf15      	itete	ne
 80134ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80134ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80134b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80134b6:	81a3      	strheq	r3, [r4, #12]
 80134b8:	bf18      	it	ne
 80134ba:	81a3      	strhne	r3, [r4, #12]
 80134bc:	bd10      	pop	{r4, pc}

080134be <__sclose>:
 80134be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80134c2:	f000 b813 	b.w	80134ec <_close_r>
	...

080134c8 <_write_r>:
 80134c8:	b538      	push	{r3, r4, r5, lr}
 80134ca:	4d07      	ldr	r5, [pc, #28]	; (80134e8 <_write_r+0x20>)
 80134cc:	4604      	mov	r4, r0
 80134ce:	4608      	mov	r0, r1
 80134d0:	4611      	mov	r1, r2
 80134d2:	2200      	movs	r2, #0
 80134d4:	602a      	str	r2, [r5, #0]
 80134d6:	461a      	mov	r2, r3
 80134d8:	f7ee fb57 	bl	8001b8a <_write>
 80134dc:	1c43      	adds	r3, r0, #1
 80134de:	d102      	bne.n	80134e6 <_write_r+0x1e>
 80134e0:	682b      	ldr	r3, [r5, #0]
 80134e2:	b103      	cbz	r3, 80134e6 <_write_r+0x1e>
 80134e4:	6023      	str	r3, [r4, #0]
 80134e6:	bd38      	pop	{r3, r4, r5, pc}
 80134e8:	200059d0 	.word	0x200059d0

080134ec <_close_r>:
 80134ec:	b538      	push	{r3, r4, r5, lr}
 80134ee:	4d06      	ldr	r5, [pc, #24]	; (8013508 <_close_r+0x1c>)
 80134f0:	2300      	movs	r3, #0
 80134f2:	4604      	mov	r4, r0
 80134f4:	4608      	mov	r0, r1
 80134f6:	602b      	str	r3, [r5, #0]
 80134f8:	f7ee fb63 	bl	8001bc2 <_close>
 80134fc:	1c43      	adds	r3, r0, #1
 80134fe:	d102      	bne.n	8013506 <_close_r+0x1a>
 8013500:	682b      	ldr	r3, [r5, #0]
 8013502:	b103      	cbz	r3, 8013506 <_close_r+0x1a>
 8013504:	6023      	str	r3, [r4, #0]
 8013506:	bd38      	pop	{r3, r4, r5, pc}
 8013508:	200059d0 	.word	0x200059d0

0801350c <_fstat_r>:
 801350c:	b538      	push	{r3, r4, r5, lr}
 801350e:	4d07      	ldr	r5, [pc, #28]	; (801352c <_fstat_r+0x20>)
 8013510:	2300      	movs	r3, #0
 8013512:	4604      	mov	r4, r0
 8013514:	4608      	mov	r0, r1
 8013516:	4611      	mov	r1, r2
 8013518:	602b      	str	r3, [r5, #0]
 801351a:	f7ee fb5e 	bl	8001bda <_fstat>
 801351e:	1c43      	adds	r3, r0, #1
 8013520:	d102      	bne.n	8013528 <_fstat_r+0x1c>
 8013522:	682b      	ldr	r3, [r5, #0]
 8013524:	b103      	cbz	r3, 8013528 <_fstat_r+0x1c>
 8013526:	6023      	str	r3, [r4, #0]
 8013528:	bd38      	pop	{r3, r4, r5, pc}
 801352a:	bf00      	nop
 801352c:	200059d0 	.word	0x200059d0

08013530 <_isatty_r>:
 8013530:	b538      	push	{r3, r4, r5, lr}
 8013532:	4d06      	ldr	r5, [pc, #24]	; (801354c <_isatty_r+0x1c>)
 8013534:	2300      	movs	r3, #0
 8013536:	4604      	mov	r4, r0
 8013538:	4608      	mov	r0, r1
 801353a:	602b      	str	r3, [r5, #0]
 801353c:	f7ee fb5d 	bl	8001bfa <_isatty>
 8013540:	1c43      	adds	r3, r0, #1
 8013542:	d102      	bne.n	801354a <_isatty_r+0x1a>
 8013544:	682b      	ldr	r3, [r5, #0]
 8013546:	b103      	cbz	r3, 801354a <_isatty_r+0x1a>
 8013548:	6023      	str	r3, [r4, #0]
 801354a:	bd38      	pop	{r3, r4, r5, pc}
 801354c:	200059d0 	.word	0x200059d0

08013550 <_lseek_r>:
 8013550:	b538      	push	{r3, r4, r5, lr}
 8013552:	4d07      	ldr	r5, [pc, #28]	; (8013570 <_lseek_r+0x20>)
 8013554:	4604      	mov	r4, r0
 8013556:	4608      	mov	r0, r1
 8013558:	4611      	mov	r1, r2
 801355a:	2200      	movs	r2, #0
 801355c:	602a      	str	r2, [r5, #0]
 801355e:	461a      	mov	r2, r3
 8013560:	f7ee fb56 	bl	8001c10 <_lseek>
 8013564:	1c43      	adds	r3, r0, #1
 8013566:	d102      	bne.n	801356e <_lseek_r+0x1e>
 8013568:	682b      	ldr	r3, [r5, #0]
 801356a:	b103      	cbz	r3, 801356e <_lseek_r+0x1e>
 801356c:	6023      	str	r3, [r4, #0]
 801356e:	bd38      	pop	{r3, r4, r5, pc}
 8013570:	200059d0 	.word	0x200059d0

08013574 <_read_r>:
 8013574:	b538      	push	{r3, r4, r5, lr}
 8013576:	4d07      	ldr	r5, [pc, #28]	; (8013594 <_read_r+0x20>)
 8013578:	4604      	mov	r4, r0
 801357a:	4608      	mov	r0, r1
 801357c:	4611      	mov	r1, r2
 801357e:	2200      	movs	r2, #0
 8013580:	602a      	str	r2, [r5, #0]
 8013582:	461a      	mov	r2, r3
 8013584:	f7ee fae4 	bl	8001b50 <_read>
 8013588:	1c43      	adds	r3, r0, #1
 801358a:	d102      	bne.n	8013592 <_read_r+0x1e>
 801358c:	682b      	ldr	r3, [r5, #0]
 801358e:	b103      	cbz	r3, 8013592 <_read_r+0x1e>
 8013590:	6023      	str	r3, [r4, #0]
 8013592:	bd38      	pop	{r3, r4, r5, pc}
 8013594:	200059d0 	.word	0x200059d0

08013598 <_init>:
 8013598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801359a:	bf00      	nop
 801359c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801359e:	bc08      	pop	{r3}
 80135a0:	469e      	mov	lr, r3
 80135a2:	4770      	bx	lr

080135a4 <_fini>:
 80135a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80135a6:	bf00      	nop
 80135a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80135aa:	bc08      	pop	{r3}
 80135ac:	469e      	mov	lr, r3
 80135ae:	4770      	bx	lr
