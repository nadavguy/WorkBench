
RCF777Based.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c474  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800c66c  0800c66c  0001c66c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c6dc  0800c6dc  0002020c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c6dc  0800c6dc  0001c6dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c6e4  0800c6e4  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c6e4  0800c6e4  0001c6e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c6e8  0800c6e8  0001c6e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  0800c6ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000446c  2000020c  0800c8f8  0002020c  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  20004678  0800c8f8  00024678  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003b57c  00000000  00000000  0002023a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006ed1  00000000  00000000  0005b7b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ef8  00000000  00000000  00062688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c38  00000000  00000000  00064580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00032aa5  00000000  00000000  000661b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b4f5  00000000  00000000  00098c5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001130fc  00000000  00000000  000c4152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001d724e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007fd0  00000000  00000000  001d72a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000020c 	.word	0x2000020c
 8000214:	00000000 	.word	0x00000000
 8000218:	0800c654 	.word	0x0800c654

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000210 	.word	0x20000210
 8000234:	0800c654 	.word	0x0800c654

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96e 	b.w	800052c <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468c      	mov	ip, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	f040 8083 	bne.w	800037e <__udivmoddi4+0x116>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d947      	bls.n	800030e <__udivmoddi4+0xa6>
 800027e:	fab2 f282 	clz	r2, r2
 8000282:	b142      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000284:	f1c2 0020 	rsb	r0, r2, #32
 8000288:	fa24 f000 	lsr.w	r0, r4, r0
 800028c:	4091      	lsls	r1, r2
 800028e:	4097      	lsls	r7, r2
 8000290:	ea40 0c01 	orr.w	ip, r0, r1
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbbc f6f8 	udiv	r6, ip, r8
 80002a0:	fa1f fe87 	uxth.w	lr, r7
 80002a4:	fb08 c116 	mls	r1, r8, r6, ip
 80002a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ac:	fb06 f10e 	mul.w	r1, r6, lr
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18fb      	adds	r3, r7, r3
 80002b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ba:	f080 8119 	bcs.w	80004f0 <__udivmoddi4+0x288>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8116 	bls.w	80004f0 <__udivmoddi4+0x288>
 80002c4:	3e02      	subs	r6, #2
 80002c6:	443b      	add	r3, r7
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d0:	fb08 3310 	mls	r3, r8, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002dc:	45a6      	cmp	lr, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	193c      	adds	r4, r7, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8105 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002ea:	45a6      	cmp	lr, r4
 80002ec:	f240 8102 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002f0:	3802      	subs	r0, #2
 80002f2:	443c      	add	r4, r7
 80002f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f8:	eba4 040e 	sub.w	r4, r4, lr
 80002fc:	2600      	movs	r6, #0
 80002fe:	b11d      	cbz	r5, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c5 4300 	strd	r4, r3, [r5]
 8000308:	4631      	mov	r1, r6
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xaa>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	2a00      	cmp	r2, #0
 8000318:	d150      	bne.n	80003bc <__udivmoddi4+0x154>
 800031a:	1bcb      	subs	r3, r1, r7
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	fa1f f887 	uxth.w	r8, r7
 8000324:	2601      	movs	r6, #1
 8000326:	fbb3 fcfe 	udiv	ip, r3, lr
 800032a:	0c21      	lsrs	r1, r4, #16
 800032c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000330:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000334:	fb08 f30c 	mul.w	r3, r8, ip
 8000338:	428b      	cmp	r3, r1
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0xe4>
 800033c:	1879      	adds	r1, r7, r1
 800033e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0xe2>
 8000344:	428b      	cmp	r3, r1
 8000346:	f200 80e9 	bhi.w	800051c <__udivmoddi4+0x2b4>
 800034a:	4684      	mov	ip, r0
 800034c:	1ac9      	subs	r1, r1, r3
 800034e:	b2a3      	uxth	r3, r4
 8000350:	fbb1 f0fe 	udiv	r0, r1, lr
 8000354:	fb0e 1110 	mls	r1, lr, r0, r1
 8000358:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800035c:	fb08 f800 	mul.w	r8, r8, r0
 8000360:	45a0      	cmp	r8, r4
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x10c>
 8000364:	193c      	adds	r4, r7, r4
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x10a>
 800036c:	45a0      	cmp	r8, r4
 800036e:	f200 80d9 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 8000372:	4618      	mov	r0, r3
 8000374:	eba4 0408 	sub.w	r4, r4, r8
 8000378:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800037c:	e7bf      	b.n	80002fe <__udivmoddi4+0x96>
 800037e:	428b      	cmp	r3, r1
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x12e>
 8000382:	2d00      	cmp	r5, #0
 8000384:	f000 80b1 	beq.w	80004ea <__udivmoddi4+0x282>
 8000388:	2600      	movs	r6, #0
 800038a:	e9c5 0100 	strd	r0, r1, [r5]
 800038e:	4630      	mov	r0, r6
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	fab3 f683 	clz	r6, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d14a      	bne.n	8000434 <__udivmoddi4+0x1cc>
 800039e:	428b      	cmp	r3, r1
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0x140>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 80b8 	bhi.w	8000518 <__udivmoddi4+0x2b0>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb61 0103 	sbc.w	r1, r1, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	468c      	mov	ip, r1
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0a8      	beq.n	8000308 <__udivmoddi4+0xa0>
 80003b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ba:	e7a5      	b.n	8000308 <__udivmoddi4+0xa0>
 80003bc:	f1c2 0320 	rsb	r3, r2, #32
 80003c0:	fa20 f603 	lsr.w	r6, r0, r3
 80003c4:	4097      	lsls	r7, r2
 80003c6:	fa01 f002 	lsl.w	r0, r1, r2
 80003ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ce:	40d9      	lsrs	r1, r3
 80003d0:	4330      	orrs	r0, r6
 80003d2:	0c03      	lsrs	r3, r0, #16
 80003d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e4:	fb06 f108 	mul.w	r1, r6, r8
 80003e8:	4299      	cmp	r1, r3
 80003ea:	fa04 f402 	lsl.w	r4, r4, r2
 80003ee:	d909      	bls.n	8000404 <__udivmoddi4+0x19c>
 80003f0:	18fb      	adds	r3, r7, r3
 80003f2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003f6:	f080 808d 	bcs.w	8000514 <__udivmoddi4+0x2ac>
 80003fa:	4299      	cmp	r1, r3
 80003fc:	f240 808a 	bls.w	8000514 <__udivmoddi4+0x2ac>
 8000400:	3e02      	subs	r6, #2
 8000402:	443b      	add	r3, r7
 8000404:	1a5b      	subs	r3, r3, r1
 8000406:	b281      	uxth	r1, r0
 8000408:	fbb3 f0fe 	udiv	r0, r3, lr
 800040c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000410:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000414:	fb00 f308 	mul.w	r3, r0, r8
 8000418:	428b      	cmp	r3, r1
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x1c4>
 800041c:	1879      	adds	r1, r7, r1
 800041e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000422:	d273      	bcs.n	800050c <__udivmoddi4+0x2a4>
 8000424:	428b      	cmp	r3, r1
 8000426:	d971      	bls.n	800050c <__udivmoddi4+0x2a4>
 8000428:	3802      	subs	r0, #2
 800042a:	4439      	add	r1, r7
 800042c:	1acb      	subs	r3, r1, r3
 800042e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000432:	e778      	b.n	8000326 <__udivmoddi4+0xbe>
 8000434:	f1c6 0c20 	rsb	ip, r6, #32
 8000438:	fa03 f406 	lsl.w	r4, r3, r6
 800043c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000440:	431c      	orrs	r4, r3
 8000442:	fa20 f70c 	lsr.w	r7, r0, ip
 8000446:	fa01 f306 	lsl.w	r3, r1, r6
 800044a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800044e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000452:	431f      	orrs	r7, r3
 8000454:	0c3b      	lsrs	r3, r7, #16
 8000456:	fbb1 f9fe 	udiv	r9, r1, lr
 800045a:	fa1f f884 	uxth.w	r8, r4
 800045e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000462:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000466:	fb09 fa08 	mul.w	sl, r9, r8
 800046a:	458a      	cmp	sl, r1
 800046c:	fa02 f206 	lsl.w	r2, r2, r6
 8000470:	fa00 f306 	lsl.w	r3, r0, r6
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x220>
 8000476:	1861      	adds	r1, r4, r1
 8000478:	f109 30ff 	add.w	r0, r9, #4294967295
 800047c:	d248      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 800047e:	458a      	cmp	sl, r1
 8000480:	d946      	bls.n	8000510 <__udivmoddi4+0x2a8>
 8000482:	f1a9 0902 	sub.w	r9, r9, #2
 8000486:	4421      	add	r1, r4
 8000488:	eba1 010a 	sub.w	r1, r1, sl
 800048c:	b2bf      	uxth	r7, r7
 800048e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000492:	fb0e 1110 	mls	r1, lr, r0, r1
 8000496:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800049a:	fb00 f808 	mul.w	r8, r0, r8
 800049e:	45b8      	cmp	r8, r7
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x24a>
 80004a2:	19e7      	adds	r7, r4, r7
 80004a4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004a8:	d22e      	bcs.n	8000508 <__udivmoddi4+0x2a0>
 80004aa:	45b8      	cmp	r8, r7
 80004ac:	d92c      	bls.n	8000508 <__udivmoddi4+0x2a0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4427      	add	r7, r4
 80004b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b6:	eba7 0708 	sub.w	r7, r7, r8
 80004ba:	fba0 8902 	umull	r8, r9, r0, r2
 80004be:	454f      	cmp	r7, r9
 80004c0:	46c6      	mov	lr, r8
 80004c2:	4649      	mov	r1, r9
 80004c4:	d31a      	bcc.n	80004fc <__udivmoddi4+0x294>
 80004c6:	d017      	beq.n	80004f8 <__udivmoddi4+0x290>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x27a>
 80004ca:	ebb3 020e 	subs.w	r2, r3, lr
 80004ce:	eb67 0701 	sbc.w	r7, r7, r1
 80004d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004d6:	40f2      	lsrs	r2, r6
 80004d8:	ea4c 0202 	orr.w	r2, ip, r2
 80004dc:	40f7      	lsrs	r7, r6
 80004de:	e9c5 2700 	strd	r2, r7, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	462e      	mov	r6, r5
 80004ec:	4628      	mov	r0, r5
 80004ee:	e70b      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f0:	4606      	mov	r6, r0
 80004f2:	e6e9      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f4:	4618      	mov	r0, r3
 80004f6:	e6fd      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004f8:	4543      	cmp	r3, r8
 80004fa:	d2e5      	bcs.n	80004c8 <__udivmoddi4+0x260>
 80004fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000500:	eb69 0104 	sbc.w	r1, r9, r4
 8000504:	3801      	subs	r0, #1
 8000506:	e7df      	b.n	80004c8 <__udivmoddi4+0x260>
 8000508:	4608      	mov	r0, r1
 800050a:	e7d2      	b.n	80004b2 <__udivmoddi4+0x24a>
 800050c:	4660      	mov	r0, ip
 800050e:	e78d      	b.n	800042c <__udivmoddi4+0x1c4>
 8000510:	4681      	mov	r9, r0
 8000512:	e7b9      	b.n	8000488 <__udivmoddi4+0x220>
 8000514:	4666      	mov	r6, ip
 8000516:	e775      	b.n	8000404 <__udivmoddi4+0x19c>
 8000518:	4630      	mov	r0, r6
 800051a:	e74a      	b.n	80003b2 <__udivmoddi4+0x14a>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	4439      	add	r1, r7
 8000522:	e713      	b.n	800034c <__udivmoddi4+0xe4>
 8000524:	3802      	subs	r0, #2
 8000526:	443c      	add	r4, r7
 8000528:	e724      	b.n	8000374 <__udivmoddi4+0x10c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <MX_BlueNRG_2_Init>:
  PRINT_CSV("%02d:%02d:%02d.%03d", ms/(60*60*1000)%24, ms/(60*1000)%60, (ms/1000)%60, ms%1000);
}
#endif

void MX_BlueNRG_2_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN BlueNRG_2_Init_PreTreatment */

  /* USER CODE END BlueNRG_2_Init_PreTreatment */

  User_Init();
 8000534:	f000 f80c 	bl	8000550 <User_Init>

  hci_init(NULL, NULL);
 8000538:	2100      	movs	r1, #0
 800053a:	2000      	movs	r0, #0
 800053c:	f009 f9d8 	bl	80098f0 <hci_init>

  /* USER CODE BEGIN BlueNRG_2_Init_PostTreatment */

  /* USER CODE END BlueNRG_2_Init_PostTreatment */
}
 8000540:	bf00      	nop
 8000542:	bd80      	pop	{r7, pc}

08000544 <MX_BlueNRG_2_Process>:

/*
 * BlueNRG-2 background task
 */
void MX_BlueNRG_2_Process(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BlueNRG_2_Process_PreTreatment */

  /* USER CODE END BlueNRG_2_Process_PreTreatment */

  User_Process();
 8000548:	f000 f80a 	bl	8000560 <User_Process>

  /* USER CODE BEGIN BlueNRG_2_Process_PostTreatment */

  /* USER CODE END BlueNRG_2_Process_PostTreatment */
}
 800054c:	bf00      	nop
 800054e:	bd80      	pop	{r7, pc}

08000550 <User_Init>:
 *
 * @param  None
 * @retval None
 */
static void User_Init(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
  BSP_COM_Init(COM1);
 8000554:	2000      	movs	r0, #0
 8000556:	f001 faa9 	bl	8001aac <BSP_COM_Init>
}
 800055a:	bf00      	nop
 800055c:	bd80      	pop	{r7, pc}
	...

08000560 <User_Process>:
 *
 * @param  None
 * @retval None
 */
static void User_Process(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b0c2      	sub	sp, #264	; 0x108
 8000564:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status;
  uint8_t len;
  int i;

  /* Read uart header */
  status = HAL_UART_Receive(&hcom_uart[COM1], (uint8_t *)uart_header, UARTHEADERSIZE, BLE_UART_SHORT_TIMEOUT);
 8000566:	231e      	movs	r3, #30
 8000568:	2204      	movs	r2, #4
 800056a:	4939      	ldr	r1, [pc, #228]	; (8000650 <User_Process+0xf0>)
 800056c:	4839      	ldr	r0, [pc, #228]	; (8000654 <User_Process+0xf4>)
 800056e:	f007 f8e8 	bl	8007742 <HAL_UART_Receive>
 8000572:	4603      	mov	r3, r0
 8000574:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
  if (status != HAL_OK && status != HAL_TIMEOUT)
 8000578:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 800057c:	2b00      	cmp	r3, #0
 800057e:	d005      	beq.n	800058c <User_Process+0x2c>
 8000580:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8000584:	2b03      	cmp	r3, #3
 8000586:	d001      	beq.n	800058c <User_Process+0x2c>
  {
    Error_Handler();
 8000588:	f000 fe7a 	bl	8001280 <Error_Handler>
  }

  if (status == HAL_OK) {
 800058c:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8000590:	2b00      	cmp	r3, #0
 8000592:	d150      	bne.n	8000636 <User_Process+0xd6>
    //We actually received data from the GUI
    PRINT_DBG("From GUI ");

    len = uart_header[UARTHEADERSIZE-1];
 8000594:	4b2e      	ldr	r3, [pc, #184]	; (8000650 <User_Process+0xf0>)
 8000596:	78db      	ldrb	r3, [r3, #3]
 8000598:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102

    if (len > 0) {
 800059c:	f897 3102 	ldrb.w	r3, [r7, #258]	; 0x102
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d00d      	beq.n	80005c0 <User_Process+0x60>
      /*## Put UART peripheral in reception process ###########################*/
      /* Any data received will be stored "aRxBuffer" buffer */
      if(HAL_UART_Receive(&hcom_uart[COM1], (uint8_t *)aRxBuffer, len, BLE_UART_LONG_TIMEOUT) != HAL_OK)
 80005a4:	f897 3102 	ldrb.w	r3, [r7, #258]	; 0x102
 80005a8:	b29a      	uxth	r2, r3
 80005aa:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80005ae:	492a      	ldr	r1, [pc, #168]	; (8000658 <User_Process+0xf8>)
 80005b0:	4828      	ldr	r0, [pc, #160]	; (8000654 <User_Process+0xf4>)
 80005b2:	f007 f8c6 	bl	8007742 <HAL_UART_Receive>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <User_Process+0x60>
      {
        Error_Handler();
 80005bc:	f000 fe60 	bl	8001280 <Error_Handler>
    }
    PRINT_CSV("\n");
#endif

    /* write data received from the vcom to the BlueNRG chip via SPI */
    if (uart_header[HCI_TYPE_OFFSET] == HCI_COMMAND_PKT) {
 80005c0:	4b23      	ldr	r3, [pc, #140]	; (8000650 <User_Process+0xf0>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	2b01      	cmp	r3, #1
 80005c6:	d107      	bne.n	80005d8 <User_Process+0x78>
      //This is an HCI command so pass it to BlueNRG via SPI
      Hal_Write_Serial(uart_header, aRxBuffer, UARTHEADERSIZE, len);
 80005c8:	f897 3102 	ldrb.w	r3, [r7, #258]	; 0x102
 80005cc:	2204      	movs	r2, #4
 80005ce:	4922      	ldr	r1, [pc, #136]	; (8000658 <User_Process+0xf8>)
 80005d0:	481f      	ldr	r0, [pc, #124]	; (8000650 <User_Process+0xf0>)
 80005d2:	f000 f8c5 	bl	8000760 <Hal_Write_Serial>
 80005d6:	e02e      	b.n	8000636 <User_Process+0xd6>
    } else {
      //Process the command locally without bothering with the BlueNRG chip
      handle_vendor_command(uart_header, UARTHEADERSIZE);
 80005d8:	2104      	movs	r1, #4
 80005da:	481d      	ldr	r0, [pc, #116]	; (8000650 <User_Process+0xf0>)
 80005dc:	f000 f840 	bl	8000660 <handle_vendor_command>
    }
  }

  while (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET) {
 80005e0:	e029      	b.n	8000636 <User_Process+0xd6>
    uint8_t rx_buffer[255];
    uint8_t rx_bytes;

    /* Data are available from BlueNRG: read them through SPI */
    rx_bytes = HCI_TL_SPI_Receive(rx_buffer, sizeof(rx_buffer));
 80005e2:	463b      	mov	r3, r7
 80005e4:	21ff      	movs	r1, #255	; 0xff
 80005e6:	4618      	mov	r0, r3
 80005e8:	f000 f9e8 	bl	80009bc <HCI_TL_SPI_Receive>
 80005ec:	4603      	mov	r3, r0
 80005ee:	f887 3101 	strb.w	r3, [r7, #257]	; 0x101

    /* Check if there is data is so, send it to VCOM */
    if (rx_bytes > 0) {
 80005f2:	f897 3101 	ldrb.w	r3, [r7, #257]	; 0x101
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d01d      	beq.n	8000636 <User_Process+0xd6>
        PRINT_CSV(" %02x", (uint8_t*)rx_buffer[i]);
      }
      PRINT_CSV("\n");
#endif

      for (i = 0; i < rx_bytes; i++) {
 80005fa:	2300      	movs	r3, #0
 80005fc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000600:	e013      	b.n	800062a <User_Process+0xca>
        if(HAL_UART_Transmit(&hcom_uart[COM1], (uint8_t*)&rx_buffer[i], 1, BLE_UART_LONG_TIMEOUT)!= HAL_OK) {
 8000602:	463a      	mov	r2, r7
 8000604:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000608:	18d1      	adds	r1, r2, r3
 800060a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800060e:	2201      	movs	r2, #1
 8000610:	4810      	ldr	r0, [pc, #64]	; (8000654 <User_Process+0xf4>)
 8000612:	f007 f803 	bl	800761c <HAL_UART_Transmit>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <User_Process+0xc0>
          Error_Handler();
 800061c:	f000 fe30 	bl	8001280 <Error_Handler>
      for (i = 0; i < rx_bytes; i++) {
 8000620:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000624:	3301      	adds	r3, #1
 8000626:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800062a:	f897 3101 	ldrb.w	r3, [r7, #257]	; 0x101
 800062e:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8000632:	429a      	cmp	r2, r3
 8000634:	dbe5      	blt.n	8000602 <User_Process+0xa2>
  while (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET) {
 8000636:	2180      	movs	r1, #128	; 0x80
 8000638:	4808      	ldr	r0, [pc, #32]	; (800065c <User_Process+0xfc>)
 800063a:	f002 fb89 	bl	8002d50 <HAL_GPIO_ReadPin>
 800063e:	4603      	mov	r3, r0
 8000640:	2b01      	cmp	r3, #1
 8000642:	d0ce      	beq.n	80005e2 <User_Process+0x82>
        }
      }
    }
  }
}
 8000644:	bf00      	nop
 8000646:	bf00      	nop
 8000648:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	200008e0 	.word	0x200008e0
 8000654:	20000c64 	.word	0x20000c64
 8000658:	200008e4 	.word	0x200008e4
 800065c:	40021000 	.word	0x40021000

08000660 <handle_vendor_command>:
 * @param  cmd: the command
 * @param  cmd_len: the length of the command
 * @return None
 */
void handle_vendor_command(uint8_t* cmd, uint8_t cmd_len)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b0c4      	sub	sp, #272	; 0x110
 8000664:	af00      	add	r7, sp, #0
 8000666:	1d3b      	adds	r3, r7, #4
 8000668:	6018      	str	r0, [r3, #0]
 800066a:	460a      	mov	r2, r1
 800066c:	1cfb      	adds	r3, r7, #3
 800066e:	701a      	strb	r2, [r3, #0]
  int unsupported = 0;
 8000670:	2300      	movs	r3, #0
 8000672:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  uint8_t len = 0;
 8000676:	2300      	movs	r3, #0
 8000678:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
  uint8_t response[MAX_RESP_SIZE];

  response[0] = HCI_VENDOR_PKT;
 800067c:	f107 030c 	add.w	r3, r7, #12
 8000680:	22ff      	movs	r2, #255	; 0xff
 8000682:	701a      	strb	r2, [r3, #0]
  response[RESP_VENDOR_CODE_OFFSET] = RESPONSE;
 8000684:	f107 030c 	add.w	r3, r7, #12
 8000688:	2201      	movs	r2, #1
 800068a:	705a      	strb	r2, [r3, #1]
  response[RESP_CMDCODE_OFFSET] = cmd[HCI_VENDOR_CMDCODE_OFFSET];
 800068c:	1d3b      	adds	r3, r7, #4
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	785a      	ldrb	r2, [r3, #1]
 8000692:	f107 030c 	add.w	r3, r7, #12
 8000696:	711a      	strb	r2, [r3, #4]
  response[RESP_STATUS_OFFSET] = 0;
 8000698:	f107 030c 	add.w	r3, r7, #12
 800069c:	2200      	movs	r2, #0
 800069e:	715a      	strb	r2, [r3, #5]

  if (cmd[HCI_TYPE_OFFSET] == HCI_VENDOR_PKT) {
 80006a0:	1d3b      	adds	r3, r7, #4
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	2bff      	cmp	r3, #255	; 0xff
 80006a8:	d122      	bne.n	80006f0 <handle_vendor_command+0x90>
    switch (cmd[HCI_VENDOR_CMDCODE_OFFSET]) {
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	3301      	adds	r3, #1
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	2b05      	cmp	r3, #5
 80006b4:	d015      	beq.n	80006e2 <handle_vendor_command+0x82>
 80006b6:	2b05      	cmp	r3, #5
 80006b8:	dc16      	bgt.n	80006e8 <handle_vendor_command+0x88>
 80006ba:	2b01      	cmp	r3, #1
 80006bc:	d002      	beq.n	80006c4 <handle_vendor_command+0x64>
 80006be:	2b04      	cmp	r3, #4
 80006c0:	d00c      	beq.n	80006dc <handle_vendor_command+0x7c>
 80006c2:	e011      	b.n	80006e8 <handle_vendor_command+0x88>
    case VERSION:
      response[RESP_PARAM_OFFSET] = FW_VERSION_MAJOR;
 80006c4:	f107 030c 	add.w	r3, r7, #12
 80006c8:	2201      	movs	r2, #1
 80006ca:	719a      	strb	r2, [r3, #6]
      response[RESP_PARAM_OFFSET+1] = FW_VERSION_MINOR;
 80006cc:	f107 030c 	add.w	r3, r7, #12
 80006d0:	2206      	movs	r2, #6
 80006d2:	71da      	strb	r2, [r3, #7]
      len = 2;
 80006d4:	2302      	movs	r3, #2
 80006d6:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
      break;
 80006da:	e00c      	b.n	80006f6 <handle_vendor_command+0x96>

    case BLUENRG_RESET:
      HCI_TL_SPI_Reset();
 80006dc:	f000 f94e 	bl	800097c <HCI_TL_SPI_Reset>
      break;
 80006e0:	e009      	b.n	80006f6 <handle_vendor_command+0x96>

    case HW_BOOTLOADER:
      BlueNRG_HW_Bootloader();
 80006e2:	f000 f885 	bl	80007f0 <BlueNRG_HW_Bootloader>
      break;
 80006e6:	e006      	b.n	80006f6 <handle_vendor_command+0x96>

    default:
      unsupported = 1;
 80006e8:	2301      	movs	r3, #1
 80006ea:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80006ee:	e002      	b.n	80006f6 <handle_vendor_command+0x96>
    }
  } else {
    unsupported = 1;
 80006f0:	2301      	movs	r3, #1
 80006f2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  }

  if (unsupported) {
 80006f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d003      	beq.n	8000706 <handle_vendor_command+0xa6>
    response[RESP_STATUS_OFFSET] = UNKNOWN_COMMAND;
 80006fe:	f107 030c 	add.w	r3, r7, #12
 8000702:	2201      	movs	r2, #1
 8000704:	715a      	strb	r2, [r3, #5]
  }

  len += 2; //Status and Command code
 8000706:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 800070a:	3302      	adds	r3, #2
 800070c:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
  PACK_2_BYTE_PARAMETER(response + RESP_LEN_OFFSET_LSB, len);
 8000710:	f107 030c 	add.w	r3, r7, #12
 8000714:	f897 210b 	ldrb.w	r2, [r7, #267]	; 0x10b
 8000718:	709a      	strb	r2, [r3, #2]
 800071a:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 800071e:	121b      	asrs	r3, r3, #8
 8000720:	b2da      	uxtb	r2, r3
 8000722:	f107 030c 	add.w	r3, r7, #12
 8000726:	70da      	strb	r2, [r3, #3]
  len += RESP_CMDCODE_OFFSET;
 8000728:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 800072c:	3304      	adds	r3, #4
 800072e:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    PRINT_CSV(" %02x", response[i]);
  }
  PRINT_CSV("\n");
#endif

  if(HAL_UART_Transmit(&hcom_uart[COM1], (uint8_t*)response, len, BLE_UART_LONG_TIMEOUT) != HAL_OK) {
 8000732:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8000736:	b29a      	uxth	r2, r3
 8000738:	f107 010c 	add.w	r1, r7, #12
 800073c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000740:	4806      	ldr	r0, [pc, #24]	; (800075c <handle_vendor_command+0xfc>)
 8000742:	f006 ff6b 	bl	800761c <HAL_UART_Transmit>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <handle_vendor_command+0xf0>
    Error_Handler();
 800074c:	f000 fd98 	bl	8001280 <Error_Handler>
  }
}
 8000750:	bf00      	nop
 8000752:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	20000c64 	.word	0x20000c64

08000760 <Hal_Write_Serial>:
 * @param  n_bytes2: number of bytes in 2nd buffer
 * @retval None
 */
void Hal_Write_Serial(const void* data1, const void* data2, int32_t n_bytes1,
                      int32_t n_bytes2)
{
 8000760:	b590      	push	{r4, r7, lr}
 8000762:	b0c7      	sub	sp, #284	; 0x11c
 8000764:	af00      	add	r7, sp, #0
 8000766:	f107 040c 	add.w	r4, r7, #12
 800076a:	6020      	str	r0, [r4, #0]
 800076c:	f107 0008 	add.w	r0, r7, #8
 8000770:	6001      	str	r1, [r0, #0]
 8000772:	1d39      	adds	r1, r7, #4
 8000774:	600a      	str	r2, [r1, #0]
 8000776:	463a      	mov	r2, r7
 8000778:	6013      	str	r3, [r2, #0]
  uint8_t buff[UARTHEADERSIZE + RXBUFFERSIZE];
  uint32_t tickstart;

  BLUENRG_memcpy(buff, (uint8_t *)data1, n_bytes1);
 800077a:	1d3b      	adds	r3, r7, #4
 800077c:	681a      	ldr	r2, [r3, #0]
 800077e:	f107 030c 	add.w	r3, r7, #12
 8000782:	f107 0010 	add.w	r0, r7, #16
 8000786:	6819      	ldr	r1, [r3, #0]
 8000788:	f00b fe86 	bl	800c498 <memcpy>
  BLUENRG_memcpy(buff + n_bytes1, (uint8_t *)data2, n_bytes2);
 800078c:	1d3b      	adds	r3, r7, #4
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	f107 0210 	add.w	r2, r7, #16
 8000794:	18d0      	adds	r0, r2, r3
 8000796:	463b      	mov	r3, r7
 8000798:	681a      	ldr	r2, [r3, #0]
 800079a:	f107 0308 	add.w	r3, r7, #8
 800079e:	6819      	ldr	r1, [r3, #0]
 80007a0:	f00b fe7a 	bl	800c498 <memcpy>

  tickstart = HAL_GetTick();
 80007a4:	f001 fa8a 	bl	8001cbc <HAL_GetTick>
 80007a8:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  while(1){
    /* Data are available for the BlueNRG: write them through SPI */
    if (HCI_TL_SPI_Send(buff, n_bytes1+n_bytes2) == 0) break;
 80007ac:	1d3b      	adds	r3, r7, #4
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	b29a      	uxth	r2, r3
 80007b2:	463b      	mov	r3, r7
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	b29b      	uxth	r3, r3
 80007b8:	4413      	add	r3, r2
 80007ba:	b29a      	uxth	r2, r3
 80007bc:	f107 0310 	add.w	r3, r7, #16
 80007c0:	4611      	mov	r1, r2
 80007c2:	4618      	mov	r0, r3
 80007c4:	f000 f956 	bl	8000a74 <HCI_TL_SPI_Send>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d008      	beq.n	80007e0 <Hal_Write_Serial+0x80>
    if ((HAL_GetTick() - tickstart) > (HCI_DEFAULT_TIMEOUT_MS/10)) break;
 80007ce:	f001 fa75 	bl	8001cbc <HAL_GetTick>
 80007d2:	4602      	mov	r2, r0
 80007d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80007d8:	1ad3      	subs	r3, r2, r3
 80007da:	2b64      	cmp	r3, #100	; 0x64
 80007dc:	d802      	bhi.n	80007e4 <Hal_Write_Serial+0x84>
    if (HCI_TL_SPI_Send(buff, n_bytes1+n_bytes2) == 0) break;
 80007de:	e7e5      	b.n	80007ac <Hal_Write_Serial+0x4c>
 80007e0:	bf00      	nop
 80007e2:	e000      	b.n	80007e6 <Hal_Write_Serial+0x86>
    if ((HAL_GetTick() - tickstart) > (HCI_DEFAULT_TIMEOUT_MS/10)) break;
 80007e4:	bf00      	nop
  }
}
 80007e6:	bf00      	nop
 80007e8:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd90      	pop	{r4, r7, pc}

080007f0 <BlueNRG_HW_Bootloader>:
 * @brief  Activate internal bootloader using pin.
 * @param  None
 * @retval None
 */
void BlueNRG_HW_Bootloader(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  Disable_SPI_IRQ();
 80007f4:	f000 f811 	bl	800081a <Disable_SPI_IRQ>
  set_irq_as_output();
 80007f8:	f000 f816 	bl	8000828 <set_irq_as_output>

  HCI_TL_SPI_Reset();
 80007fc:	f000 f8be 	bl	800097c <HCI_TL_SPI_Reset>

  set_irq_as_input();
 8000800:	f000 f82e 	bl	8000860 <set_irq_as_input>
  Enable_SPI_IRQ();
 8000804:	f000 f802 	bl	800080c <Enable_SPI_IRQ>
}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}

0800080c <Enable_SPI_IRQ>:
 * @brief  Enable SPI IRQ.
 * @param  None
 * @retval None
 */
void Enable_SPI_IRQ(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  HAL_NVIC_EnableIRQ(HCI_TL_SPI_EXTI_IRQn);
 8000810:	2017      	movs	r0, #23
 8000812:	f001 fe26 	bl	8002462 <HAL_NVIC_EnableIRQ>
}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}

0800081a <Disable_SPI_IRQ>:
 * @brief  Disable SPI IRQ.
 * @param  None
 * @retval None
 */
void Disable_SPI_IRQ(void)
{
 800081a:	b580      	push	{r7, lr}
 800081c:	af00      	add	r7, sp, #0
  HAL_NVIC_DisableIRQ(HCI_TL_SPI_EXTI_IRQn);
 800081e:	2017      	movs	r0, #23
 8000820:	f001 fe2d 	bl	800247e <HAL_NVIC_DisableIRQ>
}
 8000824:	bf00      	nop
 8000826:	bd80      	pop	{r7, pc}

08000828 <set_irq_as_output>:
 * @brief  Set in Output mode the IRQ.
 * @param  None
 * @retval None
 */
void set_irq_as_output(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b086      	sub	sp, #24
 800082c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Pull IRQ high */
  GPIO_InitStructure.Pin   = HCI_TL_SPI_IRQ_PIN;
 800082e:	2380      	movs	r3, #128	; 0x80
 8000830:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000832:	2301      	movs	r3, #1
 8000834:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000836:	2303      	movs	r3, #3
 8000838:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(HCI_TL_SPI_IRQ_PORT, &GPIO_InitStructure);
 800083e:	1d3b      	adds	r3, r7, #4
 8000840:	4619      	mov	r1, r3
 8000842:	4806      	ldr	r0, [pc, #24]	; (800085c <set_irq_as_output+0x34>)
 8000844:	f001 ffcc 	bl	80027e0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(HCI_TL_SPI_IRQ_PORT, HCI_TL_SPI_IRQ_PIN, GPIO_PIN_SET);
 8000848:	2201      	movs	r2, #1
 800084a:	2180      	movs	r1, #128	; 0x80
 800084c:	4803      	ldr	r0, [pc, #12]	; (800085c <set_irq_as_output+0x34>)
 800084e:	f002 fa97 	bl	8002d80 <HAL_GPIO_WritePin>
}
 8000852:	bf00      	nop
 8000854:	3718      	adds	r7, #24
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	40021000 	.word	0x40021000

08000860 <set_irq_as_input>:
 * @brief  Set the IRQ in input mode.
 * @param  None
 * @retval None
 */
void set_irq_as_input(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b086      	sub	sp, #24
 8000864:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* IRQ input */
  GPIO_InitStructure.Pin       = HCI_TL_SPI_IRQ_PIN;
 8000866:	2380      	movs	r3, #128	; 0x80
 8000868:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode      = GPIO_MODE_IT_RISING;
 800086a:	4b0c      	ldr	r3, [pc, #48]	; (800089c <set_irq_as_input+0x3c>)
 800086c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Pull      = GPIO_PULLDOWN;
 800086e:	2302      	movs	r3, #2
 8000870:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8000872:	2303      	movs	r3, #3
 8000874:	613b      	str	r3, [r7, #16]
#ifdef IS_GPIO_AF
  GPIO_InitStructure.Alternate = 0;
 8000876:	2300      	movs	r3, #0
 8000878:	617b      	str	r3, [r7, #20]
#endif
  HAL_GPIO_Init(HCI_TL_SPI_IRQ_PORT, &GPIO_InitStructure);
 800087a:	1d3b      	adds	r3, r7, #4
 800087c:	4619      	mov	r1, r3
 800087e:	4808      	ldr	r0, [pc, #32]	; (80008a0 <set_irq_as_input+0x40>)
 8000880:	f001 ffae 	bl	80027e0 <HAL_GPIO_Init>

  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(HCI_TL_SPI_IRQ_PORT, &GPIO_InitStructure);
 8000888:	1d3b      	adds	r3, r7, #4
 800088a:	4619      	mov	r1, r3
 800088c:	4804      	ldr	r0, [pc, #16]	; (80008a0 <set_irq_as_input+0x40>)
 800088e:	f001 ffa7 	bl	80027e0 <HAL_GPIO_Init>
}
 8000892:	bf00      	nop
 8000894:	3718      	adds	r7, #24
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	10110000 	.word	0x10110000
 80008a0:	40021000 	.word	0x40021000

080008a4 <HCI_TL_SPI_Disable_IRQ>:
 * @brief  Disable SPI IRQ.
 * @param  None
 * @retval None
 */
static void HCI_TL_SPI_Disable_IRQ(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  HAL_NVIC_DisableIRQ(HCI_TL_SPI_EXTI_IRQn);
 80008a8:	2017      	movs	r0, #23
 80008aa:	f001 fde8 	bl	800247e <HAL_NVIC_DisableIRQ>
}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
	...

080008b4 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b088      	sub	sp, #32
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008bc:	4b21      	ldr	r3, [pc, #132]	; (8000944 <HCI_TL_SPI_Init+0x90>)
 80008be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c0:	4a20      	ldr	r2, [pc, #128]	; (8000944 <HCI_TL_SPI_Init+0x90>)
 80008c2:	f043 0301 	orr.w	r3, r3, #1
 80008c6:	6313      	str	r3, [r2, #48]	; 0x30
 80008c8:	4b1e      	ldr	r3, [pc, #120]	; (8000944 <HCI_TL_SPI_Init+0x90>)
 80008ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008cc:	f003 0301 	and.w	r3, r3, #1
 80008d0:	60bb      	str	r3, [r7, #8]
 80008d2:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 80008d4:	2380      	movs	r3, #128	; 0x80
 80008d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008d8:	4b1b      	ldr	r3, [pc, #108]	; (8000948 <HCI_TL_SPI_Init+0x94>)
 80008da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 80008e0:	f107 030c 	add.w	r3, r7, #12
 80008e4:	4619      	mov	r1, r3
 80008e6:	4819      	ldr	r0, [pc, #100]	; (800094c <HCI_TL_SPI_Init+0x98>)
 80008e8:	f001 ff7a 	bl	80027e0 <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 80008ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f2:	2301      	movs	r3, #1
 80008f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fa:	2300      	movs	r3, #0
 80008fc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 80008fe:	f107 030c 	add.w	r3, r7, #12
 8000902:	4619      	mov	r1, r3
 8000904:	4811      	ldr	r0, [pc, #68]	; (800094c <HCI_TL_SPI_Init+0x98>)
 8000906:	f001 ff6b 	bl	80027e0 <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 800090a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800090e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000910:	2301      	movs	r3, #1
 8000912:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000918:	2300      	movs	r3, #0
 800091a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 800091c:	f107 030c 	add.w	r3, r7, #12
 8000920:	4619      	mov	r1, r3
 8000922:	480a      	ldr	r0, [pc, #40]	; (800094c <HCI_TL_SPI_Init+0x98>)
 8000924:	f001 ff5c 	bl	80027e0 <HAL_GPIO_Init>
  /* Deselect CS PIN for BlueNRG at startup to avoid spurious commands */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000928:	2201      	movs	r2, #1
 800092a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800092e:	4807      	ldr	r0, [pc, #28]	; (800094c <HCI_TL_SPI_Init+0x98>)
 8000930:	f002 fa26 	bl	8002d80 <HAL_GPIO_WritePin>

  return BSP_SPI2_Init();
 8000934:	f000 fa02 	bl	8000d3c <BSP_SPI2_Init>
 8000938:	4603      	mov	r3, r0
}
 800093a:	4618      	mov	r0, r3
 800093c:	3720      	adds	r7, #32
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40023800 	.word	0x40023800
 8000948:	10110000 	.word	0x10110000
 800094c:	40021000 	.word	0x40021000

08000950 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 8000954:	2180      	movs	r1, #128	; 0x80
 8000956:	4808      	ldr	r0, [pc, #32]	; (8000978 <HCI_TL_SPI_DeInit+0x28>)
 8000958:	f002 f8ee 	bl	8002b38 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 800095c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000960:	4805      	ldr	r0, [pc, #20]	; (8000978 <HCI_TL_SPI_DeInit+0x28>)
 8000962:	f002 f8e9 	bl	8002b38 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 8000966:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800096a:	4803      	ldr	r0, [pc, #12]	; (8000978 <HCI_TL_SPI_DeInit+0x28>)
 800096c:	f002 f8e4 	bl	8002b38 <HAL_GPIO_DeInit>
  return 0;
 8000970:	2300      	movs	r3, #0
}
 8000972:	4618      	mov	r0, r3
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40021000 	.word	0x40021000

0800097c <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000980:	2201      	movs	r2, #1
 8000982:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000986:	480c      	ldr	r0, [pc, #48]	; (80009b8 <HCI_TL_SPI_Reset+0x3c>)
 8000988:	f002 f9fa 	bl	8002d80 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 800098c:	2200      	movs	r2, #0
 800098e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000992:	4809      	ldr	r0, [pc, #36]	; (80009b8 <HCI_TL_SPI_Reset+0x3c>)
 8000994:	f002 f9f4 	bl	8002d80 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8000998:	2005      	movs	r0, #5
 800099a:	f001 f99b 	bl	8001cd4 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 800099e:	2201      	movs	r2, #1
 80009a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009a4:	4804      	ldr	r0, [pc, #16]	; (80009b8 <HCI_TL_SPI_Reset+0x3c>)
 80009a6:	f002 f9eb 	bl	8002d80 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80009aa:	2005      	movs	r0, #5
 80009ac:	f001 f992 	bl	8001cd4 <HAL_Delay>
  return 0;
 80009b0:	2300      	movs	r3, #0
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40021000 	.word	0x40021000

080009bc <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b088      	sub	sp, #32
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
 80009c4:	460b      	mov	r3, r1
 80009c6:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 80009c8:	2300      	movs	r3, #0
 80009ca:	777b      	strb	r3, [r7, #29]
  uint8_t char_00 = 0x00;
 80009cc:	2300      	movs	r3, #0
 80009ce:	773b      	strb	r3, [r7, #28]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 80009d0:	4a26      	ldr	r2, [pc, #152]	; (8000a6c <HCI_TL_SPI_Receive+0xb0>)
 80009d2:	f107 0314 	add.w	r3, r7, #20
 80009d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009da:	6018      	str	r0, [r3, #0]
 80009dc:	3304      	adds	r3, #4
 80009de:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  HCI_TL_SPI_Disable_IRQ();
 80009e0:	f7ff ff60 	bl	80008a4 <HCI_TL_SPI_Disable_IRQ>

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80009e4:	2200      	movs	r2, #0
 80009e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009ea:	4821      	ldr	r0, [pc, #132]	; (8000a70 <HCI_TL_SPI_Receive+0xb4>)
 80009ec:	f002 f9c8 	bl	8002d80 <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI2_SendRecv(header_master, header_slave, HEADER_SIZE);
 80009f0:	f107 010c 	add.w	r1, r7, #12
 80009f4:	f107 0314 	add.w	r3, r7, #20
 80009f8:	2205      	movs	r2, #5
 80009fa:	4618      	mov	r0, r3
 80009fc:	f000 f9ce 	bl	8000d9c <BSP_SPI2_SendRecv>

  /* device is ready */
  byte_count = (header_slave[4] << 8)| header_slave[3];
 8000a00:	7c3b      	ldrb	r3, [r7, #16]
 8000a02:	021b      	lsls	r3, r3, #8
 8000a04:	b21a      	sxth	r2, r3
 8000a06:	7bfb      	ldrb	r3, [r7, #15]
 8000a08:	b21b      	sxth	r3, r3
 8000a0a:	4313      	orrs	r3, r2
 8000a0c:	b21b      	sxth	r3, r3
 8000a0e:	83fb      	strh	r3, [r7, #30]

  if(byte_count > 0)
 8000a10:	8bfb      	ldrh	r3, [r7, #30]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d01e      	beq.n	8000a54 <HCI_TL_SPI_Receive+0x98>
  {

    /* avoid to read more data than the size of the buffer */
    if (byte_count > size)
 8000a16:	8bfa      	ldrh	r2, [r7, #30]
 8000a18:	887b      	ldrh	r3, [r7, #2]
 8000a1a:	429a      	cmp	r2, r3
 8000a1c:	d901      	bls.n	8000a22 <HCI_TL_SPI_Receive+0x66>
    {
      byte_count = size;
 8000a1e:	887b      	ldrh	r3, [r7, #2]
 8000a20:	83fb      	strh	r3, [r7, #30]
    }

    for(len = 0; len < byte_count; len++)
 8000a22:	2300      	movs	r3, #0
 8000a24:	777b      	strb	r3, [r7, #29]
 8000a26:	e010      	b.n	8000a4a <HCI_TL_SPI_Receive+0x8e>
    {
      BSP_SPI2_SendRecv(&char_00, (uint8_t*)&read_char, 1);
 8000a28:	f107 011b 	add.w	r1, r7, #27
 8000a2c:	f107 031c 	add.w	r3, r7, #28
 8000a30:	2201      	movs	r2, #1
 8000a32:	4618      	mov	r0, r3
 8000a34:	f000 f9b2 	bl	8000d9c <BSP_SPI2_SendRecv>
      buffer[len] = read_char;
 8000a38:	7f7b      	ldrb	r3, [r7, #29]
 8000a3a:	687a      	ldr	r2, [r7, #4]
 8000a3c:	4413      	add	r3, r2
 8000a3e:	7efa      	ldrb	r2, [r7, #27]
 8000a40:	b2d2      	uxtb	r2, r2
 8000a42:	701a      	strb	r2, [r3, #0]
    for(len = 0; len < byte_count; len++)
 8000a44:	7f7b      	ldrb	r3, [r7, #29]
 8000a46:	3301      	adds	r3, #1
 8000a48:	777b      	strb	r3, [r7, #29]
 8000a4a:	7f7b      	ldrb	r3, [r7, #29]
 8000a4c:	b29b      	uxth	r3, r3
 8000a4e:	8bfa      	ldrh	r2, [r7, #30]
 8000a50:	429a      	cmp	r2, r3
 8000a52:	d8e9      	bhi.n	8000a28 <HCI_TL_SPI_Receive+0x6c>
    }
  }

  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000a54:	2201      	movs	r2, #1
 8000a56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a5a:	4805      	ldr	r0, [pc, #20]	; (8000a70 <HCI_TL_SPI_Receive+0xb4>)
 8000a5c:	f002 f990 	bl	8002d80 <HAL_GPIO_WritePin>

  return len;
 8000a60:	7f7b      	ldrb	r3, [r7, #29]
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3720      	adds	r7, #32
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	0800c66c 	.word	0x0800c66c
 8000a70:	40021000 	.word	0x40021000

08000a74 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08a      	sub	sp, #40	; 0x28
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
 8000a7c:	460b      	mov	r3, r1
 8000a7e:	807b      	strh	r3, [r7, #2]
  int32_t result;
  uint16_t rx_bytes;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8000a80:	4a34      	ldr	r2, [pc, #208]	; (8000b54 <HCI_TL_SPI_Send+0xe0>)
 8000a82:	f107 0314 	add.w	r3, r7, #20
 8000a86:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a8a:	6018      	str	r0, [r3, #0]
 8000a8c:	3304      	adds	r3, #4
 8000a8e:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 8000a90:	f001 f914 	bl	8001cbc <HAL_GetTick>
 8000a94:	6238      	str	r0, [r7, #32]

  do
  {
    uint32_t tickstart_data_available = HAL_GetTick();
 8000a96:	f001 f911 	bl	8001cbc <HAL_GetTick>
 8000a9a:	61f8      	str	r0, [r7, #28]

    result = 0;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	627b      	str	r3, [r7, #36]	; 0x24

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aa6:	482c      	ldr	r0, [pc, #176]	; (8000b58 <HCI_TL_SPI_Send+0xe4>)
 8000aa8:	f002 f96a 	bl	8002d80 <HAL_GPIO_WritePin>

    /*
     * Wait until BlueNRG-2 is ready.
     * When ready it will raise the IRQ pin.
     */
    while(!IsDataAvailable())
 8000aac:	e00a      	b.n	8000ac4 <HCI_TL_SPI_Send+0x50>
    {
      if((HAL_GetTick() - tickstart_data_available) > TIMEOUT_DURATION)
 8000aae:	f001 f905 	bl	8001cbc <HAL_GetTick>
 8000ab2:	4602      	mov	r2, r0
 8000ab4:	69fb      	ldr	r3, [r7, #28]
 8000ab6:	1ad3      	subs	r3, r2, r3
 8000ab8:	2b0f      	cmp	r3, #15
 8000aba:	d903      	bls.n	8000ac4 <HCI_TL_SPI_Send+0x50>
      {
        result = -3;
 8000abc:	f06f 0302 	mvn.w	r3, #2
 8000ac0:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8000ac2:	e004      	b.n	8000ace <HCI_TL_SPI_Send+0x5a>
    while(!IsDataAvailable())
 8000ac4:	f000 f84c 	bl	8000b60 <IsDataAvailable>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d0ef      	beq.n	8000aae <HCI_TL_SPI_Send+0x3a>
      }
    }
    if(result == -3)
 8000ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad0:	f113 0f03 	cmn.w	r3, #3
 8000ad4:	d106      	bne.n	8000ae4 <HCI_TL_SPI_Send+0x70>
    {
      /* The break causes the exiting from the "while", so the CS line must be released */
      HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000adc:	481e      	ldr	r0, [pc, #120]	; (8000b58 <HCI_TL_SPI_Send+0xe4>)
 8000ade:	f002 f94f 	bl	8002d80 <HAL_GPIO_WritePin>
      break;
 8000ae2:	e031      	b.n	8000b48 <HCI_TL_SPI_Send+0xd4>
    }

    /* Read header */
    BSP_SPI2_SendRecv(header_master, header_slave, HEADER_SIZE);
 8000ae4:	f107 010c 	add.w	r1, r7, #12
 8000ae8:	f107 0314 	add.w	r3, r7, #20
 8000aec:	2205      	movs	r2, #5
 8000aee:	4618      	mov	r0, r3
 8000af0:	f000 f954 	bl	8000d9c <BSP_SPI2_SendRecv>

    rx_bytes = (((uint16_t)header_slave[2])<<8) | ((uint16_t)header_slave[1]);
 8000af4:	7bbb      	ldrb	r3, [r7, #14]
 8000af6:	021b      	lsls	r3, r3, #8
 8000af8:	b21a      	sxth	r2, r3
 8000afa:	7b7b      	ldrb	r3, [r7, #13]
 8000afc:	b21b      	sxth	r3, r3
 8000afe:	4313      	orrs	r3, r2
 8000b00:	b21b      	sxth	r3, r3
 8000b02:	837b      	strh	r3, [r7, #26]

    if(rx_bytes >= size)
 8000b04:	8b7a      	ldrh	r2, [r7, #26]
 8000b06:	887b      	ldrh	r3, [r7, #2]
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	d306      	bcc.n	8000b1a <HCI_TL_SPI_Send+0xa6>
    {
      /* Buffer is big enough */
      BSP_SPI2_SendRecv(buffer, read_char_buf, size);
 8000b0c:	887b      	ldrh	r3, [r7, #2]
 8000b0e:	461a      	mov	r2, r3
 8000b10:	4912      	ldr	r1, [pc, #72]	; (8000b5c <HCI_TL_SPI_Send+0xe8>)
 8000b12:	6878      	ldr	r0, [r7, #4]
 8000b14:	f000 f942 	bl	8000d9c <BSP_SPI2_SendRecv>
 8000b18:	e002      	b.n	8000b20 <HCI_TL_SPI_Send+0xac>
    }
    else
    {
      /* Buffer is too small */
      result = -2;
 8000b1a:	f06f 0301 	mvn.w	r3, #1
 8000b1e:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000b20:	2201      	movs	r2, #1
 8000b22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b26:	480c      	ldr	r0, [pc, #48]	; (8000b58 <HCI_TL_SPI_Send+0xe4>)
 8000b28:	f002 f92a 	bl	8002d80 <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 8000b2c:	f001 f8c6 	bl	8001cbc <HAL_GetTick>
 8000b30:	4602      	mov	r2, r0
 8000b32:	6a3b      	ldr	r3, [r7, #32]
 8000b34:	1ad3      	subs	r3, r2, r3
 8000b36:	2b0f      	cmp	r3, #15
 8000b38:	d903      	bls.n	8000b42 <HCI_TL_SPI_Send+0xce>
    {
      result = -3;
 8000b3a:	f06f 0302 	mvn.w	r3, #2
 8000b3e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8000b40:	e002      	b.n	8000b48 <HCI_TL_SPI_Send+0xd4>
    }
  } while(result < 0);
 8000b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	dba6      	blt.n	8000a96 <HCI_TL_SPI_Send+0x22>

  return result;
 8000b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3728      	adds	r7, #40	; 0x28
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	0800c674 	.word	0x0800c674
 8000b58:	40021000 	.word	0x40021000
 8000b5c:	20000228 	.word	0x20000228

08000b60 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8000b64:	2180      	movs	r1, #128	; 0x80
 8000b66:	4805      	ldr	r0, [pc, #20]	; (8000b7c <IsDataAvailable+0x1c>)
 8000b68:	f002 f8f2 	bl	8002d50 <HAL_GPIO_ReadPin>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	bf0c      	ite	eq
 8000b72:	2301      	moveq	r3, #1
 8000b74:	2300      	movne	r3, #0
 8000b76:	b2db      	uxtb	r3, r3
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	40021000 	.word	0x40021000

08000b80 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b088      	sub	sp, #32
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 8000b86:	4b12      	ldr	r3, [pc, #72]	; (8000bd0 <hci_tl_lowlevel_init+0x50>)
 8000b88:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 8000b8a:	4b12      	ldr	r3, [pc, #72]	; (8000bd4 <hci_tl_lowlevel_init+0x54>)
 8000b8c:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 8000b8e:	4b12      	ldr	r3, [pc, #72]	; (8000bd8 <hci_tl_lowlevel_init+0x58>)
 8000b90:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 8000b92:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <hci_tl_lowlevel_init+0x5c>)
 8000b94:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 8000b96:	4b12      	ldr	r3, [pc, #72]	; (8000be0 <hci_tl_lowlevel_init+0x60>)
 8000b98:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 8000b9a:	4b12      	ldr	r3, [pc, #72]	; (8000be4 <hci_tl_lowlevel_init+0x64>)
 8000b9c:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 8000b9e:	1d3b      	adds	r3, r7, #4
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f008 fee7 	bl	8009974 <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti7, EXTI_LINE_7);
 8000ba6:	4910      	ldr	r1, [pc, #64]	; (8000be8 <hci_tl_lowlevel_init+0x68>)
 8000ba8:	4810      	ldr	r0, [pc, #64]	; (8000bec <hci_tl_lowlevel_init+0x6c>)
 8000baa:	f001 fc9c 	bl	80024e6 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti7, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 8000bae:	4a10      	ldr	r2, [pc, #64]	; (8000bf0 <hci_tl_lowlevel_init+0x70>)
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	480e      	ldr	r0, [pc, #56]	; (8000bec <hci_tl_lowlevel_init+0x6c>)
 8000bb4:	f001 fc7d 	bl	80024b2 <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2100      	movs	r1, #0
 8000bbc:	2017      	movs	r0, #23
 8000bbe:	f001 fc34 	bl	800242a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000bc2:	2017      	movs	r0, #23
 8000bc4:	f001 fc4d 	bl	8002462 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 8000bc8:	bf00      	nop
 8000bca:	3720      	adds	r7, #32
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	080008b5 	.word	0x080008b5
 8000bd4:	08000951 	.word	0x08000951
 8000bd8:	08000a75 	.word	0x08000a75
 8000bdc:	080009bd 	.word	0x080009bd
 8000be0:	0800097d 	.word	0x0800097d
 8000be4:	08000ddd 	.word	0x08000ddd
 8000be8:	06000007 	.word	0x06000007
 8000bec:	200009e4 	.word	0x200009e4
 8000bf0:	08000bf5 	.word	0x08000bf5

08000bf4 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 8000bf8:	e005      	b.n	8000c06 <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 8000bfa:	2000      	movs	r0, #0
 8000bfc:	f008 feda 	bl	80099b4 <hci_notify_asynch_evt>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d105      	bne.n	8000c12 <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 8000c06:	f7ff ffab 	bl	8000b60 <IsDataAvailable>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d1f4      	bne.n	8000bfa <hci_tl_lowlevel_isr+0x6>
 8000c10:	e000      	b.n	8000c14 <hci_tl_lowlevel_isr+0x20>
    {
      return;
 8000c12:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 8000c14:	bd80      	pop	{r7, pc}
	...

08000c18 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c1e:	463b      	mov	r3, r7
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000c2a:	4b21      	ldr	r3, [pc, #132]	; (8000cb0 <MX_ADC1_Init+0x98>)
 8000c2c:	4a21      	ldr	r2, [pc, #132]	; (8000cb4 <MX_ADC1_Init+0x9c>)
 8000c2e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c30:	4b1f      	ldr	r3, [pc, #124]	; (8000cb0 <MX_ADC1_Init+0x98>)
 8000c32:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c36:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c38:	4b1d      	ldr	r3, [pc, #116]	; (8000cb0 <MX_ADC1_Init+0x98>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c3e:	4b1c      	ldr	r3, [pc, #112]	; (8000cb0 <MX_ADC1_Init+0x98>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000c44:	4b1a      	ldr	r3, [pc, #104]	; (8000cb0 <MX_ADC1_Init+0x98>)
 8000c46:	2201      	movs	r2, #1
 8000c48:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c4a:	4b19      	ldr	r3, [pc, #100]	; (8000cb0 <MX_ADC1_Init+0x98>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c52:	4b17      	ldr	r3, [pc, #92]	; (8000cb0 <MX_ADC1_Init+0x98>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c58:	4b15      	ldr	r3, [pc, #84]	; (8000cb0 <MX_ADC1_Init+0x98>)
 8000c5a:	4a17      	ldr	r2, [pc, #92]	; (8000cb8 <MX_ADC1_Init+0xa0>)
 8000c5c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c5e:	4b14      	ldr	r3, [pc, #80]	; (8000cb0 <MX_ADC1_Init+0x98>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000c64:	4b12      	ldr	r3, [pc, #72]	; (8000cb0 <MX_ADC1_Init+0x98>)
 8000c66:	2201      	movs	r2, #1
 8000c68:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c6a:	4b11      	ldr	r3, [pc, #68]	; (8000cb0 <MX_ADC1_Init+0x98>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c72:	4b0f      	ldr	r3, [pc, #60]	; (8000cb0 <MX_ADC1_Init+0x98>)
 8000c74:	2201      	movs	r2, #1
 8000c76:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c78:	480d      	ldr	r0, [pc, #52]	; (8000cb0 <MX_ADC1_Init+0x98>)
 8000c7a:	f001 f84f 	bl	8001d1c <HAL_ADC_Init>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000c84:	f000 fafc 	bl	8001280 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000c90:	2300      	movs	r3, #0
 8000c92:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c94:	463b      	mov	r3, r7
 8000c96:	4619      	mov	r1, r3
 8000c98:	4805      	ldr	r0, [pc, #20]	; (8000cb0 <MX_ADC1_Init+0x98>)
 8000c9a:	f001 f883 	bl	8001da4 <HAL_ADC_ConfigChannel>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000ca4:	f000 faec 	bl	8001280 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ca8:	bf00      	nop
 8000caa:	3710      	adds	r7, #16
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	200009ec 	.word	0x200009ec
 8000cb4:	40012000 	.word	0x40012000
 8000cb8:	0f000001 	.word	0x0f000001

08000cbc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b08a      	sub	sp, #40	; 0x28
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc4:	f107 0314 	add.w	r3, r7, #20
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
 8000cd2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a15      	ldr	r2, [pc, #84]	; (8000d30 <HAL_ADC_MspInit+0x74>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d123      	bne.n	8000d26 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000cde:	4b15      	ldr	r3, [pc, #84]	; (8000d34 <HAL_ADC_MspInit+0x78>)
 8000ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce2:	4a14      	ldr	r2, [pc, #80]	; (8000d34 <HAL_ADC_MspInit+0x78>)
 8000ce4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ce8:	6453      	str	r3, [r2, #68]	; 0x44
 8000cea:	4b12      	ldr	r3, [pc, #72]	; (8000d34 <HAL_ADC_MspInit+0x78>)
 8000cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cf2:	613b      	str	r3, [r7, #16]
 8000cf4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf6:	4b0f      	ldr	r3, [pc, #60]	; (8000d34 <HAL_ADC_MspInit+0x78>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	4a0e      	ldr	r2, [pc, #56]	; (8000d34 <HAL_ADC_MspInit+0x78>)
 8000cfc:	f043 0301 	orr.w	r3, r3, #1
 8000d00:	6313      	str	r3, [r2, #48]	; 0x30
 8000d02:	4b0c      	ldr	r3, [pc, #48]	; (8000d34 <HAL_ADC_MspInit+0x78>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = ADC1_3_3V_Pin|ADC1_5_0V_Pin|ADC1_Battery_Pin|GPIO_PIN_4;
 8000d0e:	231e      	movs	r3, #30
 8000d10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d12:	2303      	movs	r3, #3
 8000d14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d1a:	f107 0314 	add.w	r3, r7, #20
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4805      	ldr	r0, [pc, #20]	; (8000d38 <HAL_ADC_MspInit+0x7c>)
 8000d22:	f001 fd5d 	bl	80027e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000d26:	bf00      	nop
 8000d28:	3728      	adds	r7, #40	; 0x28
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40012000 	.word	0x40012000
 8000d34:	40023800 	.word	0x40023800
 8000d38:	40020000 	.word	0x40020000

08000d3c <BSP_SPI2_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI2_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8000d42:	2300      	movs	r3, #0
 8000d44:	607b      	str	r3, [r7, #4]

  hspi2.Instance  = SPI2;
 8000d46:	4b12      	ldr	r3, [pc, #72]	; (8000d90 <BSP_SPI2_Init+0x54>)
 8000d48:	4a12      	ldr	r2, [pc, #72]	; (8000d94 <BSP_SPI2_Init+0x58>)
 8000d4a:	601a      	str	r2, [r3, #0]

  if(SPI2InitCounter++ == 0)
 8000d4c:	4b12      	ldr	r3, [pc, #72]	; (8000d98 <BSP_SPI2_Init+0x5c>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	1c5a      	adds	r2, r3, #1
 8000d52:	4911      	ldr	r1, [pc, #68]	; (8000d98 <BSP_SPI2_Init+0x5c>)
 8000d54:	600a      	str	r2, [r1, #0]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d114      	bne.n	8000d84 <BSP_SPI2_Init+0x48>
  {
	if (HAL_SPI_GetState(&hspi2) == HAL_SPI_STATE_RESET)
 8000d5a:	480d      	ldr	r0, [pc, #52]	; (8000d90 <BSP_SPI2_Init+0x54>)
 8000d5c:	f005 fa2a 	bl	80061b4 <HAL_SPI_GetState>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d10e      	bne.n	8000d84 <BSP_SPI2_Init+0x48>
	{
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
		/* Init the SPI Msp */
		SPI2_MspInit(&hspi2);
 8000d66:	480a      	ldr	r0, [pc, #40]	; (8000d90 <BSP_SPI2_Init+0x54>)
 8000d68:	f000 f882 	bl	8000e70 <SPI2_MspInit>
			{
				return BSP_ERROR_MSP_FAILURE;
			}
		}
#endif
		if(ret == BSP_ERROR_NONE)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d108      	bne.n	8000d84 <BSP_SPI2_Init+0x48>
		{
			/* Init the SPI */
			if (MX_SPI2_Init(&hspi2) != HAL_OK)
 8000d72:	4807      	ldr	r0, [pc, #28]	; (8000d90 <BSP_SPI2_Init+0x54>)
 8000d74:	f000 f83a 	bl	8000dec <MX_SPI2_Init>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d002      	beq.n	8000d84 <BSP_SPI2_Init+0x48>
			{
				ret = BSP_ERROR_BUS_FAILURE;
 8000d7e:	f06f 0307 	mvn.w	r3, #7
 8000d82:	607b      	str	r3, [r7, #4]
			}
		}
	}
  }

  return ret;
 8000d84:	687b      	ldr	r3, [r7, #4]
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20000a34 	.word	0x20000a34
 8000d94:	40003800 	.word	0x40003800
 8000d98:	20000328 	.word	0x20000328

08000d9c <BSP_SPI2_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI2_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b088      	sub	sp, #32
 8000da0:	af02      	add	r7, sp, #8
 8000da2:	60f8      	str	r0, [r7, #12]
 8000da4:	60b9      	str	r1, [r7, #8]
 8000da6:	4613      	mov	r3, r2
 8000da8:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8000daa:	2300      	movs	r3, #0
 8000dac:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi2, pTxData, pRxData, Length, BUS_SPI2_POLL_TIMEOUT) != HAL_OK)
 8000dae:	88fb      	ldrh	r3, [r7, #6]
 8000db0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000db4:	9200      	str	r2, [sp, #0]
 8000db6:	68ba      	ldr	r2, [r7, #8]
 8000db8:	68f9      	ldr	r1, [r7, #12]
 8000dba:	4807      	ldr	r0, [pc, #28]	; (8000dd8 <BSP_SPI2_SendRecv+0x3c>)
 8000dbc:	f004 ffe7 	bl	8005d8e <HAL_SPI_TransmitReceive>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d002      	beq.n	8000dcc <BSP_SPI2_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8000dc6:	f06f 0305 	mvn.w	r3, #5
 8000dca:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8000dcc:	697b      	ldr	r3, [r7, #20]
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3718      	adds	r7, #24
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20000a34 	.word	0x20000a34

08000ddc <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000de0:	f000 ff6c 	bl	8001cbc <HAL_GetTick>
 8000de4:	4603      	mov	r3, r0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	bd80      	pop	{r7, pc}
	...

08000dec <MX_SPI2_Init>:

/* SPI2 init function */

__weak HAL_StatusTypeDef MX_SPI2_Init(SPI_HandleTypeDef* hspi)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000df4:	2300      	movs	r3, #0
 8000df6:	73fb      	strb	r3, [r7, #15]
  hspi->Instance = SPI2;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	4a1c      	ldr	r2, [pc, #112]	; (8000e6c <MX_SPI2_Init+0x80>)
 8000dfc:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e04:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2200      	movs	r2, #0
 8000e0a:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_4BIT;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000e12:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2200      	movs	r2, #0
 8000e18:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e26:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2200      	movs	r2, #0
 8000e32:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2200      	movs	r2, #0
 8000e38:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2207      	movs	r2, #7
 8000e44:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2200      	movs	r2, #0
 8000e4a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2208      	movs	r2, #8
 8000e50:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	f004 fef0 	bl	8005c38 <HAL_SPI_Init>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_SPI2_Init+0x76>
  {
    ret = HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3710      	adds	r7, #16
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	40003800 	.word	0x40003800

08000e70 <SPI2_MspInit>:

static void SPI2_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b08a      	sub	sp, #40	; 0x28
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e78:	4b2c      	ldr	r3, [pc, #176]	; (8000f2c <SPI2_MspInit+0xbc>)
 8000e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7c:	4a2b      	ldr	r2, [pc, #172]	; (8000f2c <SPI2_MspInit+0xbc>)
 8000e7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e82:	6413      	str	r3, [r2, #64]	; 0x40
 8000e84:	4b29      	ldr	r3, [pc, #164]	; (8000f2c <SPI2_MspInit+0xbc>)
 8000e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e8c:	613b      	str	r3, [r7, #16]
 8000e8e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e90:	4b26      	ldr	r3, [pc, #152]	; (8000f2c <SPI2_MspInit+0xbc>)
 8000e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e94:	4a25      	ldr	r2, [pc, #148]	; (8000f2c <SPI2_MspInit+0xbc>)
 8000e96:	f043 0304 	orr.w	r3, r3, #4
 8000e9a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9c:	4b23      	ldr	r3, [pc, #140]	; (8000f2c <SPI2_MspInit+0xbc>)
 8000e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea0:	f003 0304 	and.w	r3, r3, #4
 8000ea4:	60fb      	str	r3, [r7, #12]
 8000ea6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea8:	4b20      	ldr	r3, [pc, #128]	; (8000f2c <SPI2_MspInit+0xbc>)
 8000eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eac:	4a1f      	ldr	r2, [pc, #124]	; (8000f2c <SPI2_MspInit+0xbc>)
 8000eae:	f043 0302 	orr.w	r3, r3, #2
 8000eb2:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb4:	4b1d      	ldr	r3, [pc, #116]	; (8000f2c <SPI2_MspInit+0xbc>)
 8000eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb8:	f003 0302 	and.w	r3, r3, #2
 8000ebc:	60bb      	str	r3, [r7, #8]
 8000ebe:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = BUS_SPI2_MOSI_GPIO_PIN;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ecc:	2303      	movs	r3, #3
 8000ece:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI2_MOSI_GPIO_AF;
 8000ed0:	2305      	movs	r3, #5
 8000ed2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI2_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8000ed4:	f107 0314 	add.w	r3, r7, #20
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4815      	ldr	r0, [pc, #84]	; (8000f30 <SPI2_MspInit+0xc0>)
 8000edc:	f001 fc80 	bl	80027e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI2_MISO_GPIO_PIN;
 8000ee0:	2304      	movs	r3, #4
 8000ee2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eec:	2303      	movs	r3, #3
 8000eee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI2_MISO_GPIO_AF;
 8000ef0:	2305      	movs	r3, #5
 8000ef2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI2_MISO_GPIO_PORT, &GPIO_InitStruct);
 8000ef4:	f107 0314 	add.w	r3, r7, #20
 8000ef8:	4619      	mov	r1, r3
 8000efa:	480d      	ldr	r0, [pc, #52]	; (8000f30 <SPI2_MspInit+0xc0>)
 8000efc:	f001 fc70 	bl	80027e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI2_SCK_GPIO_PIN;
 8000f00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f06:	2302      	movs	r3, #2
 8000f08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f0e:	2303      	movs	r3, #3
 8000f10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI2_SCK_GPIO_AF;
 8000f12:	2305      	movs	r3, #5
 8000f14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI2_SCK_GPIO_PORT, &GPIO_InitStruct);
 8000f16:	f107 0314 	add.w	r3, r7, #20
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4805      	ldr	r0, [pc, #20]	; (8000f34 <SPI2_MspInit+0xc4>)
 8000f1e:	f001 fc5f 	bl	80027e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
}
 8000f22:	bf00      	nop
 8000f24:	3728      	adds	r7, #40	; 0x28
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40023800 	.word	0x40023800
 8000f30:	40020800 	.word	0x40020800
 8000f34:	40020400 	.word	0x40020400

08000f38 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b08c      	sub	sp, #48	; 0x30
 8000f3c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3e:	f107 031c 	add.w	r3, r7, #28
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	605a      	str	r2, [r3, #4]
 8000f48:	609a      	str	r2, [r3, #8]
 8000f4a:	60da      	str	r2, [r3, #12]
 8000f4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f4e:	4b66      	ldr	r3, [pc, #408]	; (80010e8 <MX_GPIO_Init+0x1b0>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	4a65      	ldr	r2, [pc, #404]	; (80010e8 <MX_GPIO_Init+0x1b0>)
 8000f54:	f043 0310 	orr.w	r3, r3, #16
 8000f58:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5a:	4b63      	ldr	r3, [pc, #396]	; (80010e8 <MX_GPIO_Init+0x1b0>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	f003 0310 	and.w	r3, r3, #16
 8000f62:	61bb      	str	r3, [r7, #24]
 8000f64:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f66:	4b60      	ldr	r3, [pc, #384]	; (80010e8 <MX_GPIO_Init+0x1b0>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	4a5f      	ldr	r2, [pc, #380]	; (80010e8 <MX_GPIO_Init+0x1b0>)
 8000f6c:	f043 0304 	orr.w	r3, r3, #4
 8000f70:	6313      	str	r3, [r2, #48]	; 0x30
 8000f72:	4b5d      	ldr	r3, [pc, #372]	; (80010e8 <MX_GPIO_Init+0x1b0>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	f003 0304 	and.w	r3, r3, #4
 8000f7a:	617b      	str	r3, [r7, #20]
 8000f7c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f7e:	4b5a      	ldr	r3, [pc, #360]	; (80010e8 <MX_GPIO_Init+0x1b0>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	4a59      	ldr	r2, [pc, #356]	; (80010e8 <MX_GPIO_Init+0x1b0>)
 8000f84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f88:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8a:	4b57      	ldr	r3, [pc, #348]	; (80010e8 <MX_GPIO_Init+0x1b0>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f92:	613b      	str	r3, [r7, #16]
 8000f94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f96:	4b54      	ldr	r3, [pc, #336]	; (80010e8 <MX_GPIO_Init+0x1b0>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	4a53      	ldr	r2, [pc, #332]	; (80010e8 <MX_GPIO_Init+0x1b0>)
 8000f9c:	f043 0301 	orr.w	r3, r3, #1
 8000fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa2:	4b51      	ldr	r3, [pc, #324]	; (80010e8 <MX_GPIO_Init+0x1b0>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fae:	4b4e      	ldr	r3, [pc, #312]	; (80010e8 <MX_GPIO_Init+0x1b0>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	4a4d      	ldr	r2, [pc, #308]	; (80010e8 <MX_GPIO_Init+0x1b0>)
 8000fb4:	f043 0302 	orr.w	r3, r3, #2
 8000fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fba:	4b4b      	ldr	r3, [pc, #300]	; (80010e8 <MX_GPIO_Init+0x1b0>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	f003 0302 	and.w	r3, r3, #2
 8000fc2:	60bb      	str	r3, [r7, #8]
 8000fc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fc6:	4b48      	ldr	r3, [pc, #288]	; (80010e8 <MX_GPIO_Init+0x1b0>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	4a47      	ldr	r2, [pc, #284]	; (80010e8 <MX_GPIO_Init+0x1b0>)
 8000fcc:	f043 0308 	orr.w	r3, r3, #8
 8000fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd2:	4b45      	ldr	r3, [pc, #276]	; (80010e8 <MX_GPIO_Init+0x1b0>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	f003 0308 	and.w	r3, r3, #8
 8000fda:	607b      	str	r3, [r7, #4]
 8000fdc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_DC___LCD_Pin|GPIO_RST___LCD_Pin|GPIO_CS___LCD_Pin, GPIO_PIN_RESET);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2170      	movs	r1, #112	; 0x70
 8000fe2:	4842      	ldr	r0, [pc, #264]	; (80010ec <MX_GPIO_Init+0x1b4>)
 8000fe4:	f001 fecc 	bl	8002d80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_BLE___CS_Pin|GPIO_BLE___Reset_Pin|GPIO_Buzzer_Pin|GPIO_ChargeEN_Pin, GPIO_PIN_RESET);
 8000fe8:	2200      	movs	r2, #0
 8000fea:	f240 5103 	movw	r1, #1283	; 0x503
 8000fee:	4840      	ldr	r0, [pc, #256]	; (80010f0 <MX_GPIO_Init+0x1b8>)
 8000ff0:	f001 fec6 	bl	8002d80 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE4 PE5 PE6
                           PE12 PE13 PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000ff4:	f24f 0378 	movw	r3, #61560	; 0xf078
 8000ff8:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001002:	f107 031c 	add.w	r3, r7, #28
 8001006:	4619      	mov	r1, r3
 8001008:	4839      	ldr	r0, [pc, #228]	; (80010f0 <MX_GPIO_Init+0x1b8>)
 800100a:	f001 fbe9 	bl	80027e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC3 PC7 PC8
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8
 800100e:	f641 7389 	movw	r3, #8073	; 0x1f89
 8001012:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001014:	2303      	movs	r3, #3
 8001016:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800101c:	f107 031c 	add.w	r3, r7, #28
 8001020:	4619      	mov	r1, r3
 8001022:	4832      	ldr	r0, [pc, #200]	; (80010ec <MX_GPIO_Init+0x1b4>)
 8001024:	f001 fbdc 	bl	80027e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPIO_WakeUp_Pin;
 8001028:	2301      	movs	r3, #1
 800102a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800102c:	2300      	movs	r3, #0
 800102e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001030:	2301      	movs	r3, #1
 8001032:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIO_WakeUp_GPIO_Port, &GPIO_InitStruct);
 8001034:	f107 031c 	add.w	r3, r7, #28
 8001038:	4619      	mov	r1, r3
 800103a:	482e      	ldr	r0, [pc, #184]	; (80010f4 <MX_GPIO_Init+0x1bc>)
 800103c:	f001 fbd0 	bl	80027e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_DC___LCD_Pin|GPIO_RST___LCD_Pin|GPIO_CS___LCD_Pin;
 8001040:	2370      	movs	r3, #112	; 0x70
 8001042:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001044:	2301      	movs	r3, #1
 8001046:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104c:	2300      	movs	r3, #0
 800104e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001050:	f107 031c 	add.w	r3, r7, #28
 8001054:	4619      	mov	r1, r3
 8001056:	4825      	ldr	r0, [pc, #148]	; (80010ec <MX_GPIO_Init+0x1b4>)
 8001058:	f001 fbc2 	bl	80027e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB11 PB12
                           PB3 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12
 800105c:	f641 33fb 	movw	r3, #7163	; 0x1bfb
 8001060:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001062:	2303      	movs	r3, #3
 8001064:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800106a:	f107 031c 	add.w	r3, r7, #28
 800106e:	4619      	mov	r1, r3
 8001070:	4821      	ldr	r0, [pc, #132]	; (80010f8 <MX_GPIO_Init+0x1c0>)
 8001072:	f001 fbb5 	bl	80027e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPIO_BLE___EXTI_Pin;
 8001076:	2380      	movs	r3, #128	; 0x80
 8001078:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800107a:	4b20      	ldr	r3, [pc, #128]	; (80010fc <MX_GPIO_Init+0x1c4>)
 800107c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIO_BLE___EXTI_GPIO_Port, &GPIO_InitStruct);
 8001082:	f107 031c 	add.w	r3, r7, #28
 8001086:	4619      	mov	r1, r3
 8001088:	4819      	ldr	r0, [pc, #100]	; (80010f0 <MX_GPIO_Init+0x1b8>)
 800108a:	f001 fba9 	bl	80027e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = GPIO_BLE___CS_Pin|GPIO_BLE___Reset_Pin|GPIO_Buzzer_Pin|GPIO_ChargeEN_Pin;
 800108e:	f240 5303 	movw	r3, #1283	; 0x503
 8001092:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001094:	2301      	movs	r3, #1
 8001096:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	2300      	movs	r3, #0
 800109a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109c:	2300      	movs	r3, #0
 800109e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010a0:	f107 031c 	add.w	r3, r7, #28
 80010a4:	4619      	mov	r1, r3
 80010a6:	4812      	ldr	r0, [pc, #72]	; (80010f0 <MX_GPIO_Init+0x1b8>)
 80010a8:	f001 fb9a 	bl	80027e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD14
                           PD15 PD0 PD1 PD2
                           PD3 PD4 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80010ac:	f24c 739f 	movw	r3, #51103	; 0xc79f
 80010b0:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010b2:	2303      	movs	r3, #3
 80010b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010ba:	f107 031c 	add.w	r3, r7, #28
 80010be:	4619      	mov	r1, r3
 80010c0:	480f      	ldr	r0, [pc, #60]	; (8001100 <MX_GPIO_Init+0x1c8>)
 80010c2:	f001 fb8d 	bl	80027e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 80010c6:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80010ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010cc:	2303      	movs	r3, #3
 80010ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d4:	f107 031c 	add.w	r3, r7, #28
 80010d8:	4619      	mov	r1, r3
 80010da:	4806      	ldr	r0, [pc, #24]	; (80010f4 <MX_GPIO_Init+0x1bc>)
 80010dc:	f001 fb80 	bl	80027e0 <HAL_GPIO_Init>

}
 80010e0:	bf00      	nop
 80010e2:	3730      	adds	r7, #48	; 0x30
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	40023800 	.word	0x40023800
 80010ec:	40020800 	.word	0x40020800
 80010f0:	40021000 	.word	0x40021000
 80010f4:	40020000 	.word	0x40020000
 80010f8:	40020400 	.word	0x40020400
 80010fc:	10110000 	.word	0x10110000
 8001100:	40020c00 	.word	0x40020c00

08001104 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001108:	f000 fd86 	bl	8001c18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800110c:	f000 f81a 	bl	8001144 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001110:	f7ff ff12 	bl	8000f38 <MX_GPIO_Init>
  MX_FATFS_Init();
 8001114:	f008 fae4 	bl	80096e0 <MX_FATFS_Init>
  MX_QUADSPI_Init();
 8001118:	f000 f8b8 	bl	800128c <MX_QUADSPI_Init>
  MX_SPI1_Init();
 800111c:	f000 f964 	bl	80013e8 <MX_SPI1_Init>
  MX_TIM1_Init();
 8001120:	f000 fab0 	bl	8001684 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001124:	f000 fc1c 	bl	8001960 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8001128:	f00a fc2a 	bl	800b980 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 800112c:	f7ff fd74 	bl	8000c18 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001130:	f000 fb0e 	bl	8001750 <MX_TIM2_Init>
  MX_BlueNRG_2_Init();
 8001134:	f7ff f9fc 	bl	8000530 <MX_BlueNRG_2_Init>
  /* USER CODE BEGIN 2 */

  QSPI_Init();
 8001138:	f00a f9c0 	bl	800b4bc <QSPI_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_BlueNRG_2_Process();
 800113c:	f7ff fa02 	bl	8000544 <MX_BlueNRG_2_Process>
 8001140:	e7fc      	b.n	800113c <main+0x38>
	...

08001144 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b0b8      	sub	sp, #224	; 0xe0
 8001148:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800114a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800114e:	2234      	movs	r2, #52	; 0x34
 8001150:	2100      	movs	r1, #0
 8001152:	4618      	mov	r0, r3
 8001154:	f00b f9ae 	bl	800c4b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001158:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
 8001166:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001168:	f107 0308 	add.w	r3, r7, #8
 800116c:	2290      	movs	r2, #144	; 0x90
 800116e:	2100      	movs	r1, #0
 8001170:	4618      	mov	r0, r3
 8001172:	f00b f99f 	bl	800c4b4 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001176:	f002 ffdb 	bl	8004130 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800117a:	4b3e      	ldr	r3, [pc, #248]	; (8001274 <SystemClock_Config+0x130>)
 800117c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117e:	4a3d      	ldr	r2, [pc, #244]	; (8001274 <SystemClock_Config+0x130>)
 8001180:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001184:	6413      	str	r3, [r2, #64]	; 0x40
 8001186:	4b3b      	ldr	r3, [pc, #236]	; (8001274 <SystemClock_Config+0x130>)
 8001188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800118e:	607b      	str	r3, [r7, #4]
 8001190:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001192:	4b39      	ldr	r3, [pc, #228]	; (8001278 <SystemClock_Config+0x134>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a38      	ldr	r2, [pc, #224]	; (8001278 <SystemClock_Config+0x134>)
 8001198:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800119c:	6013      	str	r3, [r2, #0]
 800119e:	4b36      	ldr	r3, [pc, #216]	; (8001278 <SystemClock_Config+0x134>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011a6:	603b      	str	r3, [r7, #0]
 80011a8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011aa:	2301      	movs	r3, #1
 80011ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011b8:	2302      	movs	r3, #2
 80011ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 80011c6:	2319      	movs	r3, #25
 80011c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 432;
 80011cc:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80011d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011d4:	2302      	movs	r3, #2
 80011d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80011da:	2309      	movs	r3, #9
 80011dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011e0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80011e4:	4618      	mov	r0, r3
 80011e6:	f003 fc4f 	bl	8004a88 <HAL_RCC_OscConfig>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80011f0:	f000 f846 	bl	8001280 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80011f4:	f002 ffac 	bl	8004150 <HAL_PWREx_EnableOverDrive>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80011fe:	f000 f83f 	bl	8001280 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001202:	230f      	movs	r3, #15
 8001204:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001208:	2302      	movs	r3, #2
 800120a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800120e:	2300      	movs	r3, #0
 8001210:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001214:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001218:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800121c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001220:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001224:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001228:	2107      	movs	r1, #7
 800122a:	4618      	mov	r0, r3
 800122c:	f003 feda 	bl	8004fe4 <HAL_RCC_ClockConfig>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8001236:	f000 f823 	bl	8001280 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_TIM|RCC_PERIPHCLK_USART1
 800123a:	4b10      	ldr	r3, [pc, #64]	; (800127c <SystemClock_Config+0x138>)
 800123c:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800123e:	2300      	movs	r3, #0
 8001240:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001242:	2300      	movs	r3, #0
 8001244:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001246:	2300      	movs	r3, #0
 8001248:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 800124c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001250:	643b      	str	r3, [r7, #64]	; 0x40

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001252:	f107 0308 	add.w	r3, r7, #8
 8001256:	4618      	mov	r0, r3
 8001258:	f004 f8c6 	bl	80053e8 <HAL_RCCEx_PeriphCLKConfig>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <SystemClock_Config+0x122>
  {
    Error_Handler();
 8001262:	f000 f80d 	bl	8001280 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001266:	f003 ffa9 	bl	80051bc <HAL_RCC_EnableCSS>
}
 800126a:	bf00      	nop
 800126c:	37e0      	adds	r7, #224	; 0xe0
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	40023800 	.word	0x40023800
 8001278:	40007000 	.word	0x40007000
 800127c:	002000d0 	.word	0x002000d0

08001280 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001284:	b672      	cpsid	i
}
 8001286:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001288:	e7fe      	b.n	8001288 <Error_Handler+0x8>
	...

0800128c <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8001290:	4b12      	ldr	r3, [pc, #72]	; (80012dc <MX_QUADSPI_Init+0x50>)
 8001292:	4a13      	ldr	r2, [pc, #76]	; (80012e0 <MX_QUADSPI_Init+0x54>)
 8001294:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8001296:	4b11      	ldr	r3, [pc, #68]	; (80012dc <MX_QUADSPI_Init+0x50>)
 8001298:	22ff      	movs	r2, #255	; 0xff
 800129a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 800129c:	4b0f      	ldr	r3, [pc, #60]	; (80012dc <MX_QUADSPI_Init+0x50>)
 800129e:	2201      	movs	r2, #1
 80012a0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80012a2:	4b0e      	ldr	r3, [pc, #56]	; (80012dc <MX_QUADSPI_Init+0x50>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 80012a8:	4b0c      	ldr	r3, [pc, #48]	; (80012dc <MX_QUADSPI_Init+0x50>)
 80012aa:	2201      	movs	r2, #1
 80012ac:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80012ae:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <MX_QUADSPI_Init+0x50>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80012b4:	4b09      	ldr	r3, [pc, #36]	; (80012dc <MX_QUADSPI_Init+0x50>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80012ba:	4b08      	ldr	r3, [pc, #32]	; (80012dc <MX_QUADSPI_Init+0x50>)
 80012bc:	2200      	movs	r2, #0
 80012be:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80012c0:	4b06      	ldr	r3, [pc, #24]	; (80012dc <MX_QUADSPI_Init+0x50>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80012c6:	4805      	ldr	r0, [pc, #20]	; (80012dc <MX_QUADSPI_Init+0x50>)
 80012c8:	f002 ff92 	bl	80041f0 <HAL_QSPI_Init>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 80012d2:	f7ff ffd5 	bl	8001280 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	20000a98 	.word	0x20000a98
 80012e0:	a0001000 	.word	0xa0001000

080012e4 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b08c      	sub	sp, #48	; 0x30
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ec:	f107 031c 	add.w	r3, r7, #28
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	609a      	str	r2, [r3, #8]
 80012f8:	60da      	str	r2, [r3, #12]
 80012fa:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a34      	ldr	r2, [pc, #208]	; (80013d4 <HAL_QSPI_MspInit+0xf0>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d161      	bne.n	80013ca <HAL_QSPI_MspInit+0xe6>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001306:	4b34      	ldr	r3, [pc, #208]	; (80013d8 <HAL_QSPI_MspInit+0xf4>)
 8001308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800130a:	4a33      	ldr	r2, [pc, #204]	; (80013d8 <HAL_QSPI_MspInit+0xf4>)
 800130c:	f043 0302 	orr.w	r3, r3, #2
 8001310:	6393      	str	r3, [r2, #56]	; 0x38
 8001312:	4b31      	ldr	r3, [pc, #196]	; (80013d8 <HAL_QSPI_MspInit+0xf4>)
 8001314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	61bb      	str	r3, [r7, #24]
 800131c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800131e:	4b2e      	ldr	r3, [pc, #184]	; (80013d8 <HAL_QSPI_MspInit+0xf4>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	4a2d      	ldr	r2, [pc, #180]	; (80013d8 <HAL_QSPI_MspInit+0xf4>)
 8001324:	f043 0310 	orr.w	r3, r3, #16
 8001328:	6313      	str	r3, [r2, #48]	; 0x30
 800132a:	4b2b      	ldr	r3, [pc, #172]	; (80013d8 <HAL_QSPI_MspInit+0xf4>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	f003 0310 	and.w	r3, r3, #16
 8001332:	617b      	str	r3, [r7, #20]
 8001334:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001336:	4b28      	ldr	r3, [pc, #160]	; (80013d8 <HAL_QSPI_MspInit+0xf4>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	4a27      	ldr	r2, [pc, #156]	; (80013d8 <HAL_QSPI_MspInit+0xf4>)
 800133c:	f043 0302 	orr.w	r3, r3, #2
 8001340:	6313      	str	r3, [r2, #48]	; 0x30
 8001342:	4b25      	ldr	r3, [pc, #148]	; (80013d8 <HAL_QSPI_MspInit+0xf4>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	613b      	str	r3, [r7, #16]
 800134c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800134e:	4b22      	ldr	r3, [pc, #136]	; (80013d8 <HAL_QSPI_MspInit+0xf4>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	4a21      	ldr	r2, [pc, #132]	; (80013d8 <HAL_QSPI_MspInit+0xf4>)
 8001354:	f043 0308 	orr.w	r3, r3, #8
 8001358:	6313      	str	r3, [r2, #48]	; 0x30
 800135a:	4b1f      	ldr	r3, [pc, #124]	; (80013d8 <HAL_QSPI_MspInit+0xf4>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	f003 0308 	and.w	r3, r3, #8
 8001362:	60fb      	str	r3, [r7, #12]
 8001364:	68fb      	ldr	r3, [r7, #12]
    PB10     ------> QUADSPI_BK1_NCS
    PD11     ------> QUADSPI_BK1_IO0
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001366:	2304      	movs	r3, #4
 8001368:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136a:	2302      	movs	r3, #2
 800136c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136e:	2300      	movs	r3, #0
 8001370:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001372:	2303      	movs	r3, #3
 8001374:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001376:	2309      	movs	r3, #9
 8001378:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800137a:	f107 031c 	add.w	r3, r7, #28
 800137e:	4619      	mov	r1, r3
 8001380:	4816      	ldr	r0, [pc, #88]	; (80013dc <HAL_QSPI_MspInit+0xf8>)
 8001382:	f001 fa2d 	bl	80027e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10;
 8001386:	f240 4304 	movw	r3, #1028	; 0x404
 800138a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138c:	2302      	movs	r3, #2
 800138e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001394:	2303      	movs	r3, #3
 8001396:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001398:	2309      	movs	r3, #9
 800139a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800139c:	f107 031c 	add.w	r3, r7, #28
 80013a0:	4619      	mov	r1, r3
 80013a2:	480f      	ldr	r0, [pc, #60]	; (80013e0 <HAL_QSPI_MspInit+0xfc>)
 80013a4:	f001 fa1c 	bl	80027e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80013a8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80013ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ae:	2302      	movs	r3, #2
 80013b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b6:	2303      	movs	r3, #3
 80013b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80013ba:	2309      	movs	r3, #9
 80013bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013be:	f107 031c 	add.w	r3, r7, #28
 80013c2:	4619      	mov	r1, r3
 80013c4:	4807      	ldr	r0, [pc, #28]	; (80013e4 <HAL_QSPI_MspInit+0x100>)
 80013c6:	f001 fa0b 	bl	80027e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 80013ca:	bf00      	nop
 80013cc:	3730      	adds	r7, #48	; 0x30
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	a0001000 	.word	0xa0001000
 80013d8:	40023800 	.word	0x40023800
 80013dc:	40021000 	.word	0x40021000
 80013e0:	40020400 	.word	0x40020400
 80013e4:	40020c00 	.word	0x40020c00

080013e8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80013ec:	4b1b      	ldr	r3, [pc, #108]	; (800145c <MX_SPI1_Init+0x74>)
 80013ee:	4a1c      	ldr	r2, [pc, #112]	; (8001460 <MX_SPI1_Init+0x78>)
 80013f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013f2:	4b1a      	ldr	r3, [pc, #104]	; (800145c <MX_SPI1_Init+0x74>)
 80013f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80013fa:	4b18      	ldr	r3, [pc, #96]	; (800145c <MX_SPI1_Init+0x74>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001400:	4b16      	ldr	r3, [pc, #88]	; (800145c <MX_SPI1_Init+0x74>)
 8001402:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001406:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001408:	4b14      	ldr	r3, [pc, #80]	; (800145c <MX_SPI1_Init+0x74>)
 800140a:	2200      	movs	r2, #0
 800140c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800140e:	4b13      	ldr	r3, [pc, #76]	; (800145c <MX_SPI1_Init+0x74>)
 8001410:	2200      	movs	r2, #0
 8001412:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001414:	4b11      	ldr	r3, [pc, #68]	; (800145c <MX_SPI1_Init+0x74>)
 8001416:	f44f 7200 	mov.w	r2, #512	; 0x200
 800141a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800141c:	4b0f      	ldr	r3, [pc, #60]	; (800145c <MX_SPI1_Init+0x74>)
 800141e:	2210      	movs	r2, #16
 8001420:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001422:	4b0e      	ldr	r3, [pc, #56]	; (800145c <MX_SPI1_Init+0x74>)
 8001424:	2200      	movs	r2, #0
 8001426:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001428:	4b0c      	ldr	r3, [pc, #48]	; (800145c <MX_SPI1_Init+0x74>)
 800142a:	2200      	movs	r2, #0
 800142c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800142e:	4b0b      	ldr	r3, [pc, #44]	; (800145c <MX_SPI1_Init+0x74>)
 8001430:	2200      	movs	r2, #0
 8001432:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001434:	4b09      	ldr	r3, [pc, #36]	; (800145c <MX_SPI1_Init+0x74>)
 8001436:	2207      	movs	r2, #7
 8001438:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800143a:	4b08      	ldr	r3, [pc, #32]	; (800145c <MX_SPI1_Init+0x74>)
 800143c:	2200      	movs	r2, #0
 800143e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001440:	4b06      	ldr	r3, [pc, #24]	; (800145c <MX_SPI1_Init+0x74>)
 8001442:	2208      	movs	r2, #8
 8001444:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001446:	4805      	ldr	r0, [pc, #20]	; (800145c <MX_SPI1_Init+0x74>)
 8001448:	f004 fbf6 	bl	8005c38 <HAL_SPI_Init>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001452:	f7ff ff15 	bl	8001280 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	20000ae4 	.word	0x20000ae4
 8001460:	40013000 	.word	0x40013000

08001464 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b08a      	sub	sp, #40	; 0x28
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146c:	f107 0314 	add.w	r3, r7, #20
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	60da      	str	r2, [r3, #12]
 800147a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a17      	ldr	r2, [pc, #92]	; (80014e0 <HAL_SPI_MspInit+0x7c>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d127      	bne.n	80014d6 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001486:	4b17      	ldr	r3, [pc, #92]	; (80014e4 <HAL_SPI_MspInit+0x80>)
 8001488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148a:	4a16      	ldr	r2, [pc, #88]	; (80014e4 <HAL_SPI_MspInit+0x80>)
 800148c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001490:	6453      	str	r3, [r2, #68]	; 0x44
 8001492:	4b14      	ldr	r3, [pc, #80]	; (80014e4 <HAL_SPI_MspInit+0x80>)
 8001494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001496:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800149a:	613b      	str	r3, [r7, #16]
 800149c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800149e:	4b11      	ldr	r3, [pc, #68]	; (80014e4 <HAL_SPI_MspInit+0x80>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	4a10      	ldr	r2, [pc, #64]	; (80014e4 <HAL_SPI_MspInit+0x80>)
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	6313      	str	r3, [r2, #48]	; 0x30
 80014aa:	4b0e      	ldr	r3, [pc, #56]	; (80014e4 <HAL_SPI_MspInit+0x80>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK___LCD_Pin|SPI1_MISO___LCD_Pin|SPI1_MOSI___LCD_Pin;
 80014b6:	23e0      	movs	r3, #224	; 0xe0
 80014b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ba:	2302      	movs	r3, #2
 80014bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014be:	2300      	movs	r3, #0
 80014c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c2:	2303      	movs	r3, #3
 80014c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014c6:	2305      	movs	r3, #5
 80014c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ca:	f107 0314 	add.w	r3, r7, #20
 80014ce:	4619      	mov	r1, r3
 80014d0:	4805      	ldr	r0, [pc, #20]	; (80014e8 <HAL_SPI_MspInit+0x84>)
 80014d2:	f001 f985 	bl	80027e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80014d6:	bf00      	nop
 80014d8:	3728      	adds	r7, #40	; 0x28
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40013000 	.word	0x40013000
 80014e4:	40023800 	.word	0x40023800
 80014e8:	40020000 	.word	0x40020000

080014ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80014f2:	4b12      	ldr	r3, [pc, #72]	; (800153c <HAL_MspInit+0x50>)
 80014f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f6:	4a11      	ldr	r2, [pc, #68]	; (800153c <HAL_MspInit+0x50>)
 80014f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014fc:	6413      	str	r3, [r2, #64]	; 0x40
 80014fe:	4b0f      	ldr	r3, [pc, #60]	; (800153c <HAL_MspInit+0x50>)
 8001500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001506:	607b      	str	r3, [r7, #4]
 8001508:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800150a:	4b0c      	ldr	r3, [pc, #48]	; (800153c <HAL_MspInit+0x50>)
 800150c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150e:	4a0b      	ldr	r2, [pc, #44]	; (800153c <HAL_MspInit+0x50>)
 8001510:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001514:	6453      	str	r3, [r2, #68]	; 0x44
 8001516:	4b09      	ldr	r3, [pc, #36]	; (800153c <HAL_MspInit+0x50>)
 8001518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800151e:	603b      	str	r3, [r7, #0]
 8001520:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 8001522:	2200      	movs	r2, #0
 8001524:	2100      	movs	r1, #0
 8001526:	2004      	movs	r0, #4
 8001528:	f000 ff7f 	bl	800242a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 800152c:	2004      	movs	r0, #4
 800152e:	f000 ff98 	bl	8002462 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001532:	bf00      	nop
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	40023800 	.word	0x40023800

08001540 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001544:	f003 ff34 	bl	80053b0 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001548:	e7fe      	b.n	8001548 <NMI_Handler+0x8>

0800154a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800154a:	b480      	push	{r7}
 800154c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800154e:	e7fe      	b.n	800154e <HardFault_Handler+0x4>

08001550 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001554:	e7fe      	b.n	8001554 <MemManage_Handler+0x4>

08001556 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001556:	b480      	push	{r7}
 8001558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800155a:	e7fe      	b.n	800155a <BusFault_Handler+0x4>

0800155c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001560:	e7fe      	b.n	8001560 <UsageFault_Handler+0x4>

08001562 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001562:	b480      	push	{r7}
 8001564:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001566:	bf00      	nop
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001574:	bf00      	nop
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr

0800157e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800157e:	b480      	push	{r7}
 8001580:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001590:	f000 fb80 	bl	8001c94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001594:	bf00      	nop
 8001596:	bd80      	pop	{r7, pc}

08001598 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 800159c:	f000 ffb8 	bl	8002510 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 80015a0:	bf00      	nop
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80015a8:	4802      	ldr	r0, [pc, #8]	; (80015b4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80015aa:	f005 f81f 	bl	80065ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	20000b48 	.word	0x20000b48

080015b8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80015bc:	4802      	ldr	r0, [pc, #8]	; (80015c8 <TIM1_CC_IRQHandler+0x10>)
 80015be:	f005 f815 	bl	80065ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	20000b48 	.word	0x20000b48

080015cc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015d0:	4802      	ldr	r0, [pc, #8]	; (80015dc <TIM2_IRQHandler+0x10>)
 80015d2:	f005 f80b 	bl	80065ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	20000b94 	.word	0x20000b94

080015e0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80015e4:	4802      	ldr	r0, [pc, #8]	; (80015f0 <OTG_FS_IRQHandler+0x10>)
 80015e6:	f001 fd2a 	bl	800303e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20004264 	.word	0x20004264

080015f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b086      	sub	sp, #24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015fc:	4a14      	ldr	r2, [pc, #80]	; (8001650 <_sbrk+0x5c>)
 80015fe:	4b15      	ldr	r3, [pc, #84]	; (8001654 <_sbrk+0x60>)
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001608:	4b13      	ldr	r3, [pc, #76]	; (8001658 <_sbrk+0x64>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d102      	bne.n	8001616 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001610:	4b11      	ldr	r3, [pc, #68]	; (8001658 <_sbrk+0x64>)
 8001612:	4a12      	ldr	r2, [pc, #72]	; (800165c <_sbrk+0x68>)
 8001614:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001616:	4b10      	ldr	r3, [pc, #64]	; (8001658 <_sbrk+0x64>)
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4413      	add	r3, r2
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	429a      	cmp	r2, r3
 8001622:	d207      	bcs.n	8001634 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001624:	f00a fefe 	bl	800c424 <__errno>
 8001628:	4603      	mov	r3, r0
 800162a:	220c      	movs	r2, #12
 800162c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800162e:	f04f 33ff 	mov.w	r3, #4294967295
 8001632:	e009      	b.n	8001648 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001634:	4b08      	ldr	r3, [pc, #32]	; (8001658 <_sbrk+0x64>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800163a:	4b07      	ldr	r3, [pc, #28]	; (8001658 <_sbrk+0x64>)
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4413      	add	r3, r2
 8001642:	4a05      	ldr	r2, [pc, #20]	; (8001658 <_sbrk+0x64>)
 8001644:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001646:	68fb      	ldr	r3, [r7, #12]
}
 8001648:	4618      	mov	r0, r3
 800164a:	3718      	adds	r7, #24
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	20080000 	.word	0x20080000
 8001654:	00004000 	.word	0x00004000
 8001658:	2000032c 	.word	0x2000032c
 800165c:	20004678 	.word	0x20004678

08001660 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001664:	4b06      	ldr	r3, [pc, #24]	; (8001680 <SystemInit+0x20>)
 8001666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800166a:	4a05      	ldr	r2, [pc, #20]	; (8001680 <SystemInit+0x20>)
 800166c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001670:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001674:	bf00      	nop
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	e000ed00 	.word	0xe000ed00

08001684 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b088      	sub	sp, #32
 8001688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800168a:	f107 0314 	add.w	r3, r7, #20
 800168e:	2200      	movs	r2, #0
 8001690:	601a      	str	r2, [r3, #0]
 8001692:	605a      	str	r2, [r3, #4]
 8001694:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001696:	1d3b      	adds	r3, r7, #4
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	605a      	str	r2, [r3, #4]
 800169e:	609a      	str	r2, [r3, #8]
 80016a0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80016a2:	4b29      	ldr	r3, [pc, #164]	; (8001748 <MX_TIM1_Init+0xc4>)
 80016a4:	4a29      	ldr	r2, [pc, #164]	; (800174c <MX_TIM1_Init+0xc8>)
 80016a6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 21600;
 80016a8:	4b27      	ldr	r3, [pc, #156]	; (8001748 <MX_TIM1_Init+0xc4>)
 80016aa:	f245 4260 	movw	r2, #21600	; 0x5460
 80016ae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b0:	4b25      	ldr	r3, [pc, #148]	; (8001748 <MX_TIM1_Init+0xc4>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50000;
 80016b6:	4b24      	ldr	r3, [pc, #144]	; (8001748 <MX_TIM1_Init+0xc4>)
 80016b8:	f24c 3250 	movw	r2, #50000	; 0xc350
 80016bc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016be:	4b22      	ldr	r3, [pc, #136]	; (8001748 <MX_TIM1_Init+0xc4>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016c4:	4b20      	ldr	r3, [pc, #128]	; (8001748 <MX_TIM1_Init+0xc4>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016ca:	4b1f      	ldr	r3, [pc, #124]	; (8001748 <MX_TIM1_Init+0xc4>)
 80016cc:	2280      	movs	r2, #128	; 0x80
 80016ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80016d0:	481d      	ldr	r0, [pc, #116]	; (8001748 <MX_TIM1_Init+0xc4>)
 80016d2:	f004 ff34 	bl	800653e <HAL_TIM_IC_Init>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 80016dc:	f7ff fdd0 	bl	8001280 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80016e4:	2300      	movs	r3, #0
 80016e6:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016e8:	2300      	movs	r3, #0
 80016ea:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016ec:	f107 0314 	add.w	r3, r7, #20
 80016f0:	4619      	mov	r1, r3
 80016f2:	4815      	ldr	r0, [pc, #84]	; (8001748 <MX_TIM1_Init+0xc4>)
 80016f4:	f005 fe98 	bl	8007428 <HAL_TIMEx_MasterConfigSynchronization>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80016fe:	f7ff fdbf 	bl	8001280 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001702:	2300      	movs	r3, #0
 8001704:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001706:	2301      	movs	r3, #1
 8001708:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800170a:	2300      	movs	r3, #0
 800170c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800170e:	2300      	movs	r3, #0
 8001710:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001712:	1d3b      	adds	r3, r7, #4
 8001714:	2200      	movs	r2, #0
 8001716:	4619      	mov	r1, r3
 8001718:	480b      	ldr	r0, [pc, #44]	; (8001748 <MX_TIM1_Init+0xc4>)
 800171a:	f005 f886 	bl	800682a <HAL_TIM_IC_ConfigChannel>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001724:	f7ff fdac 	bl	8001280 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001728:	1d3b      	adds	r3, r7, #4
 800172a:	2204      	movs	r2, #4
 800172c:	4619      	mov	r1, r3
 800172e:	4806      	ldr	r0, [pc, #24]	; (8001748 <MX_TIM1_Init+0xc4>)
 8001730:	f005 f87b 	bl	800682a <HAL_TIM_IC_ConfigChannel>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 800173a:	f7ff fda1 	bl	8001280 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800173e:	bf00      	nop
 8001740:	3720      	adds	r7, #32
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	20000b48 	.word	0x20000b48
 800174c:	40010000 	.word	0x40010000

08001750 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b08a      	sub	sp, #40	; 0x28
 8001754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001756:	f107 031c 	add.w	r3, r7, #28
 800175a:	2200      	movs	r2, #0
 800175c:	601a      	str	r2, [r3, #0]
 800175e:	605a      	str	r2, [r3, #4]
 8001760:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001762:	463b      	mov	r3, r7
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	605a      	str	r2, [r3, #4]
 800176a:	609a      	str	r2, [r3, #8]
 800176c:	60da      	str	r2, [r3, #12]
 800176e:	611a      	str	r2, [r3, #16]
 8001770:	615a      	str	r2, [r3, #20]
 8001772:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001774:	4b22      	ldr	r3, [pc, #136]	; (8001800 <MX_TIM2_Init+0xb0>)
 8001776:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800177a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 216;
 800177c:	4b20      	ldr	r3, [pc, #128]	; (8001800 <MX_TIM2_Init+0xb0>)
 800177e:	22d8      	movs	r2, #216	; 0xd8
 8001780:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001782:	4b1f      	ldr	r3, [pc, #124]	; (8001800 <MX_TIM2_Init+0xb0>)
 8001784:	2200      	movs	r2, #0
 8001786:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000;
 8001788:	4b1d      	ldr	r3, [pc, #116]	; (8001800 <MX_TIM2_Init+0xb0>)
 800178a:	f644 6220 	movw	r2, #20000	; 0x4e20
 800178e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001790:	4b1b      	ldr	r3, [pc, #108]	; (8001800 <MX_TIM2_Init+0xb0>)
 8001792:	2200      	movs	r2, #0
 8001794:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001796:	4b1a      	ldr	r3, [pc, #104]	; (8001800 <MX_TIM2_Init+0xb0>)
 8001798:	2280      	movs	r2, #128	; 0x80
 800179a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800179c:	4818      	ldr	r0, [pc, #96]	; (8001800 <MX_TIM2_Init+0xb0>)
 800179e:	f004 fe77 	bl	8006490 <HAL_TIM_PWM_Init>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80017a8:	f7ff fd6a 	bl	8001280 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017ac:	2300      	movs	r3, #0
 80017ae:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017b0:	2300      	movs	r3, #0
 80017b2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017b4:	f107 031c 	add.w	r3, r7, #28
 80017b8:	4619      	mov	r1, r3
 80017ba:	4811      	ldr	r0, [pc, #68]	; (8001800 <MX_TIM2_Init+0xb0>)
 80017bc:	f005 fe34 	bl	8007428 <HAL_TIMEx_MasterConfigSynchronization>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80017c6:	f7ff fd5b 	bl	8001280 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017ca:	2360      	movs	r3, #96	; 0x60
 80017cc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 20000;
 80017ce:	f644 6320 	movw	r3, #20000	; 0x4e20
 80017d2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017d4:	2300      	movs	r3, #0
 80017d6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017d8:	2300      	movs	r3, #0
 80017da:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017dc:	463b      	mov	r3, r7
 80017de:	2200      	movs	r2, #0
 80017e0:	4619      	mov	r1, r3
 80017e2:	4807      	ldr	r0, [pc, #28]	; (8001800 <MX_TIM2_Init+0xb0>)
 80017e4:	f005 f8b6 	bl	8006954 <HAL_TIM_PWM_ConfigChannel>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 80017ee:	f7ff fd47 	bl	8001280 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80017f2:	4803      	ldr	r0, [pc, #12]	; (8001800 <MX_TIM2_Init+0xb0>)
 80017f4:	f000 f87e 	bl	80018f4 <HAL_TIM_MspPostInit>

}
 80017f8:	bf00      	nop
 80017fa:	3728      	adds	r7, #40	; 0x28
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	20000b94 	.word	0x20000b94

08001804 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b08a      	sub	sp, #40	; 0x28
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800180c:	f107 0314 	add.w	r3, r7, #20
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	609a      	str	r2, [r3, #8]
 8001818:	60da      	str	r2, [r3, #12]
 800181a:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM1)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a1f      	ldr	r2, [pc, #124]	; (80018a0 <HAL_TIM_IC_MspInit+0x9c>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d138      	bne.n	8001898 <HAL_TIM_IC_MspInit+0x94>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001826:	4b1f      	ldr	r3, [pc, #124]	; (80018a4 <HAL_TIM_IC_MspInit+0xa0>)
 8001828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182a:	4a1e      	ldr	r2, [pc, #120]	; (80018a4 <HAL_TIM_IC_MspInit+0xa0>)
 800182c:	f043 0301 	orr.w	r3, r3, #1
 8001830:	6453      	str	r3, [r2, #68]	; 0x44
 8001832:	4b1c      	ldr	r3, [pc, #112]	; (80018a4 <HAL_TIM_IC_MspInit+0xa0>)
 8001834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	613b      	str	r3, [r7, #16]
 800183c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800183e:	4b19      	ldr	r3, [pc, #100]	; (80018a4 <HAL_TIM_IC_MspInit+0xa0>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	4a18      	ldr	r2, [pc, #96]	; (80018a4 <HAL_TIM_IC_MspInit+0xa0>)
 8001844:	f043 0310 	orr.w	r3, r3, #16
 8001848:	6313      	str	r3, [r2, #48]	; 0x30
 800184a:	4b16      	ldr	r3, [pc, #88]	; (80018a4 <HAL_TIM_IC_MspInit+0xa0>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	f003 0310 	and.w	r3, r3, #16
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = TIM1_CH1___TriggerButton_Pin|TIM1_CH2___ArmButton_Pin;
 8001856:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800185a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185c:	2302      	movs	r3, #2
 800185e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001860:	2300      	movs	r3, #0
 8001862:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001864:	2300      	movs	r3, #0
 8001866:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001868:	2301      	movs	r3, #1
 800186a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800186c:	f107 0314 	add.w	r3, r7, #20
 8001870:	4619      	mov	r1, r3
 8001872:	480d      	ldr	r0, [pc, #52]	; (80018a8 <HAL_TIM_IC_MspInit+0xa4>)
 8001874:	f000 ffb4 	bl	80027e0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001878:	2200      	movs	r2, #0
 800187a:	2100      	movs	r1, #0
 800187c:	2019      	movs	r0, #25
 800187e:	f000 fdd4 	bl	800242a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001882:	2019      	movs	r0, #25
 8001884:	f000 fded 	bl	8002462 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001888:	2200      	movs	r2, #0
 800188a:	2100      	movs	r1, #0
 800188c:	201b      	movs	r0, #27
 800188e:	f000 fdcc 	bl	800242a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001892:	201b      	movs	r0, #27
 8001894:	f000 fde5 	bl	8002462 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001898:	bf00      	nop
 800189a:	3728      	adds	r7, #40	; 0x28
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40010000 	.word	0x40010000
 80018a4:	40023800 	.word	0x40023800
 80018a8:	40021000 	.word	0x40021000

080018ac <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018bc:	d113      	bne.n	80018e6 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018be:	4b0c      	ldr	r3, [pc, #48]	; (80018f0 <HAL_TIM_PWM_MspInit+0x44>)
 80018c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c2:	4a0b      	ldr	r2, [pc, #44]	; (80018f0 <HAL_TIM_PWM_MspInit+0x44>)
 80018c4:	f043 0301 	orr.w	r3, r3, #1
 80018c8:	6413      	str	r3, [r2, #64]	; 0x40
 80018ca:	4b09      	ldr	r3, [pc, #36]	; (80018f0 <HAL_TIM_PWM_MspInit+0x44>)
 80018cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80018d6:	2200      	movs	r2, #0
 80018d8:	2100      	movs	r1, #0
 80018da:	201c      	movs	r0, #28
 80018dc:	f000 fda5 	bl	800242a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018e0:	201c      	movs	r0, #28
 80018e2:	f000 fdbe 	bl	8002462 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80018e6:	bf00      	nop
 80018e8:	3710      	adds	r7, #16
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	40023800 	.word	0x40023800

080018f4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b088      	sub	sp, #32
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fc:	f107 030c 	add.w	r3, r7, #12
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	605a      	str	r2, [r3, #4]
 8001906:	609a      	str	r2, [r3, #8]
 8001908:	60da      	str	r2, [r3, #12]
 800190a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001914:	d11c      	bne.n	8001950 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001916:	4b10      	ldr	r3, [pc, #64]	; (8001958 <HAL_TIM_MspPostInit+0x64>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	4a0f      	ldr	r2, [pc, #60]	; (8001958 <HAL_TIM_MspPostInit+0x64>)
 800191c:	f043 0301 	orr.w	r3, r3, #1
 8001920:	6313      	str	r3, [r2, #48]	; 0x30
 8001922:	4b0d      	ldr	r3, [pc, #52]	; (8001958 <HAL_TIM_MspPostInit+0x64>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	60bb      	str	r3, [r7, #8]
 800192c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = TIM2_CH1___BL_LCD_Pin;
 800192e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001932:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001934:	2302      	movs	r3, #2
 8001936:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001938:	2300      	movs	r3, #0
 800193a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193c:	2300      	movs	r3, #0
 800193e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001940:	2301      	movs	r3, #1
 8001942:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TIM2_CH1___BL_LCD_GPIO_Port, &GPIO_InitStruct);
 8001944:	f107 030c 	add.w	r3, r7, #12
 8001948:	4619      	mov	r1, r3
 800194a:	4804      	ldr	r0, [pc, #16]	; (800195c <HAL_TIM_MspPostInit+0x68>)
 800194c:	f000 ff48 	bl	80027e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001950:	bf00      	nop
 8001952:	3720      	adds	r7, #32
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40023800 	.word	0x40023800
 800195c:	40020000 	.word	0x40020000

08001960 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001964:	4b17      	ldr	r3, [pc, #92]	; (80019c4 <MX_USART1_UART_Init+0x64>)
 8001966:	4a18      	ldr	r2, [pc, #96]	; (80019c8 <MX_USART1_UART_Init+0x68>)
 8001968:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 420000;
 800196a:	4b16      	ldr	r3, [pc, #88]	; (80019c4 <MX_USART1_UART_Init+0x64>)
 800196c:	4a17      	ldr	r2, [pc, #92]	; (80019cc <MX_USART1_UART_Init+0x6c>)
 800196e:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001970:	4b14      	ldr	r3, [pc, #80]	; (80019c4 <MX_USART1_UART_Init+0x64>)
 8001972:	2200      	movs	r2, #0
 8001974:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001976:	4b13      	ldr	r3, [pc, #76]	; (80019c4 <MX_USART1_UART_Init+0x64>)
 8001978:	2200      	movs	r2, #0
 800197a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800197c:	4b11      	ldr	r3, [pc, #68]	; (80019c4 <MX_USART1_UART_Init+0x64>)
 800197e:	2200      	movs	r2, #0
 8001980:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001982:	4b10      	ldr	r3, [pc, #64]	; (80019c4 <MX_USART1_UART_Init+0x64>)
 8001984:	220c      	movs	r2, #12
 8001986:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001988:	4b0e      	ldr	r3, [pc, #56]	; (80019c4 <MX_USART1_UART_Init+0x64>)
 800198a:	2200      	movs	r2, #0
 800198c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800198e:	4b0d      	ldr	r3, [pc, #52]	; (80019c4 <MX_USART1_UART_Init+0x64>)
 8001990:	2200      	movs	r2, #0
 8001992:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001994:	4b0b      	ldr	r3, [pc, #44]	; (80019c4 <MX_USART1_UART_Init+0x64>)
 8001996:	2200      	movs	r2, #0
 8001998:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_TXINVERT_INIT|UART_ADVFEATURE_RXINVERT_INIT;
 800199a:	4b0a      	ldr	r3, [pc, #40]	; (80019c4 <MX_USART1_UART_Init+0x64>)
 800199c:	2203      	movs	r2, #3
 800199e:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.TxPinLevelInvert = UART_ADVFEATURE_TXINV_ENABLE;
 80019a0:	4b08      	ldr	r3, [pc, #32]	; (80019c4 <MX_USART1_UART_Init+0x64>)
 80019a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80019a6:	629a      	str	r2, [r3, #40]	; 0x28
  huart1.AdvancedInit.RxPinLevelInvert = UART_ADVFEATURE_RXINV_ENABLE;
 80019a8:	4b06      	ldr	r3, [pc, #24]	; (80019c4 <MX_USART1_UART_Init+0x64>)
 80019aa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80019ae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80019b0:	4804      	ldr	r0, [pc, #16]	; (80019c4 <MX_USART1_UART_Init+0x64>)
 80019b2:	f005 fde5 	bl	8007580 <HAL_UART_Init>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <MX_USART1_UART_Init+0x60>
  {
    Error_Handler();
 80019bc:	f7ff fc60 	bl	8001280 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80019c0:	bf00      	nop
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	20000be0 	.word	0x20000be0
 80019c8:	40011000 	.word	0x40011000
 80019cc:	000668a0 	.word	0x000668a0

080019d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b08a      	sub	sp, #40	; 0x28
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d8:	f107 0314 	add.w	r3, r7, #20
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	605a      	str	r2, [r3, #4]
 80019e2:	609a      	str	r2, [r3, #8]
 80019e4:	60da      	str	r2, [r3, #12]
 80019e6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a17      	ldr	r2, [pc, #92]	; (8001a4c <HAL_UART_MspInit+0x7c>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d128      	bne.n	8001a44 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019f2:	4b17      	ldr	r3, [pc, #92]	; (8001a50 <HAL_UART_MspInit+0x80>)
 80019f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f6:	4a16      	ldr	r2, [pc, #88]	; (8001a50 <HAL_UART_MspInit+0x80>)
 80019f8:	f043 0310 	orr.w	r3, r3, #16
 80019fc:	6453      	str	r3, [r2, #68]	; 0x44
 80019fe:	4b14      	ldr	r3, [pc, #80]	; (8001a50 <HAL_UART_MspInit+0x80>)
 8001a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a02:	f003 0310 	and.w	r3, r3, #16
 8001a06:	613b      	str	r3, [r7, #16]
 8001a08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a0a:	4b11      	ldr	r3, [pc, #68]	; (8001a50 <HAL_UART_MspInit+0x80>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0e:	4a10      	ldr	r2, [pc, #64]	; (8001a50 <HAL_UART_MspInit+0x80>)
 8001a10:	f043 0302 	orr.w	r3, r3, #2
 8001a14:	6313      	str	r3, [r2, #48]	; 0x30
 8001a16:	4b0e      	ldr	r3, [pc, #56]	; (8001a50 <HAL_UART_MspInit+0x80>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1a:	f003 0302 	and.w	r3, r3, #2
 8001a1e:	60fb      	str	r3, [r7, #12]
 8001a20:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX___TBS_Pin|USART1_RX___TBS_Pin;
 8001a22:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001a26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a28:	2302      	movs	r3, #2
 8001a2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a30:	2303      	movs	r3, #3
 8001a32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001a34:	2304      	movs	r3, #4
 8001a36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a38:	f107 0314 	add.w	r3, r7, #20
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4805      	ldr	r0, [pc, #20]	; (8001a54 <HAL_UART_MspInit+0x84>)
 8001a40:	f000 fece 	bl	80027e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001a44:	bf00      	nop
 8001a46:	3728      	adds	r7, #40	; 0x28
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	40011000 	.word	0x40011000
 8001a50:	40023800 	.word	0x40023800
 8001a54:	40020400 	.word	0x40020400

08001a58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a90 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a5c:	480d      	ldr	r0, [pc, #52]	; (8001a94 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a5e:	490e      	ldr	r1, [pc, #56]	; (8001a98 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a60:	4a0e      	ldr	r2, [pc, #56]	; (8001a9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a64:	e002      	b.n	8001a6c <LoopCopyDataInit>

08001a66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a6a:	3304      	adds	r3, #4

08001a6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a70:	d3f9      	bcc.n	8001a66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a72:	4a0b      	ldr	r2, [pc, #44]	; (8001aa0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a74:	4c0b      	ldr	r4, [pc, #44]	; (8001aa4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a78:	e001      	b.n	8001a7e <LoopFillZerobss>

08001a7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a7c:	3204      	adds	r2, #4

08001a7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a80:	d3fb      	bcc.n	8001a7a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001a82:	f7ff fded 	bl	8001660 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a86:	f00a fcd3 	bl	800c430 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a8a:	f7ff fb3b 	bl	8001104 <main>
  bx  lr    
 8001a8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a90:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001a94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a98:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 8001a9c:	0800c6ec 	.word	0x0800c6ec
  ldr r2, =_sbss
 8001aa0:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 8001aa4:	20004678 	.word	0x20004678

08001aa8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001aa8:	e7fe      	b.n	8001aa8 <ADC_IRQHandler>
	...

08001aac <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8001aba:	79fb      	ldrb	r3, [r7, #7]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d903      	bls.n	8001ac8 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001ac0:	f06f 0301 	mvn.w	r3, #1
 8001ac4:	60fb      	str	r3, [r7, #12]
 8001ac6:	e025      	b.n	8001b14 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8001ac8:	79fb      	ldrb	r3, [r7, #7]
 8001aca:	79fa      	ldrb	r2, [r7, #7]
 8001acc:	4914      	ldr	r1, [pc, #80]	; (8001b20 <BSP_COM_Init+0x74>)
 8001ace:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8001ad2:	4814      	ldr	r0, [pc, #80]	; (8001b24 <BSP_COM_Init+0x78>)
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	015b      	lsls	r3, r3, #5
 8001ad8:	4413      	add	r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	4403      	add	r3, r0
 8001ade:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 8001ae0:	79fa      	ldrb	r2, [r7, #7]
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	015b      	lsls	r3, r3, #5
 8001ae6:	4413      	add	r3, r2
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	4a0e      	ldr	r2, [pc, #56]	; (8001b24 <BSP_COM_Init+0x78>)
 8001aec:	4413      	add	r3, r2
 8001aee:	4618      	mov	r0, r3
 8001af0:	f000 f84e 	bl	8001b90 <USART2_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 8001af4:	79fa      	ldrb	r2, [r7, #7]
 8001af6:	4613      	mov	r3, r2
 8001af8:	015b      	lsls	r3, r3, #5
 8001afa:	4413      	add	r3, r2
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	4a09      	ldr	r2, [pc, #36]	; (8001b24 <BSP_COM_Init+0x78>)
 8001b00:	4413      	add	r3, r2
 8001b02:	4618      	mov	r0, r3
 8001b04:	f000 f810 	bl	8001b28 <MX_USART2_UART_Init>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d002      	beq.n	8001b14 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001b0e:	f06f 0303 	mvn.w	r3, #3
 8001b12:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001b14:	68fb      	ldr	r3, [r7, #12]
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	20000004 	.word	0x20000004
 8001b24:	20000c64 	.word	0x20000c64

08001b28 <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001b30:	2300      	movs	r3, #0
 8001b32:	73fb      	strb	r3, [r7, #15]
  huart->Instance = USART2;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	4a15      	ldr	r2, [pc, #84]	; (8001b8c <MX_USART2_UART_Init+0x64>)
 8001b38:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b40:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2200      	movs	r2, #0
 8001b46:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	220c      	movs	r2, #12
 8001b58:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2200      	movs	r2, #0
 8001b64:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	621a      	str	r2, [r3, #32]
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(huart) != HAL_OK)
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f005 fd04 	bl	8007580 <HAL_UART_Init>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <MX_USART2_UART_Init+0x5a>
  {
    ret = HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001b82:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3710      	adds	r7, #16
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	40004400 	.word	0x40004400

08001b90 <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b08a      	sub	sp, #40	; 0x28
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b98:	4b1d      	ldr	r3, [pc, #116]	; (8001c10 <USART2_MspInit+0x80>)
 8001b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9c:	4a1c      	ldr	r2, [pc, #112]	; (8001c10 <USART2_MspInit+0x80>)
 8001b9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ba2:	6413      	str	r3, [r2, #64]	; 0x40
 8001ba4:	4b1a      	ldr	r3, [pc, #104]	; (8001c10 <USART2_MspInit+0x80>)
 8001ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bac:	613b      	str	r3, [r7, #16]
 8001bae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bb0:	4b17      	ldr	r3, [pc, #92]	; (8001c10 <USART2_MspInit+0x80>)
 8001bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb4:	4a16      	ldr	r2, [pc, #88]	; (8001c10 <USART2_MspInit+0x80>)
 8001bb6:	f043 0308 	orr.w	r3, r3, #8
 8001bba:	6313      	str	r3, [r2, #48]	; 0x30
 8001bbc:	4b14      	ldr	r3, [pc, #80]	; (8001c10 <USART2_MspInit+0x80>)
 8001bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc0:	f003 0308 	and.w	r3, r3, #8
 8001bc4:	60fb      	str	r3, [r7, #12]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 8001bc8:	2320      	movs	r3, #32
 8001bca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bcc:	2302      	movs	r3, #2
 8001bce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 8001bd8:	2307      	movs	r3, #7
 8001bda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 8001bdc:	f107 0314 	add.w	r3, r7, #20
 8001be0:	4619      	mov	r1, r3
 8001be2:	480c      	ldr	r0, [pc, #48]	; (8001c14 <USART2_MspInit+0x84>)
 8001be4:	f000 fdfc 	bl	80027e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 8001be8:	2340      	movs	r3, #64	; 0x40
 8001bea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bec:	2302      	movs	r3, #2
 8001bee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 8001bf8:	2307      	movs	r3, #7
 8001bfa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 8001bfc:	f107 0314 	add.w	r3, r7, #20
 8001c00:	4619      	mov	r1, r3
 8001c02:	4804      	ldr	r0, [pc, #16]	; (8001c14 <USART2_MspInit+0x84>)
 8001c04:	f000 fdec 	bl	80027e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 8001c08:	bf00      	nop
 8001c0a:	3728      	adds	r7, #40	; 0x28
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	40023800 	.word	0x40023800
 8001c14:	40020c00 	.word	0x40020c00

08001c18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c1c:	2003      	movs	r0, #3
 8001c1e:	f000 fbf9 	bl	8002414 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c22:	2000      	movs	r0, #0
 8001c24:	f000 f806 	bl	8001c34 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001c28:	f7ff fc60 	bl	80014ec <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	bd80      	pop	{r7, pc}
	...

08001c34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c3c:	4b12      	ldr	r3, [pc, #72]	; (8001c88 <HAL_InitTick+0x54>)
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	4b12      	ldr	r3, [pc, #72]	; (8001c8c <HAL_InitTick+0x58>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	4619      	mov	r1, r3
 8001c46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c52:	4618      	mov	r0, r3
 8001c54:	f000 fc21 	bl	800249a <HAL_SYSTICK_Config>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e00e      	b.n	8001c80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2b0f      	cmp	r3, #15
 8001c66:	d80a      	bhi.n	8001c7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c68:	2200      	movs	r2, #0
 8001c6a:	6879      	ldr	r1, [r7, #4]
 8001c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c70:	f000 fbdb 	bl	800242a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c74:	4a06      	ldr	r2, [pc, #24]	; (8001c90 <HAL_InitTick+0x5c>)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	e000      	b.n	8001c80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3708      	adds	r7, #8
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	20000000 	.word	0x20000000
 8001c8c:	2000000c 	.word	0x2000000c
 8001c90:	20000008 	.word	0x20000008

08001c94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c98:	4b06      	ldr	r3, [pc, #24]	; (8001cb4 <HAL_IncTick+0x20>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	4b06      	ldr	r3, [pc, #24]	; (8001cb8 <HAL_IncTick+0x24>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	4a04      	ldr	r2, [pc, #16]	; (8001cb8 <HAL_IncTick+0x24>)
 8001ca6:	6013      	str	r3, [r2, #0]
}
 8001ca8:	bf00      	nop
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	2000000c 	.word	0x2000000c
 8001cb8:	20000ce8 	.word	0x20000ce8

08001cbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  return uwTick;
 8001cc0:	4b03      	ldr	r3, [pc, #12]	; (8001cd0 <HAL_GetTick+0x14>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	20000ce8 	.word	0x20000ce8

08001cd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cdc:	f7ff ffee 	bl	8001cbc <HAL_GetTick>
 8001ce0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cec:	d005      	beq.n	8001cfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cee:	4b0a      	ldr	r3, [pc, #40]	; (8001d18 <HAL_Delay+0x44>)
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cfa:	bf00      	nop
 8001cfc:	f7ff ffde 	bl	8001cbc <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d8f7      	bhi.n	8001cfc <HAL_Delay+0x28>
  {
  }
}
 8001d0c:	bf00      	nop
 8001d0e:	bf00      	nop
 8001d10:	3710      	adds	r7, #16
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	2000000c 	.word	0x2000000c

08001d1c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d24:	2300      	movs	r3, #0
 8001d26:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d101      	bne.n	8001d32 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e031      	b.n	8001d96 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d109      	bne.n	8001d4e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f7fe ffbe 	bl	8000cbc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2200      	movs	r2, #0
 8001d44:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d52:	f003 0310 	and.w	r3, r3, #16
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d116      	bne.n	8001d88 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d5e:	4b10      	ldr	r3, [pc, #64]	; (8001da0 <HAL_ADC_Init+0x84>)
 8001d60:	4013      	ands	r3, r2
 8001d62:	f043 0202 	orr.w	r2, r3, #2
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f000 f964 	bl	8002038 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2200      	movs	r2, #0
 8001d74:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7a:	f023 0303 	bic.w	r3, r3, #3
 8001d7e:	f043 0201 	orr.w	r2, r3, #1
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	641a      	str	r2, [r3, #64]	; 0x40
 8001d86:	e001      	b.n	8001d8c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3710      	adds	r7, #16
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	ffffeefd 	.word	0xffffeefd

08001da4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b085      	sub	sp, #20
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001dae:	2300      	movs	r3, #0
 8001db0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d101      	bne.n	8001dc0 <HAL_ADC_ConfigChannel+0x1c>
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	e12a      	b.n	8002016 <HAL_ADC_ConfigChannel+0x272>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2b09      	cmp	r3, #9
 8001dce:	d93a      	bls.n	8001e46 <HAL_ADC_ConfigChannel+0xa2>
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001dd8:	d035      	beq.n	8001e46 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	68d9      	ldr	r1, [r3, #12]
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	461a      	mov	r2, r3
 8001de8:	4613      	mov	r3, r2
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	4413      	add	r3, r2
 8001dee:	3b1e      	subs	r3, #30
 8001df0:	2207      	movs	r2, #7
 8001df2:	fa02 f303 	lsl.w	r3, r2, r3
 8001df6:	43da      	mvns	r2, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	400a      	ands	r2, r1
 8001dfe:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a87      	ldr	r2, [pc, #540]	; (8002024 <HAL_ADC_ConfigChannel+0x280>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d10a      	bne.n	8001e20 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	68d9      	ldr	r1, [r3, #12]
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	061a      	lsls	r2, r3, #24
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e1e:	e035      	b.n	8001e8c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	68d9      	ldr	r1, [r3, #12]
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	689a      	ldr	r2, [r3, #8]
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	4618      	mov	r0, r3
 8001e32:	4603      	mov	r3, r0
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	4403      	add	r3, r0
 8001e38:	3b1e      	subs	r3, #30
 8001e3a:	409a      	lsls	r2, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	430a      	orrs	r2, r1
 8001e42:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e44:	e022      	b.n	8001e8c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	6919      	ldr	r1, [r3, #16]
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	461a      	mov	r2, r3
 8001e54:	4613      	mov	r3, r2
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	4413      	add	r3, r2
 8001e5a:	2207      	movs	r2, #7
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	43da      	mvns	r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	400a      	ands	r2, r1
 8001e68:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	6919      	ldr	r1, [r3, #16]
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	689a      	ldr	r2, [r3, #8]
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	4403      	add	r3, r0
 8001e82:	409a      	lsls	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	2b06      	cmp	r3, #6
 8001e92:	d824      	bhi.n	8001ede <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685a      	ldr	r2, [r3, #4]
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	4413      	add	r3, r2
 8001ea4:	3b05      	subs	r3, #5
 8001ea6:	221f      	movs	r2, #31
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	43da      	mvns	r2, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	400a      	ands	r2, r1
 8001eb4:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685a      	ldr	r2, [r3, #4]
 8001ec8:	4613      	mov	r3, r2
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	4413      	add	r3, r2
 8001ece:	3b05      	subs	r3, #5
 8001ed0:	fa00 f203 	lsl.w	r2, r0, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	430a      	orrs	r2, r1
 8001eda:	635a      	str	r2, [r3, #52]	; 0x34
 8001edc:	e04c      	b.n	8001f78 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	2b0c      	cmp	r3, #12
 8001ee4:	d824      	bhi.n	8001f30 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685a      	ldr	r2, [r3, #4]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	4413      	add	r3, r2
 8001ef6:	3b23      	subs	r3, #35	; 0x23
 8001ef8:	221f      	movs	r2, #31
 8001efa:	fa02 f303 	lsl.w	r3, r2, r3
 8001efe:	43da      	mvns	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	400a      	ands	r2, r1
 8001f06:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	4618      	mov	r0, r3
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685a      	ldr	r2, [r3, #4]
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	4413      	add	r3, r2
 8001f20:	3b23      	subs	r3, #35	; 0x23
 8001f22:	fa00 f203 	lsl.w	r2, r0, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	631a      	str	r2, [r3, #48]	; 0x30
 8001f2e:	e023      	b.n	8001f78 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685a      	ldr	r2, [r3, #4]
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	4413      	add	r3, r2
 8001f40:	3b41      	subs	r3, #65	; 0x41
 8001f42:	221f      	movs	r2, #31
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	43da      	mvns	r2, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	400a      	ands	r2, r1
 8001f50:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	4618      	mov	r0, r3
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685a      	ldr	r2, [r3, #4]
 8001f64:	4613      	mov	r3, r2
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	4413      	add	r3, r2
 8001f6a:	3b41      	subs	r3, #65	; 0x41
 8001f6c:	fa00 f203 	lsl.w	r2, r0, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	430a      	orrs	r2, r1
 8001f76:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a2a      	ldr	r2, [pc, #168]	; (8002028 <HAL_ADC_ConfigChannel+0x284>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d10a      	bne.n	8001f98 <HAL_ADC_ConfigChannel+0x1f4>
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001f8a:	d105      	bne.n	8001f98 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001f8c:	4b27      	ldr	r3, [pc, #156]	; (800202c <HAL_ADC_ConfigChannel+0x288>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	4a26      	ldr	r2, [pc, #152]	; (800202c <HAL_ADC_ConfigChannel+0x288>)
 8001f92:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001f96:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a22      	ldr	r2, [pc, #136]	; (8002028 <HAL_ADC_ConfigChannel+0x284>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d109      	bne.n	8001fb6 <HAL_ADC_ConfigChannel+0x212>
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2b12      	cmp	r3, #18
 8001fa8:	d105      	bne.n	8001fb6 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001faa:	4b20      	ldr	r3, [pc, #128]	; (800202c <HAL_ADC_ConfigChannel+0x288>)
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	4a1f      	ldr	r2, [pc, #124]	; (800202c <HAL_ADC_ConfigChannel+0x288>)
 8001fb0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001fb4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a1b      	ldr	r2, [pc, #108]	; (8002028 <HAL_ADC_ConfigChannel+0x284>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d125      	bne.n	800200c <HAL_ADC_ConfigChannel+0x268>
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a17      	ldr	r2, [pc, #92]	; (8002024 <HAL_ADC_ConfigChannel+0x280>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d003      	beq.n	8001fd2 <HAL_ADC_ConfigChannel+0x22e>
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	2b11      	cmp	r3, #17
 8001fd0:	d11c      	bne.n	800200c <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001fd2:	4b16      	ldr	r3, [pc, #88]	; (800202c <HAL_ADC_ConfigChannel+0x288>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	4a15      	ldr	r2, [pc, #84]	; (800202c <HAL_ADC_ConfigChannel+0x288>)
 8001fd8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001fdc:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a10      	ldr	r2, [pc, #64]	; (8002024 <HAL_ADC_ConfigChannel+0x280>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d111      	bne.n	800200c <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001fe8:	4b11      	ldr	r3, [pc, #68]	; (8002030 <HAL_ADC_ConfigChannel+0x28c>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a11      	ldr	r2, [pc, #68]	; (8002034 <HAL_ADC_ConfigChannel+0x290>)
 8001fee:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff2:	0c9a      	lsrs	r2, r3, #18
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	4413      	add	r3, r2
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001ffe:	e002      	b.n	8002006 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	3b01      	subs	r3, #1
 8002004:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d1f9      	bne.n	8002000 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3714      	adds	r7, #20
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	10000012 	.word	0x10000012
 8002028:	40012000 	.word	0x40012000
 800202c:	40012300 	.word	0x40012300
 8002030:	20000000 	.word	0x20000000
 8002034:	431bde83 	.word	0x431bde83

08002038 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002040:	4b78      	ldr	r3, [pc, #480]	; (8002224 <ADC_Init+0x1ec>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	4a77      	ldr	r2, [pc, #476]	; (8002224 <ADC_Init+0x1ec>)
 8002046:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800204a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800204c:	4b75      	ldr	r3, [pc, #468]	; (8002224 <ADC_Init+0x1ec>)
 800204e:	685a      	ldr	r2, [r3, #4]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	4973      	ldr	r1, [pc, #460]	; (8002224 <ADC_Init+0x1ec>)
 8002056:	4313      	orrs	r3, r2
 8002058:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	685a      	ldr	r2, [r3, #4]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002068:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	6859      	ldr	r1, [r3, #4]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	691b      	ldr	r3, [r3, #16]
 8002074:	021a      	lsls	r2, r3, #8
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	430a      	orrs	r2, r1
 800207c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	685a      	ldr	r2, [r3, #4]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800208c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	6859      	ldr	r1, [r3, #4]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	689a      	ldr	r2, [r3, #8]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	430a      	orrs	r2, r1
 800209e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	689a      	ldr	r2, [r3, #8]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	6899      	ldr	r1, [r3, #8]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	68da      	ldr	r2, [r3, #12]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	430a      	orrs	r2, r1
 80020c0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c6:	4a58      	ldr	r2, [pc, #352]	; (8002228 <ADC_Init+0x1f0>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d022      	beq.n	8002112 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	689a      	ldr	r2, [r3, #8]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020da:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	6899      	ldr	r1, [r3, #8]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	430a      	orrs	r2, r1
 80020ec:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	689a      	ldr	r2, [r3, #8]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80020fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	6899      	ldr	r1, [r3, #8]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	430a      	orrs	r2, r1
 800210e:	609a      	str	r2, [r3, #8]
 8002110:	e00f      	b.n	8002132 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	689a      	ldr	r2, [r3, #8]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002120:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	689a      	ldr	r2, [r3, #8]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002130:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	689a      	ldr	r2, [r3, #8]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f022 0202 	bic.w	r2, r2, #2
 8002140:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	6899      	ldr	r1, [r3, #8]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	699b      	ldr	r3, [r3, #24]
 800214c:	005a      	lsls	r2, r3, #1
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	430a      	orrs	r2, r1
 8002154:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f893 3020 	ldrb.w	r3, [r3, #32]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d01b      	beq.n	8002198 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	685a      	ldr	r2, [r3, #4]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800216e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	685a      	ldr	r2, [r3, #4]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800217e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	6859      	ldr	r1, [r3, #4]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218a:	3b01      	subs	r3, #1
 800218c:	035a      	lsls	r2, r3, #13
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	430a      	orrs	r2, r1
 8002194:	605a      	str	r2, [r3, #4]
 8002196:	e007      	b.n	80021a8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	685a      	ldr	r2, [r3, #4]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021a6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80021b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	69db      	ldr	r3, [r3, #28]
 80021c2:	3b01      	subs	r3, #1
 80021c4:	051a      	lsls	r2, r3, #20
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	430a      	orrs	r2, r1
 80021cc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	689a      	ldr	r2, [r3, #8]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80021dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	6899      	ldr	r1, [r3, #8]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80021ea:	025a      	lsls	r2, r3, #9
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	430a      	orrs	r2, r1
 80021f2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	689a      	ldr	r2, [r3, #8]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002202:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	6899      	ldr	r1, [r3, #8]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	695b      	ldr	r3, [r3, #20]
 800220e:	029a      	lsls	r2, r3, #10
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	430a      	orrs	r2, r1
 8002216:	609a      	str	r2, [r3, #8]
}
 8002218:	bf00      	nop
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr
 8002224:	40012300 	.word	0x40012300
 8002228:	0f000001 	.word	0x0f000001

0800222c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800222c:	b480      	push	{r7}
 800222e:	b085      	sub	sp, #20
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f003 0307 	and.w	r3, r3, #7
 800223a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800223c:	4b0b      	ldr	r3, [pc, #44]	; (800226c <__NVIC_SetPriorityGrouping+0x40>)
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002242:	68ba      	ldr	r2, [r7, #8]
 8002244:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002248:	4013      	ands	r3, r2
 800224a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002254:	4b06      	ldr	r3, [pc, #24]	; (8002270 <__NVIC_SetPriorityGrouping+0x44>)
 8002256:	4313      	orrs	r3, r2
 8002258:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800225a:	4a04      	ldr	r2, [pc, #16]	; (800226c <__NVIC_SetPriorityGrouping+0x40>)
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	60d3      	str	r3, [r2, #12]
}
 8002260:	bf00      	nop
 8002262:	3714      	adds	r7, #20
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr
 800226c:	e000ed00 	.word	0xe000ed00
 8002270:	05fa0000 	.word	0x05fa0000

08002274 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002278:	4b04      	ldr	r3, [pc, #16]	; (800228c <__NVIC_GetPriorityGrouping+0x18>)
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	0a1b      	lsrs	r3, r3, #8
 800227e:	f003 0307 	and.w	r3, r3, #7
}
 8002282:	4618      	mov	r0, r3
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr
 800228c:	e000ed00 	.word	0xe000ed00

08002290 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	4603      	mov	r3, r0
 8002298:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800229a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	db0b      	blt.n	80022ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022a2:	79fb      	ldrb	r3, [r7, #7]
 80022a4:	f003 021f 	and.w	r2, r3, #31
 80022a8:	4907      	ldr	r1, [pc, #28]	; (80022c8 <__NVIC_EnableIRQ+0x38>)
 80022aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ae:	095b      	lsrs	r3, r3, #5
 80022b0:	2001      	movs	r0, #1
 80022b2:	fa00 f202 	lsl.w	r2, r0, r2
 80022b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022ba:	bf00      	nop
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	e000e100 	.word	0xe000e100

080022cc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	4603      	mov	r3, r0
 80022d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	db12      	blt.n	8002304 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022de:	79fb      	ldrb	r3, [r7, #7]
 80022e0:	f003 021f 	and.w	r2, r3, #31
 80022e4:	490a      	ldr	r1, [pc, #40]	; (8002310 <__NVIC_DisableIRQ+0x44>)
 80022e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ea:	095b      	lsrs	r3, r3, #5
 80022ec:	2001      	movs	r0, #1
 80022ee:	fa00 f202 	lsl.w	r2, r0, r2
 80022f2:	3320      	adds	r3, #32
 80022f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80022f8:	f3bf 8f4f 	dsb	sy
}
 80022fc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80022fe:	f3bf 8f6f 	isb	sy
}
 8002302:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002304:	bf00      	nop
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr
 8002310:	e000e100 	.word	0xe000e100

08002314 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	4603      	mov	r3, r0
 800231c:	6039      	str	r1, [r7, #0]
 800231e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002324:	2b00      	cmp	r3, #0
 8002326:	db0a      	blt.n	800233e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	b2da      	uxtb	r2, r3
 800232c:	490c      	ldr	r1, [pc, #48]	; (8002360 <__NVIC_SetPriority+0x4c>)
 800232e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002332:	0112      	lsls	r2, r2, #4
 8002334:	b2d2      	uxtb	r2, r2
 8002336:	440b      	add	r3, r1
 8002338:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800233c:	e00a      	b.n	8002354 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	b2da      	uxtb	r2, r3
 8002342:	4908      	ldr	r1, [pc, #32]	; (8002364 <__NVIC_SetPriority+0x50>)
 8002344:	79fb      	ldrb	r3, [r7, #7]
 8002346:	f003 030f 	and.w	r3, r3, #15
 800234a:	3b04      	subs	r3, #4
 800234c:	0112      	lsls	r2, r2, #4
 800234e:	b2d2      	uxtb	r2, r2
 8002350:	440b      	add	r3, r1
 8002352:	761a      	strb	r2, [r3, #24]
}
 8002354:	bf00      	nop
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr
 8002360:	e000e100 	.word	0xe000e100
 8002364:	e000ed00 	.word	0xe000ed00

08002368 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002368:	b480      	push	{r7}
 800236a:	b089      	sub	sp, #36	; 0x24
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f003 0307 	and.w	r3, r3, #7
 800237a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	f1c3 0307 	rsb	r3, r3, #7
 8002382:	2b04      	cmp	r3, #4
 8002384:	bf28      	it	cs
 8002386:	2304      	movcs	r3, #4
 8002388:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	3304      	adds	r3, #4
 800238e:	2b06      	cmp	r3, #6
 8002390:	d902      	bls.n	8002398 <NVIC_EncodePriority+0x30>
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	3b03      	subs	r3, #3
 8002396:	e000      	b.n	800239a <NVIC_EncodePriority+0x32>
 8002398:	2300      	movs	r3, #0
 800239a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800239c:	f04f 32ff 	mov.w	r2, #4294967295
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	fa02 f303 	lsl.w	r3, r2, r3
 80023a6:	43da      	mvns	r2, r3
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	401a      	ands	r2, r3
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023b0:	f04f 31ff 	mov.w	r1, #4294967295
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	fa01 f303 	lsl.w	r3, r1, r3
 80023ba:	43d9      	mvns	r1, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023c0:	4313      	orrs	r3, r2
         );
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3724      	adds	r7, #36	; 0x24
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
	...

080023d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	3b01      	subs	r3, #1
 80023dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023e0:	d301      	bcc.n	80023e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023e2:	2301      	movs	r3, #1
 80023e4:	e00f      	b.n	8002406 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023e6:	4a0a      	ldr	r2, [pc, #40]	; (8002410 <SysTick_Config+0x40>)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	3b01      	subs	r3, #1
 80023ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023ee:	210f      	movs	r1, #15
 80023f0:	f04f 30ff 	mov.w	r0, #4294967295
 80023f4:	f7ff ff8e 	bl	8002314 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023f8:	4b05      	ldr	r3, [pc, #20]	; (8002410 <SysTick_Config+0x40>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023fe:	4b04      	ldr	r3, [pc, #16]	; (8002410 <SysTick_Config+0x40>)
 8002400:	2207      	movs	r2, #7
 8002402:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	e000e010 	.word	0xe000e010

08002414 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f7ff ff05 	bl	800222c <__NVIC_SetPriorityGrouping>
}
 8002422:	bf00      	nop
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800242a:	b580      	push	{r7, lr}
 800242c:	b086      	sub	sp, #24
 800242e:	af00      	add	r7, sp, #0
 8002430:	4603      	mov	r3, r0
 8002432:	60b9      	str	r1, [r7, #8]
 8002434:	607a      	str	r2, [r7, #4]
 8002436:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002438:	2300      	movs	r3, #0
 800243a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800243c:	f7ff ff1a 	bl	8002274 <__NVIC_GetPriorityGrouping>
 8002440:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	68b9      	ldr	r1, [r7, #8]
 8002446:	6978      	ldr	r0, [r7, #20]
 8002448:	f7ff ff8e 	bl	8002368 <NVIC_EncodePriority>
 800244c:	4602      	mov	r2, r0
 800244e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002452:	4611      	mov	r1, r2
 8002454:	4618      	mov	r0, r3
 8002456:	f7ff ff5d 	bl	8002314 <__NVIC_SetPriority>
}
 800245a:	bf00      	nop
 800245c:	3718      	adds	r7, #24
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002462:	b580      	push	{r7, lr}
 8002464:	b082      	sub	sp, #8
 8002466:	af00      	add	r7, sp, #0
 8002468:	4603      	mov	r3, r0
 800246a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800246c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002470:	4618      	mov	r0, r3
 8002472:	f7ff ff0d 	bl	8002290 <__NVIC_EnableIRQ>
}
 8002476:	bf00      	nop
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800247e:	b580      	push	{r7, lr}
 8002480:	b082      	sub	sp, #8
 8002482:	af00      	add	r7, sp, #0
 8002484:	4603      	mov	r3, r0
 8002486:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002488:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff ff1d 	bl	80022cc <__NVIC_DisableIRQ>
}
 8002492:	bf00      	nop
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800249a:	b580      	push	{r7, lr}
 800249c:	b082      	sub	sp, #8
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f7ff ff94 	bl	80023d0 <SysTick_Config>
 80024a8:	4603      	mov	r3, r0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80024b2:	b480      	push	{r7}
 80024b4:	b087      	sub	sp, #28
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	60f8      	str	r0, [r7, #12]
 80024ba:	460b      	mov	r3, r1
 80024bc:	607a      	str	r2, [r7, #4]
 80024be:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80024c0:	2300      	movs	r3, #0
 80024c2:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 80024c4:	7afb      	ldrb	r3, [r7, #11]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d103      	bne.n	80024d2 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	605a      	str	r2, [r3, #4]
      break;
 80024d0:	e002      	b.n	80024d8 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	75fb      	strb	r3, [r7, #23]
      break;
 80024d6:	bf00      	nop
  }

  return status;
 80024d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80024da:	4618      	mov	r0, r3
 80024dc:	371c      	adds	r7, #28
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr

080024e6 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80024e6:	b480      	push	{r7}
 80024e8:	b083      	sub	sp, #12
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
 80024ee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d101      	bne.n	80024fa <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e003      	b.n	8002502 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	683a      	ldr	r2, [r7, #0]
 80024fe:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002500:	2300      	movs	r3, #0
  }
}
 8002502:	4618      	mov	r0, r3
 8002504:	370c      	adds	r7, #12
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
	...

08002510 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
  uint32_t temp = 0;
 8002516:	2300      	movs	r3, #0
 8002518:	607b      	str	r3, [r7, #4]
  
  /* If the program operation is completed, disable the PG Bit */
  FLASH->CR &= (~FLASH_CR_PG);
 800251a:	4b56      	ldr	r3, [pc, #344]	; (8002674 <HAL_FLASH_IRQHandler+0x164>)
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	4a55      	ldr	r2, [pc, #340]	; (8002674 <HAL_FLASH_IRQHandler+0x164>)
 8002520:	f023 0301 	bic.w	r3, r3, #1
 8002524:	6113      	str	r3, [r2, #16]

  /* If the erase operation is completed, disable the SER Bit */
  FLASH->CR &= (~FLASH_CR_SER);
 8002526:	4b53      	ldr	r3, [pc, #332]	; (8002674 <HAL_FLASH_IRQHandler+0x164>)
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	4a52      	ldr	r2, [pc, #328]	; (8002674 <HAL_FLASH_IRQHandler+0x164>)
 800252c:	f023 0302 	bic.w	r3, r3, #2
 8002530:	6113      	str	r3, [r2, #16]
  FLASH->CR &= SECTOR_MASK; 
 8002532:	4b50      	ldr	r3, [pc, #320]	; (8002674 <HAL_FLASH_IRQHandler+0x164>)
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	4a4f      	ldr	r2, [pc, #316]	; (8002674 <HAL_FLASH_IRQHandler+0x164>)
 8002538:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800253c:	6113      	str	r3, [r2, #16]

  /* if the erase operation is completed, disable the MER Bit */
  FLASH->CR &= (~FLASH_MER_BIT);
 800253e:	4b4d      	ldr	r3, [pc, #308]	; (8002674 <HAL_FLASH_IRQHandler+0x164>)
 8002540:	691a      	ldr	r2, [r3, #16]
 8002542:	494c      	ldr	r1, [pc, #304]	; (8002674 <HAL_FLASH_IRQHandler+0x164>)
 8002544:	4b4c      	ldr	r3, [pc, #304]	; (8002678 <HAL_FLASH_IRQHandler+0x168>)
 8002546:	4013      	ands	r3, r2
 8002548:	610b      	str	r3, [r1, #16]

  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800254a:	4b4a      	ldr	r3, [pc, #296]	; (8002674 <HAL_FLASH_IRQHandler+0x164>)
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	2b00      	cmp	r3, #0
 8002554:	d048      	beq.n	80025e8 <HAL_FLASH_IRQHandler+0xd8>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002556:	4b47      	ldr	r3, [pc, #284]	; (8002674 <HAL_FLASH_IRQHandler+0x164>)
 8002558:	2201      	movs	r2, #1
 800255a:	60da      	str	r2, [r3, #12]
    
    switch (pFlash.ProcedureOnGoing)
 800255c:	4b47      	ldr	r3, [pc, #284]	; (800267c <HAL_FLASH_IRQHandler+0x16c>)
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b03      	cmp	r3, #3
 8002564:	d037      	beq.n	80025d6 <HAL_FLASH_IRQHandler+0xc6>
 8002566:	2b03      	cmp	r3, #3
 8002568:	dc40      	bgt.n	80025ec <HAL_FLASH_IRQHandler+0xdc>
 800256a:	2b01      	cmp	r3, #1
 800256c:	d002      	beq.n	8002574 <HAL_FLASH_IRQHandler+0x64>
 800256e:	2b02      	cmp	r3, #2
 8002570:	d02a      	beq.n	80025c8 <HAL_FLASH_IRQHandler+0xb8>
        /* Programming procedure is completed */
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
        break;
      }
      default :
        break;
 8002572:	e03b      	b.n	80025ec <HAL_FLASH_IRQHandler+0xdc>
        pFlash.NbSectorsToErase--;
 8002574:	4b41      	ldr	r3, [pc, #260]	; (800267c <HAL_FLASH_IRQHandler+0x16c>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	3b01      	subs	r3, #1
 800257a:	4a40      	ldr	r2, [pc, #256]	; (800267c <HAL_FLASH_IRQHandler+0x16c>)
 800257c:	6053      	str	r3, [r2, #4]
        if(pFlash.NbSectorsToErase != 0)
 800257e:	4b3f      	ldr	r3, [pc, #252]	; (800267c <HAL_FLASH_IRQHandler+0x16c>)
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d013      	beq.n	80025ae <HAL_FLASH_IRQHandler+0x9e>
          temp = pFlash.Sector;
 8002586:	4b3d      	ldr	r3, [pc, #244]	; (800267c <HAL_FLASH_IRQHandler+0x16c>)
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	607b      	str	r3, [r7, #4]
          HAL_FLASH_EndOfOperationCallback(temp);
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f000 f877 	bl	8002680 <HAL_FLASH_EndOfOperationCallback>
          temp = ++pFlash.Sector;
 8002592:	4b3a      	ldr	r3, [pc, #232]	; (800267c <HAL_FLASH_IRQHandler+0x16c>)
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	3301      	adds	r3, #1
 8002598:	4a38      	ldr	r2, [pc, #224]	; (800267c <HAL_FLASH_IRQHandler+0x16c>)
 800259a:	60d3      	str	r3, [r2, #12]
 800259c:	607b      	str	r3, [r7, #4]
          FLASH_Erase_Sector(temp, pFlash.VoltageForErase);
 800259e:	4b37      	ldr	r3, [pc, #220]	; (800267c <HAL_FLASH_IRQHandler+0x16c>)
 80025a0:	7a1b      	ldrb	r3, [r3, #8]
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	4619      	mov	r1, r3
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 f8c8 	bl	800273c <FLASH_Erase_Sector>
        break;
 80025ac:	e01f      	b.n	80025ee <HAL_FLASH_IRQHandler+0xde>
          pFlash.Sector = temp = 0xFFFFFFFFU;
 80025ae:	f04f 33ff 	mov.w	r3, #4294967295
 80025b2:	607b      	str	r3, [r7, #4]
 80025b4:	4a31      	ldr	r2, [pc, #196]	; (800267c <HAL_FLASH_IRQHandler+0x16c>)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	60d3      	str	r3, [r2, #12]
          HAL_FLASH_EndOfOperationCallback(temp);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f000 f860 	bl	8002680 <HAL_FLASH_EndOfOperationCallback>
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80025c0:	4b2e      	ldr	r3, [pc, #184]	; (800267c <HAL_FLASH_IRQHandler+0x16c>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	701a      	strb	r2, [r3, #0]
        break;
 80025c6:	e012      	b.n	80025ee <HAL_FLASH_IRQHandler+0xde>
        HAL_FLASH_EndOfOperationCallback(0);
 80025c8:	2000      	movs	r0, #0
 80025ca:	f000 f859 	bl	8002680 <HAL_FLASH_EndOfOperationCallback>
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80025ce:	4b2b      	ldr	r3, [pc, #172]	; (800267c <HAL_FLASH_IRQHandler+0x16c>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	701a      	strb	r2, [r3, #0]
        break;
 80025d4:	e00b      	b.n	80025ee <HAL_FLASH_IRQHandler+0xde>
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 80025d6:	4b29      	ldr	r3, [pc, #164]	; (800267c <HAL_FLASH_IRQHandler+0x16c>)
 80025d8:	691b      	ldr	r3, [r3, #16]
 80025da:	4618      	mov	r0, r3
 80025dc:	f000 f850 	bl	8002680 <HAL_FLASH_EndOfOperationCallback>
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80025e0:	4b26      	ldr	r3, [pc, #152]	; (800267c <HAL_FLASH_IRQHandler+0x16c>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	701a      	strb	r2, [r3, #0]
        break;
 80025e6:	e002      	b.n	80025ee <HAL_FLASH_IRQHandler+0xde>
    }
  }
 80025e8:	bf00      	nop
 80025ea:	e000      	b.n	80025ee <HAL_FLASH_IRQHandler+0xde>
        break;
 80025ec:	bf00      	nop
  
  /* Check FLASH operation error flags */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 80025ee:	4b21      	ldr	r3, [pc, #132]	; (8002674 <HAL_FLASH_IRQHandler+0x164>)
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d023      	beq.n	8002642 <HAL_FLASH_IRQHandler+0x132>
  {
    switch (pFlash.ProcedureOnGoing)
 80025fa:	4b20      	ldr	r3, [pc, #128]	; (800267c <HAL_FLASH_IRQHandler+0x16c>)
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	2b03      	cmp	r3, #3
 8002602:	d011      	beq.n	8002628 <HAL_FLASH_IRQHandler+0x118>
 8002604:	2b03      	cmp	r3, #3
 8002606:	dc13      	bgt.n	8002630 <HAL_FLASH_IRQHandler+0x120>
 8002608:	2b01      	cmp	r3, #1
 800260a:	d002      	beq.n	8002612 <HAL_FLASH_IRQHandler+0x102>
 800260c:	2b02      	cmp	r3, #2
 800260e:	d008      	beq.n	8002622 <HAL_FLASH_IRQHandler+0x112>
        /*return the faulty address*/
        temp = pFlash.Address;
        break;
      }
    default :
      break;
 8002610:	e00e      	b.n	8002630 <HAL_FLASH_IRQHandler+0x120>
        temp = pFlash.Sector;
 8002612:	4b1a      	ldr	r3, [pc, #104]	; (800267c <HAL_FLASH_IRQHandler+0x16c>)
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	607b      	str	r3, [r7, #4]
        pFlash.Sector = 0xFFFFFFFFU;
 8002618:	4b18      	ldr	r3, [pc, #96]	; (800267c <HAL_FLASH_IRQHandler+0x16c>)
 800261a:	f04f 32ff 	mov.w	r2, #4294967295
 800261e:	60da      	str	r2, [r3, #12]
        break;
 8002620:	e007      	b.n	8002632 <HAL_FLASH_IRQHandler+0x122>
        temp = 0;
 8002622:	2300      	movs	r3, #0
 8002624:	607b      	str	r3, [r7, #4]
        break;
 8002626:	e004      	b.n	8002632 <HAL_FLASH_IRQHandler+0x122>
        temp = pFlash.Address;
 8002628:	4b14      	ldr	r3, [pc, #80]	; (800267c <HAL_FLASH_IRQHandler+0x16c>)
 800262a:	691b      	ldr	r3, [r3, #16]
 800262c:	607b      	str	r3, [r7, #4]
        break;
 800262e:	e000      	b.n	8002632 <HAL_FLASH_IRQHandler+0x122>
      break;
 8002630:	bf00      	nop
    }
    /*Save the Error code*/
    FLASH_SetErrorCode();
 8002632:	f000 f839 	bl	80026a8 <FLASH_SetErrorCode>

    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(temp);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f000 f82c 	bl	8002694 <HAL_FLASH_OperationErrorCallback>

    /*Stop the procedure ongoing */
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800263c:	4b0f      	ldr	r3, [pc, #60]	; (800267c <HAL_FLASH_IRQHandler+0x16c>)
 800263e:	2200      	movs	r2, #0
 8002640:	701a      	strb	r2, [r3, #0]
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8002642:	4b0e      	ldr	r3, [pc, #56]	; (800267c <HAL_FLASH_IRQHandler+0x16c>)
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	b2db      	uxtb	r3, r3
 8002648:	2b00      	cmp	r3, #0
 800264a:	d10e      	bne.n	800266a <HAL_FLASH_IRQHandler+0x15a>
  {
    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 800264c:	4b09      	ldr	r3, [pc, #36]	; (8002674 <HAL_FLASH_IRQHandler+0x164>)
 800264e:	691b      	ldr	r3, [r3, #16]
 8002650:	4a08      	ldr	r2, [pc, #32]	; (8002674 <HAL_FLASH_IRQHandler+0x164>)
 8002652:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002656:	6113      	str	r3, [r2, #16]

    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 8002658:	4b06      	ldr	r3, [pc, #24]	; (8002674 <HAL_FLASH_IRQHandler+0x164>)
 800265a:	691b      	ldr	r3, [r3, #16]
 800265c:	4a05      	ldr	r2, [pc, #20]	; (8002674 <HAL_FLASH_IRQHandler+0x164>)
 800265e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8002662:	6113      	str	r3, [r2, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8002664:	4b05      	ldr	r3, [pc, #20]	; (800267c <HAL_FLASH_IRQHandler+0x16c>)
 8002666:	2200      	movs	r2, #0
 8002668:	751a      	strb	r2, [r3, #20]
  }
  
}
 800266a:	bf00      	nop
 800266c:	3708      	adds	r7, #8
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	40023c00 	.word	0x40023c00
 8002678:	ffff7ffb 	.word	0xffff7ffb
 800267c:	20000cec 	.word	0x20000cec

08002680 <HAL_FLASH_EndOfOperationCallback>:
  *                 - Program      : Address which was selected for data program
  *                 - Mass Erase   : No return value expected
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
  */ 
}
 8002688:	bf00      	nop
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <HAL_FLASH_OperationErrorCallback>:
  *                 - Program      : Address which was selected for data program
  *                 - Mass Erase   : No return value expected
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 800269c:	bf00      	nop
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80026ac:	4b21      	ldr	r3, [pc, #132]	; (8002734 <FLASH_SetErrorCode+0x8c>)
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	f003 0302 	and.w	r3, r3, #2
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d005      	beq.n	80026c4 <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80026b8:	4b1f      	ldr	r3, [pc, #124]	; (8002738 <FLASH_SetErrorCode+0x90>)
 80026ba:	699b      	ldr	r3, [r3, #24]
 80026bc:	f043 0320 	orr.w	r3, r3, #32
 80026c0:	4a1d      	ldr	r2, [pc, #116]	; (8002738 <FLASH_SetErrorCode+0x90>)
 80026c2:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80026c4:	4b1b      	ldr	r3, [pc, #108]	; (8002734 <FLASH_SetErrorCode+0x8c>)
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	f003 0310 	and.w	r3, r3, #16
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d005      	beq.n	80026dc <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80026d0:	4b19      	ldr	r3, [pc, #100]	; (8002738 <FLASH_SetErrorCode+0x90>)
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	f043 0310 	orr.w	r3, r3, #16
 80026d8:	4a17      	ldr	r2, [pc, #92]	; (8002738 <FLASH_SetErrorCode+0x90>)
 80026da:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80026dc:	4b15      	ldr	r3, [pc, #84]	; (8002734 <FLASH_SetErrorCode+0x8c>)
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	f003 0320 	and.w	r3, r3, #32
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d005      	beq.n	80026f4 <FLASH_SetErrorCode+0x4c>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80026e8:	4b13      	ldr	r3, [pc, #76]	; (8002738 <FLASH_SetErrorCode+0x90>)
 80026ea:	699b      	ldr	r3, [r3, #24]
 80026ec:	f043 0308 	orr.w	r3, r3, #8
 80026f0:	4a11      	ldr	r2, [pc, #68]	; (8002738 <FLASH_SetErrorCode+0x90>)
 80026f2:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80026f4:	4b0f      	ldr	r3, [pc, #60]	; (8002734 <FLASH_SetErrorCode+0x8c>)
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d005      	beq.n	800270c <FLASH_SetErrorCode+0x64>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002700:	4b0d      	ldr	r3, [pc, #52]	; (8002738 <FLASH_SetErrorCode+0x90>)
 8002702:	699b      	ldr	r3, [r3, #24]
 8002704:	f043 0304 	orr.w	r3, r3, #4
 8002708:	4a0b      	ldr	r2, [pc, #44]	; (8002738 <FLASH_SetErrorCode+0x90>)
 800270a:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 800270c:	4b09      	ldr	r3, [pc, #36]	; (8002734 <FLASH_SetErrorCode+0x8c>)
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002714:	2b00      	cmp	r3, #0
 8002716:	d005      	beq.n	8002724 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 8002718:	4b07      	ldr	r3, [pc, #28]	; (8002738 <FLASH_SetErrorCode+0x90>)
 800271a:	699b      	ldr	r3, [r3, #24]
 800271c:	f043 0302 	orr.w	r3, r3, #2
 8002720:	4a05      	ldr	r2, [pc, #20]	; (8002738 <FLASH_SetErrorCode+0x90>)
 8002722:	6193      	str	r3, [r2, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8002724:	4b03      	ldr	r3, [pc, #12]	; (8002734 <FLASH_SetErrorCode+0x8c>)
 8002726:	22f2      	movs	r2, #242	; 0xf2
 8002728:	60da      	str	r2, [r3, #12]
}
 800272a:	bf00      	nop
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr
 8002734:	40023c00 	.word	0x40023c00
 8002738:	20000cec 	.word	0x20000cec

0800273c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800273c:	b480      	push	{r7}
 800273e:	b085      	sub	sp, #20
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	460b      	mov	r3, r1
 8002746:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0;
 8002748:	2300      	movs	r3, #0
 800274a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800274c:	78fb      	ldrb	r3, [r7, #3]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d102      	bne.n	8002758 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8002752:	2300      	movs	r3, #0
 8002754:	60fb      	str	r3, [r7, #12]
 8002756:	e010      	b.n	800277a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002758:	78fb      	ldrb	r3, [r7, #3]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d103      	bne.n	8002766 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800275e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002762:	60fb      	str	r3, [r7, #12]
 8002764:	e009      	b.n	800277a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8002766:	78fb      	ldrb	r3, [r7, #3]
 8002768:	2b02      	cmp	r3, #2
 800276a:	d103      	bne.n	8002774 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800276c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002770:	60fb      	str	r3, [r7, #12]
 8002772:	e002      	b.n	800277a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002774:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002778:	60fb      	str	r3, [r7, #12]
  }
  
  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if(Sector > FLASH_SECTOR_11) 
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2b0b      	cmp	r3, #11
 800277e:	d902      	bls.n	8002786 <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	3304      	adds	r3, #4
 8002784:	607b      	str	r3, [r7, #4]
  }  

  /* If the previous operation is completed, proceed to erase the sector */
  FLASH->CR &= CR_PSIZE_MASK;
 8002786:	4b15      	ldr	r3, [pc, #84]	; (80027dc <FLASH_Erase_Sector+0xa0>)
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	4a14      	ldr	r2, [pc, #80]	; (80027dc <FLASH_Erase_Sector+0xa0>)
 800278c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002790:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002792:	4b12      	ldr	r3, [pc, #72]	; (80027dc <FLASH_Erase_Sector+0xa0>)
 8002794:	691a      	ldr	r2, [r3, #16]
 8002796:	4911      	ldr	r1, [pc, #68]	; (80027dc <FLASH_Erase_Sector+0xa0>)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	4313      	orrs	r3, r2
 800279c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800279e:	4b0f      	ldr	r3, [pc, #60]	; (80027dc <FLASH_Erase_Sector+0xa0>)
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	4a0e      	ldr	r2, [pc, #56]	; (80027dc <FLASH_Erase_Sector+0xa0>)
 80027a4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80027a8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80027aa:	4b0c      	ldr	r3, [pc, #48]	; (80027dc <FLASH_Erase_Sector+0xa0>)
 80027ac:	691a      	ldr	r2, [r3, #16]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	00db      	lsls	r3, r3, #3
 80027b2:	4313      	orrs	r3, r2
 80027b4:	4a09      	ldr	r2, [pc, #36]	; (80027dc <FLASH_Erase_Sector+0xa0>)
 80027b6:	f043 0302 	orr.w	r3, r3, #2
 80027ba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80027bc:	4b07      	ldr	r3, [pc, #28]	; (80027dc <FLASH_Erase_Sector+0xa0>)
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	4a06      	ldr	r2, [pc, #24]	; (80027dc <FLASH_Erase_Sector+0xa0>)
 80027c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027c6:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 80027c8:	f3bf 8f4f 	dsb	sy
}
 80027cc:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80027ce:	bf00      	nop
 80027d0:	3714      	adds	r7, #20
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	40023c00 	.word	0x40023c00

080027e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b089      	sub	sp, #36	; 0x24
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80027ea:	2300      	movs	r3, #0
 80027ec:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80027ee:	2300      	movs	r3, #0
 80027f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80027f2:	2300      	movs	r3, #0
 80027f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80027f6:	2300      	movs	r3, #0
 80027f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80027fa:	2300      	movs	r3, #0
 80027fc:	61fb      	str	r3, [r7, #28]
 80027fe:	e175      	b.n	8002aec <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002800:	2201      	movs	r2, #1
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	697a      	ldr	r2, [r7, #20]
 8002810:	4013      	ands	r3, r2
 8002812:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002814:	693a      	ldr	r2, [r7, #16]
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	429a      	cmp	r2, r3
 800281a:	f040 8164 	bne.w	8002ae6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d00b      	beq.n	800283e <HAL_GPIO_Init+0x5e>
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	2b02      	cmp	r3, #2
 800282c:	d007      	beq.n	800283e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002832:	2b11      	cmp	r3, #17
 8002834:	d003      	beq.n	800283e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	2b12      	cmp	r3, #18
 800283c:	d130      	bne.n	80028a0 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	2203      	movs	r2, #3
 800284a:	fa02 f303 	lsl.w	r3, r2, r3
 800284e:	43db      	mvns	r3, r3
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	4013      	ands	r3, r2
 8002854:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	68da      	ldr	r2, [r3, #12]
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	fa02 f303 	lsl.w	r3, r2, r3
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	4313      	orrs	r3, r2
 8002866:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002874:	2201      	movs	r2, #1
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	fa02 f303 	lsl.w	r3, r2, r3
 800287c:	43db      	mvns	r3, r3
 800287e:	69ba      	ldr	r2, [r7, #24]
 8002880:	4013      	ands	r3, r2
 8002882:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	091b      	lsrs	r3, r3, #4
 800288a:	f003 0201 	and.w	r2, r3, #1
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	4313      	orrs	r3, r2
 8002898:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	005b      	lsls	r3, r3, #1
 80028aa:	2203      	movs	r2, #3
 80028ac:	fa02 f303 	lsl.w	r3, r2, r3
 80028b0:	43db      	mvns	r3, r3
 80028b2:	69ba      	ldr	r2, [r7, #24]
 80028b4:	4013      	ands	r3, r2
 80028b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	689a      	ldr	r2, [r3, #8]
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	005b      	lsls	r3, r3, #1
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d003      	beq.n	80028e0 <HAL_GPIO_Init+0x100>
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	2b12      	cmp	r3, #18
 80028de:	d123      	bne.n	8002928 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	08da      	lsrs	r2, r3, #3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	3208      	adds	r2, #8
 80028e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	f003 0307 	and.w	r3, r3, #7
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	220f      	movs	r2, #15
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	43db      	mvns	r3, r3
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	4013      	ands	r3, r2
 8002902:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	691a      	ldr	r2, [r3, #16]
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	f003 0307 	and.w	r3, r3, #7
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	fa02 f303 	lsl.w	r3, r2, r3
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	4313      	orrs	r3, r2
 8002918:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	08da      	lsrs	r2, r3, #3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	3208      	adds	r2, #8
 8002922:	69b9      	ldr	r1, [r7, #24]
 8002924:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	005b      	lsls	r3, r3, #1
 8002932:	2203      	movs	r2, #3
 8002934:	fa02 f303 	lsl.w	r3, r2, r3
 8002938:	43db      	mvns	r3, r3
 800293a:	69ba      	ldr	r2, [r7, #24]
 800293c:	4013      	ands	r3, r2
 800293e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f003 0203 	and.w	r2, r3, #3
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	005b      	lsls	r3, r3, #1
 800294c:	fa02 f303 	lsl.w	r3, r2, r3
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	4313      	orrs	r3, r2
 8002954:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002964:	2b00      	cmp	r3, #0
 8002966:	f000 80be 	beq.w	8002ae6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800296a:	4b66      	ldr	r3, [pc, #408]	; (8002b04 <HAL_GPIO_Init+0x324>)
 800296c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296e:	4a65      	ldr	r2, [pc, #404]	; (8002b04 <HAL_GPIO_Init+0x324>)
 8002970:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002974:	6453      	str	r3, [r2, #68]	; 0x44
 8002976:	4b63      	ldr	r3, [pc, #396]	; (8002b04 <HAL_GPIO_Init+0x324>)
 8002978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800297a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800297e:	60fb      	str	r3, [r7, #12]
 8002980:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002982:	4a61      	ldr	r2, [pc, #388]	; (8002b08 <HAL_GPIO_Init+0x328>)
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	089b      	lsrs	r3, r3, #2
 8002988:	3302      	adds	r3, #2
 800298a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800298e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	f003 0303 	and.w	r3, r3, #3
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	220f      	movs	r2, #15
 800299a:	fa02 f303 	lsl.w	r3, r2, r3
 800299e:	43db      	mvns	r3, r3
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	4013      	ands	r3, r2
 80029a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a58      	ldr	r2, [pc, #352]	; (8002b0c <HAL_GPIO_Init+0x32c>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d037      	beq.n	8002a1e <HAL_GPIO_Init+0x23e>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a57      	ldr	r2, [pc, #348]	; (8002b10 <HAL_GPIO_Init+0x330>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d031      	beq.n	8002a1a <HAL_GPIO_Init+0x23a>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a56      	ldr	r2, [pc, #344]	; (8002b14 <HAL_GPIO_Init+0x334>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d02b      	beq.n	8002a16 <HAL_GPIO_Init+0x236>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a55      	ldr	r2, [pc, #340]	; (8002b18 <HAL_GPIO_Init+0x338>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d025      	beq.n	8002a12 <HAL_GPIO_Init+0x232>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a54      	ldr	r2, [pc, #336]	; (8002b1c <HAL_GPIO_Init+0x33c>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d01f      	beq.n	8002a0e <HAL_GPIO_Init+0x22e>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a53      	ldr	r2, [pc, #332]	; (8002b20 <HAL_GPIO_Init+0x340>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d019      	beq.n	8002a0a <HAL_GPIO_Init+0x22a>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a52      	ldr	r2, [pc, #328]	; (8002b24 <HAL_GPIO_Init+0x344>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d013      	beq.n	8002a06 <HAL_GPIO_Init+0x226>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a51      	ldr	r2, [pc, #324]	; (8002b28 <HAL_GPIO_Init+0x348>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d00d      	beq.n	8002a02 <HAL_GPIO_Init+0x222>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a50      	ldr	r2, [pc, #320]	; (8002b2c <HAL_GPIO_Init+0x34c>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d007      	beq.n	80029fe <HAL_GPIO_Init+0x21e>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a4f      	ldr	r2, [pc, #316]	; (8002b30 <HAL_GPIO_Init+0x350>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d101      	bne.n	80029fa <HAL_GPIO_Init+0x21a>
 80029f6:	2309      	movs	r3, #9
 80029f8:	e012      	b.n	8002a20 <HAL_GPIO_Init+0x240>
 80029fa:	230a      	movs	r3, #10
 80029fc:	e010      	b.n	8002a20 <HAL_GPIO_Init+0x240>
 80029fe:	2308      	movs	r3, #8
 8002a00:	e00e      	b.n	8002a20 <HAL_GPIO_Init+0x240>
 8002a02:	2307      	movs	r3, #7
 8002a04:	e00c      	b.n	8002a20 <HAL_GPIO_Init+0x240>
 8002a06:	2306      	movs	r3, #6
 8002a08:	e00a      	b.n	8002a20 <HAL_GPIO_Init+0x240>
 8002a0a:	2305      	movs	r3, #5
 8002a0c:	e008      	b.n	8002a20 <HAL_GPIO_Init+0x240>
 8002a0e:	2304      	movs	r3, #4
 8002a10:	e006      	b.n	8002a20 <HAL_GPIO_Init+0x240>
 8002a12:	2303      	movs	r3, #3
 8002a14:	e004      	b.n	8002a20 <HAL_GPIO_Init+0x240>
 8002a16:	2302      	movs	r3, #2
 8002a18:	e002      	b.n	8002a20 <HAL_GPIO_Init+0x240>
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e000      	b.n	8002a20 <HAL_GPIO_Init+0x240>
 8002a1e:	2300      	movs	r3, #0
 8002a20:	69fa      	ldr	r2, [r7, #28]
 8002a22:	f002 0203 	and.w	r2, r2, #3
 8002a26:	0092      	lsls	r2, r2, #2
 8002a28:	4093      	lsls	r3, r2
 8002a2a:	69ba      	ldr	r2, [r7, #24]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002a30:	4935      	ldr	r1, [pc, #212]	; (8002b08 <HAL_GPIO_Init+0x328>)
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	089b      	lsrs	r3, r3, #2
 8002a36:	3302      	adds	r3, #2
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a3e:	4b3d      	ldr	r3, [pc, #244]	; (8002b34 <HAL_GPIO_Init+0x354>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	43db      	mvns	r3, r3
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d003      	beq.n	8002a62 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002a5a:	69ba      	ldr	r2, [r7, #24]
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a62:	4a34      	ldr	r2, [pc, #208]	; (8002b34 <HAL_GPIO_Init+0x354>)
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a68:	4b32      	ldr	r3, [pc, #200]	; (8002b34 <HAL_GPIO_Init+0x354>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	43db      	mvns	r3, r3
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	4013      	ands	r3, r2
 8002a76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d003      	beq.n	8002a8c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a8c:	4a29      	ldr	r2, [pc, #164]	; (8002b34 <HAL_GPIO_Init+0x354>)
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a92:	4b28      	ldr	r3, [pc, #160]	; (8002b34 <HAL_GPIO_Init+0x354>)
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	43db      	mvns	r3, r3
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d003      	beq.n	8002ab6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002aae:	69ba      	ldr	r2, [r7, #24]
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ab6:	4a1f      	ldr	r2, [pc, #124]	; (8002b34 <HAL_GPIO_Init+0x354>)
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002abc:	4b1d      	ldr	r3, [pc, #116]	; (8002b34 <HAL_GPIO_Init+0x354>)
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	43db      	mvns	r3, r3
 8002ac6:	69ba      	ldr	r2, [r7, #24]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d003      	beq.n	8002ae0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ae0:	4a14      	ldr	r2, [pc, #80]	; (8002b34 <HAL_GPIO_Init+0x354>)
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	3301      	adds	r3, #1
 8002aea:	61fb      	str	r3, [r7, #28]
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	2b0f      	cmp	r3, #15
 8002af0:	f67f ae86 	bls.w	8002800 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002af4:	bf00      	nop
 8002af6:	bf00      	nop
 8002af8:	3724      	adds	r7, #36	; 0x24
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	40023800 	.word	0x40023800
 8002b08:	40013800 	.word	0x40013800
 8002b0c:	40020000 	.word	0x40020000
 8002b10:	40020400 	.word	0x40020400
 8002b14:	40020800 	.word	0x40020800
 8002b18:	40020c00 	.word	0x40020c00
 8002b1c:	40021000 	.word	0x40021000
 8002b20:	40021400 	.word	0x40021400
 8002b24:	40021800 	.word	0x40021800
 8002b28:	40021c00 	.word	0x40021c00
 8002b2c:	40022000 	.word	0x40022000
 8002b30:	40022400 	.word	0x40022400
 8002b34:	40013c00 	.word	0x40013c00

08002b38 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b087      	sub	sp, #28
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8002b42:	2300      	movs	r3, #0
 8002b44:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8002b46:	2300      	movs	r3, #0
 8002b48:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002b4e:	2300      	movs	r3, #0
 8002b50:	617b      	str	r3, [r7, #20]
 8002b52:	e0d9      	b.n	8002d08 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002b54:	2201      	movs	r2, #1
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002b5e:	683a      	ldr	r2, [r7, #0]
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	4013      	ands	r3, r2
 8002b64:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	f040 80c9 	bne.w	8002d02 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8002b70:	4a6b      	ldr	r2, [pc, #428]	; (8002d20 <HAL_GPIO_DeInit+0x1e8>)
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	089b      	lsrs	r3, r3, #2
 8002b76:	3302      	adds	r3, #2
 8002b78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b7c:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	f003 0303 	and.w	r3, r3, #3
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	220f      	movs	r2, #15
 8002b88:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8c:	68ba      	ldr	r2, [r7, #8]
 8002b8e:	4013      	ands	r3, r2
 8002b90:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a63      	ldr	r2, [pc, #396]	; (8002d24 <HAL_GPIO_DeInit+0x1ec>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d037      	beq.n	8002c0a <HAL_GPIO_DeInit+0xd2>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a62      	ldr	r2, [pc, #392]	; (8002d28 <HAL_GPIO_DeInit+0x1f0>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d031      	beq.n	8002c06 <HAL_GPIO_DeInit+0xce>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4a61      	ldr	r2, [pc, #388]	; (8002d2c <HAL_GPIO_DeInit+0x1f4>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d02b      	beq.n	8002c02 <HAL_GPIO_DeInit+0xca>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a60      	ldr	r2, [pc, #384]	; (8002d30 <HAL_GPIO_DeInit+0x1f8>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d025      	beq.n	8002bfe <HAL_GPIO_DeInit+0xc6>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a5f      	ldr	r2, [pc, #380]	; (8002d34 <HAL_GPIO_DeInit+0x1fc>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d01f      	beq.n	8002bfa <HAL_GPIO_DeInit+0xc2>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a5e      	ldr	r2, [pc, #376]	; (8002d38 <HAL_GPIO_DeInit+0x200>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d019      	beq.n	8002bf6 <HAL_GPIO_DeInit+0xbe>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a5d      	ldr	r2, [pc, #372]	; (8002d3c <HAL_GPIO_DeInit+0x204>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d013      	beq.n	8002bf2 <HAL_GPIO_DeInit+0xba>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a5c      	ldr	r2, [pc, #368]	; (8002d40 <HAL_GPIO_DeInit+0x208>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d00d      	beq.n	8002bee <HAL_GPIO_DeInit+0xb6>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a5b      	ldr	r2, [pc, #364]	; (8002d44 <HAL_GPIO_DeInit+0x20c>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d007      	beq.n	8002bea <HAL_GPIO_DeInit+0xb2>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a5a      	ldr	r2, [pc, #360]	; (8002d48 <HAL_GPIO_DeInit+0x210>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d101      	bne.n	8002be6 <HAL_GPIO_DeInit+0xae>
 8002be2:	2309      	movs	r3, #9
 8002be4:	e012      	b.n	8002c0c <HAL_GPIO_DeInit+0xd4>
 8002be6:	230a      	movs	r3, #10
 8002be8:	e010      	b.n	8002c0c <HAL_GPIO_DeInit+0xd4>
 8002bea:	2308      	movs	r3, #8
 8002bec:	e00e      	b.n	8002c0c <HAL_GPIO_DeInit+0xd4>
 8002bee:	2307      	movs	r3, #7
 8002bf0:	e00c      	b.n	8002c0c <HAL_GPIO_DeInit+0xd4>
 8002bf2:	2306      	movs	r3, #6
 8002bf4:	e00a      	b.n	8002c0c <HAL_GPIO_DeInit+0xd4>
 8002bf6:	2305      	movs	r3, #5
 8002bf8:	e008      	b.n	8002c0c <HAL_GPIO_DeInit+0xd4>
 8002bfa:	2304      	movs	r3, #4
 8002bfc:	e006      	b.n	8002c0c <HAL_GPIO_DeInit+0xd4>
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e004      	b.n	8002c0c <HAL_GPIO_DeInit+0xd4>
 8002c02:	2302      	movs	r3, #2
 8002c04:	e002      	b.n	8002c0c <HAL_GPIO_DeInit+0xd4>
 8002c06:	2301      	movs	r3, #1
 8002c08:	e000      	b.n	8002c0c <HAL_GPIO_DeInit+0xd4>
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	697a      	ldr	r2, [r7, #20]
 8002c0e:	f002 0203 	and.w	r2, r2, #3
 8002c12:	0092      	lsls	r2, r2, #2
 8002c14:	4093      	lsls	r3, r2
 8002c16:	68ba      	ldr	r2, [r7, #8]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d132      	bne.n	8002c82 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002c1c:	4b4b      	ldr	r3, [pc, #300]	; (8002d4c <HAL_GPIO_DeInit+0x214>)
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	43db      	mvns	r3, r3
 8002c24:	4949      	ldr	r1, [pc, #292]	; (8002d4c <HAL_GPIO_DeInit+0x214>)
 8002c26:	4013      	ands	r3, r2
 8002c28:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002c2a:	4b48      	ldr	r3, [pc, #288]	; (8002d4c <HAL_GPIO_DeInit+0x214>)
 8002c2c:	685a      	ldr	r2, [r3, #4]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	43db      	mvns	r3, r3
 8002c32:	4946      	ldr	r1, [pc, #280]	; (8002d4c <HAL_GPIO_DeInit+0x214>)
 8002c34:	4013      	ands	r3, r2
 8002c36:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002c38:	4b44      	ldr	r3, [pc, #272]	; (8002d4c <HAL_GPIO_DeInit+0x214>)
 8002c3a:	689a      	ldr	r2, [r3, #8]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	43db      	mvns	r3, r3
 8002c40:	4942      	ldr	r1, [pc, #264]	; (8002d4c <HAL_GPIO_DeInit+0x214>)
 8002c42:	4013      	ands	r3, r2
 8002c44:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002c46:	4b41      	ldr	r3, [pc, #260]	; (8002d4c <HAL_GPIO_DeInit+0x214>)
 8002c48:	68da      	ldr	r2, [r3, #12]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	43db      	mvns	r3, r3
 8002c4e:	493f      	ldr	r1, [pc, #252]	; (8002d4c <HAL_GPIO_DeInit+0x214>)
 8002c50:	4013      	ands	r3, r2
 8002c52:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	f003 0303 	and.w	r3, r3, #3
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	220f      	movs	r2, #15
 8002c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c62:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8002c64:	4a2e      	ldr	r2, [pc, #184]	; (8002d20 <HAL_GPIO_DeInit+0x1e8>)
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	089b      	lsrs	r3, r3, #2
 8002c6a:	3302      	adds	r3, #2
 8002c6c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	43da      	mvns	r2, r3
 8002c74:	482a      	ldr	r0, [pc, #168]	; (8002d20 <HAL_GPIO_DeInit+0x1e8>)
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	089b      	lsrs	r3, r3, #2
 8002c7a:	400a      	ands	r2, r1
 8002c7c:	3302      	adds	r3, #2
 8002c7e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	005b      	lsls	r3, r3, #1
 8002c8a:	2103      	movs	r1, #3
 8002c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c90:	43db      	mvns	r3, r3
 8002c92:	401a      	ands	r2, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	08da      	lsrs	r2, r3, #3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	3208      	adds	r2, #8
 8002ca0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	f003 0307 	and.w	r3, r3, #7
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	220f      	movs	r2, #15
 8002cae:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb2:	43db      	mvns	r3, r3
 8002cb4:	697a      	ldr	r2, [r7, #20]
 8002cb6:	08d2      	lsrs	r2, r2, #3
 8002cb8:	4019      	ands	r1, r3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	3208      	adds	r2, #8
 8002cbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	68da      	ldr	r2, [r3, #12]
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	005b      	lsls	r3, r3, #1
 8002cca:	2103      	movs	r1, #3
 8002ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8002cd0:	43db      	mvns	r3, r3
 8002cd2:	401a      	ands	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685a      	ldr	r2, [r3, #4]
 8002cdc:	2101      	movs	r1, #1
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce4:	43db      	mvns	r3, r3
 8002ce6:	401a      	ands	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	689a      	ldr	r2, [r3, #8]
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	005b      	lsls	r3, r3, #1
 8002cf4:	2103      	movs	r1, #3
 8002cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cfa:	43db      	mvns	r3, r3
 8002cfc:	401a      	ands	r2, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	3301      	adds	r3, #1
 8002d06:	617b      	str	r3, [r7, #20]
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	2b0f      	cmp	r3, #15
 8002d0c:	f67f af22 	bls.w	8002b54 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002d10:	bf00      	nop
 8002d12:	bf00      	nop
 8002d14:	371c      	adds	r7, #28
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	40013800 	.word	0x40013800
 8002d24:	40020000 	.word	0x40020000
 8002d28:	40020400 	.word	0x40020400
 8002d2c:	40020800 	.word	0x40020800
 8002d30:	40020c00 	.word	0x40020c00
 8002d34:	40021000 	.word	0x40021000
 8002d38:	40021400 	.word	0x40021400
 8002d3c:	40021800 	.word	0x40021800
 8002d40:	40021c00 	.word	0x40021c00
 8002d44:	40022000 	.word	0x40022000
 8002d48:	40022400 	.word	0x40022400
 8002d4c:	40013c00 	.word	0x40013c00

08002d50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b085      	sub	sp, #20
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	460b      	mov	r3, r1
 8002d5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	691a      	ldr	r2, [r3, #16]
 8002d60:	887b      	ldrh	r3, [r7, #2]
 8002d62:	4013      	ands	r3, r2
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d002      	beq.n	8002d6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	73fb      	strb	r3, [r7, #15]
 8002d6c:	e001      	b.n	8002d72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3714      	adds	r7, #20
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	460b      	mov	r3, r1
 8002d8a:	807b      	strh	r3, [r7, #2]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d90:	787b      	ldrb	r3, [r7, #1]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d003      	beq.n	8002d9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d96:	887a      	ldrh	r2, [r7, #2]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002d9c:	e003      	b.n	8002da6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002d9e:	887b      	ldrh	r3, [r7, #2]
 8002da0:	041a      	lsls	r2, r3, #16
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	619a      	str	r2, [r3, #24]
}
 8002da6:	bf00      	nop
 8002da8:	370c      	adds	r7, #12
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr

08002db2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002db2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002db4:	b08f      	sub	sp, #60	; 0x3c
 8002db6:	af0a      	add	r7, sp, #40	; 0x28
 8002db8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d101      	bne.n	8002dc4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e116      	b.n	8002ff2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d106      	bne.n	8002de4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f008 ffc0 	bl	800bd64 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2203      	movs	r2, #3
 8002de8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d102      	bne.n	8002dfe <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f005 fa43 	bl	800828e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	603b      	str	r3, [r7, #0]
 8002e0e:	687e      	ldr	r6, [r7, #4]
 8002e10:	466d      	mov	r5, sp
 8002e12:	f106 0410 	add.w	r4, r6, #16
 8002e16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e1e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e22:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e26:	1d33      	adds	r3, r6, #4
 8002e28:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e2a:	6838      	ldr	r0, [r7, #0]
 8002e2c:	f005 f924 	bl	8008078 <USB_CoreInit>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d005      	beq.n	8002e42 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2202      	movs	r2, #2
 8002e3a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e0d7      	b.n	8002ff2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2100      	movs	r1, #0
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f005 fa31 	bl	80082b0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e4e:	2300      	movs	r3, #0
 8002e50:	73fb      	strb	r3, [r7, #15]
 8002e52:	e04a      	b.n	8002eea <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002e54:	7bfa      	ldrb	r2, [r7, #15]
 8002e56:	6879      	ldr	r1, [r7, #4]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	00db      	lsls	r3, r3, #3
 8002e5c:	1a9b      	subs	r3, r3, r2
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	440b      	add	r3, r1
 8002e62:	333d      	adds	r3, #61	; 0x3d
 8002e64:	2201      	movs	r2, #1
 8002e66:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002e68:	7bfa      	ldrb	r2, [r7, #15]
 8002e6a:	6879      	ldr	r1, [r7, #4]
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	00db      	lsls	r3, r3, #3
 8002e70:	1a9b      	subs	r3, r3, r2
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	440b      	add	r3, r1
 8002e76:	333c      	adds	r3, #60	; 0x3c
 8002e78:	7bfa      	ldrb	r2, [r7, #15]
 8002e7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002e7c:	7bfa      	ldrb	r2, [r7, #15]
 8002e7e:	7bfb      	ldrb	r3, [r7, #15]
 8002e80:	b298      	uxth	r0, r3
 8002e82:	6879      	ldr	r1, [r7, #4]
 8002e84:	4613      	mov	r3, r2
 8002e86:	00db      	lsls	r3, r3, #3
 8002e88:	1a9b      	subs	r3, r3, r2
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	440b      	add	r3, r1
 8002e8e:	3342      	adds	r3, #66	; 0x42
 8002e90:	4602      	mov	r2, r0
 8002e92:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002e94:	7bfa      	ldrb	r2, [r7, #15]
 8002e96:	6879      	ldr	r1, [r7, #4]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	1a9b      	subs	r3, r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	440b      	add	r3, r1
 8002ea2:	333f      	adds	r3, #63	; 0x3f
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002ea8:	7bfa      	ldrb	r2, [r7, #15]
 8002eaa:	6879      	ldr	r1, [r7, #4]
 8002eac:	4613      	mov	r3, r2
 8002eae:	00db      	lsls	r3, r3, #3
 8002eb0:	1a9b      	subs	r3, r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	440b      	add	r3, r1
 8002eb6:	3344      	adds	r3, #68	; 0x44
 8002eb8:	2200      	movs	r2, #0
 8002eba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002ebc:	7bfa      	ldrb	r2, [r7, #15]
 8002ebe:	6879      	ldr	r1, [r7, #4]
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	00db      	lsls	r3, r3, #3
 8002ec4:	1a9b      	subs	r3, r3, r2
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	440b      	add	r3, r1
 8002eca:	3348      	adds	r3, #72	; 0x48
 8002ecc:	2200      	movs	r2, #0
 8002ece:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ed0:	7bfa      	ldrb	r2, [r7, #15]
 8002ed2:	6879      	ldr	r1, [r7, #4]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	00db      	lsls	r3, r3, #3
 8002ed8:	1a9b      	subs	r3, r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	440b      	add	r3, r1
 8002ede:	3350      	adds	r3, #80	; 0x50
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ee4:	7bfb      	ldrb	r3, [r7, #15]
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	73fb      	strb	r3, [r7, #15]
 8002eea:	7bfa      	ldrb	r2, [r7, #15]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d3af      	bcc.n	8002e54 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	73fb      	strb	r3, [r7, #15]
 8002ef8:	e044      	b.n	8002f84 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002efa:	7bfa      	ldrb	r2, [r7, #15]
 8002efc:	6879      	ldr	r1, [r7, #4]
 8002efe:	4613      	mov	r3, r2
 8002f00:	00db      	lsls	r3, r3, #3
 8002f02:	1a9b      	subs	r3, r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	440b      	add	r3, r1
 8002f08:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002f10:	7bfa      	ldrb	r2, [r7, #15]
 8002f12:	6879      	ldr	r1, [r7, #4]
 8002f14:	4613      	mov	r3, r2
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	1a9b      	subs	r3, r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	440b      	add	r3, r1
 8002f1e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002f22:	7bfa      	ldrb	r2, [r7, #15]
 8002f24:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002f26:	7bfa      	ldrb	r2, [r7, #15]
 8002f28:	6879      	ldr	r1, [r7, #4]
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	00db      	lsls	r3, r3, #3
 8002f2e:	1a9b      	subs	r3, r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	440b      	add	r3, r1
 8002f34:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002f38:	2200      	movs	r2, #0
 8002f3a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002f3c:	7bfa      	ldrb	r2, [r7, #15]
 8002f3e:	6879      	ldr	r1, [r7, #4]
 8002f40:	4613      	mov	r3, r2
 8002f42:	00db      	lsls	r3, r3, #3
 8002f44:	1a9b      	subs	r3, r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	440b      	add	r3, r1
 8002f4a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002f4e:	2200      	movs	r2, #0
 8002f50:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002f52:	7bfa      	ldrb	r2, [r7, #15]
 8002f54:	6879      	ldr	r1, [r7, #4]
 8002f56:	4613      	mov	r3, r2
 8002f58:	00db      	lsls	r3, r3, #3
 8002f5a:	1a9b      	subs	r3, r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	440b      	add	r3, r1
 8002f60:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002f64:	2200      	movs	r2, #0
 8002f66:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002f68:	7bfa      	ldrb	r2, [r7, #15]
 8002f6a:	6879      	ldr	r1, [r7, #4]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	00db      	lsls	r3, r3, #3
 8002f70:	1a9b      	subs	r3, r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	440b      	add	r3, r1
 8002f76:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f7e:	7bfb      	ldrb	r3, [r7, #15]
 8002f80:	3301      	adds	r3, #1
 8002f82:	73fb      	strb	r3, [r7, #15]
 8002f84:	7bfa      	ldrb	r2, [r7, #15]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d3b5      	bcc.n	8002efa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	603b      	str	r3, [r7, #0]
 8002f94:	687e      	ldr	r6, [r7, #4]
 8002f96:	466d      	mov	r5, sp
 8002f98:	f106 0410 	add.w	r4, r6, #16
 8002f9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fa0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fa2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fa4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002fa8:	e885 0003 	stmia.w	r5, {r0, r1}
 8002fac:	1d33      	adds	r3, r6, #4
 8002fae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fb0:	6838      	ldr	r0, [r7, #0]
 8002fb2:	f005 f9a7 	bl	8008304 <USB_DevInit>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d005      	beq.n	8002fc8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2202      	movs	r2, #2
 8002fc0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e014      	b.n	8002ff2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d102      	bne.n	8002fe6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f001 f881 	bl	80040e8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4618      	mov	r0, r3
 8002fec:	f006 f9ff 	bl	80093ee <USB_DevDisconnect>

  return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3714      	adds	r7, #20
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ffa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002ffa:	b580      	push	{r7, lr}
 8002ffc:	b082      	sub	sp, #8
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003008:	2b01      	cmp	r3, #1
 800300a:	d101      	bne.n	8003010 <HAL_PCD_Start+0x16>
 800300c:	2302      	movs	r3, #2
 800300e:	e012      	b.n	8003036 <HAL_PCD_Start+0x3c>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_ENABLE(hpcd);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4618      	mov	r0, r3
 800301e:	f005 f925 	bl	800826c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4618      	mov	r0, r3
 8003028:	f006 f9c0 	bl	80093ac <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	3708      	adds	r7, #8
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}

0800303e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800303e:	b590      	push	{r4, r7, lr}
 8003040:	b08d      	sub	sp, #52	; 0x34
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800304c:	6a3b      	ldr	r3, [r7, #32]
 800304e:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4618      	mov	r0, r3
 8003056:	f006 fa7e 	bl	8009556 <USB_GetMode>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	f040 83ca 	bne.w	80037f6 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4618      	mov	r0, r3
 8003068:	f006 f9e2 	bl	8009430 <USB_ReadInterrupts>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	f000 83c0 	beq.w	80037f4 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4618      	mov	r0, r3
 800307a:	f006 f9d9 	bl	8009430 <USB_ReadInterrupts>
 800307e:	4603      	mov	r3, r0
 8003080:	f003 0302 	and.w	r3, r3, #2
 8003084:	2b02      	cmp	r3, #2
 8003086:	d107      	bne.n	8003098 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	695a      	ldr	r2, [r3, #20]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f002 0202 	and.w	r2, r2, #2
 8003096:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4618      	mov	r0, r3
 800309e:	f006 f9c7 	bl	8009430 <USB_ReadInterrupts>
 80030a2:	4603      	mov	r3, r0
 80030a4:	f003 0310 	and.w	r3, r3, #16
 80030a8:	2b10      	cmp	r3, #16
 80030aa:	d161      	bne.n	8003170 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	699a      	ldr	r2, [r3, #24]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f022 0210 	bic.w	r2, r2, #16
 80030ba:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80030bc:	6a3b      	ldr	r3, [r7, #32]
 80030be:	6a1b      	ldr	r3, [r3, #32]
 80030c0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	f003 020f 	and.w	r2, r3, #15
 80030c8:	4613      	mov	r3, r2
 80030ca:	00db      	lsls	r3, r3, #3
 80030cc:	1a9b      	subs	r3, r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	4413      	add	r3, r2
 80030d8:	3304      	adds	r3, #4
 80030da:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	0c5b      	lsrs	r3, r3, #17
 80030e0:	f003 030f 	and.w	r3, r3, #15
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d124      	bne.n	8003132 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80030e8:	69ba      	ldr	r2, [r7, #24]
 80030ea:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80030ee:	4013      	ands	r3, r2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d035      	beq.n	8003160 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	091b      	lsrs	r3, r3, #4
 80030fc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80030fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003102:	b29b      	uxth	r3, r3
 8003104:	461a      	mov	r2, r3
 8003106:	6a38      	ldr	r0, [r7, #32]
 8003108:	f006 f82d 	bl	8009166 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	68da      	ldr	r2, [r3, #12]
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	091b      	lsrs	r3, r3, #4
 8003114:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003118:	441a      	add	r2, r3
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	699a      	ldr	r2, [r3, #24]
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	091b      	lsrs	r3, r3, #4
 8003126:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800312a:	441a      	add	r2, r3
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	619a      	str	r2, [r3, #24]
 8003130:	e016      	b.n	8003160 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	0c5b      	lsrs	r3, r3, #17
 8003136:	f003 030f 	and.w	r3, r3, #15
 800313a:	2b06      	cmp	r3, #6
 800313c:	d110      	bne.n	8003160 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003144:	2208      	movs	r2, #8
 8003146:	4619      	mov	r1, r3
 8003148:	6a38      	ldr	r0, [r7, #32]
 800314a:	f006 f80c 	bl	8009166 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	699a      	ldr	r2, [r3, #24]
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	091b      	lsrs	r3, r3, #4
 8003156:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800315a:	441a      	add	r2, r3
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	699a      	ldr	r2, [r3, #24]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f042 0210 	orr.w	r2, r2, #16
 800316e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4618      	mov	r0, r3
 8003176:	f006 f95b 	bl	8009430 <USB_ReadInterrupts>
 800317a:	4603      	mov	r3, r0
 800317c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003180:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003184:	d16e      	bne.n	8003264 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003186:	2300      	movs	r3, #0
 8003188:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4618      	mov	r0, r3
 8003190:	f006 f961 	bl	8009456 <USB_ReadDevAllOutEpInterrupt>
 8003194:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003196:	e062      	b.n	800325e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800319a:	f003 0301 	and.w	r3, r3, #1
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d057      	beq.n	8003252 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031a8:	b2d2      	uxtb	r2, r2
 80031aa:	4611      	mov	r1, r2
 80031ac:	4618      	mov	r0, r3
 80031ae:	f006 f986 	bl	80094be <USB_ReadDevOutEPInterrupt>
 80031b2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00c      	beq.n	80031d8 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80031be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c0:	015a      	lsls	r2, r3, #5
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	4413      	add	r3, r2
 80031c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031ca:	461a      	mov	r2, r3
 80031cc:	2301      	movs	r3, #1
 80031ce:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80031d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f000 fdde 	bl	8003d94 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	f003 0308 	and.w	r3, r3, #8
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d00c      	beq.n	80031fc <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80031e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e4:	015a      	lsls	r2, r3, #5
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	4413      	add	r3, r2
 80031ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031ee:	461a      	mov	r2, r3
 80031f0:	2308      	movs	r3, #8
 80031f2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80031f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 fed8 	bl	8003fac <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	f003 0310 	and.w	r3, r3, #16
 8003202:	2b00      	cmp	r3, #0
 8003204:	d008      	beq.n	8003218 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003208:	015a      	lsls	r2, r3, #5
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	4413      	add	r3, r2
 800320e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003212:	461a      	mov	r2, r3
 8003214:	2310      	movs	r3, #16
 8003216:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	f003 0320 	and.w	r3, r3, #32
 800321e:	2b00      	cmp	r3, #0
 8003220:	d008      	beq.n	8003234 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003224:	015a      	lsls	r2, r3, #5
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	4413      	add	r3, r2
 800322a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800322e:	461a      	mov	r2, r3
 8003230:	2320      	movs	r3, #32
 8003232:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d009      	beq.n	8003252 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800323e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003240:	015a      	lsls	r2, r3, #5
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	4413      	add	r3, r2
 8003246:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800324a:	461a      	mov	r2, r3
 800324c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003250:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003254:	3301      	adds	r3, #1
 8003256:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800325a:	085b      	lsrs	r3, r3, #1
 800325c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800325e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003260:	2b00      	cmp	r3, #0
 8003262:	d199      	bne.n	8003198 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4618      	mov	r0, r3
 800326a:	f006 f8e1 	bl	8009430 <USB_ReadInterrupts>
 800326e:	4603      	mov	r3, r0
 8003270:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003274:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003278:	f040 80c0 	bne.w	80033fc <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4618      	mov	r0, r3
 8003282:	f006 f902 	bl	800948a <USB_ReadDevAllInEpInterrupt>
 8003286:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003288:	2300      	movs	r3, #0
 800328a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800328c:	e0b2      	b.n	80033f4 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800328e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003290:	f003 0301 	and.w	r3, r3, #1
 8003294:	2b00      	cmp	r3, #0
 8003296:	f000 80a7 	beq.w	80033e8 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032a0:	b2d2      	uxtb	r2, r2
 80032a2:	4611      	mov	r1, r2
 80032a4:	4618      	mov	r0, r3
 80032a6:	f006 f928 	bl	80094fa <USB_ReadDevInEPInterrupt>
 80032aa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d057      	beq.n	8003366 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80032b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b8:	f003 030f 	and.w	r3, r3, #15
 80032bc:	2201      	movs	r2, #1
 80032be:	fa02 f303 	lsl.w	r3, r2, r3
 80032c2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	43db      	mvns	r3, r3
 80032d0:	69f9      	ldr	r1, [r7, #28]
 80032d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80032d6:	4013      	ands	r3, r2
 80032d8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80032da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032dc:	015a      	lsls	r2, r3, #5
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	4413      	add	r3, r2
 80032e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032e6:	461a      	mov	r2, r3
 80032e8:	2301      	movs	r3, #1
 80032ea:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	691b      	ldr	r3, [r3, #16]
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d132      	bne.n	800335a <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80032f4:	6879      	ldr	r1, [r7, #4]
 80032f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032f8:	4613      	mov	r3, r2
 80032fa:	00db      	lsls	r3, r3, #3
 80032fc:	1a9b      	subs	r3, r3, r2
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	440b      	add	r3, r1
 8003302:	3348      	adds	r3, #72	; 0x48
 8003304:	6819      	ldr	r1, [r3, #0]
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800330a:	4613      	mov	r3, r2
 800330c:	00db      	lsls	r3, r3, #3
 800330e:	1a9b      	subs	r3, r3, r2
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	4403      	add	r3, r0
 8003314:	3344      	adds	r3, #68	; 0x44
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4419      	add	r1, r3
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800331e:	4613      	mov	r3, r2
 8003320:	00db      	lsls	r3, r3, #3
 8003322:	1a9b      	subs	r3, r3, r2
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	4403      	add	r3, r0
 8003328:	3348      	adds	r3, #72	; 0x48
 800332a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800332c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332e:	2b00      	cmp	r3, #0
 8003330:	d113      	bne.n	800335a <HAL_PCD_IRQHandler+0x31c>
 8003332:	6879      	ldr	r1, [r7, #4]
 8003334:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003336:	4613      	mov	r3, r2
 8003338:	00db      	lsls	r3, r3, #3
 800333a:	1a9b      	subs	r3, r3, r2
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	440b      	add	r3, r1
 8003340:	3350      	adds	r3, #80	; 0x50
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d108      	bne.n	800335a <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6818      	ldr	r0, [r3, #0]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003352:	461a      	mov	r2, r3
 8003354:	2101      	movs	r1, #1
 8003356:	f006 f931 	bl	80095bc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800335a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335c:	b2db      	uxtb	r3, r3
 800335e:	4619      	mov	r1, r3
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f008 fd90 	bl	800be86 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	f003 0308 	and.w	r3, r3, #8
 800336c:	2b00      	cmp	r3, #0
 800336e:	d008      	beq.n	8003382 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003372:	015a      	lsls	r2, r3, #5
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	4413      	add	r3, r2
 8003378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800337c:	461a      	mov	r2, r3
 800337e:	2308      	movs	r3, #8
 8003380:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	f003 0310 	and.w	r3, r3, #16
 8003388:	2b00      	cmp	r3, #0
 800338a:	d008      	beq.n	800339e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800338c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338e:	015a      	lsls	r2, r3, #5
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	4413      	add	r3, r2
 8003394:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003398:	461a      	mov	r2, r3
 800339a:	2310      	movs	r3, #16
 800339c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d008      	beq.n	80033ba <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80033a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033aa:	015a      	lsls	r2, r3, #5
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	4413      	add	r3, r2
 80033b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033b4:	461a      	mov	r2, r3
 80033b6:	2340      	movs	r3, #64	; 0x40
 80033b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	f003 0302 	and.w	r3, r3, #2
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d008      	beq.n	80033d6 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80033c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c6:	015a      	lsls	r2, r3, #5
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	4413      	add	r3, r2
 80033cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033d0:	461a      	mov	r2, r3
 80033d2:	2302      	movs	r3, #2
 80033d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d003      	beq.n	80033e8 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80033e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f000 fc48 	bl	8003c78 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80033e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ea:	3301      	adds	r3, #1
 80033ec:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80033ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f0:	085b      	lsrs	r3, r3, #1
 80033f2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80033f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	f47f af49 	bne.w	800328e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4618      	mov	r0, r3
 8003402:	f006 f815 	bl	8009430 <USB_ReadInterrupts>
 8003406:	4603      	mov	r3, r0
 8003408:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800340c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003410:	d122      	bne.n	8003458 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	69fa      	ldr	r2, [r7, #28]
 800341c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003420:	f023 0301 	bic.w	r3, r3, #1
 8003424:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800342c:	2b01      	cmp	r3, #1
 800342e:	d108      	bne.n	8003442 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003438:	2100      	movs	r1, #0
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f008 ff72 	bl	800c324 <HAL_PCDEx_LPM_Callback>
 8003440:	e002      	b.n	8003448 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f008 fd96 	bl	800bf74 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	695a      	ldr	r2, [r3, #20]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003456:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4618      	mov	r0, r3
 800345e:	f005 ffe7 	bl	8009430 <USB_ReadInterrupts>
 8003462:	4603      	mov	r3, r0
 8003464:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003468:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800346c:	d112      	bne.n	8003494 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	2b01      	cmp	r3, #1
 800347c:	d102      	bne.n	8003484 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f008 fd52 	bl	800bf28 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	695a      	ldr	r2, [r3, #20]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003492:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4618      	mov	r0, r3
 800349a:	f005 ffc9 	bl	8009430 <USB_ReadInterrupts>
 800349e:	4603      	mov	r3, r0
 80034a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034a8:	d121      	bne.n	80034ee <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	695a      	ldr	r2, [r3, #20]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80034b8:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d111      	bne.n	80034e8 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034d2:	089b      	lsrs	r3, r3, #2
 80034d4:	f003 020f 	and.w	r2, r3, #15
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80034de:	2101      	movs	r1, #1
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f008 ff1f 	bl	800c324 <HAL_PCDEx_LPM_Callback>
 80034e6:	e002      	b.n	80034ee <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f008 fd1d 	bl	800bf28 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4618      	mov	r0, r3
 80034f4:	f005 ff9c 	bl	8009430 <USB_ReadInterrupts>
 80034f8:	4603      	mov	r3, r0
 80034fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003502:	f040 80c7 	bne.w	8003694 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	69fa      	ldr	r2, [r7, #28]
 8003510:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003514:	f023 0301 	bic.w	r3, r3, #1
 8003518:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2110      	movs	r1, #16
 8003520:	4618      	mov	r0, r3
 8003522:	f005 f85d 	bl	80085e0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003526:	2300      	movs	r3, #0
 8003528:	62fb      	str	r3, [r7, #44]	; 0x2c
 800352a:	e056      	b.n	80035da <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800352c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800352e:	015a      	lsls	r2, r3, #5
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	4413      	add	r3, r2
 8003534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003538:	461a      	mov	r2, r3
 800353a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800353e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003542:	015a      	lsls	r2, r3, #5
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	4413      	add	r3, r2
 8003548:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003550:	0151      	lsls	r1, r2, #5
 8003552:	69fa      	ldr	r2, [r7, #28]
 8003554:	440a      	add	r2, r1
 8003556:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800355a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800355e:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003562:	015a      	lsls	r2, r3, #5
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	4413      	add	r3, r2
 8003568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003570:	0151      	lsls	r1, r2, #5
 8003572:	69fa      	ldr	r2, [r7, #28]
 8003574:	440a      	add	r2, r1
 8003576:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800357a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800357e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003582:	015a      	lsls	r2, r3, #5
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	4413      	add	r3, r2
 8003588:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800358c:	461a      	mov	r2, r3
 800358e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003592:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003596:	015a      	lsls	r2, r3, #5
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	4413      	add	r3, r2
 800359c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035a4:	0151      	lsls	r1, r2, #5
 80035a6:	69fa      	ldr	r2, [r7, #28]
 80035a8:	440a      	add	r2, r1
 80035aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80035ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80035b2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80035b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035b6:	015a      	lsls	r2, r3, #5
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	4413      	add	r3, r2
 80035bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035c4:	0151      	lsls	r1, r2, #5
 80035c6:	69fa      	ldr	r2, [r7, #28]
 80035c8:	440a      	add	r2, r1
 80035ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80035ce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80035d2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035d6:	3301      	adds	r3, #1
 80035d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d3a3      	bcc.n	800352c <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035ea:	69db      	ldr	r3, [r3, #28]
 80035ec:	69fa      	ldr	r2, [r7, #28]
 80035ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035f2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80035f6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d016      	beq.n	800362e <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003606:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800360a:	69fa      	ldr	r2, [r7, #28]
 800360c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003610:	f043 030b 	orr.w	r3, r3, #11
 8003614:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800361e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003620:	69fa      	ldr	r2, [r7, #28]
 8003622:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003626:	f043 030b 	orr.w	r3, r3, #11
 800362a:	6453      	str	r3, [r2, #68]	; 0x44
 800362c:	e015      	b.n	800365a <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003634:	695a      	ldr	r2, [r3, #20]
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800363c:	4619      	mov	r1, r3
 800363e:	f242 032b 	movw	r3, #8235	; 0x202b
 8003642:	4313      	orrs	r3, r2
 8003644:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	69fa      	ldr	r2, [r7, #28]
 8003650:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003654:	f043 030b 	orr.w	r3, r3, #11
 8003658:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	69fa      	ldr	r2, [r7, #28]
 8003664:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003668:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800366c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6818      	ldr	r0, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800367e:	461a      	mov	r2, r3
 8003680:	f005 ff9c 	bl	80095bc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	695a      	ldr	r2, [r3, #20]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003692:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4618      	mov	r0, r3
 800369a:	f005 fec9 	bl	8009430 <USB_ReadInterrupts>
 800369e:	4603      	mov	r3, r0
 80036a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036a8:	d124      	bne.n	80036f4 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f005 ff60 	bl	8009574 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4618      	mov	r0, r3
 80036ba:	f004 fff2 	bl	80086a2 <USB_GetDevSpeed>
 80036be:	4603      	mov	r3, r0
 80036c0:	461a      	mov	r2, r3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681c      	ldr	r4, [r3, #0]
 80036ca:	f001 fe3d 	bl	8005348 <HAL_RCC_GetHCLKFreq>
 80036ce:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	461a      	mov	r2, r3
 80036d8:	4620      	mov	r0, r4
 80036da:	f004 fd25 	bl	8008128 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f008 fbf9 	bl	800bed6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	695a      	ldr	r2, [r3, #20]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80036f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4618      	mov	r0, r3
 80036fa:	f005 fe99 	bl	8009430 <USB_ReadInterrupts>
 80036fe:	4603      	mov	r3, r0
 8003700:	f003 0308 	and.w	r3, r3, #8
 8003704:	2b08      	cmp	r3, #8
 8003706:	d10a      	bne.n	800371e <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f008 fbd6 	bl	800beba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	695a      	ldr	r2, [r3, #20]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f002 0208 	and.w	r2, r2, #8
 800371c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4618      	mov	r0, r3
 8003724:	f005 fe84 	bl	8009430 <USB_ReadInterrupts>
 8003728:	4603      	mov	r3, r0
 800372a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800372e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003732:	d10f      	bne.n	8003754 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003734:	2300      	movs	r3, #0
 8003736:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373a:	b2db      	uxtb	r3, r3
 800373c:	4619      	mov	r1, r3
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f008 fc38 	bl	800bfb4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	695a      	ldr	r2, [r3, #20]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003752:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4618      	mov	r0, r3
 800375a:	f005 fe69 	bl	8009430 <USB_ReadInterrupts>
 800375e:	4603      	mov	r3, r0
 8003760:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003764:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003768:	d10f      	bne.n	800378a <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800376a:	2300      	movs	r3, #0
 800376c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800376e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003770:	b2db      	uxtb	r3, r3
 8003772:	4619      	mov	r1, r3
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f008 fc0b 	bl	800bf90 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	695a      	ldr	r2, [r3, #20]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003788:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4618      	mov	r0, r3
 8003790:	f005 fe4e 	bl	8009430 <USB_ReadInterrupts>
 8003794:	4603      	mov	r3, r0
 8003796:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800379a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800379e:	d10a      	bne.n	80037b6 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f008 fc19 	bl	800bfd8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	695a      	ldr	r2, [r3, #20]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80037b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4618      	mov	r0, r3
 80037bc:	f005 fe38 	bl	8009430 <USB_ReadInterrupts>
 80037c0:	4603      	mov	r3, r0
 80037c2:	f003 0304 	and.w	r3, r3, #4
 80037c6:	2b04      	cmp	r3, #4
 80037c8:	d115      	bne.n	80037f6 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	f003 0304 	and.w	r3, r3, #4
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d002      	beq.n	80037e2 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f008 fc09 	bl	800bff4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	6859      	ldr	r1, [r3, #4]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	69ba      	ldr	r2, [r7, #24]
 80037ee:	430a      	orrs	r2, r1
 80037f0:	605a      	str	r2, [r3, #4]
 80037f2:	e000      	b.n	80037f6 <HAL_PCD_IRQHandler+0x7b8>
      return;
 80037f4:	bf00      	nop
    }
  }
}
 80037f6:	3734      	adds	r7, #52	; 0x34
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd90      	pop	{r4, r7, pc}

080037fc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	460b      	mov	r3, r1
 8003806:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800380e:	2b01      	cmp	r3, #1
 8003810:	d101      	bne.n	8003816 <HAL_PCD_SetAddress+0x1a>
 8003812:	2302      	movs	r3, #2
 8003814:	e013      	b.n	800383e <HAL_PCD_SetAddress+0x42>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2201      	movs	r2, #1
 800381a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	78fa      	ldrb	r2, [r7, #3]
 8003822:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	78fa      	ldrb	r2, [r7, #3]
 800382c:	4611      	mov	r1, r2
 800382e:	4618      	mov	r0, r3
 8003830:	f005 fd96 	bl	8009360 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3708      	adds	r7, #8
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003846:	b580      	push	{r7, lr}
 8003848:	b084      	sub	sp, #16
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
 800384e:	4608      	mov	r0, r1
 8003850:	4611      	mov	r1, r2
 8003852:	461a      	mov	r2, r3
 8003854:	4603      	mov	r3, r0
 8003856:	70fb      	strb	r3, [r7, #3]
 8003858:	460b      	mov	r3, r1
 800385a:	803b      	strh	r3, [r7, #0]
 800385c:	4613      	mov	r3, r2
 800385e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003860:	2300      	movs	r3, #0
 8003862:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003864:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003868:	2b00      	cmp	r3, #0
 800386a:	da0f      	bge.n	800388c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800386c:	78fb      	ldrb	r3, [r7, #3]
 800386e:	f003 020f 	and.w	r2, r3, #15
 8003872:	4613      	mov	r3, r2
 8003874:	00db      	lsls	r3, r3, #3
 8003876:	1a9b      	subs	r3, r3, r2
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	3338      	adds	r3, #56	; 0x38
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	4413      	add	r3, r2
 8003880:	3304      	adds	r3, #4
 8003882:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2201      	movs	r2, #1
 8003888:	705a      	strb	r2, [r3, #1]
 800388a:	e00f      	b.n	80038ac <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800388c:	78fb      	ldrb	r3, [r7, #3]
 800388e:	f003 020f 	and.w	r2, r3, #15
 8003892:	4613      	mov	r3, r2
 8003894:	00db      	lsls	r3, r3, #3
 8003896:	1a9b      	subs	r3, r3, r2
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	4413      	add	r3, r2
 80038a2:	3304      	adds	r3, #4
 80038a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2200      	movs	r2, #0
 80038aa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80038ac:	78fb      	ldrb	r3, [r7, #3]
 80038ae:	f003 030f 	and.w	r3, r3, #15
 80038b2:	b2da      	uxtb	r2, r3
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80038b8:	883a      	ldrh	r2, [r7, #0]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	78ba      	ldrb	r2, [r7, #2]
 80038c2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	785b      	ldrb	r3, [r3, #1]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d004      	beq.n	80038d6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	b29a      	uxth	r2, r3
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80038d6:	78bb      	ldrb	r3, [r7, #2]
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d102      	bne.n	80038e2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2200      	movs	r2, #0
 80038e0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d101      	bne.n	80038f0 <HAL_PCD_EP_Open+0xaa>
 80038ec:	2302      	movs	r3, #2
 80038ee:	e00e      	b.n	800390e <HAL_PCD_EP_Open+0xc8>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	68f9      	ldr	r1, [r7, #12]
 80038fe:	4618      	mov	r0, r3
 8003900:	f004 fef4 	bl	80086ec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800390c:	7afb      	ldrb	r3, [r7, #11]
}
 800390e:	4618      	mov	r0, r3
 8003910:	3710      	adds	r7, #16
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}

08003916 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003916:	b580      	push	{r7, lr}
 8003918:	b084      	sub	sp, #16
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
 800391e:	460b      	mov	r3, r1
 8003920:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003922:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003926:	2b00      	cmp	r3, #0
 8003928:	da0f      	bge.n	800394a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800392a:	78fb      	ldrb	r3, [r7, #3]
 800392c:	f003 020f 	and.w	r2, r3, #15
 8003930:	4613      	mov	r3, r2
 8003932:	00db      	lsls	r3, r3, #3
 8003934:	1a9b      	subs	r3, r3, r2
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	3338      	adds	r3, #56	; 0x38
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	4413      	add	r3, r2
 800393e:	3304      	adds	r3, #4
 8003940:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2201      	movs	r2, #1
 8003946:	705a      	strb	r2, [r3, #1]
 8003948:	e00f      	b.n	800396a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800394a:	78fb      	ldrb	r3, [r7, #3]
 800394c:	f003 020f 	and.w	r2, r3, #15
 8003950:	4613      	mov	r3, r2
 8003952:	00db      	lsls	r3, r3, #3
 8003954:	1a9b      	subs	r3, r3, r2
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	4413      	add	r3, r2
 8003960:	3304      	adds	r3, #4
 8003962:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2200      	movs	r2, #0
 8003968:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800396a:	78fb      	ldrb	r3, [r7, #3]
 800396c:	f003 030f 	and.w	r3, r3, #15
 8003970:	b2da      	uxtb	r2, r3
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800397c:	2b01      	cmp	r3, #1
 800397e:	d101      	bne.n	8003984 <HAL_PCD_EP_Close+0x6e>
 8003980:	2302      	movs	r3, #2
 8003982:	e00e      	b.n	80039a2 <HAL_PCD_EP_Close+0x8c>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	68f9      	ldr	r1, [r7, #12]
 8003992:	4618      	mov	r0, r3
 8003994:	f004 ff32 	bl	80087fc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3710      	adds	r7, #16
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}

080039aa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80039aa:	b580      	push	{r7, lr}
 80039ac:	b086      	sub	sp, #24
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	60f8      	str	r0, [r7, #12]
 80039b2:	607a      	str	r2, [r7, #4]
 80039b4:	603b      	str	r3, [r7, #0]
 80039b6:	460b      	mov	r3, r1
 80039b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039ba:	7afb      	ldrb	r3, [r7, #11]
 80039bc:	f003 020f 	and.w	r2, r3, #15
 80039c0:	4613      	mov	r3, r2
 80039c2:	00db      	lsls	r3, r3, #3
 80039c4:	1a9b      	subs	r3, r3, r2
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80039cc:	68fa      	ldr	r2, [r7, #12]
 80039ce:	4413      	add	r3, r2
 80039d0:	3304      	adds	r3, #4
 80039d2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	683a      	ldr	r2, [r7, #0]
 80039de:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	2200      	movs	r2, #0
 80039e4:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	2200      	movs	r2, #0
 80039ea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039ec:	7afb      	ldrb	r3, [r7, #11]
 80039ee:	f003 030f 	and.w	r3, r3, #15
 80039f2:	b2da      	uxtb	r2, r3
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	691b      	ldr	r3, [r3, #16]
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d102      	bne.n	8003a06 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a06:	7afb      	ldrb	r3, [r7, #11]
 8003a08:	f003 030f 	and.w	r3, r3, #15
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d109      	bne.n	8003a24 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6818      	ldr	r0, [r3, #0]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	691b      	ldr	r3, [r3, #16]
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	6979      	ldr	r1, [r7, #20]
 8003a1e:	f005 fa15 	bl	8008e4c <USB_EP0StartXfer>
 8003a22:	e008      	b.n	8003a36 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6818      	ldr	r0, [r3, #0]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	691b      	ldr	r3, [r3, #16]
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	461a      	mov	r2, r3
 8003a30:	6979      	ldr	r1, [r7, #20]
 8003a32:	f004 ffbf 	bl	80089b4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003a36:	2300      	movs	r3, #0
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3718      	adds	r7, #24
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	460b      	mov	r3, r1
 8003a4a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003a4c:	78fb      	ldrb	r3, [r7, #3]
 8003a4e:	f003 020f 	and.w	r2, r3, #15
 8003a52:	6879      	ldr	r1, [r7, #4]
 8003a54:	4613      	mov	r3, r2
 8003a56:	00db      	lsls	r3, r3, #3
 8003a58:	1a9b      	subs	r3, r3, r2
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	440b      	add	r3, r1
 8003a5e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003a62:	681b      	ldr	r3, [r3, #0]
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	370c      	adds	r7, #12
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b086      	sub	sp, #24
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	60f8      	str	r0, [r7, #12]
 8003a78:	607a      	str	r2, [r7, #4]
 8003a7a:	603b      	str	r3, [r7, #0]
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a80:	7afb      	ldrb	r3, [r7, #11]
 8003a82:	f003 020f 	and.w	r2, r3, #15
 8003a86:	4613      	mov	r3, r2
 8003a88:	00db      	lsls	r3, r3, #3
 8003a8a:	1a9b      	subs	r3, r3, r2
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	3338      	adds	r3, #56	; 0x38
 8003a90:	68fa      	ldr	r2, [r7, #12]
 8003a92:	4413      	add	r3, r2
 8003a94:	3304      	adds	r3, #4
 8003a96:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	683a      	ldr	r2, [r7, #0]
 8003aa2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	2201      	movs	r2, #1
 8003aae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ab0:	7afb      	ldrb	r3, [r7, #11]
 8003ab2:	f003 030f 	and.w	r3, r3, #15
 8003ab6:	b2da      	uxtb	r2, r3
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	691b      	ldr	r3, [r3, #16]
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d102      	bne.n	8003aca <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003aca:	7afb      	ldrb	r3, [r7, #11]
 8003acc:	f003 030f 	and.w	r3, r3, #15
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d109      	bne.n	8003ae8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6818      	ldr	r0, [r3, #0]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	691b      	ldr	r3, [r3, #16]
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	461a      	mov	r2, r3
 8003ae0:	6979      	ldr	r1, [r7, #20]
 8003ae2:	f005 f9b3 	bl	8008e4c <USB_EP0StartXfer>
 8003ae6:	e008      	b.n	8003afa <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6818      	ldr	r0, [r3, #0]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	691b      	ldr	r3, [r3, #16]
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	461a      	mov	r2, r3
 8003af4:	6979      	ldr	r1, [r7, #20]
 8003af6:	f004 ff5d 	bl	80089b4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003afa:	2300      	movs	r3, #0
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3718      	adds	r7, #24
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003b10:	78fb      	ldrb	r3, [r7, #3]
 8003b12:	f003 020f 	and.w	r2, r3, #15
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d901      	bls.n	8003b22 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e050      	b.n	8003bc4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003b22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	da0f      	bge.n	8003b4a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b2a:	78fb      	ldrb	r3, [r7, #3]
 8003b2c:	f003 020f 	and.w	r2, r3, #15
 8003b30:	4613      	mov	r3, r2
 8003b32:	00db      	lsls	r3, r3, #3
 8003b34:	1a9b      	subs	r3, r3, r2
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	3338      	adds	r3, #56	; 0x38
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	4413      	add	r3, r2
 8003b3e:	3304      	adds	r3, #4
 8003b40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2201      	movs	r2, #1
 8003b46:	705a      	strb	r2, [r3, #1]
 8003b48:	e00d      	b.n	8003b66 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003b4a:	78fa      	ldrb	r2, [r7, #3]
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	00db      	lsls	r3, r3, #3
 8003b50:	1a9b      	subs	r3, r3, r2
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	4413      	add	r3, r2
 8003b5c:	3304      	adds	r3, #4
 8003b5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2200      	movs	r2, #0
 8003b64:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b6c:	78fb      	ldrb	r3, [r7, #3]
 8003b6e:	f003 030f 	and.w	r3, r3, #15
 8003b72:	b2da      	uxtb	r2, r3
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d101      	bne.n	8003b86 <HAL_PCD_EP_SetStall+0x82>
 8003b82:	2302      	movs	r3, #2
 8003b84:	e01e      	b.n	8003bc4 <HAL_PCD_EP_SetStall+0xc0>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	68f9      	ldr	r1, [r7, #12]
 8003b94:	4618      	mov	r0, r3
 8003b96:	f005 fb0f 	bl	80091b8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003b9a:	78fb      	ldrb	r3, [r7, #3]
 8003b9c:	f003 030f 	and.w	r3, r3, #15
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d10a      	bne.n	8003bba <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6818      	ldr	r0, [r3, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	691b      	ldr	r3, [r3, #16]
 8003bac:	b2d9      	uxtb	r1, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	f005 fd01 	bl	80095bc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003bc2:	2300      	movs	r3, #0
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3710      	adds	r7, #16
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003bd8:	78fb      	ldrb	r3, [r7, #3]
 8003bda:	f003 020f 	and.w	r2, r3, #15
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d901      	bls.n	8003bea <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e042      	b.n	8003c70 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003bea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	da0f      	bge.n	8003c12 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bf2:	78fb      	ldrb	r3, [r7, #3]
 8003bf4:	f003 020f 	and.w	r2, r3, #15
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	00db      	lsls	r3, r3, #3
 8003bfc:	1a9b      	subs	r3, r3, r2
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	3338      	adds	r3, #56	; 0x38
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	4413      	add	r3, r2
 8003c06:	3304      	adds	r3, #4
 8003c08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	705a      	strb	r2, [r3, #1]
 8003c10:	e00f      	b.n	8003c32 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c12:	78fb      	ldrb	r3, [r7, #3]
 8003c14:	f003 020f 	and.w	r2, r3, #15
 8003c18:	4613      	mov	r3, r2
 8003c1a:	00db      	lsls	r3, r3, #3
 8003c1c:	1a9b      	subs	r3, r3, r2
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	4413      	add	r3, r2
 8003c28:	3304      	adds	r3, #4
 8003c2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2200      	movs	r2, #0
 8003c36:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c38:	78fb      	ldrb	r3, [r7, #3]
 8003c3a:	f003 030f 	and.w	r3, r3, #15
 8003c3e:	b2da      	uxtb	r2, r3
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d101      	bne.n	8003c52 <HAL_PCD_EP_ClrStall+0x86>
 8003c4e:	2302      	movs	r3, #2
 8003c50:	e00e      	b.n	8003c70 <HAL_PCD_EP_ClrStall+0xa4>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2201      	movs	r2, #1
 8003c56:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68f9      	ldr	r1, [r7, #12]
 8003c60:	4618      	mov	r0, r3
 8003c62:	f005 fb17 	bl	8009294 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003c6e:	2300      	movs	r3, #0
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3710      	adds	r7, #16
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b08a      	sub	sp, #40	; 0x28
 8003c7c:	af02      	add	r7, sp, #8
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003c8c:	683a      	ldr	r2, [r7, #0]
 8003c8e:	4613      	mov	r3, r2
 8003c90:	00db      	lsls	r3, r3, #3
 8003c92:	1a9b      	subs	r3, r3, r2
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	3338      	adds	r3, #56	; 0x38
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	4413      	add	r3, r2
 8003c9c:	3304      	adds	r3, #4
 8003c9e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	699a      	ldr	r2, [r3, #24]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	695b      	ldr	r3, [r3, #20]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d901      	bls.n	8003cb0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e06c      	b.n	8003d8a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	695a      	ldr	r2, [r3, #20]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	699b      	ldr	r3, [r3, #24]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	69fa      	ldr	r2, [r7, #28]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d902      	bls.n	8003ccc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	3303      	adds	r3, #3
 8003cd0:	089b      	lsrs	r3, r3, #2
 8003cd2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003cd4:	e02b      	b.n	8003d2e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	695a      	ldr	r2, [r3, #20]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	699b      	ldr	r3, [r3, #24]
 8003cde:	1ad3      	subs	r3, r2, r3
 8003ce0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	69fa      	ldr	r2, [r7, #28]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d902      	bls.n	8003cf2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	3303      	adds	r3, #3
 8003cf6:	089b      	lsrs	r3, r3, #2
 8003cf8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	68d9      	ldr	r1, [r3, #12]
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	b2da      	uxtb	r2, r3
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	9300      	str	r3, [sp, #0]
 8003d0e:	4603      	mov	r3, r0
 8003d10:	6978      	ldr	r0, [r7, #20]
 8003d12:	f005 f9f3 	bl	80090fc <USB_WritePacket>

    ep->xfer_buff  += len;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	68da      	ldr	r2, [r3, #12]
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	441a      	add	r2, r3
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	699a      	ldr	r2, [r3, #24]
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	441a      	add	r2, r3
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	015a      	lsls	r2, r3, #5
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	4413      	add	r3, r2
 8003d36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d3a:	699b      	ldr	r3, [r3, #24]
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	69ba      	ldr	r2, [r7, #24]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d809      	bhi.n	8003d58 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	699a      	ldr	r2, [r3, #24]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d203      	bcs.n	8003d58 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	695b      	ldr	r3, [r3, #20]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d1be      	bne.n	8003cd6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	695a      	ldr	r2, [r3, #20]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	699b      	ldr	r3, [r3, #24]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d811      	bhi.n	8003d88 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	f003 030f 	and.w	r3, r3, #15
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d70:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	43db      	mvns	r3, r3
 8003d7e:	6939      	ldr	r1, [r7, #16]
 8003d80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d84:	4013      	ands	r3, r2
 8003d86:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3720      	adds	r7, #32
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
	...

08003d94 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b086      	sub	sp, #24
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	333c      	adds	r3, #60	; 0x3c
 8003dac:	3304      	adds	r3, #4
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	015a      	lsls	r2, r3, #5
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	4413      	add	r3, r2
 8003dba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	f040 80a0 	bne.w	8003f0c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	f003 0308 	and.w	r3, r3, #8
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d015      	beq.n	8003e02 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	4a72      	ldr	r2, [pc, #456]	; (8003fa4 <PCD_EP_OutXfrComplete_int+0x210>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	f240 80dd 	bls.w	8003f9a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	f000 80d7 	beq.w	8003f9a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	015a      	lsls	r2, r3, #5
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	4413      	add	r3, r2
 8003df4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003df8:	461a      	mov	r2, r3
 8003dfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dfe:	6093      	str	r3, [r2, #8]
 8003e00:	e0cb      	b.n	8003f9a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	f003 0320 	and.w	r3, r3, #32
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d009      	beq.n	8003e20 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	015a      	lsls	r2, r3, #5
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	4413      	add	r3, r2
 8003e14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e18:	461a      	mov	r2, r3
 8003e1a:	2320      	movs	r3, #32
 8003e1c:	6093      	str	r3, [r2, #8]
 8003e1e:	e0bc      	b.n	8003f9a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	f040 80b7 	bne.w	8003f9a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	4a5d      	ldr	r2, [pc, #372]	; (8003fa4 <PCD_EP_OutXfrComplete_int+0x210>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d90f      	bls.n	8003e54 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00a      	beq.n	8003e54 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	015a      	lsls	r2, r3, #5
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	4413      	add	r3, r2
 8003e46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e50:	6093      	str	r3, [r2, #8]
 8003e52:	e0a2      	b.n	8003f9a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003e54:	6879      	ldr	r1, [r7, #4]
 8003e56:	683a      	ldr	r2, [r7, #0]
 8003e58:	4613      	mov	r3, r2
 8003e5a:	00db      	lsls	r3, r3, #3
 8003e5c:	1a9b      	subs	r3, r3, r2
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	440b      	add	r3, r1
 8003e62:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003e66:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	0159      	lsls	r1, r3, #5
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	440b      	add	r3, r1
 8003e70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003e7a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	683a      	ldr	r2, [r7, #0]
 8003e80:	4613      	mov	r3, r2
 8003e82:	00db      	lsls	r3, r3, #3
 8003e84:	1a9b      	subs	r3, r3, r2
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	4403      	add	r3, r0
 8003e8a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003e8e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003e90:	6879      	ldr	r1, [r7, #4]
 8003e92:	683a      	ldr	r2, [r7, #0]
 8003e94:	4613      	mov	r3, r2
 8003e96:	00db      	lsls	r3, r3, #3
 8003e98:	1a9b      	subs	r3, r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	440b      	add	r3, r1
 8003e9e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003ea2:	6819      	ldr	r1, [r3, #0]
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	683a      	ldr	r2, [r7, #0]
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	00db      	lsls	r3, r3, #3
 8003eac:	1a9b      	subs	r3, r3, r2
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	4403      	add	r3, r0
 8003eb2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4419      	add	r1, r3
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	683a      	ldr	r2, [r7, #0]
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	00db      	lsls	r3, r3, #3
 8003ec2:	1a9b      	subs	r3, r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	4403      	add	r3, r0
 8003ec8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003ecc:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d114      	bne.n	8003efe <PCD_EP_OutXfrComplete_int+0x16a>
 8003ed4:	6879      	ldr	r1, [r7, #4]
 8003ed6:	683a      	ldr	r2, [r7, #0]
 8003ed8:	4613      	mov	r3, r2
 8003eda:	00db      	lsls	r3, r3, #3
 8003edc:	1a9b      	subs	r3, r3, r2
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	440b      	add	r3, r1
 8003ee2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d108      	bne.n	8003efe <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6818      	ldr	r0, [r3, #0]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	2101      	movs	r1, #1
 8003efa:	f005 fb5f 	bl	80095bc <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	4619      	mov	r1, r3
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f007 ffa3 	bl	800be50 <HAL_PCD_DataOutStageCallback>
 8003f0a:	e046      	b.n	8003f9a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	4a26      	ldr	r2, [pc, #152]	; (8003fa8 <PCD_EP_OutXfrComplete_int+0x214>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d124      	bne.n	8003f5e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00a      	beq.n	8003f34 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	015a      	lsls	r2, r3, #5
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	4413      	add	r3, r2
 8003f26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f30:	6093      	str	r3, [r2, #8]
 8003f32:	e032      	b.n	8003f9a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	f003 0320 	and.w	r3, r3, #32
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d008      	beq.n	8003f50 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	015a      	lsls	r2, r3, #5
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	4413      	add	r3, r2
 8003f46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	2320      	movs	r3, #32
 8003f4e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	4619      	mov	r1, r3
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f007 ff7a 	bl	800be50 <HAL_PCD_DataOutStageCallback>
 8003f5c:	e01d      	b.n	8003f9a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d114      	bne.n	8003f8e <PCD_EP_OutXfrComplete_int+0x1fa>
 8003f64:	6879      	ldr	r1, [r7, #4]
 8003f66:	683a      	ldr	r2, [r7, #0]
 8003f68:	4613      	mov	r3, r2
 8003f6a:	00db      	lsls	r3, r3, #3
 8003f6c:	1a9b      	subs	r3, r3, r2
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	440b      	add	r3, r1
 8003f72:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d108      	bne.n	8003f8e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6818      	ldr	r0, [r3, #0]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003f86:	461a      	mov	r2, r3
 8003f88:	2100      	movs	r1, #0
 8003f8a:	f005 fb17 	bl	80095bc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	4619      	mov	r1, r3
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f007 ff5b 	bl	800be50 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003f9a:	2300      	movs	r3, #0
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3718      	adds	r7, #24
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	4f54300a 	.word	0x4f54300a
 8003fa8:	4f54310a 	.word	0x4f54310a

08003fac <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b086      	sub	sp, #24
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	333c      	adds	r3, #60	; 0x3c
 8003fc4:	3304      	adds	r3, #4
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	015a      	lsls	r2, r3, #5
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	4413      	add	r3, r2
 8003fd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	4a15      	ldr	r2, [pc, #84]	; (8004034 <PCD_EP_OutSetupPacket_int+0x88>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d90e      	bls.n	8004000 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d009      	beq.n	8004000 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	015a      	lsls	r2, r3, #5
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	4413      	add	r3, r2
 8003ff4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ffe:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f007 ff13 	bl	800be2c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	4a0a      	ldr	r2, [pc, #40]	; (8004034 <PCD_EP_OutSetupPacket_int+0x88>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d90c      	bls.n	8004028 <PCD_EP_OutSetupPacket_int+0x7c>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	2b01      	cmp	r3, #1
 8004014:	d108      	bne.n	8004028 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6818      	ldr	r0, [r3, #0]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004020:	461a      	mov	r2, r3
 8004022:	2101      	movs	r1, #1
 8004024:	f005 faca 	bl	80095bc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3718      	adds	r7, #24
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	4f54300a 	.word	0x4f54300a

08004038 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004038:	b480      	push	{r7}
 800403a:	b085      	sub	sp, #20
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	460b      	mov	r3, r1
 8004042:	70fb      	strb	r3, [r7, #3]
 8004044:	4613      	mov	r3, r2
 8004046:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004050:	78fb      	ldrb	r3, [r7, #3]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d107      	bne.n	8004066 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004056:	883b      	ldrh	r3, [r7, #0]
 8004058:	0419      	lsls	r1, r3, #16
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68ba      	ldr	r2, [r7, #8]
 8004060:	430a      	orrs	r2, r1
 8004062:	629a      	str	r2, [r3, #40]	; 0x28
 8004064:	e028      	b.n	80040b8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800406c:	0c1b      	lsrs	r3, r3, #16
 800406e:	68ba      	ldr	r2, [r7, #8]
 8004070:	4413      	add	r3, r2
 8004072:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004074:	2300      	movs	r3, #0
 8004076:	73fb      	strb	r3, [r7, #15]
 8004078:	e00d      	b.n	8004096 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	7bfb      	ldrb	r3, [r7, #15]
 8004080:	3340      	adds	r3, #64	; 0x40
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	4413      	add	r3, r2
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	0c1b      	lsrs	r3, r3, #16
 800408a:	68ba      	ldr	r2, [r7, #8]
 800408c:	4413      	add	r3, r2
 800408e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004090:	7bfb      	ldrb	r3, [r7, #15]
 8004092:	3301      	adds	r3, #1
 8004094:	73fb      	strb	r3, [r7, #15]
 8004096:	7bfa      	ldrb	r2, [r7, #15]
 8004098:	78fb      	ldrb	r3, [r7, #3]
 800409a:	3b01      	subs	r3, #1
 800409c:	429a      	cmp	r2, r3
 800409e:	d3ec      	bcc.n	800407a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80040a0:	883b      	ldrh	r3, [r7, #0]
 80040a2:	0418      	lsls	r0, r3, #16
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6819      	ldr	r1, [r3, #0]
 80040a8:	78fb      	ldrb	r3, [r7, #3]
 80040aa:	3b01      	subs	r3, #1
 80040ac:	68ba      	ldr	r2, [r7, #8]
 80040ae:	4302      	orrs	r2, r0
 80040b0:	3340      	adds	r3, #64	; 0x40
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	440b      	add	r3, r1
 80040b6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3714      	adds	r7, #20
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr

080040c6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80040c6:	b480      	push	{r7}
 80040c8:	b083      	sub	sp, #12
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
 80040ce:	460b      	mov	r3, r1
 80040d0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	887a      	ldrh	r2, [r7, #2]
 80040d8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80040da:	2300      	movs	r3, #0
}
 80040dc:	4618      	mov	r0, r3
 80040de:	370c      	adds	r7, #12
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr

080040e8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b085      	sub	sp, #20
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2201      	movs	r2, #1
 80040fa:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004116:	4b05      	ldr	r3, [pc, #20]	; (800412c <HAL_PCDEx_ActivateLPM+0x44>)
 8004118:	4313      	orrs	r3, r2
 800411a:	68fa      	ldr	r2, [r7, #12]
 800411c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800411e:	2300      	movs	r3, #0
}
 8004120:	4618      	mov	r0, r3
 8004122:	3714      	adds	r7, #20
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr
 800412c:	10000003 	.word	0x10000003

08004130 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004130:	b480      	push	{r7}
 8004132:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004134:	4b05      	ldr	r3, [pc, #20]	; (800414c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a04      	ldr	r2, [pc, #16]	; (800414c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800413a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800413e:	6013      	str	r3, [r2, #0]
}
 8004140:	bf00      	nop
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	40007000 	.word	0x40007000

08004150 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004156:	2300      	movs	r3, #0
 8004158:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800415a:	4b23      	ldr	r3, [pc, #140]	; (80041e8 <HAL_PWREx_EnableOverDrive+0x98>)
 800415c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415e:	4a22      	ldr	r2, [pc, #136]	; (80041e8 <HAL_PWREx_EnableOverDrive+0x98>)
 8004160:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004164:	6413      	str	r3, [r2, #64]	; 0x40
 8004166:	4b20      	ldr	r3, [pc, #128]	; (80041e8 <HAL_PWREx_EnableOverDrive+0x98>)
 8004168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800416e:	603b      	str	r3, [r7, #0]
 8004170:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004172:	4b1e      	ldr	r3, [pc, #120]	; (80041ec <HAL_PWREx_EnableOverDrive+0x9c>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a1d      	ldr	r2, [pc, #116]	; (80041ec <HAL_PWREx_EnableOverDrive+0x9c>)
 8004178:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800417c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800417e:	f7fd fd9d 	bl	8001cbc <HAL_GetTick>
 8004182:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004184:	e009      	b.n	800419a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004186:	f7fd fd99 	bl	8001cbc <HAL_GetTick>
 800418a:	4602      	mov	r2, r0
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004194:	d901      	bls.n	800419a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e022      	b.n	80041e0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800419a:	4b14      	ldr	r3, [pc, #80]	; (80041ec <HAL_PWREx_EnableOverDrive+0x9c>)
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041a6:	d1ee      	bne.n	8004186 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80041a8:	4b10      	ldr	r3, [pc, #64]	; (80041ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a0f      	ldr	r2, [pc, #60]	; (80041ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80041ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041b2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80041b4:	f7fd fd82 	bl	8001cbc <HAL_GetTick>
 80041b8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80041ba:	e009      	b.n	80041d0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80041bc:	f7fd fd7e 	bl	8001cbc <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80041ca:	d901      	bls.n	80041d0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80041cc:	2303      	movs	r3, #3
 80041ce:	e007      	b.n	80041e0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80041d0:	4b06      	ldr	r3, [pc, #24]	; (80041ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041dc:	d1ee      	bne.n	80041bc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80041de:	2300      	movs	r3, #0
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3708      	adds	r7, #8
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	40023800 	.word	0x40023800
 80041ec:	40007000 	.word	0x40007000

080041f0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b086      	sub	sp, #24
 80041f4:	af02      	add	r7, sp, #8
 80041f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80041f8:	f7fd fd60 	bl	8001cbc <HAL_GetTick>
 80041fc:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d101      	bne.n	8004208 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e067      	b.n	80042d8 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800420e:	b2db      	uxtb	r3, r3
 8004210:	2b00      	cmp	r3, #0
 8004212:	d10b      	bne.n	800422c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f7fd f861 	bl	80012e4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8004222:	f241 3188 	movw	r1, #5000	; 0x1388
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 fa62 	bl	80046f0 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	3b01      	subs	r3, #1
 800423c:	021a      	lsls	r2, r3, #8
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	430a      	orrs	r2, r1
 8004244:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800424a:	9300      	str	r3, [sp, #0]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2200      	movs	r2, #0
 8004250:	2120      	movs	r1, #32
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 fa5a 	bl	800470c <QSPI_WaitFlagStateUntilTimeout>
 8004258:	4603      	mov	r3, r0
 800425a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800425c:	7afb      	ldrb	r3, [r7, #11]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d135      	bne.n	80042ce <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	4b1d      	ldr	r3, [pc, #116]	; (80042e0 <HAL_QSPI_Init+0xf0>)
 800426a:	4013      	ands	r3, r2
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	6852      	ldr	r2, [r2, #4]
 8004270:	0611      	lsls	r1, r2, #24
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	68d2      	ldr	r2, [r2, #12]
 8004276:	4311      	orrs	r1, r2
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	69d2      	ldr	r2, [r2, #28]
 800427c:	4311      	orrs	r1, r2
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	6a12      	ldr	r2, [r2, #32]
 8004282:	4311      	orrs	r1, r2
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	6812      	ldr	r2, [r2, #0]
 8004288:	430b      	orrs	r3, r1
 800428a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	685a      	ldr	r2, [r3, #4]
 8004292:	4b14      	ldr	r3, [pc, #80]	; (80042e4 <HAL_QSPI_Init+0xf4>)
 8004294:	4013      	ands	r3, r2
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	6912      	ldr	r2, [r2, #16]
 800429a:	0411      	lsls	r1, r2, #16
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	6952      	ldr	r2, [r2, #20]
 80042a0:	4311      	orrs	r1, r2
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	6992      	ldr	r2, [r2, #24]
 80042a6:	4311      	orrs	r1, r2
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	6812      	ldr	r2, [r2, #0]
 80042ac:	430b      	orrs	r3, r1
 80042ae:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f042 0201 	orr.w	r2, r2, #1
 80042be:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2201      	movs	r2, #1
 80042ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80042d6:	7afb      	ldrb	r3, [r7, #11]
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3710      	adds	r7, #16
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	00ffff2f 	.word	0x00ffff2f
 80042e4:	ffe0f8fe 	.word	0xffe0f8fe

080042e8 <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b088      	sub	sp, #32
 80042ec:	af02      	add	r7, sp, #8
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	60b9      	str	r1, [r7, #8]
 80042f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80042f4:	f7fd fce2 	bl	8001cbc <HAL_GetTick>
 80042f8:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004300:	b2db      	uxtb	r3, r3
 8004302:	2b01      	cmp	r3, #1
 8004304:	d101      	bne.n	800430a <HAL_QSPI_Command+0x22>
 8004306:	2302      	movs	r3, #2
 8004308:	e048      	b.n	800439c <HAL_QSPI_Command+0xb4>
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2201      	movs	r2, #1
 800430e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004318:	b2db      	uxtb	r3, r3
 800431a:	2b01      	cmp	r3, #1
 800431c:	d137      	bne.n	800438e <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2200      	movs	r2, #0
 8004322:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2202      	movs	r2, #2
 8004328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	9300      	str	r3, [sp, #0]
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	2200      	movs	r2, #0
 8004334:	2120      	movs	r1, #32
 8004336:	68f8      	ldr	r0, [r7, #12]
 8004338:	f000 f9e8 	bl	800470c <QSPI_WaitFlagStateUntilTimeout>
 800433c:	4603      	mov	r3, r0
 800433e:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8004340:	7dfb      	ldrb	r3, [r7, #23]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d125      	bne.n	8004392 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8004346:	2200      	movs	r2, #0
 8004348:	68b9      	ldr	r1, [r7, #8]
 800434a:	68f8      	ldr	r0, [r7, #12]
 800434c:	f000 fa15 	bl	800477a <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004354:	2b00      	cmp	r3, #0
 8004356:	d115      	bne.n	8004384 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	9300      	str	r3, [sp, #0]
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	2201      	movs	r2, #1
 8004360:	2102      	movs	r1, #2
 8004362:	68f8      	ldr	r0, [r7, #12]
 8004364:	f000 f9d2 	bl	800470c <QSPI_WaitFlagStateUntilTimeout>
 8004368:	4603      	mov	r3, r0
 800436a:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800436c:	7dfb      	ldrb	r3, [r7, #23]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d10f      	bne.n	8004392 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2202      	movs	r2, #2
 8004378:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2201      	movs	r2, #1
 800437e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004382:	e006      	b.n	8004392 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800438c:	e001      	b.n	8004392 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800438e:	2302      	movs	r3, #2
 8004390:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800439a:	7dfb      	ldrb	r3, [r7, #23]
}
 800439c:	4618      	mov	r0, r3
 800439e:	3718      	adds	r7, #24
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <HAL_QSPI_Transmit>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b08a      	sub	sp, #40	; 0x28
 80043a8:	af02      	add	r7, sp, #8
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043b0:	2300      	movs	r3, #0
 80043b2:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 80043b4:	f7fd fc82 	bl	8001cbc <HAL_GetTick>
 80043b8:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	3320      	adds	r3, #32
 80043c0:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d101      	bne.n	80043d2 <HAL_QSPI_Transmit+0x2e>
 80043ce:	2302      	movs	r3, #2
 80043d0:	e076      	b.n	80044c0 <HAL_QSPI_Transmit+0x11c>
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2201      	movs	r2, #1
 80043d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d165      	bne.n	80044b2 <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2200      	movs	r2, #0
 80043ea:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d056      	beq.n	80044a0 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2212      	movs	r2, #18
 80043f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	691b      	ldr	r3, [r3, #16]
 8004400:	1c5a      	adds	r2, r3, #1
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	691b      	ldr	r3, [r3, #16]
 800440c:	1c5a      	adds	r2, r3, #1
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	68ba      	ldr	r2, [r7, #8]
 8004416:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	695a      	ldr	r2, [r3, #20]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8004426:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8004428:	e01b      	b.n	8004462 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	9300      	str	r3, [sp, #0]
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	2201      	movs	r2, #1
 8004432:	2104      	movs	r1, #4
 8004434:	68f8      	ldr	r0, [r7, #12]
 8004436:	f000 f969 	bl	800470c <QSPI_WaitFlagStateUntilTimeout>
 800443a:	4603      	mov	r3, r0
 800443c:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800443e:	7ffb      	ldrb	r3, [r7, #31]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d113      	bne.n	800446c <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004448:	781a      	ldrb	r2, [r3, #0]
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004452:	1c5a      	adds	r2, r3, #1
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800445c:	1e5a      	subs	r2, r3, #1
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004466:	2b00      	cmp	r3, #0
 8004468:	d1df      	bne.n	800442a <HAL_QSPI_Transmit+0x86>
 800446a:	e000      	b.n	800446e <HAL_QSPI_Transmit+0xca>
          break;
 800446c:	bf00      	nop
      }

      if (status == HAL_OK)
 800446e:	7ffb      	ldrb	r3, [r7, #31]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d110      	bne.n	8004496 <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	9300      	str	r3, [sp, #0]
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	2201      	movs	r2, #1
 800447c:	2102      	movs	r1, #2
 800447e:	68f8      	ldr	r0, [r7, #12]
 8004480:	f000 f944 	bl	800470c <QSPI_WaitFlagStateUntilTimeout>
 8004484:	4603      	mov	r3, r0
 8004486:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8004488:	7ffb      	ldrb	r3, [r7, #31]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d103      	bne.n	8004496 <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	2202      	movs	r2, #2
 8004494:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2201      	movs	r2, #1
 800449a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800449e:	e00a      	b.n	80044b6 <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044a4:	f043 0208 	orr.w	r2, r3, #8
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	77fb      	strb	r3, [r7, #31]
 80044b0:	e001      	b.n	80044b6 <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 80044b2:	2302      	movs	r3, #2
 80044b4:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 80044be:	7ffb      	ldrb	r3, [r7, #31]
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3720      	adds	r7, #32
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b08a      	sub	sp, #40	; 0x28
 80044cc:	af02      	add	r7, sp, #8
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	60b9      	str	r1, [r7, #8]
 80044d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044d4:	2300      	movs	r3, #0
 80044d6:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 80044d8:	f7fd fbf0 	bl	8001cbc <HAL_GetTick>
 80044dc:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	699b      	ldr	r3, [r3, #24]
 80044e4:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	3320      	adds	r3, #32
 80044ec:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d101      	bne.n	80044fe <HAL_QSPI_Receive+0x36>
 80044fa:	2302      	movs	r3, #2
 80044fc:	e07d      	b.n	80045fa <HAL_QSPI_Receive+0x132>
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2201      	movs	r2, #1
 8004502:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800450c:	b2db      	uxtb	r3, r3
 800450e:	2b01      	cmp	r3, #1
 8004510:	d16c      	bne.n	80045ec <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2200      	movs	r2, #0
 8004516:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d05d      	beq.n	80045da <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2222      	movs	r2, #34	; 0x22
 8004522:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	691b      	ldr	r3, [r3, #16]
 800452c:	1c5a      	adds	r2, r3, #1
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	691b      	ldr	r3, [r3, #16]
 8004538:	1c5a      	adds	r2, r3, #1
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	68ba      	ldr	r2, [r7, #8]
 8004542:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	695b      	ldr	r3, [r3, #20]
 800454a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004556:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	697a      	ldr	r2, [r7, #20]
 800455e:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8004560:	e01c      	b.n	800459c <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	9300      	str	r3, [sp, #0]
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	2201      	movs	r2, #1
 800456a:	2106      	movs	r1, #6
 800456c:	68f8      	ldr	r0, [r7, #12]
 800456e:	f000 f8cd 	bl	800470c <QSPI_WaitFlagStateUntilTimeout>
 8004572:	4603      	mov	r3, r0
 8004574:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8004576:	7ffb      	ldrb	r3, [r7, #31]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d114      	bne.n	80045a6 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004580:	693a      	ldr	r2, [r7, #16]
 8004582:	7812      	ldrb	r2, [r2, #0]
 8004584:	b2d2      	uxtb	r2, r2
 8004586:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800458c:	1c5a      	adds	r2, r3, #1
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004596:	1e5a      	subs	r2, r3, #1
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d1de      	bne.n	8004562 <HAL_QSPI_Receive+0x9a>
 80045a4:	e000      	b.n	80045a8 <HAL_QSPI_Receive+0xe0>
          break;
 80045a6:	bf00      	nop
      }

      if (status == HAL_OK)
 80045a8:	7ffb      	ldrb	r3, [r7, #31]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d110      	bne.n	80045d0 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	9300      	str	r3, [sp, #0]
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	2201      	movs	r2, #1
 80045b6:	2102      	movs	r1, #2
 80045b8:	68f8      	ldr	r0, [r7, #12]
 80045ba:	f000 f8a7 	bl	800470c <QSPI_WaitFlagStateUntilTimeout>
 80045be:	4603      	mov	r3, r0
 80045c0:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 80045c2:	7ffb      	ldrb	r3, [r7, #31]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d103      	bne.n	80045d0 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	2202      	movs	r2, #2
 80045ce:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80045d8:	e00a      	b.n	80045f0 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045de:	f043 0208 	orr.w	r2, r3, #8
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	77fb      	strb	r3, [r7, #31]
 80045ea:	e001      	b.n	80045f0 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 80045ec:	2302      	movs	r3, #2
 80045ee:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 80045f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3720      	adds	r7, #32
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}

08004602 <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8004602:	b580      	push	{r7, lr}
 8004604:	b088      	sub	sp, #32
 8004606:	af02      	add	r7, sp, #8
 8004608:	60f8      	str	r0, [r7, #12]
 800460a:	60b9      	str	r1, [r7, #8]
 800460c:	607a      	str	r2, [r7, #4]
 800460e:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004610:	f7fd fb54 	bl	8001cbc <HAL_GetTick>
 8004614:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800461c:	b2db      	uxtb	r3, r3
 800461e:	2b01      	cmp	r3, #1
 8004620:	d101      	bne.n	8004626 <HAL_QSPI_AutoPolling+0x24>
 8004622:	2302      	movs	r3, #2
 8004624:	e060      	b.n	80046e8 <HAL_QSPI_AutoPolling+0xe6>
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2201      	movs	r2, #1
 800462a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004634:	b2db      	uxtb	r3, r3
 8004636:	2b01      	cmp	r3, #1
 8004638:	d14f      	bne.n	80046da <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2200      	movs	r2, #0
 800463e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2242      	movs	r2, #66	; 0x42
 8004644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	9300      	str	r3, [sp, #0]
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	2200      	movs	r2, #0
 8004650:	2120      	movs	r1, #32
 8004652:	68f8      	ldr	r0, [r7, #12]
 8004654:	f000 f85a 	bl	800470c <QSPI_WaitFlagStateUntilTimeout>
 8004658:	4603      	mov	r3, r0
 800465a:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800465c:	7dfb      	ldrb	r3, [r7, #23]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d13d      	bne.n	80046de <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	6812      	ldr	r2, [r2, #0]
 800466a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	6852      	ldr	r2, [r2, #4]
 8004674:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	6892      	ldr	r2, [r2, #8]
 800467e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	431a      	orrs	r2, r3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8004698:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	68da      	ldr	r2, [r3, #12]
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 80046a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80046a6:	68b9      	ldr	r1, [r7, #8]
 80046a8:	68f8      	ldr	r0, [r7, #12]
 80046aa:	f000 f866 	bl	800477a <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	9300      	str	r3, [sp, #0]
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	2201      	movs	r2, #1
 80046b6:	2108      	movs	r1, #8
 80046b8:	68f8      	ldr	r0, [r7, #12]
 80046ba:	f000 f827 	bl	800470c <QSPI_WaitFlagStateUntilTimeout>
 80046be:	4603      	mov	r3, r0
 80046c0:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 80046c2:	7dfb      	ldrb	r3, [r7, #23]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d10a      	bne.n	80046de <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2208      	movs	r2, #8
 80046ce:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80046d8:	e001      	b.n	80046de <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 80046da:	2302      	movs	r3, #2
 80046dc:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80046e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3718      	adds	r7, #24
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	683a      	ldr	r2, [r7, #0]
 80046fe:	649a      	str	r2, [r3, #72]	; 0x48
}
 8004700:	bf00      	nop
 8004702:	370c      	adds	r7, #12
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b084      	sub	sp, #16
 8004710:	af00      	add	r7, sp, #0
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	60b9      	str	r1, [r7, #8]
 8004716:	603b      	str	r3, [r7, #0]
 8004718:	4613      	mov	r3, r2
 800471a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800471c:	e01a      	b.n	8004754 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004724:	d016      	beq.n	8004754 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004726:	f7fd fac9 	bl	8001cbc <HAL_GetTick>
 800472a:	4602      	mov	r2, r0
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	1ad3      	subs	r3, r2, r3
 8004730:	69ba      	ldr	r2, [r7, #24]
 8004732:	429a      	cmp	r2, r3
 8004734:	d302      	bcc.n	800473c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8004736:	69bb      	ldr	r3, [r7, #24]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d10b      	bne.n	8004754 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2204      	movs	r2, #4
 8004740:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004748:	f043 0201 	orr.w	r2, r3, #1
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e00e      	b.n	8004772 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	689a      	ldr	r2, [r3, #8]
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	4013      	ands	r3, r2
 800475e:	2b00      	cmp	r3, #0
 8004760:	bf14      	ite	ne
 8004762:	2301      	movne	r3, #1
 8004764:	2300      	moveq	r3, #0
 8004766:	b2db      	uxtb	r3, r3
 8004768:	461a      	mov	r2, r3
 800476a:	79fb      	ldrb	r3, [r7, #7]
 800476c:	429a      	cmp	r2, r3
 800476e:	d1d6      	bne.n	800471e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3710      	adds	r7, #16
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}

0800477a <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800477a:	b480      	push	{r7}
 800477c:	b085      	sub	sp, #20
 800477e:	af00      	add	r7, sp, #0
 8004780:	60f8      	str	r0, [r7, #12]
 8004782:	60b9      	str	r1, [r7, #8]
 8004784:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478a:	2b00      	cmp	r3, #0
 800478c:	d009      	beq.n	80047a2 <QSPI_Config+0x28>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004794:	d005      	beq.n	80047a2 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	3a01      	subs	r2, #1
 80047a0:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	699b      	ldr	r3, [r3, #24]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	f000 80b9 	beq.w	800491e <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	6a1b      	ldr	r3, [r3, #32]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d05f      	beq.n	8004874 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	68ba      	ldr	r2, [r7, #8]
 80047ba:	6892      	ldr	r2, [r2, #8]
 80047bc:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	69db      	ldr	r3, [r3, #28]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d031      	beq.n	800482a <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ce:	431a      	orrs	r2, r3
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047d4:	431a      	orrs	r2, r3
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047da:	431a      	orrs	r2, r3
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	695b      	ldr	r3, [r3, #20]
 80047e0:	049b      	lsls	r3, r3, #18
 80047e2:	431a      	orrs	r2, r3
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	691b      	ldr	r3, [r3, #16]
 80047e8:	431a      	orrs	r2, r3
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	6a1b      	ldr	r3, [r3, #32]
 80047ee:	431a      	orrs	r2, r3
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	431a      	orrs	r2, r3
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	69db      	ldr	r3, [r3, #28]
 80047fa:	431a      	orrs	r2, r3
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	699b      	ldr	r3, [r3, #24]
 8004800:	431a      	orrs	r2, r3
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	ea42 0103 	orr.w	r1, r2, r3
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	430a      	orrs	r2, r1
 8004812:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800481a:	f000 812e 	beq.w	8004a7a <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	68ba      	ldr	r2, [r7, #8]
 8004824:	6852      	ldr	r2, [r2, #4]
 8004826:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8004828:	e127      	b.n	8004a7a <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004832:	431a      	orrs	r2, r3
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004838:	431a      	orrs	r2, r3
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483e:	431a      	orrs	r2, r3
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	695b      	ldr	r3, [r3, #20]
 8004844:	049b      	lsls	r3, r3, #18
 8004846:	431a      	orrs	r2, r3
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	691b      	ldr	r3, [r3, #16]
 800484c:	431a      	orrs	r2, r3
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	6a1b      	ldr	r3, [r3, #32]
 8004852:	431a      	orrs	r2, r3
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	69db      	ldr	r3, [r3, #28]
 8004858:	431a      	orrs	r2, r3
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	699b      	ldr	r3, [r3, #24]
 800485e:	431a      	orrs	r2, r3
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	ea42 0103 	orr.w	r1, r2, r3
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	430a      	orrs	r2, r1
 8004870:	615a      	str	r2, [r3, #20]
}
 8004872:	e102      	b.n	8004a7a <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	69db      	ldr	r3, [r3, #28]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d02e      	beq.n	80048da <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004884:	431a      	orrs	r2, r3
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800488a:	431a      	orrs	r2, r3
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004890:	431a      	orrs	r2, r3
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	695b      	ldr	r3, [r3, #20]
 8004896:	049b      	lsls	r3, r3, #18
 8004898:	431a      	orrs	r2, r3
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	6a1b      	ldr	r3, [r3, #32]
 800489e:	431a      	orrs	r2, r3
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	431a      	orrs	r2, r3
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	69db      	ldr	r3, [r3, #28]
 80048aa:	431a      	orrs	r2, r3
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	699b      	ldr	r3, [r3, #24]
 80048b0:	431a      	orrs	r2, r3
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	ea42 0103 	orr.w	r1, r2, r3
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	430a      	orrs	r2, r1
 80048c2:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80048ca:	f000 80d6 	beq.w	8004a7a <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	68ba      	ldr	r2, [r7, #8]
 80048d4:	6852      	ldr	r2, [r2, #4]
 80048d6:	619a      	str	r2, [r3, #24]
}
 80048d8:	e0cf      	b.n	8004a7a <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e2:	431a      	orrs	r2, r3
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048e8:	431a      	orrs	r2, r3
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ee:	431a      	orrs	r2, r3
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	695b      	ldr	r3, [r3, #20]
 80048f4:	049b      	lsls	r3, r3, #18
 80048f6:	431a      	orrs	r2, r3
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	6a1b      	ldr	r3, [r3, #32]
 80048fc:	431a      	orrs	r2, r3
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	69db      	ldr	r3, [r3, #28]
 8004902:	431a      	orrs	r2, r3
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	699b      	ldr	r3, [r3, #24]
 8004908:	431a      	orrs	r2, r3
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	ea42 0103 	orr.w	r1, r2, r3
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	430a      	orrs	r2, r1
 800491a:	615a      	str	r2, [r3, #20]
}
 800491c:	e0ad      	b.n	8004a7a <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	6a1b      	ldr	r3, [r3, #32]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d058      	beq.n	80049d8 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	68ba      	ldr	r2, [r7, #8]
 800492c:	6892      	ldr	r2, [r2, #8]
 800492e:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	69db      	ldr	r3, [r3, #28]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d02d      	beq.n	8004994 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004940:	431a      	orrs	r2, r3
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004946:	431a      	orrs	r2, r3
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494c:	431a      	orrs	r2, r3
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	695b      	ldr	r3, [r3, #20]
 8004952:	049b      	lsls	r3, r3, #18
 8004954:	431a      	orrs	r2, r3
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	431a      	orrs	r2, r3
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	6a1b      	ldr	r3, [r3, #32]
 8004960:	431a      	orrs	r2, r3
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	431a      	orrs	r2, r3
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	69db      	ldr	r3, [r3, #28]
 800496c:	431a      	orrs	r2, r3
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	699b      	ldr	r3, [r3, #24]
 8004972:	ea42 0103 	orr.w	r1, r2, r3
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	430a      	orrs	r2, r1
 800497e:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004986:	d078      	beq.n	8004a7a <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68ba      	ldr	r2, [r7, #8]
 800498e:	6852      	ldr	r2, [r2, #4]
 8004990:	619a      	str	r2, [r3, #24]
}
 8004992:	e072      	b.n	8004a7a <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800499c:	431a      	orrs	r2, r3
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049a2:	431a      	orrs	r2, r3
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a8:	431a      	orrs	r2, r3
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	695b      	ldr	r3, [r3, #20]
 80049ae:	049b      	lsls	r3, r3, #18
 80049b0:	431a      	orrs	r2, r3
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	431a      	orrs	r2, r3
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	6a1b      	ldr	r3, [r3, #32]
 80049bc:	431a      	orrs	r2, r3
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	69db      	ldr	r3, [r3, #28]
 80049c2:	431a      	orrs	r2, r3
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	699b      	ldr	r3, [r3, #24]
 80049c8:	ea42 0103 	orr.w	r1, r2, r3
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	430a      	orrs	r2, r1
 80049d4:	615a      	str	r2, [r3, #20]
}
 80049d6:	e050      	b.n	8004a7a <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	69db      	ldr	r3, [r3, #28]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d02a      	beq.n	8004a36 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e8:	431a      	orrs	r2, r3
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049ee:	431a      	orrs	r2, r3
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f4:	431a      	orrs	r2, r3
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	695b      	ldr	r3, [r3, #20]
 80049fa:	049b      	lsls	r3, r3, #18
 80049fc:	431a      	orrs	r2, r3
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	6a1b      	ldr	r3, [r3, #32]
 8004a02:	431a      	orrs	r2, r3
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	431a      	orrs	r2, r3
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	69db      	ldr	r3, [r3, #28]
 8004a0e:	431a      	orrs	r2, r3
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	699b      	ldr	r3, [r3, #24]
 8004a14:	ea42 0103 	orr.w	r1, r2, r3
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	430a      	orrs	r2, r1
 8004a20:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004a28:	d027      	beq.n	8004a7a <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	68ba      	ldr	r2, [r7, #8]
 8004a30:	6852      	ldr	r2, [r2, #4]
 8004a32:	619a      	str	r2, [r3, #24]
}
 8004a34:	e021      	b.n	8004a7a <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d01d      	beq.n	8004a7a <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a46:	431a      	orrs	r2, r3
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a4c:	431a      	orrs	r2, r3
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a52:	431a      	orrs	r2, r3
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	695b      	ldr	r3, [r3, #20]
 8004a58:	049b      	lsls	r3, r3, #18
 8004a5a:	431a      	orrs	r2, r3
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	6a1b      	ldr	r3, [r3, #32]
 8004a60:	431a      	orrs	r2, r3
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	69db      	ldr	r3, [r3, #28]
 8004a66:	431a      	orrs	r2, r3
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	699b      	ldr	r3, [r3, #24]
 8004a6c:	ea42 0103 	orr.w	r1, r2, r3
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	430a      	orrs	r2, r1
 8004a78:	615a      	str	r2, [r3, #20]
}
 8004a7a:	bf00      	nop
 8004a7c:	3714      	adds	r7, #20
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr
	...

08004a88 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b086      	sub	sp, #24
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004a90:	2300      	movs	r3, #0
 8004a92:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d101      	bne.n	8004a9e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e29b      	b.n	8004fd6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0301 	and.w	r3, r3, #1
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	f000 8087 	beq.w	8004bba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004aac:	4b96      	ldr	r3, [pc, #600]	; (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	f003 030c 	and.w	r3, r3, #12
 8004ab4:	2b04      	cmp	r3, #4
 8004ab6:	d00c      	beq.n	8004ad2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ab8:	4b93      	ldr	r3, [pc, #588]	; (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	f003 030c 	and.w	r3, r3, #12
 8004ac0:	2b08      	cmp	r3, #8
 8004ac2:	d112      	bne.n	8004aea <HAL_RCC_OscConfig+0x62>
 8004ac4:	4b90      	ldr	r3, [pc, #576]	; (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004acc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ad0:	d10b      	bne.n	8004aea <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ad2:	4b8d      	ldr	r3, [pc, #564]	; (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d06c      	beq.n	8004bb8 <HAL_RCC_OscConfig+0x130>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d168      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e275      	b.n	8004fd6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004af2:	d106      	bne.n	8004b02 <HAL_RCC_OscConfig+0x7a>
 8004af4:	4b84      	ldr	r3, [pc, #528]	; (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a83      	ldr	r2, [pc, #524]	; (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004afa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004afe:	6013      	str	r3, [r2, #0]
 8004b00:	e02e      	b.n	8004b60 <HAL_RCC_OscConfig+0xd8>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d10c      	bne.n	8004b24 <HAL_RCC_OscConfig+0x9c>
 8004b0a:	4b7f      	ldr	r3, [pc, #508]	; (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a7e      	ldr	r2, [pc, #504]	; (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004b10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b14:	6013      	str	r3, [r2, #0]
 8004b16:	4b7c      	ldr	r3, [pc, #496]	; (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a7b      	ldr	r2, [pc, #492]	; (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004b1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b20:	6013      	str	r3, [r2, #0]
 8004b22:	e01d      	b.n	8004b60 <HAL_RCC_OscConfig+0xd8>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b2c:	d10c      	bne.n	8004b48 <HAL_RCC_OscConfig+0xc0>
 8004b2e:	4b76      	ldr	r3, [pc, #472]	; (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a75      	ldr	r2, [pc, #468]	; (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004b34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b38:	6013      	str	r3, [r2, #0]
 8004b3a:	4b73      	ldr	r3, [pc, #460]	; (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a72      	ldr	r2, [pc, #456]	; (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004b40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b44:	6013      	str	r3, [r2, #0]
 8004b46:	e00b      	b.n	8004b60 <HAL_RCC_OscConfig+0xd8>
 8004b48:	4b6f      	ldr	r3, [pc, #444]	; (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a6e      	ldr	r2, [pc, #440]	; (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004b4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b52:	6013      	str	r3, [r2, #0]
 8004b54:	4b6c      	ldr	r3, [pc, #432]	; (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a6b      	ldr	r2, [pc, #428]	; (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004b5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d013      	beq.n	8004b90 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b68:	f7fd f8a8 	bl	8001cbc <HAL_GetTick>
 8004b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b6e:	e008      	b.n	8004b82 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b70:	f7fd f8a4 	bl	8001cbc <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	2b64      	cmp	r3, #100	; 0x64
 8004b7c:	d901      	bls.n	8004b82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e229      	b.n	8004fd6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b82:	4b61      	ldr	r3, [pc, #388]	; (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d0f0      	beq.n	8004b70 <HAL_RCC_OscConfig+0xe8>
 8004b8e:	e014      	b.n	8004bba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b90:	f7fd f894 	bl	8001cbc <HAL_GetTick>
 8004b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b96:	e008      	b.n	8004baa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b98:	f7fd f890 	bl	8001cbc <HAL_GetTick>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	2b64      	cmp	r3, #100	; 0x64
 8004ba4:	d901      	bls.n	8004baa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	e215      	b.n	8004fd6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004baa:	4b57      	ldr	r3, [pc, #348]	; (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d1f0      	bne.n	8004b98 <HAL_RCC_OscConfig+0x110>
 8004bb6:	e000      	b.n	8004bba <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0302 	and.w	r3, r3, #2
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d069      	beq.n	8004c9a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004bc6:	4b50      	ldr	r3, [pc, #320]	; (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	f003 030c 	and.w	r3, r3, #12
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d00b      	beq.n	8004bea <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bd2:	4b4d      	ldr	r3, [pc, #308]	; (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	f003 030c 	and.w	r3, r3, #12
 8004bda:	2b08      	cmp	r3, #8
 8004bdc:	d11c      	bne.n	8004c18 <HAL_RCC_OscConfig+0x190>
 8004bde:	4b4a      	ldr	r3, [pc, #296]	; (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d116      	bne.n	8004c18 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bea:	4b47      	ldr	r3, [pc, #284]	; (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0302 	and.w	r3, r3, #2
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d005      	beq.n	8004c02 <HAL_RCC_OscConfig+0x17a>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d001      	beq.n	8004c02 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e1e9      	b.n	8004fd6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c02:	4b41      	ldr	r3, [pc, #260]	; (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	00db      	lsls	r3, r3, #3
 8004c10:	493d      	ldr	r1, [pc, #244]	; (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004c12:	4313      	orrs	r3, r2
 8004c14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c16:	e040      	b.n	8004c9a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d023      	beq.n	8004c68 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c20:	4b39      	ldr	r3, [pc, #228]	; (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a38      	ldr	r2, [pc, #224]	; (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004c26:	f043 0301 	orr.w	r3, r3, #1
 8004c2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c2c:	f7fd f846 	bl	8001cbc <HAL_GetTick>
 8004c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c32:	e008      	b.n	8004c46 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c34:	f7fd f842 	bl	8001cbc <HAL_GetTick>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	2b02      	cmp	r3, #2
 8004c40:	d901      	bls.n	8004c46 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004c42:	2303      	movs	r3, #3
 8004c44:	e1c7      	b.n	8004fd6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c46:	4b30      	ldr	r3, [pc, #192]	; (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0302 	and.w	r3, r3, #2
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d0f0      	beq.n	8004c34 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c52:	4b2d      	ldr	r3, [pc, #180]	; (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	00db      	lsls	r3, r3, #3
 8004c60:	4929      	ldr	r1, [pc, #164]	; (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004c62:	4313      	orrs	r3, r2
 8004c64:	600b      	str	r3, [r1, #0]
 8004c66:	e018      	b.n	8004c9a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c68:	4b27      	ldr	r3, [pc, #156]	; (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a26      	ldr	r2, [pc, #152]	; (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004c6e:	f023 0301 	bic.w	r3, r3, #1
 8004c72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c74:	f7fd f822 	bl	8001cbc <HAL_GetTick>
 8004c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c7a:	e008      	b.n	8004c8e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c7c:	f7fd f81e 	bl	8001cbc <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d901      	bls.n	8004c8e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e1a3      	b.n	8004fd6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c8e:	4b1e      	ldr	r3, [pc, #120]	; (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 0302 	and.w	r3, r3, #2
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d1f0      	bne.n	8004c7c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0308 	and.w	r3, r3, #8
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d038      	beq.n	8004d18 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	695b      	ldr	r3, [r3, #20]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d019      	beq.n	8004ce2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cae:	4b16      	ldr	r3, [pc, #88]	; (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004cb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cb2:	4a15      	ldr	r2, [pc, #84]	; (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004cb4:	f043 0301 	orr.w	r3, r3, #1
 8004cb8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cba:	f7fc ffff 	bl	8001cbc <HAL_GetTick>
 8004cbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cc0:	e008      	b.n	8004cd4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cc2:	f7fc fffb 	bl	8001cbc <HAL_GetTick>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	2b02      	cmp	r3, #2
 8004cce:	d901      	bls.n	8004cd4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	e180      	b.n	8004fd6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cd4:	4b0c      	ldr	r3, [pc, #48]	; (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004cd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cd8:	f003 0302 	and.w	r3, r3, #2
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d0f0      	beq.n	8004cc2 <HAL_RCC_OscConfig+0x23a>
 8004ce0:	e01a      	b.n	8004d18 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ce2:	4b09      	ldr	r3, [pc, #36]	; (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004ce4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ce6:	4a08      	ldr	r2, [pc, #32]	; (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004ce8:	f023 0301 	bic.w	r3, r3, #1
 8004cec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cee:	f7fc ffe5 	bl	8001cbc <HAL_GetTick>
 8004cf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cf4:	e00a      	b.n	8004d0c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cf6:	f7fc ffe1 	bl	8001cbc <HAL_GetTick>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	1ad3      	subs	r3, r2, r3
 8004d00:	2b02      	cmp	r3, #2
 8004d02:	d903      	bls.n	8004d0c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004d04:	2303      	movs	r3, #3
 8004d06:	e166      	b.n	8004fd6 <HAL_RCC_OscConfig+0x54e>
 8004d08:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d0c:	4b92      	ldr	r3, [pc, #584]	; (8004f58 <HAL_RCC_OscConfig+0x4d0>)
 8004d0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d10:	f003 0302 	and.w	r3, r3, #2
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d1ee      	bne.n	8004cf6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0304 	and.w	r3, r3, #4
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	f000 80a4 	beq.w	8004e6e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d26:	4b8c      	ldr	r3, [pc, #560]	; (8004f58 <HAL_RCC_OscConfig+0x4d0>)
 8004d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d10d      	bne.n	8004d4e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d32:	4b89      	ldr	r3, [pc, #548]	; (8004f58 <HAL_RCC_OscConfig+0x4d0>)
 8004d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d36:	4a88      	ldr	r2, [pc, #544]	; (8004f58 <HAL_RCC_OscConfig+0x4d0>)
 8004d38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d3c:	6413      	str	r3, [r2, #64]	; 0x40
 8004d3e:	4b86      	ldr	r3, [pc, #536]	; (8004f58 <HAL_RCC_OscConfig+0x4d0>)
 8004d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d46:	60bb      	str	r3, [r7, #8]
 8004d48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d4e:	4b83      	ldr	r3, [pc, #524]	; (8004f5c <HAL_RCC_OscConfig+0x4d4>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d118      	bne.n	8004d8c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004d5a:	4b80      	ldr	r3, [pc, #512]	; (8004f5c <HAL_RCC_OscConfig+0x4d4>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a7f      	ldr	r2, [pc, #508]	; (8004f5c <HAL_RCC_OscConfig+0x4d4>)
 8004d60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d66:	f7fc ffa9 	bl	8001cbc <HAL_GetTick>
 8004d6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d6c:	e008      	b.n	8004d80 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d6e:	f7fc ffa5 	bl	8001cbc <HAL_GetTick>
 8004d72:	4602      	mov	r2, r0
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	2b64      	cmp	r3, #100	; 0x64
 8004d7a:	d901      	bls.n	8004d80 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	e12a      	b.n	8004fd6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d80:	4b76      	ldr	r3, [pc, #472]	; (8004f5c <HAL_RCC_OscConfig+0x4d4>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d0f0      	beq.n	8004d6e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d106      	bne.n	8004da2 <HAL_RCC_OscConfig+0x31a>
 8004d94:	4b70      	ldr	r3, [pc, #448]	; (8004f58 <HAL_RCC_OscConfig+0x4d0>)
 8004d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d98:	4a6f      	ldr	r2, [pc, #444]	; (8004f58 <HAL_RCC_OscConfig+0x4d0>)
 8004d9a:	f043 0301 	orr.w	r3, r3, #1
 8004d9e:	6713      	str	r3, [r2, #112]	; 0x70
 8004da0:	e02d      	b.n	8004dfe <HAL_RCC_OscConfig+0x376>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d10c      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x33c>
 8004daa:	4b6b      	ldr	r3, [pc, #428]	; (8004f58 <HAL_RCC_OscConfig+0x4d0>)
 8004dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dae:	4a6a      	ldr	r2, [pc, #424]	; (8004f58 <HAL_RCC_OscConfig+0x4d0>)
 8004db0:	f023 0301 	bic.w	r3, r3, #1
 8004db4:	6713      	str	r3, [r2, #112]	; 0x70
 8004db6:	4b68      	ldr	r3, [pc, #416]	; (8004f58 <HAL_RCC_OscConfig+0x4d0>)
 8004db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dba:	4a67      	ldr	r2, [pc, #412]	; (8004f58 <HAL_RCC_OscConfig+0x4d0>)
 8004dbc:	f023 0304 	bic.w	r3, r3, #4
 8004dc0:	6713      	str	r3, [r2, #112]	; 0x70
 8004dc2:	e01c      	b.n	8004dfe <HAL_RCC_OscConfig+0x376>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	2b05      	cmp	r3, #5
 8004dca:	d10c      	bne.n	8004de6 <HAL_RCC_OscConfig+0x35e>
 8004dcc:	4b62      	ldr	r3, [pc, #392]	; (8004f58 <HAL_RCC_OscConfig+0x4d0>)
 8004dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dd0:	4a61      	ldr	r2, [pc, #388]	; (8004f58 <HAL_RCC_OscConfig+0x4d0>)
 8004dd2:	f043 0304 	orr.w	r3, r3, #4
 8004dd6:	6713      	str	r3, [r2, #112]	; 0x70
 8004dd8:	4b5f      	ldr	r3, [pc, #380]	; (8004f58 <HAL_RCC_OscConfig+0x4d0>)
 8004dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ddc:	4a5e      	ldr	r2, [pc, #376]	; (8004f58 <HAL_RCC_OscConfig+0x4d0>)
 8004dde:	f043 0301 	orr.w	r3, r3, #1
 8004de2:	6713      	str	r3, [r2, #112]	; 0x70
 8004de4:	e00b      	b.n	8004dfe <HAL_RCC_OscConfig+0x376>
 8004de6:	4b5c      	ldr	r3, [pc, #368]	; (8004f58 <HAL_RCC_OscConfig+0x4d0>)
 8004de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dea:	4a5b      	ldr	r2, [pc, #364]	; (8004f58 <HAL_RCC_OscConfig+0x4d0>)
 8004dec:	f023 0301 	bic.w	r3, r3, #1
 8004df0:	6713      	str	r3, [r2, #112]	; 0x70
 8004df2:	4b59      	ldr	r3, [pc, #356]	; (8004f58 <HAL_RCC_OscConfig+0x4d0>)
 8004df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004df6:	4a58      	ldr	r2, [pc, #352]	; (8004f58 <HAL_RCC_OscConfig+0x4d0>)
 8004df8:	f023 0304 	bic.w	r3, r3, #4
 8004dfc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d015      	beq.n	8004e32 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e06:	f7fc ff59 	bl	8001cbc <HAL_GetTick>
 8004e0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e0c:	e00a      	b.n	8004e24 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e0e:	f7fc ff55 	bl	8001cbc <HAL_GetTick>
 8004e12:	4602      	mov	r2, r0
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	1ad3      	subs	r3, r2, r3
 8004e18:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d901      	bls.n	8004e24 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004e20:	2303      	movs	r3, #3
 8004e22:	e0d8      	b.n	8004fd6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e24:	4b4c      	ldr	r3, [pc, #304]	; (8004f58 <HAL_RCC_OscConfig+0x4d0>)
 8004e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e28:	f003 0302 	and.w	r3, r3, #2
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d0ee      	beq.n	8004e0e <HAL_RCC_OscConfig+0x386>
 8004e30:	e014      	b.n	8004e5c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e32:	f7fc ff43 	bl	8001cbc <HAL_GetTick>
 8004e36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e38:	e00a      	b.n	8004e50 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e3a:	f7fc ff3f 	bl	8001cbc <HAL_GetTick>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d901      	bls.n	8004e50 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	e0c2      	b.n	8004fd6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e50:	4b41      	ldr	r3, [pc, #260]	; (8004f58 <HAL_RCC_OscConfig+0x4d0>)
 8004e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e54:	f003 0302 	and.w	r3, r3, #2
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d1ee      	bne.n	8004e3a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004e5c:	7dfb      	ldrb	r3, [r7, #23]
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d105      	bne.n	8004e6e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e62:	4b3d      	ldr	r3, [pc, #244]	; (8004f58 <HAL_RCC_OscConfig+0x4d0>)
 8004e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e66:	4a3c      	ldr	r2, [pc, #240]	; (8004f58 <HAL_RCC_OscConfig+0x4d0>)
 8004e68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e6c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	699b      	ldr	r3, [r3, #24]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	f000 80ae 	beq.w	8004fd4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e78:	4b37      	ldr	r3, [pc, #220]	; (8004f58 <HAL_RCC_OscConfig+0x4d0>)
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	f003 030c 	and.w	r3, r3, #12
 8004e80:	2b08      	cmp	r3, #8
 8004e82:	d06d      	beq.n	8004f60 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	699b      	ldr	r3, [r3, #24]
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d14b      	bne.n	8004f24 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e8c:	4b32      	ldr	r3, [pc, #200]	; (8004f58 <HAL_RCC_OscConfig+0x4d0>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a31      	ldr	r2, [pc, #196]	; (8004f58 <HAL_RCC_OscConfig+0x4d0>)
 8004e92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e98:	f7fc ff10 	bl	8001cbc <HAL_GetTick>
 8004e9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e9e:	e008      	b.n	8004eb2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ea0:	f7fc ff0c 	bl	8001cbc <HAL_GetTick>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	2b02      	cmp	r3, #2
 8004eac:	d901      	bls.n	8004eb2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	e091      	b.n	8004fd6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eb2:	4b29      	ldr	r3, [pc, #164]	; (8004f58 <HAL_RCC_OscConfig+0x4d0>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d1f0      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	69da      	ldr	r2, [r3, #28]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a1b      	ldr	r3, [r3, #32]
 8004ec6:	431a      	orrs	r2, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ecc:	019b      	lsls	r3, r3, #6
 8004ece:	431a      	orrs	r2, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed4:	085b      	lsrs	r3, r3, #1
 8004ed6:	3b01      	subs	r3, #1
 8004ed8:	041b      	lsls	r3, r3, #16
 8004eda:	431a      	orrs	r2, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee0:	061b      	lsls	r3, r3, #24
 8004ee2:	431a      	orrs	r2, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee8:	071b      	lsls	r3, r3, #28
 8004eea:	491b      	ldr	r1, [pc, #108]	; (8004f58 <HAL_RCC_OscConfig+0x4d0>)
 8004eec:	4313      	orrs	r3, r2
 8004eee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ef0:	4b19      	ldr	r3, [pc, #100]	; (8004f58 <HAL_RCC_OscConfig+0x4d0>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a18      	ldr	r2, [pc, #96]	; (8004f58 <HAL_RCC_OscConfig+0x4d0>)
 8004ef6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004efa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004efc:	f7fc fede 	bl	8001cbc <HAL_GetTick>
 8004f00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f02:	e008      	b.n	8004f16 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f04:	f7fc feda 	bl	8001cbc <HAL_GetTick>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	2b02      	cmp	r3, #2
 8004f10:	d901      	bls.n	8004f16 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	e05f      	b.n	8004fd6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f16:	4b10      	ldr	r3, [pc, #64]	; (8004f58 <HAL_RCC_OscConfig+0x4d0>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d0f0      	beq.n	8004f04 <HAL_RCC_OscConfig+0x47c>
 8004f22:	e057      	b.n	8004fd4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f24:	4b0c      	ldr	r3, [pc, #48]	; (8004f58 <HAL_RCC_OscConfig+0x4d0>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a0b      	ldr	r2, [pc, #44]	; (8004f58 <HAL_RCC_OscConfig+0x4d0>)
 8004f2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f30:	f7fc fec4 	bl	8001cbc <HAL_GetTick>
 8004f34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f36:	e008      	b.n	8004f4a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f38:	f7fc fec0 	bl	8001cbc <HAL_GetTick>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	2b02      	cmp	r3, #2
 8004f44:	d901      	bls.n	8004f4a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004f46:	2303      	movs	r3, #3
 8004f48:	e045      	b.n	8004fd6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f4a:	4b03      	ldr	r3, [pc, #12]	; (8004f58 <HAL_RCC_OscConfig+0x4d0>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d1f0      	bne.n	8004f38 <HAL_RCC_OscConfig+0x4b0>
 8004f56:	e03d      	b.n	8004fd4 <HAL_RCC_OscConfig+0x54c>
 8004f58:	40023800 	.word	0x40023800
 8004f5c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004f60:	4b1f      	ldr	r3, [pc, #124]	; (8004fe0 <HAL_RCC_OscConfig+0x558>)
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	699b      	ldr	r3, [r3, #24]
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d030      	beq.n	8004fd0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d129      	bne.n	8004fd0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d122      	bne.n	8004fd0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f8a:	68fa      	ldr	r2, [r7, #12]
 8004f8c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004f90:	4013      	ands	r3, r2
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004f96:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d119      	bne.n	8004fd0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa6:	085b      	lsrs	r3, r3, #1
 8004fa8:	3b01      	subs	r3, #1
 8004faa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d10f      	bne.n	8004fd0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fba:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d107      	bne.n	8004fd0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fca:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d001      	beq.n	8004fd4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e000      	b.n	8004fd6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004fd4:	2300      	movs	r3, #0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3718      	adds	r7, #24
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	40023800 	.word	0x40023800

08004fe4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b084      	sub	sp, #16
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d101      	bne.n	8004ffc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e0d0      	b.n	800519e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ffc:	4b6a      	ldr	r3, [pc, #424]	; (80051a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 030f 	and.w	r3, r3, #15
 8005004:	683a      	ldr	r2, [r7, #0]
 8005006:	429a      	cmp	r2, r3
 8005008:	d910      	bls.n	800502c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800500a:	4b67      	ldr	r3, [pc, #412]	; (80051a8 <HAL_RCC_ClockConfig+0x1c4>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f023 020f 	bic.w	r2, r3, #15
 8005012:	4965      	ldr	r1, [pc, #404]	; (80051a8 <HAL_RCC_ClockConfig+0x1c4>)
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	4313      	orrs	r3, r2
 8005018:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800501a:	4b63      	ldr	r3, [pc, #396]	; (80051a8 <HAL_RCC_ClockConfig+0x1c4>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 030f 	and.w	r3, r3, #15
 8005022:	683a      	ldr	r2, [r7, #0]
 8005024:	429a      	cmp	r2, r3
 8005026:	d001      	beq.n	800502c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e0b8      	b.n	800519e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0302 	and.w	r3, r3, #2
 8005034:	2b00      	cmp	r3, #0
 8005036:	d020      	beq.n	800507a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 0304 	and.w	r3, r3, #4
 8005040:	2b00      	cmp	r3, #0
 8005042:	d005      	beq.n	8005050 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005044:	4b59      	ldr	r3, [pc, #356]	; (80051ac <HAL_RCC_ClockConfig+0x1c8>)
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	4a58      	ldr	r2, [pc, #352]	; (80051ac <HAL_RCC_ClockConfig+0x1c8>)
 800504a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800504e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 0308 	and.w	r3, r3, #8
 8005058:	2b00      	cmp	r3, #0
 800505a:	d005      	beq.n	8005068 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800505c:	4b53      	ldr	r3, [pc, #332]	; (80051ac <HAL_RCC_ClockConfig+0x1c8>)
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	4a52      	ldr	r2, [pc, #328]	; (80051ac <HAL_RCC_ClockConfig+0x1c8>)
 8005062:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005066:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005068:	4b50      	ldr	r3, [pc, #320]	; (80051ac <HAL_RCC_ClockConfig+0x1c8>)
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	494d      	ldr	r1, [pc, #308]	; (80051ac <HAL_RCC_ClockConfig+0x1c8>)
 8005076:	4313      	orrs	r3, r2
 8005078:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0301 	and.w	r3, r3, #1
 8005082:	2b00      	cmp	r3, #0
 8005084:	d040      	beq.n	8005108 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	2b01      	cmp	r3, #1
 800508c:	d107      	bne.n	800509e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800508e:	4b47      	ldr	r3, [pc, #284]	; (80051ac <HAL_RCC_ClockConfig+0x1c8>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d115      	bne.n	80050c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e07f      	b.n	800519e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	2b02      	cmp	r3, #2
 80050a4:	d107      	bne.n	80050b6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050a6:	4b41      	ldr	r3, [pc, #260]	; (80051ac <HAL_RCC_ClockConfig+0x1c8>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d109      	bne.n	80050c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e073      	b.n	800519e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050b6:	4b3d      	ldr	r3, [pc, #244]	; (80051ac <HAL_RCC_ClockConfig+0x1c8>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0302 	and.w	r3, r3, #2
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d101      	bne.n	80050c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e06b      	b.n	800519e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050c6:	4b39      	ldr	r3, [pc, #228]	; (80051ac <HAL_RCC_ClockConfig+0x1c8>)
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	f023 0203 	bic.w	r2, r3, #3
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	4936      	ldr	r1, [pc, #216]	; (80051ac <HAL_RCC_ClockConfig+0x1c8>)
 80050d4:	4313      	orrs	r3, r2
 80050d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050d8:	f7fc fdf0 	bl	8001cbc <HAL_GetTick>
 80050dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050de:	e00a      	b.n	80050f6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050e0:	f7fc fdec 	bl	8001cbc <HAL_GetTick>
 80050e4:	4602      	mov	r2, r0
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d901      	bls.n	80050f6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80050f2:	2303      	movs	r3, #3
 80050f4:	e053      	b.n	800519e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050f6:	4b2d      	ldr	r3, [pc, #180]	; (80051ac <HAL_RCC_ClockConfig+0x1c8>)
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	f003 020c 	and.w	r2, r3, #12
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	429a      	cmp	r2, r3
 8005106:	d1eb      	bne.n	80050e0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005108:	4b27      	ldr	r3, [pc, #156]	; (80051a8 <HAL_RCC_ClockConfig+0x1c4>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 030f 	and.w	r3, r3, #15
 8005110:	683a      	ldr	r2, [r7, #0]
 8005112:	429a      	cmp	r2, r3
 8005114:	d210      	bcs.n	8005138 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005116:	4b24      	ldr	r3, [pc, #144]	; (80051a8 <HAL_RCC_ClockConfig+0x1c4>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f023 020f 	bic.w	r2, r3, #15
 800511e:	4922      	ldr	r1, [pc, #136]	; (80051a8 <HAL_RCC_ClockConfig+0x1c4>)
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	4313      	orrs	r3, r2
 8005124:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005126:	4b20      	ldr	r3, [pc, #128]	; (80051a8 <HAL_RCC_ClockConfig+0x1c4>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 030f 	and.w	r3, r3, #15
 800512e:	683a      	ldr	r2, [r7, #0]
 8005130:	429a      	cmp	r2, r3
 8005132:	d001      	beq.n	8005138 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e032      	b.n	800519e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 0304 	and.w	r3, r3, #4
 8005140:	2b00      	cmp	r3, #0
 8005142:	d008      	beq.n	8005156 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005144:	4b19      	ldr	r3, [pc, #100]	; (80051ac <HAL_RCC_ClockConfig+0x1c8>)
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	4916      	ldr	r1, [pc, #88]	; (80051ac <HAL_RCC_ClockConfig+0x1c8>)
 8005152:	4313      	orrs	r3, r2
 8005154:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 0308 	and.w	r3, r3, #8
 800515e:	2b00      	cmp	r3, #0
 8005160:	d009      	beq.n	8005176 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005162:	4b12      	ldr	r3, [pc, #72]	; (80051ac <HAL_RCC_ClockConfig+0x1c8>)
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	00db      	lsls	r3, r3, #3
 8005170:	490e      	ldr	r1, [pc, #56]	; (80051ac <HAL_RCC_ClockConfig+0x1c8>)
 8005172:	4313      	orrs	r3, r2
 8005174:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005176:	f000 f831 	bl	80051dc <HAL_RCC_GetSysClockFreq>
 800517a:	4602      	mov	r2, r0
 800517c:	4b0b      	ldr	r3, [pc, #44]	; (80051ac <HAL_RCC_ClockConfig+0x1c8>)
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	091b      	lsrs	r3, r3, #4
 8005182:	f003 030f 	and.w	r3, r3, #15
 8005186:	490a      	ldr	r1, [pc, #40]	; (80051b0 <HAL_RCC_ClockConfig+0x1cc>)
 8005188:	5ccb      	ldrb	r3, [r1, r3]
 800518a:	fa22 f303 	lsr.w	r3, r2, r3
 800518e:	4a09      	ldr	r2, [pc, #36]	; (80051b4 <HAL_RCC_ClockConfig+0x1d0>)
 8005190:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005192:	4b09      	ldr	r3, [pc, #36]	; (80051b8 <HAL_RCC_ClockConfig+0x1d4>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4618      	mov	r0, r3
 8005198:	f7fc fd4c 	bl	8001c34 <HAL_InitTick>

  return HAL_OK;
 800519c:	2300      	movs	r3, #0
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3710      	adds	r7, #16
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	bf00      	nop
 80051a8:	40023c00 	.word	0x40023c00
 80051ac:	40023800 	.word	0x40023800
 80051b0:	0800c6c4 	.word	0x0800c6c4
 80051b4:	20000000 	.word	0x20000000
 80051b8:	20000008 	.word	0x20000008

080051bc <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M7 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80051bc:	b480      	push	{r7}
 80051be:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 80051c0:	4b05      	ldr	r3, [pc, #20]	; (80051d8 <HAL_RCC_EnableCSS+0x1c>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a04      	ldr	r2, [pc, #16]	; (80051d8 <HAL_RCC_EnableCSS+0x1c>)
 80051c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80051ca:	6013      	str	r3, [r2, #0]
}
 80051cc:	bf00      	nop
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr
 80051d6:	bf00      	nop
 80051d8:	40023800 	.word	0x40023800

080051dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051dc:	b5b0      	push	{r4, r5, r7, lr}
 80051de:	b084      	sub	sp, #16
 80051e0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80051e2:	2100      	movs	r1, #0
 80051e4:	6079      	str	r1, [r7, #4]
 80051e6:	2100      	movs	r1, #0
 80051e8:	60f9      	str	r1, [r7, #12]
 80051ea:	2100      	movs	r1, #0
 80051ec:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 80051ee:	2100      	movs	r1, #0
 80051f0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051f2:	4952      	ldr	r1, [pc, #328]	; (800533c <HAL_RCC_GetSysClockFreq+0x160>)
 80051f4:	6889      	ldr	r1, [r1, #8]
 80051f6:	f001 010c 	and.w	r1, r1, #12
 80051fa:	2908      	cmp	r1, #8
 80051fc:	d00d      	beq.n	800521a <HAL_RCC_GetSysClockFreq+0x3e>
 80051fe:	2908      	cmp	r1, #8
 8005200:	f200 8094 	bhi.w	800532c <HAL_RCC_GetSysClockFreq+0x150>
 8005204:	2900      	cmp	r1, #0
 8005206:	d002      	beq.n	800520e <HAL_RCC_GetSysClockFreq+0x32>
 8005208:	2904      	cmp	r1, #4
 800520a:	d003      	beq.n	8005214 <HAL_RCC_GetSysClockFreq+0x38>
 800520c:	e08e      	b.n	800532c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800520e:	4b4c      	ldr	r3, [pc, #304]	; (8005340 <HAL_RCC_GetSysClockFreq+0x164>)
 8005210:	60bb      	str	r3, [r7, #8]
      break;
 8005212:	e08e      	b.n	8005332 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005214:	4b4b      	ldr	r3, [pc, #300]	; (8005344 <HAL_RCC_GetSysClockFreq+0x168>)
 8005216:	60bb      	str	r3, [r7, #8]
      break;
 8005218:	e08b      	b.n	8005332 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800521a:	4948      	ldr	r1, [pc, #288]	; (800533c <HAL_RCC_GetSysClockFreq+0x160>)
 800521c:	6849      	ldr	r1, [r1, #4]
 800521e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8005222:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005224:	4945      	ldr	r1, [pc, #276]	; (800533c <HAL_RCC_GetSysClockFreq+0x160>)
 8005226:	6849      	ldr	r1, [r1, #4]
 8005228:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800522c:	2900      	cmp	r1, #0
 800522e:	d024      	beq.n	800527a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005230:	4942      	ldr	r1, [pc, #264]	; (800533c <HAL_RCC_GetSysClockFreq+0x160>)
 8005232:	6849      	ldr	r1, [r1, #4]
 8005234:	0989      	lsrs	r1, r1, #6
 8005236:	4608      	mov	r0, r1
 8005238:	f04f 0100 	mov.w	r1, #0
 800523c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8005240:	f04f 0500 	mov.w	r5, #0
 8005244:	ea00 0204 	and.w	r2, r0, r4
 8005248:	ea01 0305 	and.w	r3, r1, r5
 800524c:	493d      	ldr	r1, [pc, #244]	; (8005344 <HAL_RCC_GetSysClockFreq+0x168>)
 800524e:	fb01 f003 	mul.w	r0, r1, r3
 8005252:	2100      	movs	r1, #0
 8005254:	fb01 f102 	mul.w	r1, r1, r2
 8005258:	1844      	adds	r4, r0, r1
 800525a:	493a      	ldr	r1, [pc, #232]	; (8005344 <HAL_RCC_GetSysClockFreq+0x168>)
 800525c:	fba2 0101 	umull	r0, r1, r2, r1
 8005260:	1863      	adds	r3, r4, r1
 8005262:	4619      	mov	r1, r3
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	461a      	mov	r2, r3
 8005268:	f04f 0300 	mov.w	r3, #0
 800526c:	f7fa ffe4 	bl	8000238 <__aeabi_uldivmod>
 8005270:	4602      	mov	r2, r0
 8005272:	460b      	mov	r3, r1
 8005274:	4613      	mov	r3, r2
 8005276:	60fb      	str	r3, [r7, #12]
 8005278:	e04a      	b.n	8005310 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800527a:	4b30      	ldr	r3, [pc, #192]	; (800533c <HAL_RCC_GetSysClockFreq+0x160>)
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	099b      	lsrs	r3, r3, #6
 8005280:	461a      	mov	r2, r3
 8005282:	f04f 0300 	mov.w	r3, #0
 8005286:	f240 10ff 	movw	r0, #511	; 0x1ff
 800528a:	f04f 0100 	mov.w	r1, #0
 800528e:	ea02 0400 	and.w	r4, r2, r0
 8005292:	ea03 0501 	and.w	r5, r3, r1
 8005296:	4620      	mov	r0, r4
 8005298:	4629      	mov	r1, r5
 800529a:	f04f 0200 	mov.w	r2, #0
 800529e:	f04f 0300 	mov.w	r3, #0
 80052a2:	014b      	lsls	r3, r1, #5
 80052a4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80052a8:	0142      	lsls	r2, r0, #5
 80052aa:	4610      	mov	r0, r2
 80052ac:	4619      	mov	r1, r3
 80052ae:	1b00      	subs	r0, r0, r4
 80052b0:	eb61 0105 	sbc.w	r1, r1, r5
 80052b4:	f04f 0200 	mov.w	r2, #0
 80052b8:	f04f 0300 	mov.w	r3, #0
 80052bc:	018b      	lsls	r3, r1, #6
 80052be:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80052c2:	0182      	lsls	r2, r0, #6
 80052c4:	1a12      	subs	r2, r2, r0
 80052c6:	eb63 0301 	sbc.w	r3, r3, r1
 80052ca:	f04f 0000 	mov.w	r0, #0
 80052ce:	f04f 0100 	mov.w	r1, #0
 80052d2:	00d9      	lsls	r1, r3, #3
 80052d4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80052d8:	00d0      	lsls	r0, r2, #3
 80052da:	4602      	mov	r2, r0
 80052dc:	460b      	mov	r3, r1
 80052de:	1912      	adds	r2, r2, r4
 80052e0:	eb45 0303 	adc.w	r3, r5, r3
 80052e4:	f04f 0000 	mov.w	r0, #0
 80052e8:	f04f 0100 	mov.w	r1, #0
 80052ec:	0299      	lsls	r1, r3, #10
 80052ee:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80052f2:	0290      	lsls	r0, r2, #10
 80052f4:	4602      	mov	r2, r0
 80052f6:	460b      	mov	r3, r1
 80052f8:	4610      	mov	r0, r2
 80052fa:	4619      	mov	r1, r3
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	461a      	mov	r2, r3
 8005300:	f04f 0300 	mov.w	r3, #0
 8005304:	f7fa ff98 	bl	8000238 <__aeabi_uldivmod>
 8005308:	4602      	mov	r2, r0
 800530a:	460b      	mov	r3, r1
 800530c:	4613      	mov	r3, r2
 800530e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005310:	4b0a      	ldr	r3, [pc, #40]	; (800533c <HAL_RCC_GetSysClockFreq+0x160>)
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	0c1b      	lsrs	r3, r3, #16
 8005316:	f003 0303 	and.w	r3, r3, #3
 800531a:	3301      	adds	r3, #1
 800531c:	005b      	lsls	r3, r3, #1
 800531e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	fbb2 f3f3 	udiv	r3, r2, r3
 8005328:	60bb      	str	r3, [r7, #8]
      break;
 800532a:	e002      	b.n	8005332 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800532c:	4b04      	ldr	r3, [pc, #16]	; (8005340 <HAL_RCC_GetSysClockFreq+0x164>)
 800532e:	60bb      	str	r3, [r7, #8]
      break;
 8005330:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005332:	68bb      	ldr	r3, [r7, #8]
}
 8005334:	4618      	mov	r0, r3
 8005336:	3710      	adds	r7, #16
 8005338:	46bd      	mov	sp, r7
 800533a:	bdb0      	pop	{r4, r5, r7, pc}
 800533c:	40023800 	.word	0x40023800
 8005340:	00f42400 	.word	0x00f42400
 8005344:	017d7840 	.word	0x017d7840

08005348 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005348:	b480      	push	{r7}
 800534a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800534c:	4b03      	ldr	r3, [pc, #12]	; (800535c <HAL_RCC_GetHCLKFreq+0x14>)
 800534e:	681b      	ldr	r3, [r3, #0]
}
 8005350:	4618      	mov	r0, r3
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr
 800535a:	bf00      	nop
 800535c:	20000000 	.word	0x20000000

08005360 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005364:	f7ff fff0 	bl	8005348 <HAL_RCC_GetHCLKFreq>
 8005368:	4602      	mov	r2, r0
 800536a:	4b05      	ldr	r3, [pc, #20]	; (8005380 <HAL_RCC_GetPCLK1Freq+0x20>)
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	0a9b      	lsrs	r3, r3, #10
 8005370:	f003 0307 	and.w	r3, r3, #7
 8005374:	4903      	ldr	r1, [pc, #12]	; (8005384 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005376:	5ccb      	ldrb	r3, [r1, r3]
 8005378:	fa22 f303 	lsr.w	r3, r2, r3
}
 800537c:	4618      	mov	r0, r3
 800537e:	bd80      	pop	{r7, pc}
 8005380:	40023800 	.word	0x40023800
 8005384:	0800c6d4 	.word	0x0800c6d4

08005388 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800538c:	f7ff ffdc 	bl	8005348 <HAL_RCC_GetHCLKFreq>
 8005390:	4602      	mov	r2, r0
 8005392:	4b05      	ldr	r3, [pc, #20]	; (80053a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	0b5b      	lsrs	r3, r3, #13
 8005398:	f003 0307 	and.w	r3, r3, #7
 800539c:	4903      	ldr	r1, [pc, #12]	; (80053ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800539e:	5ccb      	ldrb	r3, [r1, r3]
 80053a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	40023800 	.word	0x40023800
 80053ac:	0800c6d4 	.word	0x0800c6d4

080053b0 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 80053b4:	4b06      	ldr	r3, [pc, #24]	; (80053d0 <HAL_RCC_NMI_IRQHandler+0x20>)
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053bc:	2b80      	cmp	r3, #128	; 0x80
 80053be:	d104      	bne.n	80053ca <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80053c0:	f000 f80a 	bl	80053d8 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80053c4:	4b03      	ldr	r3, [pc, #12]	; (80053d4 <HAL_RCC_NMI_IRQHandler+0x24>)
 80053c6:	2280      	movs	r2, #128	; 0x80
 80053c8:	701a      	strb	r2, [r3, #0]
  }
}
 80053ca:	bf00      	nop
 80053cc:	bd80      	pop	{r7, pc}
 80053ce:	bf00      	nop
 80053d0:	40023800 	.word	0x40023800
 80053d4:	4002380e 	.word	0x4002380e

080053d8 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80053d8:	b480      	push	{r7}
 80053da:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 80053dc:	bf00      	nop
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr
	...

080053e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b088      	sub	sp, #32
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80053f0:	2300      	movs	r3, #0
 80053f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80053f4:	2300      	movs	r3, #0
 80053f6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80053f8:	2300      	movs	r3, #0
 80053fa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80053fc:	2300      	movs	r3, #0
 80053fe:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005400:	2300      	movs	r3, #0
 8005402:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 0301 	and.w	r3, r3, #1
 800540c:	2b00      	cmp	r3, #0
 800540e:	d012      	beq.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005410:	4b69      	ldr	r3, [pc, #420]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	4a68      	ldr	r2, [pc, #416]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005416:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800541a:	6093      	str	r3, [r2, #8]
 800541c:	4b66      	ldr	r3, [pc, #408]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800541e:	689a      	ldr	r2, [r3, #8]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005424:	4964      	ldr	r1, [pc, #400]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005426:	4313      	orrs	r3, r2
 8005428:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800542e:	2b00      	cmp	r3, #0
 8005430:	d101      	bne.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005432:	2301      	movs	r3, #1
 8005434:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800543e:	2b00      	cmp	r3, #0
 8005440:	d017      	beq.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005442:	4b5d      	ldr	r3, [pc, #372]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005444:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005448:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005450:	4959      	ldr	r1, [pc, #356]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005452:	4313      	orrs	r3, r2
 8005454:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800545c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005460:	d101      	bne.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005462:	2301      	movs	r3, #1
 8005464:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800546a:	2b00      	cmp	r3, #0
 800546c:	d101      	bne.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800546e:	2301      	movs	r3, #1
 8005470:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800547a:	2b00      	cmp	r3, #0
 800547c:	d017      	beq.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800547e:	4b4e      	ldr	r3, [pc, #312]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005480:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005484:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548c:	494a      	ldr	r1, [pc, #296]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800548e:	4313      	orrs	r3, r2
 8005490:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005498:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800549c:	d101      	bne.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800549e:	2301      	movs	r3, #1
 80054a0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d101      	bne.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80054aa:	2301      	movs	r3, #1
 80054ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d001      	beq.n	80054be <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80054ba:	2301      	movs	r3, #1
 80054bc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 0320 	and.w	r3, r3, #32
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	f000 808b 	beq.w	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80054cc:	4b3a      	ldr	r3, [pc, #232]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d0:	4a39      	ldr	r2, [pc, #228]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054d6:	6413      	str	r3, [r2, #64]	; 0x40
 80054d8:	4b37      	ldr	r3, [pc, #220]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054e0:	60bb      	str	r3, [r7, #8]
 80054e2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80054e4:	4b35      	ldr	r3, [pc, #212]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a34      	ldr	r2, [pc, #208]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80054ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054f0:	f7fc fbe4 	bl	8001cbc <HAL_GetTick>
 80054f4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80054f6:	e008      	b.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054f8:	f7fc fbe0 	bl	8001cbc <HAL_GetTick>
 80054fc:	4602      	mov	r2, r0
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	1ad3      	subs	r3, r2, r3
 8005502:	2b64      	cmp	r3, #100	; 0x64
 8005504:	d901      	bls.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005506:	2303      	movs	r3, #3
 8005508:	e38f      	b.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800550a:	4b2c      	ldr	r3, [pc, #176]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005512:	2b00      	cmp	r3, #0
 8005514:	d0f0      	beq.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005516:	4b28      	ldr	r3, [pc, #160]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800551a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800551e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d035      	beq.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800552a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800552e:	693a      	ldr	r2, [r7, #16]
 8005530:	429a      	cmp	r2, r3
 8005532:	d02e      	beq.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005534:	4b20      	ldr	r3, [pc, #128]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005538:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800553c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800553e:	4b1e      	ldr	r3, [pc, #120]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005542:	4a1d      	ldr	r2, [pc, #116]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005544:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005548:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800554a:	4b1b      	ldr	r3, [pc, #108]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800554c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800554e:	4a1a      	ldr	r2, [pc, #104]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005550:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005554:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005556:	4a18      	ldr	r2, [pc, #96]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800555c:	4b16      	ldr	r3, [pc, #88]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800555e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005560:	f003 0301 	and.w	r3, r3, #1
 8005564:	2b01      	cmp	r3, #1
 8005566:	d114      	bne.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005568:	f7fc fba8 	bl	8001cbc <HAL_GetTick>
 800556c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800556e:	e00a      	b.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005570:	f7fc fba4 	bl	8001cbc <HAL_GetTick>
 8005574:	4602      	mov	r2, r0
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	f241 3288 	movw	r2, #5000	; 0x1388
 800557e:	4293      	cmp	r3, r2
 8005580:	d901      	bls.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005582:	2303      	movs	r3, #3
 8005584:	e351      	b.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005586:	4b0c      	ldr	r3, [pc, #48]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800558a:	f003 0302 	and.w	r3, r3, #2
 800558e:	2b00      	cmp	r3, #0
 8005590:	d0ee      	beq.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005596:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800559a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800559e:	d111      	bne.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80055a0:	4b05      	ldr	r3, [pc, #20]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80055ac:	4b04      	ldr	r3, [pc, #16]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80055ae:	400b      	ands	r3, r1
 80055b0:	4901      	ldr	r1, [pc, #4]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055b2:	4313      	orrs	r3, r2
 80055b4:	608b      	str	r3, [r1, #8]
 80055b6:	e00b      	b.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80055b8:	40023800 	.word	0x40023800
 80055bc:	40007000 	.word	0x40007000
 80055c0:	0ffffcff 	.word	0x0ffffcff
 80055c4:	4bb3      	ldr	r3, [pc, #716]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	4ab2      	ldr	r2, [pc, #712]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80055ca:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80055ce:	6093      	str	r3, [r2, #8]
 80055d0:	4bb0      	ldr	r3, [pc, #704]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80055d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055dc:	49ad      	ldr	r1, [pc, #692]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80055de:	4313      	orrs	r3, r2
 80055e0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 0310 	and.w	r3, r3, #16
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d010      	beq.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80055ee:	4ba9      	ldr	r3, [pc, #676]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80055f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055f4:	4aa7      	ldr	r2, [pc, #668]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80055f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055fa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80055fe:	4ba5      	ldr	r3, [pc, #660]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005600:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005608:	49a2      	ldr	r1, [pc, #648]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800560a:	4313      	orrs	r3, r2
 800560c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005618:	2b00      	cmp	r3, #0
 800561a:	d00a      	beq.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800561c:	4b9d      	ldr	r3, [pc, #628]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800561e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005622:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800562a:	499a      	ldr	r1, [pc, #616]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800562c:	4313      	orrs	r3, r2
 800562e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800563a:	2b00      	cmp	r3, #0
 800563c:	d00a      	beq.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800563e:	4b95      	ldr	r3, [pc, #596]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005640:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005644:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800564c:	4991      	ldr	r1, [pc, #580]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800564e:	4313      	orrs	r3, r2
 8005650:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800565c:	2b00      	cmp	r3, #0
 800565e:	d00a      	beq.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005660:	4b8c      	ldr	r3, [pc, #560]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005662:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005666:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800566e:	4989      	ldr	r1, [pc, #548]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005670:	4313      	orrs	r3, r2
 8005672:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800567e:	2b00      	cmp	r3, #0
 8005680:	d00a      	beq.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005682:	4b84      	ldr	r3, [pc, #528]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005684:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005688:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005690:	4980      	ldr	r1, [pc, #512]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005692:	4313      	orrs	r3, r2
 8005694:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d00a      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80056a4:	4b7b      	ldr	r3, [pc, #492]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80056a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056aa:	f023 0203 	bic.w	r2, r3, #3
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056b2:	4978      	ldr	r1, [pc, #480]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80056b4:	4313      	orrs	r3, r2
 80056b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d00a      	beq.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80056c6:	4b73      	ldr	r3, [pc, #460]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80056c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056cc:	f023 020c 	bic.w	r2, r3, #12
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056d4:	496f      	ldr	r1, [pc, #444]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80056d6:	4313      	orrs	r3, r2
 80056d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d00a      	beq.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80056e8:	4b6a      	ldr	r3, [pc, #424]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80056ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056ee:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056f6:	4967      	ldr	r1, [pc, #412]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80056f8:	4313      	orrs	r3, r2
 80056fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005706:	2b00      	cmp	r3, #0
 8005708:	d00a      	beq.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800570a:	4b62      	ldr	r3, [pc, #392]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800570c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005710:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005718:	495e      	ldr	r1, [pc, #376]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800571a:	4313      	orrs	r3, r2
 800571c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005728:	2b00      	cmp	r3, #0
 800572a:	d00a      	beq.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800572c:	4b59      	ldr	r3, [pc, #356]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800572e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005732:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800573a:	4956      	ldr	r1, [pc, #344]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800573c:	4313      	orrs	r3, r2
 800573e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800574a:	2b00      	cmp	r3, #0
 800574c:	d00a      	beq.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800574e:	4b51      	ldr	r3, [pc, #324]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005750:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005754:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800575c:	494d      	ldr	r1, [pc, #308]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800575e:	4313      	orrs	r3, r2
 8005760:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800576c:	2b00      	cmp	r3, #0
 800576e:	d00a      	beq.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005770:	4b48      	ldr	r3, [pc, #288]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005776:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800577e:	4945      	ldr	r1, [pc, #276]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005780:	4313      	orrs	r3, r2
 8005782:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800578e:	2b00      	cmp	r3, #0
 8005790:	d00a      	beq.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005792:	4b40      	ldr	r3, [pc, #256]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005794:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005798:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057a0:	493c      	ldr	r1, [pc, #240]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80057a2:	4313      	orrs	r3, r2
 80057a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d00a      	beq.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80057b4:	4b37      	ldr	r3, [pc, #220]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80057b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057ba:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057c2:	4934      	ldr	r1, [pc, #208]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80057c4:	4313      	orrs	r3, r2
 80057c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d011      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80057d6:	4b2f      	ldr	r3, [pc, #188]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80057d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057dc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057e4:	492b      	ldr	r1, [pc, #172]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80057e6:	4313      	orrs	r3, r2
 80057e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057f4:	d101      	bne.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80057f6:	2301      	movs	r3, #1
 80057f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f003 0308 	and.w	r3, r3, #8
 8005802:	2b00      	cmp	r3, #0
 8005804:	d001      	beq.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005806:	2301      	movs	r3, #1
 8005808:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005812:	2b00      	cmp	r3, #0
 8005814:	d00a      	beq.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005816:	4b1f      	ldr	r3, [pc, #124]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005818:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800581c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005824:	491b      	ldr	r1, [pc, #108]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005826:	4313      	orrs	r3, r2
 8005828:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005834:	2b00      	cmp	r3, #0
 8005836:	d00b      	beq.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005838:	4b16      	ldr	r3, [pc, #88]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800583a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800583e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005848:	4912      	ldr	r1, [pc, #72]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800584a:	4313      	orrs	r3, r2
 800584c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005858:	2b00      	cmp	r3, #0
 800585a:	d00b      	beq.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800585c:	4b0d      	ldr	r3, [pc, #52]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800585e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005862:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800586c:	4909      	ldr	r1, [pc, #36]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800586e:	4313      	orrs	r3, r2
 8005870:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800587c:	2b00      	cmp	r3, #0
 800587e:	d00f      	beq.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005880:	4b04      	ldr	r3, [pc, #16]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005882:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005886:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005890:	e002      	b.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8005892:	bf00      	nop
 8005894:	40023800 	.word	0x40023800
 8005898:	4986      	ldr	r1, [pc, #536]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800589a:	4313      	orrs	r3, r2
 800589c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d00b      	beq.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80058ac:	4b81      	ldr	r3, [pc, #516]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058b2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058bc:	497d      	ldr	r1, [pc, #500]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058be:	4313      	orrs	r3, r2
 80058c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80058c4:	69fb      	ldr	r3, [r7, #28]
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d006      	beq.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	f000 80d6 	beq.w	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80058d8:	4b76      	ldr	r3, [pc, #472]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a75      	ldr	r2, [pc, #468]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80058e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058e4:	f7fc f9ea 	bl	8001cbc <HAL_GetTick>
 80058e8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80058ea:	e008      	b.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80058ec:	f7fc f9e6 	bl	8001cbc <HAL_GetTick>
 80058f0:	4602      	mov	r2, r0
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	2b64      	cmp	r3, #100	; 0x64
 80058f8:	d901      	bls.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80058fa:	2303      	movs	r3, #3
 80058fc:	e195      	b.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80058fe:	4b6d      	ldr	r3, [pc, #436]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005906:	2b00      	cmp	r3, #0
 8005908:	d1f0      	bne.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 0301 	and.w	r3, r3, #1
 8005912:	2b00      	cmp	r3, #0
 8005914:	d021      	beq.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800591a:	2b00      	cmp	r3, #0
 800591c:	d11d      	bne.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800591e:	4b65      	ldr	r3, [pc, #404]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005920:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005924:	0c1b      	lsrs	r3, r3, #16
 8005926:	f003 0303 	and.w	r3, r3, #3
 800592a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800592c:	4b61      	ldr	r3, [pc, #388]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800592e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005932:	0e1b      	lsrs	r3, r3, #24
 8005934:	f003 030f 	and.w	r3, r3, #15
 8005938:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	019a      	lsls	r2, r3, #6
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	041b      	lsls	r3, r3, #16
 8005944:	431a      	orrs	r2, r3
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	061b      	lsls	r3, r3, #24
 800594a:	431a      	orrs	r2, r3
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	071b      	lsls	r3, r3, #28
 8005952:	4958      	ldr	r1, [pc, #352]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005954:	4313      	orrs	r3, r2
 8005956:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005962:	2b00      	cmp	r3, #0
 8005964:	d004      	beq.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800596a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800596e:	d00a      	beq.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005978:	2b00      	cmp	r3, #0
 800597a:	d02e      	beq.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005980:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005984:	d129      	bne.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005986:	4b4b      	ldr	r3, [pc, #300]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005988:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800598c:	0c1b      	lsrs	r3, r3, #16
 800598e:	f003 0303 	and.w	r3, r3, #3
 8005992:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005994:	4b47      	ldr	r3, [pc, #284]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005996:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800599a:	0f1b      	lsrs	r3, r3, #28
 800599c:	f003 0307 	and.w	r3, r3, #7
 80059a0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	019a      	lsls	r2, r3, #6
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	041b      	lsls	r3, r3, #16
 80059ac:	431a      	orrs	r2, r3
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	061b      	lsls	r3, r3, #24
 80059b4:	431a      	orrs	r2, r3
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	071b      	lsls	r3, r3, #28
 80059ba:	493e      	ldr	r1, [pc, #248]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059bc:	4313      	orrs	r3, r2
 80059be:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80059c2:	4b3c      	ldr	r3, [pc, #240]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059c8:	f023 021f 	bic.w	r2, r3, #31
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d0:	3b01      	subs	r3, #1
 80059d2:	4938      	ldr	r1, [pc, #224]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059d4:	4313      	orrs	r3, r2
 80059d6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d01d      	beq.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80059e6:	4b33      	ldr	r3, [pc, #204]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059ec:	0e1b      	lsrs	r3, r3, #24
 80059ee:	f003 030f 	and.w	r3, r3, #15
 80059f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80059f4:	4b2f      	ldr	r3, [pc, #188]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059fa:	0f1b      	lsrs	r3, r3, #28
 80059fc:	f003 0307 	and.w	r3, r3, #7
 8005a00:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	019a      	lsls	r2, r3, #6
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	691b      	ldr	r3, [r3, #16]
 8005a0c:	041b      	lsls	r3, r3, #16
 8005a0e:	431a      	orrs	r2, r3
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	061b      	lsls	r3, r3, #24
 8005a14:	431a      	orrs	r2, r3
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	071b      	lsls	r3, r3, #28
 8005a1a:	4926      	ldr	r1, [pc, #152]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d011      	beq.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	019a      	lsls	r2, r3, #6
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	691b      	ldr	r3, [r3, #16]
 8005a38:	041b      	lsls	r3, r3, #16
 8005a3a:	431a      	orrs	r2, r3
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	061b      	lsls	r3, r3, #24
 8005a42:	431a      	orrs	r2, r3
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	071b      	lsls	r3, r3, #28
 8005a4a:	491a      	ldr	r1, [pc, #104]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005a52:	4b18      	ldr	r3, [pc, #96]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a17      	ldr	r2, [pc, #92]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a58:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005a5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a5e:	f7fc f92d 	bl	8001cbc <HAL_GetTick>
 8005a62:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a64:	e008      	b.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005a66:	f7fc f929 	bl	8001cbc <HAL_GetTick>
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	1ad3      	subs	r3, r2, r3
 8005a70:	2b64      	cmp	r3, #100	; 0x64
 8005a72:	d901      	bls.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a74:	2303      	movs	r3, #3
 8005a76:	e0d8      	b.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a78:	4b0e      	ldr	r3, [pc, #56]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d0f0      	beq.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005a84:	69bb      	ldr	r3, [r7, #24]
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	f040 80ce 	bne.w	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005a8c:	4b09      	ldr	r3, [pc, #36]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a08      	ldr	r2, [pc, #32]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a98:	f7fc f910 	bl	8001cbc <HAL_GetTick>
 8005a9c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005a9e:	e00b      	b.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005aa0:	f7fc f90c 	bl	8001cbc <HAL_GetTick>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	1ad3      	subs	r3, r2, r3
 8005aaa:	2b64      	cmp	r3, #100	; 0x64
 8005aac:	d904      	bls.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005aae:	2303      	movs	r3, #3
 8005ab0:	e0bb      	b.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005ab2:	bf00      	nop
 8005ab4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005ab8:	4b5e      	ldr	r3, [pc, #376]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ac0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ac4:	d0ec      	beq.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d003      	beq.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d009      	beq.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d02e      	beq.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d12a      	bne.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005aee:	4b51      	ldr	r3, [pc, #324]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005af4:	0c1b      	lsrs	r3, r3, #16
 8005af6:	f003 0303 	and.w	r3, r3, #3
 8005afa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005afc:	4b4d      	ldr	r3, [pc, #308]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b02:	0f1b      	lsrs	r3, r3, #28
 8005b04:	f003 0307 	and.w	r3, r3, #7
 8005b08:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	695b      	ldr	r3, [r3, #20]
 8005b0e:	019a      	lsls	r2, r3, #6
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	041b      	lsls	r3, r3, #16
 8005b14:	431a      	orrs	r2, r3
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	699b      	ldr	r3, [r3, #24]
 8005b1a:	061b      	lsls	r3, r3, #24
 8005b1c:	431a      	orrs	r2, r3
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	071b      	lsls	r3, r3, #28
 8005b22:	4944      	ldr	r1, [pc, #272]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b24:	4313      	orrs	r3, r2
 8005b26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005b2a:	4b42      	ldr	r3, [pc, #264]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b30:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b38:	3b01      	subs	r3, #1
 8005b3a:	021b      	lsls	r3, r3, #8
 8005b3c:	493d      	ldr	r1, [pc, #244]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d022      	beq.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b58:	d11d      	bne.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005b5a:	4b36      	ldr	r3, [pc, #216]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b60:	0e1b      	lsrs	r3, r3, #24
 8005b62:	f003 030f 	and.w	r3, r3, #15
 8005b66:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005b68:	4b32      	ldr	r3, [pc, #200]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b6e:	0f1b      	lsrs	r3, r3, #28
 8005b70:	f003 0307 	and.w	r3, r3, #7
 8005b74:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	695b      	ldr	r3, [r3, #20]
 8005b7a:	019a      	lsls	r2, r3, #6
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6a1b      	ldr	r3, [r3, #32]
 8005b80:	041b      	lsls	r3, r3, #16
 8005b82:	431a      	orrs	r2, r3
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	061b      	lsls	r3, r3, #24
 8005b88:	431a      	orrs	r2, r3
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	071b      	lsls	r3, r3, #28
 8005b8e:	4929      	ldr	r1, [pc, #164]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b90:	4313      	orrs	r3, r2
 8005b92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f003 0308 	and.w	r3, r3, #8
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d028      	beq.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005ba2:	4b24      	ldr	r3, [pc, #144]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ba8:	0e1b      	lsrs	r3, r3, #24
 8005baa:	f003 030f 	and.w	r3, r3, #15
 8005bae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005bb0:	4b20      	ldr	r3, [pc, #128]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bb6:	0c1b      	lsrs	r3, r3, #16
 8005bb8:	f003 0303 	and.w	r3, r3, #3
 8005bbc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	695b      	ldr	r3, [r3, #20]
 8005bc2:	019a      	lsls	r2, r3, #6
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	041b      	lsls	r3, r3, #16
 8005bc8:	431a      	orrs	r2, r3
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	061b      	lsls	r3, r3, #24
 8005bce:	431a      	orrs	r2, r3
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	69db      	ldr	r3, [r3, #28]
 8005bd4:	071b      	lsls	r3, r3, #28
 8005bd6:	4917      	ldr	r1, [pc, #92]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005bde:	4b15      	ldr	r3, [pc, #84]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005be0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005be4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bec:	4911      	ldr	r1, [pc, #68]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005bf4:	4b0f      	ldr	r3, [pc, #60]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a0e      	ldr	r2, [pc, #56]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005bfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bfe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c00:	f7fc f85c 	bl	8001cbc <HAL_GetTick>
 8005c04:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005c06:	e008      	b.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005c08:	f7fc f858 	bl	8001cbc <HAL_GetTick>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	1ad3      	subs	r3, r2, r3
 8005c12:	2b64      	cmp	r3, #100	; 0x64
 8005c14:	d901      	bls.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c16:	2303      	movs	r3, #3
 8005c18:	e007      	b.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005c1a:	4b06      	ldr	r3, [pc, #24]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c26:	d1ef      	bne.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005c28:	2300      	movs	r3, #0
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3720      	adds	r7, #32
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	bf00      	nop
 8005c34:	40023800 	.word	0x40023800

08005c38 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b084      	sub	sp, #16
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d101      	bne.n	8005c4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	e09d      	b.n	8005d86 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d108      	bne.n	8005c64 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c5a:	d009      	beq.n	8005c70 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	61da      	str	r2, [r3, #28]
 8005c62:	e005      	b.n	8005c70 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2200      	movs	r2, #0
 8005c68:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2200      	movs	r2, #0
 8005c74:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d106      	bne.n	8005c90 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f7fb fbea 	bl	8001464 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2202      	movs	r2, #2
 8005c94:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ca6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	68db      	ldr	r3, [r3, #12]
 8005cac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005cb0:	d902      	bls.n	8005cb8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	60fb      	str	r3, [r7, #12]
 8005cb6:	e002      	b.n	8005cbe <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005cb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005cbc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005cc6:	d007      	beq.n	8005cd8 <HAL_SPI_Init+0xa0>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	68db      	ldr	r3, [r3, #12]
 8005ccc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005cd0:	d002      	beq.n	8005cd8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005ce8:	431a      	orrs	r2, r3
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	f003 0302 	and.w	r3, r3, #2
 8005cf2:	431a      	orrs	r2, r3
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	695b      	ldr	r3, [r3, #20]
 8005cf8:	f003 0301 	and.w	r3, r3, #1
 8005cfc:	431a      	orrs	r2, r3
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	699b      	ldr	r3, [r3, #24]
 8005d02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d06:	431a      	orrs	r2, r3
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	69db      	ldr	r3, [r3, #28]
 8005d0c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d10:	431a      	orrs	r2, r3
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a1b      	ldr	r3, [r3, #32]
 8005d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d1a:	ea42 0103 	orr.w	r1, r2, r3
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d22:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	430a      	orrs	r2, r1
 8005d2c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	699b      	ldr	r3, [r3, #24]
 8005d32:	0c1b      	lsrs	r3, r3, #16
 8005d34:	f003 0204 	and.w	r2, r3, #4
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d3c:	f003 0310 	and.w	r3, r3, #16
 8005d40:	431a      	orrs	r2, r3
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d46:	f003 0308 	and.w	r3, r3, #8
 8005d4a:	431a      	orrs	r2, r3
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005d54:	ea42 0103 	orr.w	r1, r2, r3
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	430a      	orrs	r2, r1
 8005d64:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	69da      	ldr	r2, [r3, #28]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d74:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005d84:	2300      	movs	r3, #0
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3710      	adds	r7, #16
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}

08005d8e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005d8e:	b580      	push	{r7, lr}
 8005d90:	b08a      	sub	sp, #40	; 0x28
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	60f8      	str	r0, [r7, #12]
 8005d96:	60b9      	str	r1, [r7, #8]
 8005d98:	607a      	str	r2, [r7, #4]
 8005d9a:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005da0:	2300      	movs	r3, #0
 8005da2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d101      	bne.n	8005db4 <HAL_SPI_TransmitReceive+0x26>
 8005db0:	2302      	movs	r3, #2
 8005db2:	e1fb      	b.n	80061ac <HAL_SPI_TransmitReceive+0x41e>
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2201      	movs	r2, #1
 8005db8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005dbc:	f7fb ff7e 	bl	8001cbc <HAL_GetTick>
 8005dc0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005dc8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005dd0:	887b      	ldrh	r3, [r7, #2]
 8005dd2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005dd4:	887b      	ldrh	r3, [r7, #2]
 8005dd6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005dd8:	7efb      	ldrb	r3, [r7, #27]
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	d00e      	beq.n	8005dfc <HAL_SPI_TransmitReceive+0x6e>
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005de4:	d106      	bne.n	8005df4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d102      	bne.n	8005df4 <HAL_SPI_TransmitReceive+0x66>
 8005dee:	7efb      	ldrb	r3, [r7, #27]
 8005df0:	2b04      	cmp	r3, #4
 8005df2:	d003      	beq.n	8005dfc <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005df4:	2302      	movs	r3, #2
 8005df6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005dfa:	e1cd      	b.n	8006198 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d005      	beq.n	8005e0e <HAL_SPI_TransmitReceive+0x80>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d002      	beq.n	8005e0e <HAL_SPI_TransmitReceive+0x80>
 8005e08:	887b      	ldrh	r3, [r7, #2]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d103      	bne.n	8005e16 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005e14:	e1c0      	b.n	8006198 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005e1c:	b2db      	uxtb	r3, r3
 8005e1e:	2b04      	cmp	r3, #4
 8005e20:	d003      	beq.n	8005e2a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2205      	movs	r2, #5
 8005e26:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	887a      	ldrh	r2, [r7, #2]
 8005e3a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	887a      	ldrh	r2, [r7, #2]
 8005e42:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	68ba      	ldr	r2, [r7, #8]
 8005e4a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	887a      	ldrh	r2, [r7, #2]
 8005e50:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	887a      	ldrh	r2, [r7, #2]
 8005e56:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2200      	movs	r2, #0
 8005e62:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	68db      	ldr	r3, [r3, #12]
 8005e68:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005e6c:	d802      	bhi.n	8005e74 <HAL_SPI_TransmitReceive+0xe6>
 8005e6e:	8a3b      	ldrh	r3, [r7, #16]
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d908      	bls.n	8005e86 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	685a      	ldr	r2, [r3, #4]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005e82:	605a      	str	r2, [r3, #4]
 8005e84:	e007      	b.n	8005e96 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	685a      	ldr	r2, [r3, #4]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005e94:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ea0:	2b40      	cmp	r3, #64	; 0x40
 8005ea2:	d007      	beq.n	8005eb4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005eb2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	68db      	ldr	r3, [r3, #12]
 8005eb8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ebc:	d97c      	bls.n	8005fb8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d002      	beq.n	8005ecc <HAL_SPI_TransmitReceive+0x13e>
 8005ec6:	8a7b      	ldrh	r3, [r7, #18]
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d169      	bne.n	8005fa0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed0:	881a      	ldrh	r2, [r3, #0]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005edc:	1c9a      	adds	r2, r3, #2
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	3b01      	subs	r3, #1
 8005eea:	b29a      	uxth	r2, r3
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ef0:	e056      	b.n	8005fa0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	f003 0302 	and.w	r3, r3, #2
 8005efc:	2b02      	cmp	r3, #2
 8005efe:	d11b      	bne.n	8005f38 <HAL_SPI_TransmitReceive+0x1aa>
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d016      	beq.n	8005f38 <HAL_SPI_TransmitReceive+0x1aa>
 8005f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d113      	bne.n	8005f38 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f14:	881a      	ldrh	r2, [r3, #0]
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f20:	1c9a      	adds	r2, r3, #2
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	3b01      	subs	r3, #1
 8005f2e:	b29a      	uxth	r2, r3
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005f34:	2300      	movs	r3, #0
 8005f36:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	f003 0301 	and.w	r3, r3, #1
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d11c      	bne.n	8005f80 <HAL_SPI_TransmitReceive+0x1f2>
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d016      	beq.n	8005f80 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	68da      	ldr	r2, [r3, #12]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5c:	b292      	uxth	r2, r2
 8005f5e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f64:	1c9a      	adds	r2, r3, #2
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	3b01      	subs	r3, #1
 8005f74:	b29a      	uxth	r2, r3
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005f80:	f7fb fe9c 	bl	8001cbc <HAL_GetTick>
 8005f84:	4602      	mov	r2, r0
 8005f86:	69fb      	ldr	r3, [r7, #28]
 8005f88:	1ad3      	subs	r3, r2, r3
 8005f8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d807      	bhi.n	8005fa0 <HAL_SPI_TransmitReceive+0x212>
 8005f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f96:	d003      	beq.n	8005fa0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005f98:	2303      	movs	r3, #3
 8005f9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005f9e:	e0fb      	b.n	8006198 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d1a3      	bne.n	8005ef2 <HAL_SPI_TransmitReceive+0x164>
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d19d      	bne.n	8005ef2 <HAL_SPI_TransmitReceive+0x164>
 8005fb6:	e0df      	b.n	8006178 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d003      	beq.n	8005fc8 <HAL_SPI_TransmitReceive+0x23a>
 8005fc0:	8a7b      	ldrh	r3, [r7, #18]
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	f040 80cb 	bne.w	800615e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fcc:	b29b      	uxth	r3, r3
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d912      	bls.n	8005ff8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd6:	881a      	ldrh	r2, [r3, #0]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe2:	1c9a      	adds	r2, r3, #2
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	3b02      	subs	r3, #2
 8005ff0:	b29a      	uxth	r2, r3
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ff6:	e0b2      	b.n	800615e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	330c      	adds	r3, #12
 8006002:	7812      	ldrb	r2, [r2, #0]
 8006004:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800600a:	1c5a      	adds	r2, r3, #1
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006014:	b29b      	uxth	r3, r3
 8006016:	3b01      	subs	r3, #1
 8006018:	b29a      	uxth	r2, r3
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800601e:	e09e      	b.n	800615e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	f003 0302 	and.w	r3, r3, #2
 800602a:	2b02      	cmp	r3, #2
 800602c:	d134      	bne.n	8006098 <HAL_SPI_TransmitReceive+0x30a>
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006032:	b29b      	uxth	r3, r3
 8006034:	2b00      	cmp	r3, #0
 8006036:	d02f      	beq.n	8006098 <HAL_SPI_TransmitReceive+0x30a>
 8006038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603a:	2b01      	cmp	r3, #1
 800603c:	d12c      	bne.n	8006098 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006042:	b29b      	uxth	r3, r3
 8006044:	2b01      	cmp	r3, #1
 8006046:	d912      	bls.n	800606e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800604c:	881a      	ldrh	r2, [r3, #0]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006058:	1c9a      	adds	r2, r3, #2
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006062:	b29b      	uxth	r3, r3
 8006064:	3b02      	subs	r3, #2
 8006066:	b29a      	uxth	r2, r3
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800606c:	e012      	b.n	8006094 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	330c      	adds	r3, #12
 8006078:	7812      	ldrb	r2, [r2, #0]
 800607a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006080:	1c5a      	adds	r2, r3, #1
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800608a:	b29b      	uxth	r3, r3
 800608c:	3b01      	subs	r3, #1
 800608e:	b29a      	uxth	r2, r3
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006094:	2300      	movs	r3, #0
 8006096:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	f003 0301 	and.w	r3, r3, #1
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d148      	bne.n	8006138 <HAL_SPI_TransmitReceive+0x3aa>
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d042      	beq.n	8006138 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	d923      	bls.n	8006106 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	68da      	ldr	r2, [r3, #12]
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c8:	b292      	uxth	r2, r2
 80060ca:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d0:	1c9a      	adds	r2, r3, #2
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80060dc:	b29b      	uxth	r3, r3
 80060de:	3b02      	subs	r3, #2
 80060e0:	b29a      	uxth	r2, r3
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d81f      	bhi.n	8006134 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	685a      	ldr	r2, [r3, #4]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006102:	605a      	str	r2, [r3, #4]
 8006104:	e016      	b.n	8006134 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f103 020c 	add.w	r2, r3, #12
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006112:	7812      	ldrb	r2, [r2, #0]
 8006114:	b2d2      	uxtb	r2, r2
 8006116:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800611c:	1c5a      	adds	r2, r3, #1
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006128:	b29b      	uxth	r3, r3
 800612a:	3b01      	subs	r3, #1
 800612c:	b29a      	uxth	r2, r3
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006134:	2301      	movs	r3, #1
 8006136:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006138:	f7fb fdc0 	bl	8001cbc <HAL_GetTick>
 800613c:	4602      	mov	r2, r0
 800613e:	69fb      	ldr	r3, [r7, #28]
 8006140:	1ad3      	subs	r3, r2, r3
 8006142:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006144:	429a      	cmp	r2, r3
 8006146:	d803      	bhi.n	8006150 <HAL_SPI_TransmitReceive+0x3c2>
 8006148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800614a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800614e:	d102      	bne.n	8006156 <HAL_SPI_TransmitReceive+0x3c8>
 8006150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006152:	2b00      	cmp	r3, #0
 8006154:	d103      	bne.n	800615e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8006156:	2303      	movs	r3, #3
 8006158:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800615c:	e01c      	b.n	8006198 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006162:	b29b      	uxth	r3, r3
 8006164:	2b00      	cmp	r3, #0
 8006166:	f47f af5b 	bne.w	8006020 <HAL_SPI_TransmitReceive+0x292>
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006170:	b29b      	uxth	r3, r3
 8006172:	2b00      	cmp	r3, #0
 8006174:	f47f af54 	bne.w	8006020 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006178:	69fa      	ldr	r2, [r7, #28]
 800617a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800617c:	68f8      	ldr	r0, [r7, #12]
 800617e:	f000 f941 	bl	8006404 <SPI_EndRxTxTransaction>
 8006182:	4603      	mov	r3, r0
 8006184:	2b00      	cmp	r3, #0
 8006186:	d006      	beq.n	8006196 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006188:	2301      	movs	r3, #1
 800618a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2220      	movs	r2, #32
 8006192:	661a      	str	r2, [r3, #96]	; 0x60
 8006194:	e000      	b.n	8006198 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8006196:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2201      	movs	r2, #1
 800619c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2200      	movs	r2, #0
 80061a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80061a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3728      	adds	r7, #40	; 0x28
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b083      	sub	sp, #12
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80061c2:	b2db      	uxtb	r3, r3
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	370c      	adds	r7, #12
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr

080061d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b088      	sub	sp, #32
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	60f8      	str	r0, [r7, #12]
 80061d8:	60b9      	str	r1, [r7, #8]
 80061da:	603b      	str	r3, [r7, #0]
 80061dc:	4613      	mov	r3, r2
 80061de:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80061e0:	f7fb fd6c 	bl	8001cbc <HAL_GetTick>
 80061e4:	4602      	mov	r2, r0
 80061e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e8:	1a9b      	subs	r3, r3, r2
 80061ea:	683a      	ldr	r2, [r7, #0]
 80061ec:	4413      	add	r3, r2
 80061ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80061f0:	f7fb fd64 	bl	8001cbc <HAL_GetTick>
 80061f4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80061f6:	4b39      	ldr	r3, [pc, #228]	; (80062dc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	015b      	lsls	r3, r3, #5
 80061fc:	0d1b      	lsrs	r3, r3, #20
 80061fe:	69fa      	ldr	r2, [r7, #28]
 8006200:	fb02 f303 	mul.w	r3, r2, r3
 8006204:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006206:	e054      	b.n	80062b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800620e:	d050      	beq.n	80062b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006210:	f7fb fd54 	bl	8001cbc <HAL_GetTick>
 8006214:	4602      	mov	r2, r0
 8006216:	69bb      	ldr	r3, [r7, #24]
 8006218:	1ad3      	subs	r3, r2, r3
 800621a:	69fa      	ldr	r2, [r7, #28]
 800621c:	429a      	cmp	r2, r3
 800621e:	d902      	bls.n	8006226 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d13d      	bne.n	80062a2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	685a      	ldr	r2, [r3, #4]
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006234:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800623e:	d111      	bne.n	8006264 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006248:	d004      	beq.n	8006254 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006252:	d107      	bne.n	8006264 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006262:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006268:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800626c:	d10f      	bne.n	800628e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	681a      	ldr	r2, [r3, #0]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800627c:	601a      	str	r2, [r3, #0]
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800628c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2201      	movs	r2, #1
 8006292:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2200      	movs	r2, #0
 800629a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800629e:	2303      	movs	r3, #3
 80062a0:	e017      	b.n	80062d2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d101      	bne.n	80062ac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80062a8:	2300      	movs	r3, #0
 80062aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	3b01      	subs	r3, #1
 80062b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	689a      	ldr	r2, [r3, #8]
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	4013      	ands	r3, r2
 80062bc:	68ba      	ldr	r2, [r7, #8]
 80062be:	429a      	cmp	r2, r3
 80062c0:	bf0c      	ite	eq
 80062c2:	2301      	moveq	r3, #1
 80062c4:	2300      	movne	r3, #0
 80062c6:	b2db      	uxtb	r3, r3
 80062c8:	461a      	mov	r2, r3
 80062ca:	79fb      	ldrb	r3, [r7, #7]
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d19b      	bne.n	8006208 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80062d0:	2300      	movs	r3, #0
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3720      	adds	r7, #32
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}
 80062da:	bf00      	nop
 80062dc:	20000000 	.word	0x20000000

080062e0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b088      	sub	sp, #32
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	60b9      	str	r1, [r7, #8]
 80062ea:	607a      	str	r2, [r7, #4]
 80062ec:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80062ee:	f7fb fce5 	bl	8001cbc <HAL_GetTick>
 80062f2:	4602      	mov	r2, r0
 80062f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f6:	1a9b      	subs	r3, r3, r2
 80062f8:	683a      	ldr	r2, [r7, #0]
 80062fa:	4413      	add	r3, r2
 80062fc:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80062fe:	f7fb fcdd 	bl	8001cbc <HAL_GetTick>
 8006302:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006304:	4b3e      	ldr	r3, [pc, #248]	; (8006400 <SPI_WaitFifoStateUntilTimeout+0x120>)
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	4613      	mov	r3, r2
 800630a:	009b      	lsls	r3, r3, #2
 800630c:	4413      	add	r3, r2
 800630e:	00da      	lsls	r2, r3, #3
 8006310:	1ad3      	subs	r3, r2, r3
 8006312:	0d1b      	lsrs	r3, r3, #20
 8006314:	69fa      	ldr	r2, [r7, #28]
 8006316:	fb02 f303 	mul.w	r3, r2, r3
 800631a:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 800631c:	e062      	b.n	80063e4 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006324:	d109      	bne.n	800633a <SPI_WaitFifoStateUntilTimeout+0x5a>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d106      	bne.n	800633a <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	330c      	adds	r3, #12
 8006332:	781b      	ldrb	r3, [r3, #0]
 8006334:	b2db      	uxtb	r3, r3
 8006336:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8006338:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006340:	d050      	beq.n	80063e4 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006342:	f7fb fcbb 	bl	8001cbc <HAL_GetTick>
 8006346:	4602      	mov	r2, r0
 8006348:	69bb      	ldr	r3, [r7, #24]
 800634a:	1ad3      	subs	r3, r2, r3
 800634c:	69fa      	ldr	r2, [r7, #28]
 800634e:	429a      	cmp	r2, r3
 8006350:	d902      	bls.n	8006358 <SPI_WaitFifoStateUntilTimeout+0x78>
 8006352:	69fb      	ldr	r3, [r7, #28]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d13d      	bne.n	80063d4 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	685a      	ldr	r2, [r3, #4]
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006366:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006370:	d111      	bne.n	8006396 <SPI_WaitFifoStateUntilTimeout+0xb6>
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800637a:	d004      	beq.n	8006386 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006384:	d107      	bne.n	8006396 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	681a      	ldr	r2, [r3, #0]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006394:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800639a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800639e:	d10f      	bne.n	80063c0 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80063ae:	601a      	str	r2, [r3, #0]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	681a      	ldr	r2, [r3, #0]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80063be:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2201      	movs	r2, #1
 80063c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80063d0:	2303      	movs	r3, #3
 80063d2:	e010      	b.n	80063f6 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d101      	bne.n	80063de <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 80063da:	2300      	movs	r3, #0
 80063dc:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	3b01      	subs	r3, #1
 80063e2:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	689a      	ldr	r2, [r3, #8]
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	4013      	ands	r3, r2
 80063ee:	687a      	ldr	r2, [r7, #4]
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d194      	bne.n	800631e <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 80063f4:	2300      	movs	r3, #0
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3720      	adds	r7, #32
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}
 80063fe:	bf00      	nop
 8006400:	20000000 	.word	0x20000000

08006404 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b086      	sub	sp, #24
 8006408:	af02      	add	r7, sp, #8
 800640a:	60f8      	str	r0, [r7, #12]
 800640c:	60b9      	str	r1, [r7, #8]
 800640e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	9300      	str	r3, [sp, #0]
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	2200      	movs	r2, #0
 8006418:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800641c:	68f8      	ldr	r0, [r7, #12]
 800641e:	f7ff ff5f 	bl	80062e0 <SPI_WaitFifoStateUntilTimeout>
 8006422:	4603      	mov	r3, r0
 8006424:	2b00      	cmp	r3, #0
 8006426:	d007      	beq.n	8006438 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800642c:	f043 0220 	orr.w	r2, r3, #32
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006434:	2303      	movs	r3, #3
 8006436:	e027      	b.n	8006488 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	9300      	str	r3, [sp, #0]
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	2200      	movs	r2, #0
 8006440:	2180      	movs	r1, #128	; 0x80
 8006442:	68f8      	ldr	r0, [r7, #12]
 8006444:	f7ff fec4 	bl	80061d0 <SPI_WaitFlagStateUntilTimeout>
 8006448:	4603      	mov	r3, r0
 800644a:	2b00      	cmp	r3, #0
 800644c:	d007      	beq.n	800645e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006452:	f043 0220 	orr.w	r2, r3, #32
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800645a:	2303      	movs	r3, #3
 800645c:	e014      	b.n	8006488 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	9300      	str	r3, [sp, #0]
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	2200      	movs	r2, #0
 8006466:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800646a:	68f8      	ldr	r0, [r7, #12]
 800646c:	f7ff ff38 	bl	80062e0 <SPI_WaitFifoStateUntilTimeout>
 8006470:	4603      	mov	r3, r0
 8006472:	2b00      	cmp	r3, #0
 8006474:	d007      	beq.n	8006486 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800647a:	f043 0220 	orr.w	r2, r3, #32
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006482:	2303      	movs	r3, #3
 8006484:	e000      	b.n	8006488 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006486:	2300      	movs	r3, #0
}
 8006488:	4618      	mov	r0, r3
 800648a:	3710      	adds	r7, #16
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}

08006490 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b082      	sub	sp, #8
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d101      	bne.n	80064a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	e049      	b.n	8006536 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d106      	bne.n	80064bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2200      	movs	r2, #0
 80064b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f7fb f9f8 	bl	80018ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2202      	movs	r2, #2
 80064c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	3304      	adds	r3, #4
 80064cc:	4619      	mov	r1, r3
 80064ce:	4610      	mov	r0, r2
 80064d0:	f000 fb82 	bl	8006bd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2201      	movs	r2, #1
 80064e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2201      	movs	r2, #1
 80064e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2201      	movs	r2, #1
 80064f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2201      	movs	r2, #1
 80064f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2201      	movs	r2, #1
 8006500:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2201      	movs	r2, #1
 8006508:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2201      	movs	r2, #1
 8006510:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2201      	movs	r2, #1
 8006518:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2201      	movs	r2, #1
 8006520:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2201      	movs	r2, #1
 8006528:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2201      	movs	r2, #1
 8006530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006534:	2300      	movs	r3, #0
}
 8006536:	4618      	mov	r0, r3
 8006538:	3708      	adds	r7, #8
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}

0800653e <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800653e:	b580      	push	{r7, lr}
 8006540:	b082      	sub	sp, #8
 8006542:	af00      	add	r7, sp, #0
 8006544:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d101      	bne.n	8006550 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800654c:	2301      	movs	r3, #1
 800654e:	e049      	b.n	80065e4 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006556:	b2db      	uxtb	r3, r3
 8006558:	2b00      	cmp	r3, #0
 800655a:	d106      	bne.n	800656a <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2200      	movs	r2, #0
 8006560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f7fb f94d 	bl	8001804 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2202      	movs	r2, #2
 800656e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	3304      	adds	r3, #4
 800657a:	4619      	mov	r1, r3
 800657c:	4610      	mov	r0, r2
 800657e:	f000 fb2b 	bl	8006bd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2201      	movs	r2, #1
 8006586:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2201      	movs	r2, #1
 800658e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2201      	movs	r2, #1
 8006596:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2201      	movs	r2, #1
 800659e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2201      	movs	r2, #1
 80065a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2201      	movs	r2, #1
 80065ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2201      	movs	r2, #1
 80065b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2201      	movs	r2, #1
 80065be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2201      	movs	r2, #1
 80065c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2201      	movs	r2, #1
 80065ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2201      	movs	r2, #1
 80065d6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2201      	movs	r2, #1
 80065de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80065e2:	2300      	movs	r3, #0
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3708      	adds	r7, #8
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}

080065ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b082      	sub	sp, #8
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	691b      	ldr	r3, [r3, #16]
 80065fa:	f003 0302 	and.w	r3, r3, #2
 80065fe:	2b02      	cmp	r3, #2
 8006600:	d122      	bne.n	8006648 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	68db      	ldr	r3, [r3, #12]
 8006608:	f003 0302 	and.w	r3, r3, #2
 800660c:	2b02      	cmp	r3, #2
 800660e:	d11b      	bne.n	8006648 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f06f 0202 	mvn.w	r2, #2
 8006618:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2201      	movs	r2, #1
 800661e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	699b      	ldr	r3, [r3, #24]
 8006626:	f003 0303 	and.w	r3, r3, #3
 800662a:	2b00      	cmp	r3, #0
 800662c:	d003      	beq.n	8006636 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f000 fab4 	bl	8006b9c <HAL_TIM_IC_CaptureCallback>
 8006634:	e005      	b.n	8006642 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f000 faa6 	bl	8006b88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f000 fab7 	bl	8006bb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2200      	movs	r2, #0
 8006646:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	691b      	ldr	r3, [r3, #16]
 800664e:	f003 0304 	and.w	r3, r3, #4
 8006652:	2b04      	cmp	r3, #4
 8006654:	d122      	bne.n	800669c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	68db      	ldr	r3, [r3, #12]
 800665c:	f003 0304 	and.w	r3, r3, #4
 8006660:	2b04      	cmp	r3, #4
 8006662:	d11b      	bne.n	800669c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f06f 0204 	mvn.w	r2, #4
 800666c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2202      	movs	r2, #2
 8006672:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	699b      	ldr	r3, [r3, #24]
 800667a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800667e:	2b00      	cmp	r3, #0
 8006680:	d003      	beq.n	800668a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 fa8a 	bl	8006b9c <HAL_TIM_IC_CaptureCallback>
 8006688:	e005      	b.n	8006696 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f000 fa7c 	bl	8006b88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f000 fa8d 	bl	8006bb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2200      	movs	r2, #0
 800669a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	691b      	ldr	r3, [r3, #16]
 80066a2:	f003 0308 	and.w	r3, r3, #8
 80066a6:	2b08      	cmp	r3, #8
 80066a8:	d122      	bne.n	80066f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	68db      	ldr	r3, [r3, #12]
 80066b0:	f003 0308 	and.w	r3, r3, #8
 80066b4:	2b08      	cmp	r3, #8
 80066b6:	d11b      	bne.n	80066f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f06f 0208 	mvn.w	r2, #8
 80066c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2204      	movs	r2, #4
 80066c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	69db      	ldr	r3, [r3, #28]
 80066ce:	f003 0303 	and.w	r3, r3, #3
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d003      	beq.n	80066de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f000 fa60 	bl	8006b9c <HAL_TIM_IC_CaptureCallback>
 80066dc:	e005      	b.n	80066ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f000 fa52 	bl	8006b88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f000 fa63 	bl	8006bb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2200      	movs	r2, #0
 80066ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	691b      	ldr	r3, [r3, #16]
 80066f6:	f003 0310 	and.w	r3, r3, #16
 80066fa:	2b10      	cmp	r3, #16
 80066fc:	d122      	bne.n	8006744 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	68db      	ldr	r3, [r3, #12]
 8006704:	f003 0310 	and.w	r3, r3, #16
 8006708:	2b10      	cmp	r3, #16
 800670a:	d11b      	bne.n	8006744 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f06f 0210 	mvn.w	r2, #16
 8006714:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2208      	movs	r2, #8
 800671a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	69db      	ldr	r3, [r3, #28]
 8006722:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006726:	2b00      	cmp	r3, #0
 8006728:	d003      	beq.n	8006732 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 fa36 	bl	8006b9c <HAL_TIM_IC_CaptureCallback>
 8006730:	e005      	b.n	800673e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f000 fa28 	bl	8006b88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f000 fa39 	bl	8006bb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2200      	movs	r2, #0
 8006742:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	691b      	ldr	r3, [r3, #16]
 800674a:	f003 0301 	and.w	r3, r3, #1
 800674e:	2b01      	cmp	r3, #1
 8006750:	d10e      	bne.n	8006770 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	68db      	ldr	r3, [r3, #12]
 8006758:	f003 0301 	and.w	r3, r3, #1
 800675c:	2b01      	cmp	r3, #1
 800675e:	d107      	bne.n	8006770 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f06f 0201 	mvn.w	r2, #1
 8006768:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f000 fa02 	bl	8006b74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	691b      	ldr	r3, [r3, #16]
 8006776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800677a:	2b80      	cmp	r3, #128	; 0x80
 800677c:	d10e      	bne.n	800679c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	68db      	ldr	r3, [r3, #12]
 8006784:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006788:	2b80      	cmp	r3, #128	; 0x80
 800678a:	d107      	bne.n	800679c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006794:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f000 fede 	bl	8007558 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	691b      	ldr	r3, [r3, #16]
 80067a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067aa:	d10e      	bne.n	80067ca <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	68db      	ldr	r3, [r3, #12]
 80067b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067b6:	2b80      	cmp	r3, #128	; 0x80
 80067b8:	d107      	bne.n	80067ca <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80067c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f000 fed1 	bl	800756c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	691b      	ldr	r3, [r3, #16]
 80067d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067d4:	2b40      	cmp	r3, #64	; 0x40
 80067d6:	d10e      	bne.n	80067f6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	68db      	ldr	r3, [r3, #12]
 80067de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067e2:	2b40      	cmp	r3, #64	; 0x40
 80067e4:	d107      	bne.n	80067f6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80067ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f000 f9e7 	bl	8006bc4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	691b      	ldr	r3, [r3, #16]
 80067fc:	f003 0320 	and.w	r3, r3, #32
 8006800:	2b20      	cmp	r3, #32
 8006802:	d10e      	bne.n	8006822 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	68db      	ldr	r3, [r3, #12]
 800680a:	f003 0320 	and.w	r3, r3, #32
 800680e:	2b20      	cmp	r3, #32
 8006810:	d107      	bne.n	8006822 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f06f 0220 	mvn.w	r2, #32
 800681a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f000 fe91 	bl	8007544 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006822:	bf00      	nop
 8006824:	3708      	adds	r7, #8
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}

0800682a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800682a:	b580      	push	{r7, lr}
 800682c:	b084      	sub	sp, #16
 800682e:	af00      	add	r7, sp, #0
 8006830:	60f8      	str	r0, [r7, #12]
 8006832:	60b9      	str	r1, [r7, #8]
 8006834:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800683c:	2b01      	cmp	r3, #1
 800683e:	d101      	bne.n	8006844 <HAL_TIM_IC_ConfigChannel+0x1a>
 8006840:	2302      	movs	r3, #2
 8006842:	e082      	b.n	800694a <HAL_TIM_IC_ConfigChannel+0x120>
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2201      	movs	r2, #1
 8006848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d11b      	bne.n	800688a <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	6818      	ldr	r0, [r3, #0]
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	6819      	ldr	r1, [r3, #0]
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	685a      	ldr	r2, [r3, #4]
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	68db      	ldr	r3, [r3, #12]
 8006862:	f000 fcb7 	bl	80071d4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	699a      	ldr	r2, [r3, #24]
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f022 020c 	bic.w	r2, r2, #12
 8006874:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	6999      	ldr	r1, [r3, #24]
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	689a      	ldr	r2, [r3, #8]
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	430a      	orrs	r2, r1
 8006886:	619a      	str	r2, [r3, #24]
 8006888:	e05a      	b.n	8006940 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2b04      	cmp	r3, #4
 800688e:	d11c      	bne.n	80068ca <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	6818      	ldr	r0, [r3, #0]
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	6819      	ldr	r1, [r3, #0]
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	685a      	ldr	r2, [r3, #4]
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	68db      	ldr	r3, [r3, #12]
 80068a0:	f000 fd0c 	bl	80072bc <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	699a      	ldr	r2, [r3, #24]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80068b2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	6999      	ldr	r1, [r3, #24]
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	021a      	lsls	r2, r3, #8
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	430a      	orrs	r2, r1
 80068c6:	619a      	str	r2, [r3, #24]
 80068c8:	e03a      	b.n	8006940 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2b08      	cmp	r3, #8
 80068ce:	d11b      	bne.n	8006908 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	6818      	ldr	r0, [r3, #0]
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	6819      	ldr	r1, [r3, #0]
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	685a      	ldr	r2, [r3, #4]
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	68db      	ldr	r3, [r3, #12]
 80068e0:	f000 fd29 	bl	8007336 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	69da      	ldr	r2, [r3, #28]
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f022 020c 	bic.w	r2, r2, #12
 80068f2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	69d9      	ldr	r1, [r3, #28]
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	689a      	ldr	r2, [r3, #8]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	430a      	orrs	r2, r1
 8006904:	61da      	str	r2, [r3, #28]
 8006906:	e01b      	b.n	8006940 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6818      	ldr	r0, [r3, #0]
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	6819      	ldr	r1, [r3, #0]
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	685a      	ldr	r2, [r3, #4]
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	68db      	ldr	r3, [r3, #12]
 8006918:	f000 fd49 	bl	80073ae <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	69da      	ldr	r2, [r3, #28]
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800692a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	69d9      	ldr	r1, [r3, #28]
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	021a      	lsls	r2, r3, #8
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	430a      	orrs	r2, r1
 800693e:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2200      	movs	r2, #0
 8006944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006948:	2300      	movs	r3, #0
}
 800694a:	4618      	mov	r0, r3
 800694c:	3710      	adds	r7, #16
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}
	...

08006954 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b084      	sub	sp, #16
 8006958:	af00      	add	r7, sp, #0
 800695a:	60f8      	str	r0, [r7, #12]
 800695c:	60b9      	str	r1, [r7, #8]
 800695e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006966:	2b01      	cmp	r3, #1
 8006968:	d101      	bne.n	800696e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800696a:	2302      	movs	r3, #2
 800696c:	e0fd      	b.n	8006b6a <HAL_TIM_PWM_ConfigChannel+0x216>
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2201      	movs	r2, #1
 8006972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2b14      	cmp	r3, #20
 800697a:	f200 80f0 	bhi.w	8006b5e <HAL_TIM_PWM_ConfigChannel+0x20a>
 800697e:	a201      	add	r2, pc, #4	; (adr r2, 8006984 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006984:	080069d9 	.word	0x080069d9
 8006988:	08006b5f 	.word	0x08006b5f
 800698c:	08006b5f 	.word	0x08006b5f
 8006990:	08006b5f 	.word	0x08006b5f
 8006994:	08006a19 	.word	0x08006a19
 8006998:	08006b5f 	.word	0x08006b5f
 800699c:	08006b5f 	.word	0x08006b5f
 80069a0:	08006b5f 	.word	0x08006b5f
 80069a4:	08006a5b 	.word	0x08006a5b
 80069a8:	08006b5f 	.word	0x08006b5f
 80069ac:	08006b5f 	.word	0x08006b5f
 80069b0:	08006b5f 	.word	0x08006b5f
 80069b4:	08006a9b 	.word	0x08006a9b
 80069b8:	08006b5f 	.word	0x08006b5f
 80069bc:	08006b5f 	.word	0x08006b5f
 80069c0:	08006b5f 	.word	0x08006b5f
 80069c4:	08006add 	.word	0x08006add
 80069c8:	08006b5f 	.word	0x08006b5f
 80069cc:	08006b5f 	.word	0x08006b5f
 80069d0:	08006b5f 	.word	0x08006b5f
 80069d4:	08006b1d 	.word	0x08006b1d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	68b9      	ldr	r1, [r7, #8]
 80069de:	4618      	mov	r0, r3
 80069e0:	f000 f99a 	bl	8006d18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	699a      	ldr	r2, [r3, #24]
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f042 0208 	orr.w	r2, r2, #8
 80069f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	699a      	ldr	r2, [r3, #24]
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f022 0204 	bic.w	r2, r2, #4
 8006a02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	6999      	ldr	r1, [r3, #24]
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	691a      	ldr	r2, [r3, #16]
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	430a      	orrs	r2, r1
 8006a14:	619a      	str	r2, [r3, #24]
      break;
 8006a16:	e0a3      	b.n	8006b60 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	68b9      	ldr	r1, [r7, #8]
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f000 f9ec 	bl	8006dfc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	699a      	ldr	r2, [r3, #24]
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	699a      	ldr	r2, [r3, #24]
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	6999      	ldr	r1, [r3, #24]
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	691b      	ldr	r3, [r3, #16]
 8006a4e:	021a      	lsls	r2, r3, #8
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	430a      	orrs	r2, r1
 8006a56:	619a      	str	r2, [r3, #24]
      break;
 8006a58:	e082      	b.n	8006b60 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	68b9      	ldr	r1, [r7, #8]
 8006a60:	4618      	mov	r0, r3
 8006a62:	f000 fa43 	bl	8006eec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	69da      	ldr	r2, [r3, #28]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f042 0208 	orr.w	r2, r2, #8
 8006a74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	69da      	ldr	r2, [r3, #28]
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f022 0204 	bic.w	r2, r2, #4
 8006a84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	69d9      	ldr	r1, [r3, #28]
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	691a      	ldr	r2, [r3, #16]
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	430a      	orrs	r2, r1
 8006a96:	61da      	str	r2, [r3, #28]
      break;
 8006a98:	e062      	b.n	8006b60 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	68b9      	ldr	r1, [r7, #8]
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f000 fa99 	bl	8006fd8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	69da      	ldr	r2, [r3, #28]
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ab4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	69da      	ldr	r2, [r3, #28]
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ac4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	69d9      	ldr	r1, [r3, #28]
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	691b      	ldr	r3, [r3, #16]
 8006ad0:	021a      	lsls	r2, r3, #8
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	430a      	orrs	r2, r1
 8006ad8:	61da      	str	r2, [r3, #28]
      break;
 8006ada:	e041      	b.n	8006b60 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	68b9      	ldr	r1, [r7, #8]
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f000 fad0 	bl	8007088 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f042 0208 	orr.w	r2, r2, #8
 8006af6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f022 0204 	bic.w	r2, r2, #4
 8006b06:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	691a      	ldr	r2, [r3, #16]
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	430a      	orrs	r2, r1
 8006b18:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006b1a:	e021      	b.n	8006b60 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	68b9      	ldr	r1, [r7, #8]
 8006b22:	4618      	mov	r0, r3
 8006b24:	f000 fb02 	bl	800712c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b36:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b46:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	691b      	ldr	r3, [r3, #16]
 8006b52:	021a      	lsls	r2, r3, #8
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	430a      	orrs	r2, r1
 8006b5a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006b5c:	e000      	b.n	8006b60 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8006b5e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2200      	movs	r2, #0
 8006b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b68:	2300      	movs	r3, #0
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3710      	adds	r7, #16
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}
 8006b72:	bf00      	nop

08006b74 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b083      	sub	sp, #12
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006b7c:	bf00      	nop
 8006b7e:	370c      	adds	r7, #12
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	4770      	bx	lr

08006b88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b083      	sub	sp, #12
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b90:	bf00      	nop
 8006b92:	370c      	adds	r7, #12
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr

08006b9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b083      	sub	sp, #12
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006ba4:	bf00      	nop
 8006ba6:	370c      	adds	r7, #12
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr

08006bb0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b083      	sub	sp, #12
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006bb8:	bf00      	nop
 8006bba:	370c      	adds	r7, #12
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc2:	4770      	bx	lr

08006bc4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b083      	sub	sp, #12
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006bcc:	bf00      	nop
 8006bce:	370c      	adds	r7, #12
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr

08006bd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b085      	sub	sp, #20
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	4a40      	ldr	r2, [pc, #256]	; (8006cec <TIM_Base_SetConfig+0x114>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d013      	beq.n	8006c18 <TIM_Base_SetConfig+0x40>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bf6:	d00f      	beq.n	8006c18 <TIM_Base_SetConfig+0x40>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	4a3d      	ldr	r2, [pc, #244]	; (8006cf0 <TIM_Base_SetConfig+0x118>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d00b      	beq.n	8006c18 <TIM_Base_SetConfig+0x40>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	4a3c      	ldr	r2, [pc, #240]	; (8006cf4 <TIM_Base_SetConfig+0x11c>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d007      	beq.n	8006c18 <TIM_Base_SetConfig+0x40>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	4a3b      	ldr	r2, [pc, #236]	; (8006cf8 <TIM_Base_SetConfig+0x120>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d003      	beq.n	8006c18 <TIM_Base_SetConfig+0x40>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	4a3a      	ldr	r2, [pc, #232]	; (8006cfc <TIM_Base_SetConfig+0x124>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d108      	bne.n	8006c2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	68fa      	ldr	r2, [r7, #12]
 8006c26:	4313      	orrs	r3, r2
 8006c28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	4a2f      	ldr	r2, [pc, #188]	; (8006cec <TIM_Base_SetConfig+0x114>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d02b      	beq.n	8006c8a <TIM_Base_SetConfig+0xb2>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c38:	d027      	beq.n	8006c8a <TIM_Base_SetConfig+0xb2>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	4a2c      	ldr	r2, [pc, #176]	; (8006cf0 <TIM_Base_SetConfig+0x118>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d023      	beq.n	8006c8a <TIM_Base_SetConfig+0xb2>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	4a2b      	ldr	r2, [pc, #172]	; (8006cf4 <TIM_Base_SetConfig+0x11c>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d01f      	beq.n	8006c8a <TIM_Base_SetConfig+0xb2>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	4a2a      	ldr	r2, [pc, #168]	; (8006cf8 <TIM_Base_SetConfig+0x120>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d01b      	beq.n	8006c8a <TIM_Base_SetConfig+0xb2>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	4a29      	ldr	r2, [pc, #164]	; (8006cfc <TIM_Base_SetConfig+0x124>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d017      	beq.n	8006c8a <TIM_Base_SetConfig+0xb2>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	4a28      	ldr	r2, [pc, #160]	; (8006d00 <TIM_Base_SetConfig+0x128>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d013      	beq.n	8006c8a <TIM_Base_SetConfig+0xb2>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	4a27      	ldr	r2, [pc, #156]	; (8006d04 <TIM_Base_SetConfig+0x12c>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d00f      	beq.n	8006c8a <TIM_Base_SetConfig+0xb2>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	4a26      	ldr	r2, [pc, #152]	; (8006d08 <TIM_Base_SetConfig+0x130>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d00b      	beq.n	8006c8a <TIM_Base_SetConfig+0xb2>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	4a25      	ldr	r2, [pc, #148]	; (8006d0c <TIM_Base_SetConfig+0x134>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d007      	beq.n	8006c8a <TIM_Base_SetConfig+0xb2>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	4a24      	ldr	r2, [pc, #144]	; (8006d10 <TIM_Base_SetConfig+0x138>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d003      	beq.n	8006c8a <TIM_Base_SetConfig+0xb2>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	4a23      	ldr	r2, [pc, #140]	; (8006d14 <TIM_Base_SetConfig+0x13c>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d108      	bne.n	8006c9c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	68db      	ldr	r3, [r3, #12]
 8006c96:	68fa      	ldr	r2, [r7, #12]
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	695b      	ldr	r3, [r3, #20]
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	68fa      	ldr	r2, [r7, #12]
 8006cae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	689a      	ldr	r2, [r3, #8]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	681a      	ldr	r2, [r3, #0]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	4a0a      	ldr	r2, [pc, #40]	; (8006cec <TIM_Base_SetConfig+0x114>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d003      	beq.n	8006cd0 <TIM_Base_SetConfig+0xf8>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	4a0c      	ldr	r2, [pc, #48]	; (8006cfc <TIM_Base_SetConfig+0x124>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d103      	bne.n	8006cd8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	691a      	ldr	r2, [r3, #16]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	615a      	str	r2, [r3, #20]
}
 8006cde:	bf00      	nop
 8006ce0:	3714      	adds	r7, #20
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce8:	4770      	bx	lr
 8006cea:	bf00      	nop
 8006cec:	40010000 	.word	0x40010000
 8006cf0:	40000400 	.word	0x40000400
 8006cf4:	40000800 	.word	0x40000800
 8006cf8:	40000c00 	.word	0x40000c00
 8006cfc:	40010400 	.word	0x40010400
 8006d00:	40014000 	.word	0x40014000
 8006d04:	40014400 	.word	0x40014400
 8006d08:	40014800 	.word	0x40014800
 8006d0c:	40001800 	.word	0x40001800
 8006d10:	40001c00 	.word	0x40001c00
 8006d14:	40002000 	.word	0x40002000

08006d18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b087      	sub	sp, #28
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
 8006d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6a1b      	ldr	r3, [r3, #32]
 8006d26:	f023 0201 	bic.w	r2, r3, #1
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6a1b      	ldr	r3, [r3, #32]
 8006d32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	699b      	ldr	r3, [r3, #24]
 8006d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006d40:	68fa      	ldr	r2, [r7, #12]
 8006d42:	4b2b      	ldr	r3, [pc, #172]	; (8006df0 <TIM_OC1_SetConfig+0xd8>)
 8006d44:	4013      	ands	r3, r2
 8006d46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f023 0303 	bic.w	r3, r3, #3
 8006d4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	68fa      	ldr	r2, [r7, #12]
 8006d56:	4313      	orrs	r3, r2
 8006d58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	f023 0302 	bic.w	r3, r3, #2
 8006d60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	697a      	ldr	r2, [r7, #20]
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	4a21      	ldr	r2, [pc, #132]	; (8006df4 <TIM_OC1_SetConfig+0xdc>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d003      	beq.n	8006d7c <TIM_OC1_SetConfig+0x64>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	4a20      	ldr	r2, [pc, #128]	; (8006df8 <TIM_OC1_SetConfig+0xe0>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d10c      	bne.n	8006d96 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	f023 0308 	bic.w	r3, r3, #8
 8006d82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	68db      	ldr	r3, [r3, #12]
 8006d88:	697a      	ldr	r2, [r7, #20]
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	f023 0304 	bic.w	r3, r3, #4
 8006d94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	4a16      	ldr	r2, [pc, #88]	; (8006df4 <TIM_OC1_SetConfig+0xdc>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d003      	beq.n	8006da6 <TIM_OC1_SetConfig+0x8e>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	4a15      	ldr	r2, [pc, #84]	; (8006df8 <TIM_OC1_SetConfig+0xe0>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d111      	bne.n	8006dca <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006dac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006db4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	695b      	ldr	r3, [r3, #20]
 8006dba:	693a      	ldr	r2, [r7, #16]
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	699b      	ldr	r3, [r3, #24]
 8006dc4:	693a      	ldr	r2, [r7, #16]
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	693a      	ldr	r2, [r7, #16]
 8006dce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	68fa      	ldr	r2, [r7, #12]
 8006dd4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	685a      	ldr	r2, [r3, #4]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	697a      	ldr	r2, [r7, #20]
 8006de2:	621a      	str	r2, [r3, #32]
}
 8006de4:	bf00      	nop
 8006de6:	371c      	adds	r7, #28
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr
 8006df0:	fffeff8f 	.word	0xfffeff8f
 8006df4:	40010000 	.word	0x40010000
 8006df8:	40010400 	.word	0x40010400

08006dfc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b087      	sub	sp, #28
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
 8006e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6a1b      	ldr	r3, [r3, #32]
 8006e0a:	f023 0210 	bic.w	r2, r3, #16
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6a1b      	ldr	r3, [r3, #32]
 8006e16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	699b      	ldr	r3, [r3, #24]
 8006e22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006e24:	68fa      	ldr	r2, [r7, #12]
 8006e26:	4b2e      	ldr	r3, [pc, #184]	; (8006ee0 <TIM_OC2_SetConfig+0xe4>)
 8006e28:	4013      	ands	r3, r2
 8006e2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	021b      	lsls	r3, r3, #8
 8006e3a:	68fa      	ldr	r2, [r7, #12]
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	f023 0320 	bic.w	r3, r3, #32
 8006e46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	011b      	lsls	r3, r3, #4
 8006e4e:	697a      	ldr	r2, [r7, #20]
 8006e50:	4313      	orrs	r3, r2
 8006e52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	4a23      	ldr	r2, [pc, #140]	; (8006ee4 <TIM_OC2_SetConfig+0xe8>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d003      	beq.n	8006e64 <TIM_OC2_SetConfig+0x68>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	4a22      	ldr	r2, [pc, #136]	; (8006ee8 <TIM_OC2_SetConfig+0xec>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d10d      	bne.n	8006e80 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	68db      	ldr	r3, [r3, #12]
 8006e70:	011b      	lsls	r3, r3, #4
 8006e72:	697a      	ldr	r2, [r7, #20]
 8006e74:	4313      	orrs	r3, r2
 8006e76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e7e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	4a18      	ldr	r2, [pc, #96]	; (8006ee4 <TIM_OC2_SetConfig+0xe8>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d003      	beq.n	8006e90 <TIM_OC2_SetConfig+0x94>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	4a17      	ldr	r2, [pc, #92]	; (8006ee8 <TIM_OC2_SetConfig+0xec>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d113      	bne.n	8006eb8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	695b      	ldr	r3, [r3, #20]
 8006ea4:	009b      	lsls	r3, r3, #2
 8006ea6:	693a      	ldr	r2, [r7, #16]
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	699b      	ldr	r3, [r3, #24]
 8006eb0:	009b      	lsls	r3, r3, #2
 8006eb2:	693a      	ldr	r2, [r7, #16]
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	693a      	ldr	r2, [r7, #16]
 8006ebc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	68fa      	ldr	r2, [r7, #12]
 8006ec2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	685a      	ldr	r2, [r3, #4]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	697a      	ldr	r2, [r7, #20]
 8006ed0:	621a      	str	r2, [r3, #32]
}
 8006ed2:	bf00      	nop
 8006ed4:	371c      	adds	r7, #28
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006edc:	4770      	bx	lr
 8006ede:	bf00      	nop
 8006ee0:	feff8fff 	.word	0xfeff8fff
 8006ee4:	40010000 	.word	0x40010000
 8006ee8:	40010400 	.word	0x40010400

08006eec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b087      	sub	sp, #28
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6a1b      	ldr	r3, [r3, #32]
 8006efa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6a1b      	ldr	r3, [r3, #32]
 8006f06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	69db      	ldr	r3, [r3, #28]
 8006f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006f14:	68fa      	ldr	r2, [r7, #12]
 8006f16:	4b2d      	ldr	r3, [pc, #180]	; (8006fcc <TIM_OC3_SetConfig+0xe0>)
 8006f18:	4013      	ands	r3, r2
 8006f1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f023 0303 	bic.w	r3, r3, #3
 8006f22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	68fa      	ldr	r2, [r7, #12]
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	021b      	lsls	r3, r3, #8
 8006f3c:	697a      	ldr	r2, [r7, #20]
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	4a22      	ldr	r2, [pc, #136]	; (8006fd0 <TIM_OC3_SetConfig+0xe4>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d003      	beq.n	8006f52 <TIM_OC3_SetConfig+0x66>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	4a21      	ldr	r2, [pc, #132]	; (8006fd4 <TIM_OC3_SetConfig+0xe8>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d10d      	bne.n	8006f6e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	68db      	ldr	r3, [r3, #12]
 8006f5e:	021b      	lsls	r3, r3, #8
 8006f60:	697a      	ldr	r2, [r7, #20]
 8006f62:	4313      	orrs	r3, r2
 8006f64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	4a17      	ldr	r2, [pc, #92]	; (8006fd0 <TIM_OC3_SetConfig+0xe4>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d003      	beq.n	8006f7e <TIM_OC3_SetConfig+0x92>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	4a16      	ldr	r2, [pc, #88]	; (8006fd4 <TIM_OC3_SetConfig+0xe8>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d113      	bne.n	8006fa6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	695b      	ldr	r3, [r3, #20]
 8006f92:	011b      	lsls	r3, r3, #4
 8006f94:	693a      	ldr	r2, [r7, #16]
 8006f96:	4313      	orrs	r3, r2
 8006f98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	699b      	ldr	r3, [r3, #24]
 8006f9e:	011b      	lsls	r3, r3, #4
 8006fa0:	693a      	ldr	r2, [r7, #16]
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	693a      	ldr	r2, [r7, #16]
 8006faa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	68fa      	ldr	r2, [r7, #12]
 8006fb0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	685a      	ldr	r2, [r3, #4]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	697a      	ldr	r2, [r7, #20]
 8006fbe:	621a      	str	r2, [r3, #32]
}
 8006fc0:	bf00      	nop
 8006fc2:	371c      	adds	r7, #28
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr
 8006fcc:	fffeff8f 	.word	0xfffeff8f
 8006fd0:	40010000 	.word	0x40010000
 8006fd4:	40010400 	.word	0x40010400

08006fd8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b087      	sub	sp, #28
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6a1b      	ldr	r3, [r3, #32]
 8006fe6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6a1b      	ldr	r3, [r3, #32]
 8006ff2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	69db      	ldr	r3, [r3, #28]
 8006ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007000:	68fa      	ldr	r2, [r7, #12]
 8007002:	4b1e      	ldr	r3, [pc, #120]	; (800707c <TIM_OC4_SetConfig+0xa4>)
 8007004:	4013      	ands	r3, r2
 8007006:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800700e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	021b      	lsls	r3, r3, #8
 8007016:	68fa      	ldr	r2, [r7, #12]
 8007018:	4313      	orrs	r3, r2
 800701a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007022:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	689b      	ldr	r3, [r3, #8]
 8007028:	031b      	lsls	r3, r3, #12
 800702a:	693a      	ldr	r2, [r7, #16]
 800702c:	4313      	orrs	r3, r2
 800702e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	4a13      	ldr	r2, [pc, #76]	; (8007080 <TIM_OC4_SetConfig+0xa8>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d003      	beq.n	8007040 <TIM_OC4_SetConfig+0x68>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	4a12      	ldr	r2, [pc, #72]	; (8007084 <TIM_OC4_SetConfig+0xac>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d109      	bne.n	8007054 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007046:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	695b      	ldr	r3, [r3, #20]
 800704c:	019b      	lsls	r3, r3, #6
 800704e:	697a      	ldr	r2, [r7, #20]
 8007050:	4313      	orrs	r3, r2
 8007052:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	697a      	ldr	r2, [r7, #20]
 8007058:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	68fa      	ldr	r2, [r7, #12]
 800705e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	685a      	ldr	r2, [r3, #4]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	693a      	ldr	r2, [r7, #16]
 800706c:	621a      	str	r2, [r3, #32]
}
 800706e:	bf00      	nop
 8007070:	371c      	adds	r7, #28
 8007072:	46bd      	mov	sp, r7
 8007074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007078:	4770      	bx	lr
 800707a:	bf00      	nop
 800707c:	feff8fff 	.word	0xfeff8fff
 8007080:	40010000 	.word	0x40010000
 8007084:	40010400 	.word	0x40010400

08007088 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007088:	b480      	push	{r7}
 800708a:	b087      	sub	sp, #28
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6a1b      	ldr	r3, [r3, #32]
 8007096:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6a1b      	ldr	r3, [r3, #32]
 80070a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80070b0:	68fa      	ldr	r2, [r7, #12]
 80070b2:	4b1b      	ldr	r3, [pc, #108]	; (8007120 <TIM_OC5_SetConfig+0x98>)
 80070b4:	4013      	ands	r3, r2
 80070b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	68fa      	ldr	r2, [r7, #12]
 80070be:	4313      	orrs	r3, r2
 80070c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80070c8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	689b      	ldr	r3, [r3, #8]
 80070ce:	041b      	lsls	r3, r3, #16
 80070d0:	693a      	ldr	r2, [r7, #16]
 80070d2:	4313      	orrs	r3, r2
 80070d4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	4a12      	ldr	r2, [pc, #72]	; (8007124 <TIM_OC5_SetConfig+0x9c>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d003      	beq.n	80070e6 <TIM_OC5_SetConfig+0x5e>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	4a11      	ldr	r2, [pc, #68]	; (8007128 <TIM_OC5_SetConfig+0xa0>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d109      	bne.n	80070fa <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070ec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	695b      	ldr	r3, [r3, #20]
 80070f2:	021b      	lsls	r3, r3, #8
 80070f4:	697a      	ldr	r2, [r7, #20]
 80070f6:	4313      	orrs	r3, r2
 80070f8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	697a      	ldr	r2, [r7, #20]
 80070fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	68fa      	ldr	r2, [r7, #12]
 8007104:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	685a      	ldr	r2, [r3, #4]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	693a      	ldr	r2, [r7, #16]
 8007112:	621a      	str	r2, [r3, #32]
}
 8007114:	bf00      	nop
 8007116:	371c      	adds	r7, #28
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr
 8007120:	fffeff8f 	.word	0xfffeff8f
 8007124:	40010000 	.word	0x40010000
 8007128:	40010400 	.word	0x40010400

0800712c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800712c:	b480      	push	{r7}
 800712e:	b087      	sub	sp, #28
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6a1b      	ldr	r3, [r3, #32]
 800713a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6a1b      	ldr	r3, [r3, #32]
 8007146:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007154:	68fa      	ldr	r2, [r7, #12]
 8007156:	4b1c      	ldr	r3, [pc, #112]	; (80071c8 <TIM_OC6_SetConfig+0x9c>)
 8007158:	4013      	ands	r3, r2
 800715a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	021b      	lsls	r3, r3, #8
 8007162:	68fa      	ldr	r2, [r7, #12]
 8007164:	4313      	orrs	r3, r2
 8007166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800716e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	051b      	lsls	r3, r3, #20
 8007176:	693a      	ldr	r2, [r7, #16]
 8007178:	4313      	orrs	r3, r2
 800717a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	4a13      	ldr	r2, [pc, #76]	; (80071cc <TIM_OC6_SetConfig+0xa0>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d003      	beq.n	800718c <TIM_OC6_SetConfig+0x60>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	4a12      	ldr	r2, [pc, #72]	; (80071d0 <TIM_OC6_SetConfig+0xa4>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d109      	bne.n	80071a0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007192:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	695b      	ldr	r3, [r3, #20]
 8007198:	029b      	lsls	r3, r3, #10
 800719a:	697a      	ldr	r2, [r7, #20]
 800719c:	4313      	orrs	r3, r2
 800719e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	697a      	ldr	r2, [r7, #20]
 80071a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	68fa      	ldr	r2, [r7, #12]
 80071aa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	685a      	ldr	r2, [r3, #4]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	693a      	ldr	r2, [r7, #16]
 80071b8:	621a      	str	r2, [r3, #32]
}
 80071ba:	bf00      	nop
 80071bc:	371c      	adds	r7, #28
 80071be:	46bd      	mov	sp, r7
 80071c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c4:	4770      	bx	lr
 80071c6:	bf00      	nop
 80071c8:	feff8fff 	.word	0xfeff8fff
 80071cc:	40010000 	.word	0x40010000
 80071d0:	40010400 	.word	0x40010400

080071d4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b087      	sub	sp, #28
 80071d8:	af00      	add	r7, sp, #0
 80071da:	60f8      	str	r0, [r7, #12]
 80071dc:	60b9      	str	r1, [r7, #8]
 80071de:	607a      	str	r2, [r7, #4]
 80071e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	6a1b      	ldr	r3, [r3, #32]
 80071e6:	f023 0201 	bic.w	r2, r3, #1
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	699b      	ldr	r3, [r3, #24]
 80071f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	6a1b      	ldr	r3, [r3, #32]
 80071f8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	4a28      	ldr	r2, [pc, #160]	; (80072a0 <TIM_TI1_SetConfig+0xcc>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d01b      	beq.n	800723a <TIM_TI1_SetConfig+0x66>
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007208:	d017      	beq.n	800723a <TIM_TI1_SetConfig+0x66>
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	4a25      	ldr	r2, [pc, #148]	; (80072a4 <TIM_TI1_SetConfig+0xd0>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d013      	beq.n	800723a <TIM_TI1_SetConfig+0x66>
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	4a24      	ldr	r2, [pc, #144]	; (80072a8 <TIM_TI1_SetConfig+0xd4>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d00f      	beq.n	800723a <TIM_TI1_SetConfig+0x66>
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	4a23      	ldr	r2, [pc, #140]	; (80072ac <TIM_TI1_SetConfig+0xd8>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d00b      	beq.n	800723a <TIM_TI1_SetConfig+0x66>
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	4a22      	ldr	r2, [pc, #136]	; (80072b0 <TIM_TI1_SetConfig+0xdc>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d007      	beq.n	800723a <TIM_TI1_SetConfig+0x66>
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	4a21      	ldr	r2, [pc, #132]	; (80072b4 <TIM_TI1_SetConfig+0xe0>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d003      	beq.n	800723a <TIM_TI1_SetConfig+0x66>
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	4a20      	ldr	r2, [pc, #128]	; (80072b8 <TIM_TI1_SetConfig+0xe4>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d101      	bne.n	800723e <TIM_TI1_SetConfig+0x6a>
 800723a:	2301      	movs	r3, #1
 800723c:	e000      	b.n	8007240 <TIM_TI1_SetConfig+0x6c>
 800723e:	2300      	movs	r3, #0
 8007240:	2b00      	cmp	r3, #0
 8007242:	d008      	beq.n	8007256 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	f023 0303 	bic.w	r3, r3, #3
 800724a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800724c:	697a      	ldr	r2, [r7, #20]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	4313      	orrs	r3, r2
 8007252:	617b      	str	r3, [r7, #20]
 8007254:	e003      	b.n	800725e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	f043 0301 	orr.w	r3, r3, #1
 800725c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007264:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	011b      	lsls	r3, r3, #4
 800726a:	b2db      	uxtb	r3, r3
 800726c:	697a      	ldr	r2, [r7, #20]
 800726e:	4313      	orrs	r3, r2
 8007270:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	f023 030a 	bic.w	r3, r3, #10
 8007278:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	f003 030a 	and.w	r3, r3, #10
 8007280:	693a      	ldr	r2, [r7, #16]
 8007282:	4313      	orrs	r3, r2
 8007284:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	697a      	ldr	r2, [r7, #20]
 800728a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	693a      	ldr	r2, [r7, #16]
 8007290:	621a      	str	r2, [r3, #32]
}
 8007292:	bf00      	nop
 8007294:	371c      	adds	r7, #28
 8007296:	46bd      	mov	sp, r7
 8007298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729c:	4770      	bx	lr
 800729e:	bf00      	nop
 80072a0:	40010000 	.word	0x40010000
 80072a4:	40000400 	.word	0x40000400
 80072a8:	40000800 	.word	0x40000800
 80072ac:	40000c00 	.word	0x40000c00
 80072b0:	40010400 	.word	0x40010400
 80072b4:	40014000 	.word	0x40014000
 80072b8:	40001800 	.word	0x40001800

080072bc <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80072bc:	b480      	push	{r7}
 80072be:	b087      	sub	sp, #28
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	60f8      	str	r0, [r7, #12]
 80072c4:	60b9      	str	r1, [r7, #8]
 80072c6:	607a      	str	r2, [r7, #4]
 80072c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	6a1b      	ldr	r3, [r3, #32]
 80072ce:	f023 0210 	bic.w	r2, r3, #16
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	699b      	ldr	r3, [r3, #24]
 80072da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	6a1b      	ldr	r3, [r3, #32]
 80072e0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	021b      	lsls	r3, r3, #8
 80072ee:	697a      	ldr	r2, [r7, #20]
 80072f0:	4313      	orrs	r3, r2
 80072f2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80072fa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	031b      	lsls	r3, r3, #12
 8007300:	b29b      	uxth	r3, r3
 8007302:	697a      	ldr	r2, [r7, #20]
 8007304:	4313      	orrs	r3, r2
 8007306:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800730e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	011b      	lsls	r3, r3, #4
 8007314:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007318:	693a      	ldr	r2, [r7, #16]
 800731a:	4313      	orrs	r3, r2
 800731c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	697a      	ldr	r2, [r7, #20]
 8007322:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	693a      	ldr	r2, [r7, #16]
 8007328:	621a      	str	r2, [r3, #32]
}
 800732a:	bf00      	nop
 800732c:	371c      	adds	r7, #28
 800732e:	46bd      	mov	sp, r7
 8007330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007334:	4770      	bx	lr

08007336 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007336:	b480      	push	{r7}
 8007338:	b087      	sub	sp, #28
 800733a:	af00      	add	r7, sp, #0
 800733c:	60f8      	str	r0, [r7, #12]
 800733e:	60b9      	str	r1, [r7, #8]
 8007340:	607a      	str	r2, [r7, #4]
 8007342:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	6a1b      	ldr	r3, [r3, #32]
 8007348:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	69db      	ldr	r3, [r3, #28]
 8007354:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	6a1b      	ldr	r3, [r3, #32]
 800735a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	f023 0303 	bic.w	r3, r3, #3
 8007362:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007364:	697a      	ldr	r2, [r7, #20]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	4313      	orrs	r3, r2
 800736a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007372:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	011b      	lsls	r3, r3, #4
 8007378:	b2db      	uxtb	r3, r3
 800737a:	697a      	ldr	r2, [r7, #20]
 800737c:	4313      	orrs	r3, r2
 800737e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007386:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	021b      	lsls	r3, r3, #8
 800738c:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007390:	693a      	ldr	r2, [r7, #16]
 8007392:	4313      	orrs	r3, r2
 8007394:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	697a      	ldr	r2, [r7, #20]
 800739a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	693a      	ldr	r2, [r7, #16]
 80073a0:	621a      	str	r2, [r3, #32]
}
 80073a2:	bf00      	nop
 80073a4:	371c      	adds	r7, #28
 80073a6:	46bd      	mov	sp, r7
 80073a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ac:	4770      	bx	lr

080073ae <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80073ae:	b480      	push	{r7}
 80073b0:	b087      	sub	sp, #28
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	60f8      	str	r0, [r7, #12]
 80073b6:	60b9      	str	r1, [r7, #8]
 80073b8:	607a      	str	r2, [r7, #4]
 80073ba:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	6a1b      	ldr	r3, [r3, #32]
 80073c0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	69db      	ldr	r3, [r3, #28]
 80073cc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	6a1b      	ldr	r3, [r3, #32]
 80073d2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073da:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	021b      	lsls	r3, r3, #8
 80073e0:	697a      	ldr	r2, [r7, #20]
 80073e2:	4313      	orrs	r3, r2
 80073e4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80073ec:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	031b      	lsls	r3, r3, #12
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	697a      	ldr	r2, [r7, #20]
 80073f6:	4313      	orrs	r3, r2
 80073f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007400:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	031b      	lsls	r3, r3, #12
 8007406:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800740a:	693a      	ldr	r2, [r7, #16]
 800740c:	4313      	orrs	r3, r2
 800740e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	697a      	ldr	r2, [r7, #20]
 8007414:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	693a      	ldr	r2, [r7, #16]
 800741a:	621a      	str	r2, [r3, #32]
}
 800741c:	bf00      	nop
 800741e:	371c      	adds	r7, #28
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr

08007428 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007428:	b480      	push	{r7}
 800742a:	b085      	sub	sp, #20
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007438:	2b01      	cmp	r3, #1
 800743a:	d101      	bne.n	8007440 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800743c:	2302      	movs	r3, #2
 800743e:	e06d      	b.n	800751c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2201      	movs	r2, #1
 8007444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2202      	movs	r2, #2
 800744c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	689b      	ldr	r3, [r3, #8]
 800745e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a30      	ldr	r2, [pc, #192]	; (8007528 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d004      	beq.n	8007474 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a2f      	ldr	r2, [pc, #188]	; (800752c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d108      	bne.n	8007486 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800747a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	68fa      	ldr	r2, [r7, #12]
 8007482:	4313      	orrs	r3, r2
 8007484:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800748c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	68fa      	ldr	r2, [r7, #12]
 8007494:	4313      	orrs	r3, r2
 8007496:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	68fa      	ldr	r2, [r7, #12]
 800749e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a20      	ldr	r2, [pc, #128]	; (8007528 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d022      	beq.n	80074f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074b2:	d01d      	beq.n	80074f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a1d      	ldr	r2, [pc, #116]	; (8007530 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d018      	beq.n	80074f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a1c      	ldr	r2, [pc, #112]	; (8007534 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d013      	beq.n	80074f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a1a      	ldr	r2, [pc, #104]	; (8007538 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d00e      	beq.n	80074f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a15      	ldr	r2, [pc, #84]	; (800752c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d009      	beq.n	80074f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a16      	ldr	r2, [pc, #88]	; (800753c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d004      	beq.n	80074f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a15      	ldr	r2, [pc, #84]	; (8007540 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d10c      	bne.n	800750a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80074f6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	689b      	ldr	r3, [r3, #8]
 80074fc:	68ba      	ldr	r2, [r7, #8]
 80074fe:	4313      	orrs	r3, r2
 8007500:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	68ba      	ldr	r2, [r7, #8]
 8007508:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2201      	movs	r2, #1
 800750e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2200      	movs	r2, #0
 8007516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800751a:	2300      	movs	r3, #0
}
 800751c:	4618      	mov	r0, r3
 800751e:	3714      	adds	r7, #20
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr
 8007528:	40010000 	.word	0x40010000
 800752c:	40010400 	.word	0x40010400
 8007530:	40000400 	.word	0x40000400
 8007534:	40000800 	.word	0x40000800
 8007538:	40000c00 	.word	0x40000c00
 800753c:	40014000 	.word	0x40014000
 8007540:	40001800 	.word	0x40001800

08007544 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007544:	b480      	push	{r7}
 8007546:	b083      	sub	sp, #12
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800754c:	bf00      	nop
 800754e:	370c      	adds	r7, #12
 8007550:	46bd      	mov	sp, r7
 8007552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007556:	4770      	bx	lr

08007558 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007558:	b480      	push	{r7}
 800755a:	b083      	sub	sp, #12
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007560:	bf00      	nop
 8007562:	370c      	adds	r7, #12
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr

0800756c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800756c:	b480      	push	{r7}
 800756e:	b083      	sub	sp, #12
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007574:	bf00      	nop
 8007576:	370c      	adds	r7, #12
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr

08007580 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b082      	sub	sp, #8
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d101      	bne.n	8007592 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800758e:	2301      	movs	r3, #1
 8007590:	e040      	b.n	8007614 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007596:	2b00      	cmp	r3, #0
 8007598:	d106      	bne.n	80075a8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2200      	movs	r2, #0
 800759e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f7fa fa14 	bl	80019d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2224      	movs	r2, #36	; 0x24
 80075ac:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	681a      	ldr	r2, [r3, #0]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f022 0201 	bic.w	r2, r2, #1
 80075bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 f990 	bl	80078e4 <UART_SetConfig>
 80075c4:	4603      	mov	r3, r0
 80075c6:	2b01      	cmp	r3, #1
 80075c8:	d101      	bne.n	80075ce <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80075ca:	2301      	movs	r3, #1
 80075cc:	e022      	b.n	8007614 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d002      	beq.n	80075dc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f000 fbe6 	bl	8007da8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	685a      	ldr	r2, [r3, #4]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80075ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	689a      	ldr	r2, [r3, #8]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80075fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	681a      	ldr	r2, [r3, #0]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f042 0201 	orr.w	r2, r2, #1
 800760a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f000 fc6d 	bl	8007eec <UART_CheckIdleState>
 8007612:	4603      	mov	r3, r0
}
 8007614:	4618      	mov	r0, r3
 8007616:	3708      	adds	r7, #8
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}

0800761c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b08a      	sub	sp, #40	; 0x28
 8007620:	af02      	add	r7, sp, #8
 8007622:	60f8      	str	r0, [r7, #12]
 8007624:	60b9      	str	r1, [r7, #8]
 8007626:	603b      	str	r3, [r7, #0]
 8007628:	4613      	mov	r3, r2
 800762a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007630:	2b20      	cmp	r3, #32
 8007632:	f040 8081 	bne.w	8007738 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d002      	beq.n	8007642 <HAL_UART_Transmit+0x26>
 800763c:	88fb      	ldrh	r3, [r7, #6]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d101      	bne.n	8007646 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007642:	2301      	movs	r3, #1
 8007644:	e079      	b.n	800773a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800764c:	2b01      	cmp	r3, #1
 800764e:	d101      	bne.n	8007654 <HAL_UART_Transmit+0x38>
 8007650:	2302      	movs	r3, #2
 8007652:	e072      	b.n	800773a <HAL_UART_Transmit+0x11e>
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2201      	movs	r2, #1
 8007658:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	2200      	movs	r2, #0
 8007660:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2221      	movs	r2, #33	; 0x21
 8007668:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800766a:	f7fa fb27 	bl	8001cbc <HAL_GetTick>
 800766e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	88fa      	ldrh	r2, [r7, #6]
 8007674:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	88fa      	ldrh	r2, [r7, #6]
 800767c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	689b      	ldr	r3, [r3, #8]
 8007684:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007688:	d108      	bne.n	800769c <HAL_UART_Transmit+0x80>
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	691b      	ldr	r3, [r3, #16]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d104      	bne.n	800769c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8007692:	2300      	movs	r3, #0
 8007694:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	61bb      	str	r3, [r7, #24]
 800769a:	e003      	b.n	80076a4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80076a0:	2300      	movs	r3, #0
 80076a2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2200      	movs	r2, #0
 80076a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80076ac:	e02c      	b.n	8007708 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	9300      	str	r3, [sp, #0]
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	2200      	movs	r2, #0
 80076b6:	2180      	movs	r1, #128	; 0x80
 80076b8:	68f8      	ldr	r0, [r7, #12]
 80076ba:	f000 fc60 	bl	8007f7e <UART_WaitOnFlagUntilTimeout>
 80076be:	4603      	mov	r3, r0
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d001      	beq.n	80076c8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80076c4:	2303      	movs	r3, #3
 80076c6:	e038      	b.n	800773a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80076c8:	69fb      	ldr	r3, [r7, #28]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d10b      	bne.n	80076e6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80076ce:	69bb      	ldr	r3, [r7, #24]
 80076d0:	881b      	ldrh	r3, [r3, #0]
 80076d2:	461a      	mov	r2, r3
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80076dc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80076de:	69bb      	ldr	r3, [r7, #24]
 80076e0:	3302      	adds	r3, #2
 80076e2:	61bb      	str	r3, [r7, #24]
 80076e4:	e007      	b.n	80076f6 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80076e6:	69fb      	ldr	r3, [r7, #28]
 80076e8:	781a      	ldrb	r2, [r3, #0]
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80076f0:	69fb      	ldr	r3, [r7, #28]
 80076f2:	3301      	adds	r3, #1
 80076f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	3b01      	subs	r3, #1
 8007700:	b29a      	uxth	r2, r3
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800770e:	b29b      	uxth	r3, r3
 8007710:	2b00      	cmp	r3, #0
 8007712:	d1cc      	bne.n	80076ae <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	9300      	str	r3, [sp, #0]
 8007718:	697b      	ldr	r3, [r7, #20]
 800771a:	2200      	movs	r2, #0
 800771c:	2140      	movs	r1, #64	; 0x40
 800771e:	68f8      	ldr	r0, [r7, #12]
 8007720:	f000 fc2d 	bl	8007f7e <UART_WaitOnFlagUntilTimeout>
 8007724:	4603      	mov	r3, r0
 8007726:	2b00      	cmp	r3, #0
 8007728:	d001      	beq.n	800772e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800772a:	2303      	movs	r3, #3
 800772c:	e005      	b.n	800773a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	2220      	movs	r2, #32
 8007732:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007734:	2300      	movs	r3, #0
 8007736:	e000      	b.n	800773a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8007738:	2302      	movs	r3, #2
  }
}
 800773a:	4618      	mov	r0, r3
 800773c:	3720      	adds	r7, #32
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}

08007742 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007742:	b580      	push	{r7, lr}
 8007744:	b08a      	sub	sp, #40	; 0x28
 8007746:	af02      	add	r7, sp, #8
 8007748:	60f8      	str	r0, [r7, #12]
 800774a:	60b9      	str	r1, [r7, #8]
 800774c:	603b      	str	r3, [r7, #0]
 800774e:	4613      	mov	r3, r2
 8007750:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007756:	2b20      	cmp	r3, #32
 8007758:	f040 80be 	bne.w	80078d8 <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d002      	beq.n	8007768 <HAL_UART_Receive+0x26>
 8007762:	88fb      	ldrh	r3, [r7, #6]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d101      	bne.n	800776c <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8007768:	2301      	movs	r3, #1
 800776a:	e0b6      	b.n	80078da <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007772:	2b01      	cmp	r3, #1
 8007774:	d101      	bne.n	800777a <HAL_UART_Receive+0x38>
 8007776:	2302      	movs	r3, #2
 8007778:	e0af      	b.n	80078da <HAL_UART_Receive+0x198>
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2201      	movs	r2, #1
 800777e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	2200      	movs	r2, #0
 8007786:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2222      	movs	r2, #34	; 0x22
 800778e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2200      	movs	r2, #0
 8007794:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007796:	f7fa fa91 	bl	8001cbc <HAL_GetTick>
 800779a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	88fa      	ldrh	r2, [r7, #6]
 80077a0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	88fa      	ldrh	r2, [r7, #6]
 80077a8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	689b      	ldr	r3, [r3, #8]
 80077b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077b4:	d10e      	bne.n	80077d4 <HAL_UART_Receive+0x92>
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	691b      	ldr	r3, [r3, #16]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d105      	bne.n	80077ca <HAL_UART_Receive+0x88>
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	f240 12ff 	movw	r2, #511	; 0x1ff
 80077c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80077c8:	e02d      	b.n	8007826 <HAL_UART_Receive+0xe4>
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	22ff      	movs	r2, #255	; 0xff
 80077ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80077d2:	e028      	b.n	8007826 <HAL_UART_Receive+0xe4>
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	689b      	ldr	r3, [r3, #8]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d10d      	bne.n	80077f8 <HAL_UART_Receive+0xb6>
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	691b      	ldr	r3, [r3, #16]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d104      	bne.n	80077ee <HAL_UART_Receive+0xac>
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	22ff      	movs	r2, #255	; 0xff
 80077e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80077ec:	e01b      	b.n	8007826 <HAL_UART_Receive+0xe4>
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	227f      	movs	r2, #127	; 0x7f
 80077f2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80077f6:	e016      	b.n	8007826 <HAL_UART_Receive+0xe4>
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	689b      	ldr	r3, [r3, #8]
 80077fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007800:	d10d      	bne.n	800781e <HAL_UART_Receive+0xdc>
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	691b      	ldr	r3, [r3, #16]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d104      	bne.n	8007814 <HAL_UART_Receive+0xd2>
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	227f      	movs	r2, #127	; 0x7f
 800780e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007812:	e008      	b.n	8007826 <HAL_UART_Receive+0xe4>
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	223f      	movs	r2, #63	; 0x3f
 8007818:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800781c:	e003      	b.n	8007826 <HAL_UART_Receive+0xe4>
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2200      	movs	r2, #0
 8007822:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800782c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	689b      	ldr	r3, [r3, #8]
 8007832:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007836:	d108      	bne.n	800784a <HAL_UART_Receive+0x108>
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	691b      	ldr	r3, [r3, #16]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d104      	bne.n	800784a <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8007840:	2300      	movs	r3, #0
 8007842:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	61bb      	str	r3, [r7, #24]
 8007848:	e003      	b.n	8007852 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800784e:	2300      	movs	r3, #0
 8007850:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	2200      	movs	r2, #0
 8007856:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800785a:	e032      	b.n	80078c2 <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	9300      	str	r3, [sp, #0]
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	2200      	movs	r2, #0
 8007864:	2120      	movs	r1, #32
 8007866:	68f8      	ldr	r0, [r7, #12]
 8007868:	f000 fb89 	bl	8007f7e <UART_WaitOnFlagUntilTimeout>
 800786c:	4603      	mov	r3, r0
 800786e:	2b00      	cmp	r3, #0
 8007870:	d001      	beq.n	8007876 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8007872:	2303      	movs	r3, #3
 8007874:	e031      	b.n	80078da <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 8007876:	69fb      	ldr	r3, [r7, #28]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d10c      	bne.n	8007896 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007882:	b29a      	uxth	r2, r3
 8007884:	8a7b      	ldrh	r3, [r7, #18]
 8007886:	4013      	ands	r3, r2
 8007888:	b29a      	uxth	r2, r3
 800788a:	69bb      	ldr	r3, [r7, #24]
 800788c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800788e:	69bb      	ldr	r3, [r7, #24]
 8007890:	3302      	adds	r3, #2
 8007892:	61bb      	str	r3, [r7, #24]
 8007894:	e00c      	b.n	80078b0 <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800789c:	b2da      	uxtb	r2, r3
 800789e:	8a7b      	ldrh	r3, [r7, #18]
 80078a0:	b2db      	uxtb	r3, r3
 80078a2:	4013      	ands	r3, r2
 80078a4:	b2da      	uxtb	r2, r3
 80078a6:	69fb      	ldr	r3, [r7, #28]
 80078a8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80078aa:	69fb      	ldr	r3, [r7, #28]
 80078ac:	3301      	adds	r3, #1
 80078ae:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80078b6:	b29b      	uxth	r3, r3
 80078b8:	3b01      	subs	r3, #1
 80078ba:	b29a      	uxth	r2, r3
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80078c8:	b29b      	uxth	r3, r3
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d1c6      	bne.n	800785c <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2220      	movs	r2, #32
 80078d2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80078d4:	2300      	movs	r3, #0
 80078d6:	e000      	b.n	80078da <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 80078d8:	2302      	movs	r3, #2
  }
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3720      	adds	r7, #32
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}
	...

080078e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b088      	sub	sp, #32
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80078ec:	2300      	movs	r3, #0
 80078ee:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	689a      	ldr	r2, [r3, #8]
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	691b      	ldr	r3, [r3, #16]
 80078f8:	431a      	orrs	r2, r3
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	695b      	ldr	r3, [r3, #20]
 80078fe:	431a      	orrs	r2, r3
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	69db      	ldr	r3, [r3, #28]
 8007904:	4313      	orrs	r3, r2
 8007906:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	681a      	ldr	r2, [r3, #0]
 800790e:	4ba7      	ldr	r3, [pc, #668]	; (8007bac <UART_SetConfig+0x2c8>)
 8007910:	4013      	ands	r3, r2
 8007912:	687a      	ldr	r2, [r7, #4]
 8007914:	6812      	ldr	r2, [r2, #0]
 8007916:	6979      	ldr	r1, [r7, #20]
 8007918:	430b      	orrs	r3, r1
 800791a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	68da      	ldr	r2, [r3, #12]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	430a      	orrs	r2, r1
 8007930:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	699b      	ldr	r3, [r3, #24]
 8007936:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6a1b      	ldr	r3, [r3, #32]
 800793c:	697a      	ldr	r2, [r7, #20]
 800793e:	4313      	orrs	r3, r2
 8007940:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	689b      	ldr	r3, [r3, #8]
 8007948:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	697a      	ldr	r2, [r7, #20]
 8007952:	430a      	orrs	r2, r1
 8007954:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a95      	ldr	r2, [pc, #596]	; (8007bb0 <UART_SetConfig+0x2cc>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d120      	bne.n	80079a2 <UART_SetConfig+0xbe>
 8007960:	4b94      	ldr	r3, [pc, #592]	; (8007bb4 <UART_SetConfig+0x2d0>)
 8007962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007966:	f003 0303 	and.w	r3, r3, #3
 800796a:	2b03      	cmp	r3, #3
 800796c:	d816      	bhi.n	800799c <UART_SetConfig+0xb8>
 800796e:	a201      	add	r2, pc, #4	; (adr r2, 8007974 <UART_SetConfig+0x90>)
 8007970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007974:	08007985 	.word	0x08007985
 8007978:	08007991 	.word	0x08007991
 800797c:	0800798b 	.word	0x0800798b
 8007980:	08007997 	.word	0x08007997
 8007984:	2301      	movs	r3, #1
 8007986:	77fb      	strb	r3, [r7, #31]
 8007988:	e14f      	b.n	8007c2a <UART_SetConfig+0x346>
 800798a:	2302      	movs	r3, #2
 800798c:	77fb      	strb	r3, [r7, #31]
 800798e:	e14c      	b.n	8007c2a <UART_SetConfig+0x346>
 8007990:	2304      	movs	r3, #4
 8007992:	77fb      	strb	r3, [r7, #31]
 8007994:	e149      	b.n	8007c2a <UART_SetConfig+0x346>
 8007996:	2308      	movs	r3, #8
 8007998:	77fb      	strb	r3, [r7, #31]
 800799a:	e146      	b.n	8007c2a <UART_SetConfig+0x346>
 800799c:	2310      	movs	r3, #16
 800799e:	77fb      	strb	r3, [r7, #31]
 80079a0:	e143      	b.n	8007c2a <UART_SetConfig+0x346>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4a84      	ldr	r2, [pc, #528]	; (8007bb8 <UART_SetConfig+0x2d4>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d132      	bne.n	8007a12 <UART_SetConfig+0x12e>
 80079ac:	4b81      	ldr	r3, [pc, #516]	; (8007bb4 <UART_SetConfig+0x2d0>)
 80079ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079b2:	f003 030c 	and.w	r3, r3, #12
 80079b6:	2b0c      	cmp	r3, #12
 80079b8:	d828      	bhi.n	8007a0c <UART_SetConfig+0x128>
 80079ba:	a201      	add	r2, pc, #4	; (adr r2, 80079c0 <UART_SetConfig+0xdc>)
 80079bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079c0:	080079f5 	.word	0x080079f5
 80079c4:	08007a0d 	.word	0x08007a0d
 80079c8:	08007a0d 	.word	0x08007a0d
 80079cc:	08007a0d 	.word	0x08007a0d
 80079d0:	08007a01 	.word	0x08007a01
 80079d4:	08007a0d 	.word	0x08007a0d
 80079d8:	08007a0d 	.word	0x08007a0d
 80079dc:	08007a0d 	.word	0x08007a0d
 80079e0:	080079fb 	.word	0x080079fb
 80079e4:	08007a0d 	.word	0x08007a0d
 80079e8:	08007a0d 	.word	0x08007a0d
 80079ec:	08007a0d 	.word	0x08007a0d
 80079f0:	08007a07 	.word	0x08007a07
 80079f4:	2300      	movs	r3, #0
 80079f6:	77fb      	strb	r3, [r7, #31]
 80079f8:	e117      	b.n	8007c2a <UART_SetConfig+0x346>
 80079fa:	2302      	movs	r3, #2
 80079fc:	77fb      	strb	r3, [r7, #31]
 80079fe:	e114      	b.n	8007c2a <UART_SetConfig+0x346>
 8007a00:	2304      	movs	r3, #4
 8007a02:	77fb      	strb	r3, [r7, #31]
 8007a04:	e111      	b.n	8007c2a <UART_SetConfig+0x346>
 8007a06:	2308      	movs	r3, #8
 8007a08:	77fb      	strb	r3, [r7, #31]
 8007a0a:	e10e      	b.n	8007c2a <UART_SetConfig+0x346>
 8007a0c:	2310      	movs	r3, #16
 8007a0e:	77fb      	strb	r3, [r7, #31]
 8007a10:	e10b      	b.n	8007c2a <UART_SetConfig+0x346>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4a69      	ldr	r2, [pc, #420]	; (8007bbc <UART_SetConfig+0x2d8>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d120      	bne.n	8007a5e <UART_SetConfig+0x17a>
 8007a1c:	4b65      	ldr	r3, [pc, #404]	; (8007bb4 <UART_SetConfig+0x2d0>)
 8007a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a22:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007a26:	2b30      	cmp	r3, #48	; 0x30
 8007a28:	d013      	beq.n	8007a52 <UART_SetConfig+0x16e>
 8007a2a:	2b30      	cmp	r3, #48	; 0x30
 8007a2c:	d814      	bhi.n	8007a58 <UART_SetConfig+0x174>
 8007a2e:	2b20      	cmp	r3, #32
 8007a30:	d009      	beq.n	8007a46 <UART_SetConfig+0x162>
 8007a32:	2b20      	cmp	r3, #32
 8007a34:	d810      	bhi.n	8007a58 <UART_SetConfig+0x174>
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d002      	beq.n	8007a40 <UART_SetConfig+0x15c>
 8007a3a:	2b10      	cmp	r3, #16
 8007a3c:	d006      	beq.n	8007a4c <UART_SetConfig+0x168>
 8007a3e:	e00b      	b.n	8007a58 <UART_SetConfig+0x174>
 8007a40:	2300      	movs	r3, #0
 8007a42:	77fb      	strb	r3, [r7, #31]
 8007a44:	e0f1      	b.n	8007c2a <UART_SetConfig+0x346>
 8007a46:	2302      	movs	r3, #2
 8007a48:	77fb      	strb	r3, [r7, #31]
 8007a4a:	e0ee      	b.n	8007c2a <UART_SetConfig+0x346>
 8007a4c:	2304      	movs	r3, #4
 8007a4e:	77fb      	strb	r3, [r7, #31]
 8007a50:	e0eb      	b.n	8007c2a <UART_SetConfig+0x346>
 8007a52:	2308      	movs	r3, #8
 8007a54:	77fb      	strb	r3, [r7, #31]
 8007a56:	e0e8      	b.n	8007c2a <UART_SetConfig+0x346>
 8007a58:	2310      	movs	r3, #16
 8007a5a:	77fb      	strb	r3, [r7, #31]
 8007a5c:	e0e5      	b.n	8007c2a <UART_SetConfig+0x346>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4a57      	ldr	r2, [pc, #348]	; (8007bc0 <UART_SetConfig+0x2dc>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d120      	bne.n	8007aaa <UART_SetConfig+0x1c6>
 8007a68:	4b52      	ldr	r3, [pc, #328]	; (8007bb4 <UART_SetConfig+0x2d0>)
 8007a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a6e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007a72:	2bc0      	cmp	r3, #192	; 0xc0
 8007a74:	d013      	beq.n	8007a9e <UART_SetConfig+0x1ba>
 8007a76:	2bc0      	cmp	r3, #192	; 0xc0
 8007a78:	d814      	bhi.n	8007aa4 <UART_SetConfig+0x1c0>
 8007a7a:	2b80      	cmp	r3, #128	; 0x80
 8007a7c:	d009      	beq.n	8007a92 <UART_SetConfig+0x1ae>
 8007a7e:	2b80      	cmp	r3, #128	; 0x80
 8007a80:	d810      	bhi.n	8007aa4 <UART_SetConfig+0x1c0>
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d002      	beq.n	8007a8c <UART_SetConfig+0x1a8>
 8007a86:	2b40      	cmp	r3, #64	; 0x40
 8007a88:	d006      	beq.n	8007a98 <UART_SetConfig+0x1b4>
 8007a8a:	e00b      	b.n	8007aa4 <UART_SetConfig+0x1c0>
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	77fb      	strb	r3, [r7, #31]
 8007a90:	e0cb      	b.n	8007c2a <UART_SetConfig+0x346>
 8007a92:	2302      	movs	r3, #2
 8007a94:	77fb      	strb	r3, [r7, #31]
 8007a96:	e0c8      	b.n	8007c2a <UART_SetConfig+0x346>
 8007a98:	2304      	movs	r3, #4
 8007a9a:	77fb      	strb	r3, [r7, #31]
 8007a9c:	e0c5      	b.n	8007c2a <UART_SetConfig+0x346>
 8007a9e:	2308      	movs	r3, #8
 8007aa0:	77fb      	strb	r3, [r7, #31]
 8007aa2:	e0c2      	b.n	8007c2a <UART_SetConfig+0x346>
 8007aa4:	2310      	movs	r3, #16
 8007aa6:	77fb      	strb	r3, [r7, #31]
 8007aa8:	e0bf      	b.n	8007c2a <UART_SetConfig+0x346>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4a45      	ldr	r2, [pc, #276]	; (8007bc4 <UART_SetConfig+0x2e0>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d125      	bne.n	8007b00 <UART_SetConfig+0x21c>
 8007ab4:	4b3f      	ldr	r3, [pc, #252]	; (8007bb4 <UART_SetConfig+0x2d0>)
 8007ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007aba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007abe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ac2:	d017      	beq.n	8007af4 <UART_SetConfig+0x210>
 8007ac4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ac8:	d817      	bhi.n	8007afa <UART_SetConfig+0x216>
 8007aca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ace:	d00b      	beq.n	8007ae8 <UART_SetConfig+0x204>
 8007ad0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ad4:	d811      	bhi.n	8007afa <UART_SetConfig+0x216>
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d003      	beq.n	8007ae2 <UART_SetConfig+0x1fe>
 8007ada:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ade:	d006      	beq.n	8007aee <UART_SetConfig+0x20a>
 8007ae0:	e00b      	b.n	8007afa <UART_SetConfig+0x216>
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	77fb      	strb	r3, [r7, #31]
 8007ae6:	e0a0      	b.n	8007c2a <UART_SetConfig+0x346>
 8007ae8:	2302      	movs	r3, #2
 8007aea:	77fb      	strb	r3, [r7, #31]
 8007aec:	e09d      	b.n	8007c2a <UART_SetConfig+0x346>
 8007aee:	2304      	movs	r3, #4
 8007af0:	77fb      	strb	r3, [r7, #31]
 8007af2:	e09a      	b.n	8007c2a <UART_SetConfig+0x346>
 8007af4:	2308      	movs	r3, #8
 8007af6:	77fb      	strb	r3, [r7, #31]
 8007af8:	e097      	b.n	8007c2a <UART_SetConfig+0x346>
 8007afa:	2310      	movs	r3, #16
 8007afc:	77fb      	strb	r3, [r7, #31]
 8007afe:	e094      	b.n	8007c2a <UART_SetConfig+0x346>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a30      	ldr	r2, [pc, #192]	; (8007bc8 <UART_SetConfig+0x2e4>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d125      	bne.n	8007b56 <UART_SetConfig+0x272>
 8007b0a:	4b2a      	ldr	r3, [pc, #168]	; (8007bb4 <UART_SetConfig+0x2d0>)
 8007b0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b10:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007b14:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007b18:	d017      	beq.n	8007b4a <UART_SetConfig+0x266>
 8007b1a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007b1e:	d817      	bhi.n	8007b50 <UART_SetConfig+0x26c>
 8007b20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b24:	d00b      	beq.n	8007b3e <UART_SetConfig+0x25a>
 8007b26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b2a:	d811      	bhi.n	8007b50 <UART_SetConfig+0x26c>
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d003      	beq.n	8007b38 <UART_SetConfig+0x254>
 8007b30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b34:	d006      	beq.n	8007b44 <UART_SetConfig+0x260>
 8007b36:	e00b      	b.n	8007b50 <UART_SetConfig+0x26c>
 8007b38:	2301      	movs	r3, #1
 8007b3a:	77fb      	strb	r3, [r7, #31]
 8007b3c:	e075      	b.n	8007c2a <UART_SetConfig+0x346>
 8007b3e:	2302      	movs	r3, #2
 8007b40:	77fb      	strb	r3, [r7, #31]
 8007b42:	e072      	b.n	8007c2a <UART_SetConfig+0x346>
 8007b44:	2304      	movs	r3, #4
 8007b46:	77fb      	strb	r3, [r7, #31]
 8007b48:	e06f      	b.n	8007c2a <UART_SetConfig+0x346>
 8007b4a:	2308      	movs	r3, #8
 8007b4c:	77fb      	strb	r3, [r7, #31]
 8007b4e:	e06c      	b.n	8007c2a <UART_SetConfig+0x346>
 8007b50:	2310      	movs	r3, #16
 8007b52:	77fb      	strb	r3, [r7, #31]
 8007b54:	e069      	b.n	8007c2a <UART_SetConfig+0x346>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	4a1c      	ldr	r2, [pc, #112]	; (8007bcc <UART_SetConfig+0x2e8>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d137      	bne.n	8007bd0 <UART_SetConfig+0x2ec>
 8007b60:	4b14      	ldr	r3, [pc, #80]	; (8007bb4 <UART_SetConfig+0x2d0>)
 8007b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b66:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007b6a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007b6e:	d017      	beq.n	8007ba0 <UART_SetConfig+0x2bc>
 8007b70:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007b74:	d817      	bhi.n	8007ba6 <UART_SetConfig+0x2c2>
 8007b76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b7a:	d00b      	beq.n	8007b94 <UART_SetConfig+0x2b0>
 8007b7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b80:	d811      	bhi.n	8007ba6 <UART_SetConfig+0x2c2>
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d003      	beq.n	8007b8e <UART_SetConfig+0x2aa>
 8007b86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b8a:	d006      	beq.n	8007b9a <UART_SetConfig+0x2b6>
 8007b8c:	e00b      	b.n	8007ba6 <UART_SetConfig+0x2c2>
 8007b8e:	2300      	movs	r3, #0
 8007b90:	77fb      	strb	r3, [r7, #31]
 8007b92:	e04a      	b.n	8007c2a <UART_SetConfig+0x346>
 8007b94:	2302      	movs	r3, #2
 8007b96:	77fb      	strb	r3, [r7, #31]
 8007b98:	e047      	b.n	8007c2a <UART_SetConfig+0x346>
 8007b9a:	2304      	movs	r3, #4
 8007b9c:	77fb      	strb	r3, [r7, #31]
 8007b9e:	e044      	b.n	8007c2a <UART_SetConfig+0x346>
 8007ba0:	2308      	movs	r3, #8
 8007ba2:	77fb      	strb	r3, [r7, #31]
 8007ba4:	e041      	b.n	8007c2a <UART_SetConfig+0x346>
 8007ba6:	2310      	movs	r3, #16
 8007ba8:	77fb      	strb	r3, [r7, #31]
 8007baa:	e03e      	b.n	8007c2a <UART_SetConfig+0x346>
 8007bac:	efff69f3 	.word	0xefff69f3
 8007bb0:	40011000 	.word	0x40011000
 8007bb4:	40023800 	.word	0x40023800
 8007bb8:	40004400 	.word	0x40004400
 8007bbc:	40004800 	.word	0x40004800
 8007bc0:	40004c00 	.word	0x40004c00
 8007bc4:	40005000 	.word	0x40005000
 8007bc8:	40011400 	.word	0x40011400
 8007bcc:	40007800 	.word	0x40007800
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a71      	ldr	r2, [pc, #452]	; (8007d9c <UART_SetConfig+0x4b8>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d125      	bne.n	8007c26 <UART_SetConfig+0x342>
 8007bda:	4b71      	ldr	r3, [pc, #452]	; (8007da0 <UART_SetConfig+0x4bc>)
 8007bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007be0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007be4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007be8:	d017      	beq.n	8007c1a <UART_SetConfig+0x336>
 8007bea:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007bee:	d817      	bhi.n	8007c20 <UART_SetConfig+0x33c>
 8007bf0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bf4:	d00b      	beq.n	8007c0e <UART_SetConfig+0x32a>
 8007bf6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bfa:	d811      	bhi.n	8007c20 <UART_SetConfig+0x33c>
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d003      	beq.n	8007c08 <UART_SetConfig+0x324>
 8007c00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c04:	d006      	beq.n	8007c14 <UART_SetConfig+0x330>
 8007c06:	e00b      	b.n	8007c20 <UART_SetConfig+0x33c>
 8007c08:	2300      	movs	r3, #0
 8007c0a:	77fb      	strb	r3, [r7, #31]
 8007c0c:	e00d      	b.n	8007c2a <UART_SetConfig+0x346>
 8007c0e:	2302      	movs	r3, #2
 8007c10:	77fb      	strb	r3, [r7, #31]
 8007c12:	e00a      	b.n	8007c2a <UART_SetConfig+0x346>
 8007c14:	2304      	movs	r3, #4
 8007c16:	77fb      	strb	r3, [r7, #31]
 8007c18:	e007      	b.n	8007c2a <UART_SetConfig+0x346>
 8007c1a:	2308      	movs	r3, #8
 8007c1c:	77fb      	strb	r3, [r7, #31]
 8007c1e:	e004      	b.n	8007c2a <UART_SetConfig+0x346>
 8007c20:	2310      	movs	r3, #16
 8007c22:	77fb      	strb	r3, [r7, #31]
 8007c24:	e001      	b.n	8007c2a <UART_SetConfig+0x346>
 8007c26:	2310      	movs	r3, #16
 8007c28:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	69db      	ldr	r3, [r3, #28]
 8007c2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c32:	d15b      	bne.n	8007cec <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8007c34:	7ffb      	ldrb	r3, [r7, #31]
 8007c36:	2b08      	cmp	r3, #8
 8007c38:	d827      	bhi.n	8007c8a <UART_SetConfig+0x3a6>
 8007c3a:	a201      	add	r2, pc, #4	; (adr r2, 8007c40 <UART_SetConfig+0x35c>)
 8007c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c40:	08007c65 	.word	0x08007c65
 8007c44:	08007c6d 	.word	0x08007c6d
 8007c48:	08007c75 	.word	0x08007c75
 8007c4c:	08007c8b 	.word	0x08007c8b
 8007c50:	08007c7b 	.word	0x08007c7b
 8007c54:	08007c8b 	.word	0x08007c8b
 8007c58:	08007c8b 	.word	0x08007c8b
 8007c5c:	08007c8b 	.word	0x08007c8b
 8007c60:	08007c83 	.word	0x08007c83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c64:	f7fd fb7c 	bl	8005360 <HAL_RCC_GetPCLK1Freq>
 8007c68:	61b8      	str	r0, [r7, #24]
        break;
 8007c6a:	e013      	b.n	8007c94 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c6c:	f7fd fb8c 	bl	8005388 <HAL_RCC_GetPCLK2Freq>
 8007c70:	61b8      	str	r0, [r7, #24]
        break;
 8007c72:	e00f      	b.n	8007c94 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c74:	4b4b      	ldr	r3, [pc, #300]	; (8007da4 <UART_SetConfig+0x4c0>)
 8007c76:	61bb      	str	r3, [r7, #24]
        break;
 8007c78:	e00c      	b.n	8007c94 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c7a:	f7fd faaf 	bl	80051dc <HAL_RCC_GetSysClockFreq>
 8007c7e:	61b8      	str	r0, [r7, #24]
        break;
 8007c80:	e008      	b.n	8007c94 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c86:	61bb      	str	r3, [r7, #24]
        break;
 8007c88:	e004      	b.n	8007c94 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007c8e:	2301      	movs	r3, #1
 8007c90:	77bb      	strb	r3, [r7, #30]
        break;
 8007c92:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007c94:	69bb      	ldr	r3, [r7, #24]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d074      	beq.n	8007d84 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007c9a:	69bb      	ldr	r3, [r7, #24]
 8007c9c:	005a      	lsls	r2, r3, #1
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	085b      	lsrs	r3, r3, #1
 8007ca4:	441a      	add	r2, r3
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cae:	b29b      	uxth	r3, r3
 8007cb0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	2b0f      	cmp	r3, #15
 8007cb6:	d916      	bls.n	8007ce6 <UART_SetConfig+0x402>
 8007cb8:	693b      	ldr	r3, [r7, #16]
 8007cba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cbe:	d212      	bcs.n	8007ce6 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	b29b      	uxth	r3, r3
 8007cc4:	f023 030f 	bic.w	r3, r3, #15
 8007cc8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	085b      	lsrs	r3, r3, #1
 8007cce:	b29b      	uxth	r3, r3
 8007cd0:	f003 0307 	and.w	r3, r3, #7
 8007cd4:	b29a      	uxth	r2, r3
 8007cd6:	89fb      	ldrh	r3, [r7, #14]
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	89fa      	ldrh	r2, [r7, #14]
 8007ce2:	60da      	str	r2, [r3, #12]
 8007ce4:	e04e      	b.n	8007d84 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	77bb      	strb	r3, [r7, #30]
 8007cea:	e04b      	b.n	8007d84 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007cec:	7ffb      	ldrb	r3, [r7, #31]
 8007cee:	2b08      	cmp	r3, #8
 8007cf0:	d827      	bhi.n	8007d42 <UART_SetConfig+0x45e>
 8007cf2:	a201      	add	r2, pc, #4	; (adr r2, 8007cf8 <UART_SetConfig+0x414>)
 8007cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cf8:	08007d1d 	.word	0x08007d1d
 8007cfc:	08007d25 	.word	0x08007d25
 8007d00:	08007d2d 	.word	0x08007d2d
 8007d04:	08007d43 	.word	0x08007d43
 8007d08:	08007d33 	.word	0x08007d33
 8007d0c:	08007d43 	.word	0x08007d43
 8007d10:	08007d43 	.word	0x08007d43
 8007d14:	08007d43 	.word	0x08007d43
 8007d18:	08007d3b 	.word	0x08007d3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d1c:	f7fd fb20 	bl	8005360 <HAL_RCC_GetPCLK1Freq>
 8007d20:	61b8      	str	r0, [r7, #24]
        break;
 8007d22:	e013      	b.n	8007d4c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d24:	f7fd fb30 	bl	8005388 <HAL_RCC_GetPCLK2Freq>
 8007d28:	61b8      	str	r0, [r7, #24]
        break;
 8007d2a:	e00f      	b.n	8007d4c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d2c:	4b1d      	ldr	r3, [pc, #116]	; (8007da4 <UART_SetConfig+0x4c0>)
 8007d2e:	61bb      	str	r3, [r7, #24]
        break;
 8007d30:	e00c      	b.n	8007d4c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d32:	f7fd fa53 	bl	80051dc <HAL_RCC_GetSysClockFreq>
 8007d36:	61b8      	str	r0, [r7, #24]
        break;
 8007d38:	e008      	b.n	8007d4c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d3e:	61bb      	str	r3, [r7, #24]
        break;
 8007d40:	e004      	b.n	8007d4c <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8007d42:	2300      	movs	r3, #0
 8007d44:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007d46:	2301      	movs	r3, #1
 8007d48:	77bb      	strb	r3, [r7, #30]
        break;
 8007d4a:	bf00      	nop
    }

    if (pclk != 0U)
 8007d4c:	69bb      	ldr	r3, [r7, #24]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d018      	beq.n	8007d84 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	685b      	ldr	r3, [r3, #4]
 8007d56:	085a      	lsrs	r2, r3, #1
 8007d58:	69bb      	ldr	r3, [r7, #24]
 8007d5a:	441a      	add	r2, r3
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	685b      	ldr	r3, [r3, #4]
 8007d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d64:	b29b      	uxth	r3, r3
 8007d66:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	2b0f      	cmp	r3, #15
 8007d6c:	d908      	bls.n	8007d80 <UART_SetConfig+0x49c>
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d74:	d204      	bcs.n	8007d80 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	693a      	ldr	r2, [r7, #16]
 8007d7c:	60da      	str	r2, [r3, #12]
 8007d7e:	e001      	b.n	8007d84 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8007d80:	2301      	movs	r3, #1
 8007d82:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2200      	movs	r2, #0
 8007d88:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007d90:	7fbb      	ldrb	r3, [r7, #30]
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3720      	adds	r7, #32
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}
 8007d9a:	bf00      	nop
 8007d9c:	40007c00 	.word	0x40007c00
 8007da0:	40023800 	.word	0x40023800
 8007da4:	00f42400 	.word	0x00f42400

08007da8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b083      	sub	sp, #12
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db4:	f003 0301 	and.w	r3, r3, #1
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d00a      	beq.n	8007dd2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	430a      	orrs	r2, r1
 8007dd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd6:	f003 0302 	and.w	r3, r3, #2
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d00a      	beq.n	8007df4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	430a      	orrs	r2, r1
 8007df2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df8:	f003 0304 	and.w	r3, r3, #4
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d00a      	beq.n	8007e16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	430a      	orrs	r2, r1
 8007e14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e1a:	f003 0308 	and.w	r3, r3, #8
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d00a      	beq.n	8007e38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	430a      	orrs	r2, r1
 8007e36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e3c:	f003 0310 	and.w	r3, r3, #16
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d00a      	beq.n	8007e5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	689b      	ldr	r3, [r3, #8]
 8007e4a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	430a      	orrs	r2, r1
 8007e58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e5e:	f003 0320 	and.w	r3, r3, #32
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d00a      	beq.n	8007e7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	689b      	ldr	r3, [r3, #8]
 8007e6c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	430a      	orrs	r2, r1
 8007e7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d01a      	beq.n	8007ebe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	685b      	ldr	r3, [r3, #4]
 8007e8e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	430a      	orrs	r2, r1
 8007e9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ea2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ea6:	d10a      	bne.n	8007ebe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	685b      	ldr	r3, [r3, #4]
 8007eae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	430a      	orrs	r2, r1
 8007ebc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d00a      	beq.n	8007ee0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	685b      	ldr	r3, [r3, #4]
 8007ed0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	430a      	orrs	r2, r1
 8007ede:	605a      	str	r2, [r3, #4]
  }
}
 8007ee0:	bf00      	nop
 8007ee2:	370c      	adds	r7, #12
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr

08007eec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b086      	sub	sp, #24
 8007ef0:	af02      	add	r7, sp, #8
 8007ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007efc:	f7f9 fede 	bl	8001cbc <HAL_GetTick>
 8007f00:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f003 0308 	and.w	r3, r3, #8
 8007f0c:	2b08      	cmp	r3, #8
 8007f0e:	d10e      	bne.n	8007f2e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007f14:	9300      	str	r3, [sp, #0]
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f000 f82d 	bl	8007f7e <UART_WaitOnFlagUntilTimeout>
 8007f24:	4603      	mov	r3, r0
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d001      	beq.n	8007f2e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f2a:	2303      	movs	r3, #3
 8007f2c:	e023      	b.n	8007f76 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f003 0304 	and.w	r3, r3, #4
 8007f38:	2b04      	cmp	r3, #4
 8007f3a:	d10e      	bne.n	8007f5a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007f40:	9300      	str	r3, [sp, #0]
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	2200      	movs	r2, #0
 8007f46:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 f817 	bl	8007f7e <UART_WaitOnFlagUntilTimeout>
 8007f50:	4603      	mov	r3, r0
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d001      	beq.n	8007f5a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f56:	2303      	movs	r3, #3
 8007f58:	e00d      	b.n	8007f76 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2220      	movs	r2, #32
 8007f5e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2220      	movs	r2, #32
 8007f64:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007f74:	2300      	movs	r3, #0
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	3710      	adds	r7, #16
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}

08007f7e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007f7e:	b580      	push	{r7, lr}
 8007f80:	b084      	sub	sp, #16
 8007f82:	af00      	add	r7, sp, #0
 8007f84:	60f8      	str	r0, [r7, #12]
 8007f86:	60b9      	str	r1, [r7, #8]
 8007f88:	603b      	str	r3, [r7, #0]
 8007f8a:	4613      	mov	r3, r2
 8007f8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f8e:	e05e      	b.n	800804e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f90:	69bb      	ldr	r3, [r7, #24]
 8007f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f96:	d05a      	beq.n	800804e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f98:	f7f9 fe90 	bl	8001cbc <HAL_GetTick>
 8007f9c:	4602      	mov	r2, r0
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	1ad3      	subs	r3, r2, r3
 8007fa2:	69ba      	ldr	r2, [r7, #24]
 8007fa4:	429a      	cmp	r2, r3
 8007fa6:	d302      	bcc.n	8007fae <UART_WaitOnFlagUntilTimeout+0x30>
 8007fa8:	69bb      	ldr	r3, [r7, #24]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d11b      	bne.n	8007fe6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	681a      	ldr	r2, [r3, #0]
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007fbc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	689a      	ldr	r2, [r3, #8]
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f022 0201 	bic.w	r2, r2, #1
 8007fcc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	2220      	movs	r2, #32
 8007fd2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	2220      	movs	r2, #32
 8007fd8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007fe2:	2303      	movs	r3, #3
 8007fe4:	e043      	b.n	800806e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f003 0304 	and.w	r3, r3, #4
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d02c      	beq.n	800804e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	69db      	ldr	r3, [r3, #28]
 8007ffa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ffe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008002:	d124      	bne.n	800804e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800800c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	681a      	ldr	r2, [r3, #0]
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800801c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	689a      	ldr	r2, [r3, #8]
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f022 0201 	bic.w	r2, r2, #1
 800802c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	2220      	movs	r2, #32
 8008032:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	2220      	movs	r2, #32
 8008038:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	2220      	movs	r2, #32
 800803e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	2200      	movs	r2, #0
 8008046:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800804a:	2303      	movs	r3, #3
 800804c:	e00f      	b.n	800806e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	69da      	ldr	r2, [r3, #28]
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	4013      	ands	r3, r2
 8008058:	68ba      	ldr	r2, [r7, #8]
 800805a:	429a      	cmp	r2, r3
 800805c:	bf0c      	ite	eq
 800805e:	2301      	moveq	r3, #1
 8008060:	2300      	movne	r3, #0
 8008062:	b2db      	uxtb	r3, r3
 8008064:	461a      	mov	r2, r3
 8008066:	79fb      	ldrb	r3, [r7, #7]
 8008068:	429a      	cmp	r2, r3
 800806a:	d091      	beq.n	8007f90 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800806c:	2300      	movs	r3, #0
}
 800806e:	4618      	mov	r0, r3
 8008070:	3710      	adds	r7, #16
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}
	...

08008078 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008078:	b084      	sub	sp, #16
 800807a:	b580      	push	{r7, lr}
 800807c:	b084      	sub	sp, #16
 800807e:	af00      	add	r7, sp, #0
 8008080:	6078      	str	r0, [r7, #4]
 8008082:	f107 001c 	add.w	r0, r7, #28
 8008086:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800808a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800808c:	2b01      	cmp	r3, #1
 800808e:	d120      	bne.n	80080d2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008094:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	68da      	ldr	r2, [r3, #12]
 80080a0:	4b20      	ldr	r3, [pc, #128]	; (8008124 <USB_CoreInit+0xac>)
 80080a2:	4013      	ands	r3, r2
 80080a4:	687a      	ldr	r2, [r7, #4]
 80080a6:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	68db      	ldr	r3, [r3, #12]
 80080ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80080b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080b6:	2b01      	cmp	r3, #1
 80080b8:	d105      	bne.n	80080c6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	68db      	ldr	r3, [r3, #12]
 80080be:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f001 fad6 	bl	8009678 <USB_CoreReset>
 80080cc:	4603      	mov	r3, r0
 80080ce:	73fb      	strb	r3, [r7, #15]
 80080d0:	e010      	b.n	80080f4 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	68db      	ldr	r3, [r3, #12]
 80080d6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f001 faca 	bl	8009678 <USB_CoreReset>
 80080e4:	4603      	mov	r3, r0
 80080e6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ec:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80080f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f6:	2b01      	cmp	r3, #1
 80080f8:	d10b      	bne.n	8008112 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	689b      	ldr	r3, [r3, #8]
 80080fe:	f043 0206 	orr.w	r2, r3, #6
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	689b      	ldr	r3, [r3, #8]
 800810a:	f043 0220 	orr.w	r2, r3, #32
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008112:	7bfb      	ldrb	r3, [r7, #15]
}
 8008114:	4618      	mov	r0, r3
 8008116:	3710      	adds	r7, #16
 8008118:	46bd      	mov	sp, r7
 800811a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800811e:	b004      	add	sp, #16
 8008120:	4770      	bx	lr
 8008122:	bf00      	nop
 8008124:	ffbdffbf 	.word	0xffbdffbf

08008128 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008128:	b480      	push	{r7}
 800812a:	b087      	sub	sp, #28
 800812c:	af00      	add	r7, sp, #0
 800812e:	60f8      	str	r0, [r7, #12]
 8008130:	60b9      	str	r1, [r7, #8]
 8008132:	4613      	mov	r3, r2
 8008134:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008136:	79fb      	ldrb	r3, [r7, #7]
 8008138:	2b02      	cmp	r3, #2
 800813a:	d165      	bne.n	8008208 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	4a41      	ldr	r2, [pc, #260]	; (8008244 <USB_SetTurnaroundTime+0x11c>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d906      	bls.n	8008152 <USB_SetTurnaroundTime+0x2a>
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	4a40      	ldr	r2, [pc, #256]	; (8008248 <USB_SetTurnaroundTime+0x120>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d202      	bcs.n	8008152 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800814c:	230f      	movs	r3, #15
 800814e:	617b      	str	r3, [r7, #20]
 8008150:	e062      	b.n	8008218 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	4a3c      	ldr	r2, [pc, #240]	; (8008248 <USB_SetTurnaroundTime+0x120>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d306      	bcc.n	8008168 <USB_SetTurnaroundTime+0x40>
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	4a3b      	ldr	r2, [pc, #236]	; (800824c <USB_SetTurnaroundTime+0x124>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d202      	bcs.n	8008168 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008162:	230e      	movs	r3, #14
 8008164:	617b      	str	r3, [r7, #20]
 8008166:	e057      	b.n	8008218 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	4a38      	ldr	r2, [pc, #224]	; (800824c <USB_SetTurnaroundTime+0x124>)
 800816c:	4293      	cmp	r3, r2
 800816e:	d306      	bcc.n	800817e <USB_SetTurnaroundTime+0x56>
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	4a37      	ldr	r2, [pc, #220]	; (8008250 <USB_SetTurnaroundTime+0x128>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d202      	bcs.n	800817e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008178:	230d      	movs	r3, #13
 800817a:	617b      	str	r3, [r7, #20]
 800817c:	e04c      	b.n	8008218 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	4a33      	ldr	r2, [pc, #204]	; (8008250 <USB_SetTurnaroundTime+0x128>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d306      	bcc.n	8008194 <USB_SetTurnaroundTime+0x6c>
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	4a32      	ldr	r2, [pc, #200]	; (8008254 <USB_SetTurnaroundTime+0x12c>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d802      	bhi.n	8008194 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800818e:	230c      	movs	r3, #12
 8008190:	617b      	str	r3, [r7, #20]
 8008192:	e041      	b.n	8008218 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	4a2f      	ldr	r2, [pc, #188]	; (8008254 <USB_SetTurnaroundTime+0x12c>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d906      	bls.n	80081aa <USB_SetTurnaroundTime+0x82>
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	4a2e      	ldr	r2, [pc, #184]	; (8008258 <USB_SetTurnaroundTime+0x130>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d802      	bhi.n	80081aa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80081a4:	230b      	movs	r3, #11
 80081a6:	617b      	str	r3, [r7, #20]
 80081a8:	e036      	b.n	8008218 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	4a2a      	ldr	r2, [pc, #168]	; (8008258 <USB_SetTurnaroundTime+0x130>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d906      	bls.n	80081c0 <USB_SetTurnaroundTime+0x98>
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	4a29      	ldr	r2, [pc, #164]	; (800825c <USB_SetTurnaroundTime+0x134>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d802      	bhi.n	80081c0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80081ba:	230a      	movs	r3, #10
 80081bc:	617b      	str	r3, [r7, #20]
 80081be:	e02b      	b.n	8008218 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	4a26      	ldr	r2, [pc, #152]	; (800825c <USB_SetTurnaroundTime+0x134>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d906      	bls.n	80081d6 <USB_SetTurnaroundTime+0xae>
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	4a25      	ldr	r2, [pc, #148]	; (8008260 <USB_SetTurnaroundTime+0x138>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d202      	bcs.n	80081d6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80081d0:	2309      	movs	r3, #9
 80081d2:	617b      	str	r3, [r7, #20]
 80081d4:	e020      	b.n	8008218 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	4a21      	ldr	r2, [pc, #132]	; (8008260 <USB_SetTurnaroundTime+0x138>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d306      	bcc.n	80081ec <USB_SetTurnaroundTime+0xc4>
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	4a20      	ldr	r2, [pc, #128]	; (8008264 <USB_SetTurnaroundTime+0x13c>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d802      	bhi.n	80081ec <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80081e6:	2308      	movs	r3, #8
 80081e8:	617b      	str	r3, [r7, #20]
 80081ea:	e015      	b.n	8008218 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	4a1d      	ldr	r2, [pc, #116]	; (8008264 <USB_SetTurnaroundTime+0x13c>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d906      	bls.n	8008202 <USB_SetTurnaroundTime+0xda>
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	4a1c      	ldr	r2, [pc, #112]	; (8008268 <USB_SetTurnaroundTime+0x140>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d202      	bcs.n	8008202 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80081fc:	2307      	movs	r3, #7
 80081fe:	617b      	str	r3, [r7, #20]
 8008200:	e00a      	b.n	8008218 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008202:	2306      	movs	r3, #6
 8008204:	617b      	str	r3, [r7, #20]
 8008206:	e007      	b.n	8008218 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008208:	79fb      	ldrb	r3, [r7, #7]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d102      	bne.n	8008214 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800820e:	2309      	movs	r3, #9
 8008210:	617b      	str	r3, [r7, #20]
 8008212:	e001      	b.n	8008218 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008214:	2309      	movs	r3, #9
 8008216:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	68db      	ldr	r3, [r3, #12]
 800821c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	68da      	ldr	r2, [r3, #12]
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	029b      	lsls	r3, r3, #10
 800822c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008230:	431a      	orrs	r2, r3
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008236:	2300      	movs	r3, #0
}
 8008238:	4618      	mov	r0, r3
 800823a:	371c      	adds	r7, #28
 800823c:	46bd      	mov	sp, r7
 800823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008242:	4770      	bx	lr
 8008244:	00d8acbf 	.word	0x00d8acbf
 8008248:	00e4e1c0 	.word	0x00e4e1c0
 800824c:	00f42400 	.word	0x00f42400
 8008250:	01067380 	.word	0x01067380
 8008254:	011a499f 	.word	0x011a499f
 8008258:	01312cff 	.word	0x01312cff
 800825c:	014ca43f 	.word	0x014ca43f
 8008260:	016e3600 	.word	0x016e3600
 8008264:	01a6ab1f 	.word	0x01a6ab1f
 8008268:	01e84800 	.word	0x01e84800

0800826c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800826c:	b480      	push	{r7}
 800826e:	b083      	sub	sp, #12
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	689b      	ldr	r3, [r3, #8]
 8008278:	f043 0201 	orr.w	r2, r3, #1
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008280:	2300      	movs	r3, #0
}
 8008282:	4618      	mov	r0, r3
 8008284:	370c      	adds	r7, #12
 8008286:	46bd      	mov	sp, r7
 8008288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828c:	4770      	bx	lr

0800828e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800828e:	b480      	push	{r7}
 8008290:	b083      	sub	sp, #12
 8008292:	af00      	add	r7, sp, #0
 8008294:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	689b      	ldr	r3, [r3, #8]
 800829a:	f023 0201 	bic.w	r2, r3, #1
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80082a2:	2300      	movs	r3, #0
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	370c      	adds	r7, #12
 80082a8:	46bd      	mov	sp, r7
 80082aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ae:	4770      	bx	lr

080082b0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b082      	sub	sp, #8
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
 80082b8:	460b      	mov	r3, r1
 80082ba:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	68db      	ldr	r3, [r3, #12]
 80082c0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80082c8:	78fb      	ldrb	r3, [r7, #3]
 80082ca:	2b01      	cmp	r3, #1
 80082cc:	d106      	bne.n	80082dc <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	68db      	ldr	r3, [r3, #12]
 80082d2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	60da      	str	r2, [r3, #12]
 80082da:	e00b      	b.n	80082f4 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80082dc:	78fb      	ldrb	r3, [r7, #3]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d106      	bne.n	80082f0 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	68db      	ldr	r3, [r3, #12]
 80082e6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	60da      	str	r2, [r3, #12]
 80082ee:	e001      	b.n	80082f4 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80082f0:	2301      	movs	r3, #1
 80082f2:	e003      	b.n	80082fc <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80082f4:	2032      	movs	r0, #50	; 0x32
 80082f6:	f7f9 fced 	bl	8001cd4 <HAL_Delay>

  return HAL_OK;
 80082fa:	2300      	movs	r3, #0
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	3708      	adds	r7, #8
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}

08008304 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008304:	b084      	sub	sp, #16
 8008306:	b580      	push	{r7, lr}
 8008308:	b086      	sub	sp, #24
 800830a:	af00      	add	r7, sp, #0
 800830c:	6078      	str	r0, [r7, #4]
 800830e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008312:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008316:	2300      	movs	r3, #0
 8008318:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800831e:	2300      	movs	r3, #0
 8008320:	613b      	str	r3, [r7, #16]
 8008322:	e009      	b.n	8008338 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008324:	687a      	ldr	r2, [r7, #4]
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	3340      	adds	r3, #64	; 0x40
 800832a:	009b      	lsls	r3, r3, #2
 800832c:	4413      	add	r3, r2
 800832e:	2200      	movs	r2, #0
 8008330:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008332:	693b      	ldr	r3, [r7, #16]
 8008334:	3301      	adds	r3, #1
 8008336:	613b      	str	r3, [r7, #16]
 8008338:	693b      	ldr	r3, [r7, #16]
 800833a:	2b0e      	cmp	r3, #14
 800833c:	d9f2      	bls.n	8008324 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800833e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008340:	2b00      	cmp	r3, #0
 8008342:	d11c      	bne.n	800837e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800834a:	685b      	ldr	r3, [r3, #4]
 800834c:	68fa      	ldr	r2, [r7, #12]
 800834e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008352:	f043 0302 	orr.w	r3, r3, #2
 8008356:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800835c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	601a      	str	r2, [r3, #0]
 800837c:	e005      	b.n	800838a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008382:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008390:	461a      	mov	r2, r3
 8008392:	2300      	movs	r3, #0
 8008394:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800839c:	4619      	mov	r1, r3
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083a4:	461a      	mov	r2, r3
 80083a6:	680b      	ldr	r3, [r1, #0]
 80083a8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80083aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ac:	2b01      	cmp	r3, #1
 80083ae:	d10c      	bne.n	80083ca <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80083b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d104      	bne.n	80083c0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80083b6:	2100      	movs	r1, #0
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f000 f959 	bl	8008670 <USB_SetDevSpeed>
 80083be:	e018      	b.n	80083f2 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80083c0:	2101      	movs	r1, #1
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f000 f954 	bl	8008670 <USB_SetDevSpeed>
 80083c8:	e013      	b.n	80083f2 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80083ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083cc:	2b03      	cmp	r3, #3
 80083ce:	d10c      	bne.n	80083ea <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80083d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d104      	bne.n	80083e0 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80083d6:	2100      	movs	r1, #0
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f000 f949 	bl	8008670 <USB_SetDevSpeed>
 80083de:	e008      	b.n	80083f2 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80083e0:	2101      	movs	r1, #1
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f000 f944 	bl	8008670 <USB_SetDevSpeed>
 80083e8:	e003      	b.n	80083f2 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80083ea:	2103      	movs	r1, #3
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f000 f93f 	bl	8008670 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80083f2:	2110      	movs	r1, #16
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f000 f8f3 	bl	80085e0 <USB_FlushTxFifo>
 80083fa:	4603      	mov	r3, r0
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d001      	beq.n	8008404 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8008400:	2301      	movs	r3, #1
 8008402:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f000 f911 	bl	800862c <USB_FlushRxFifo>
 800840a:	4603      	mov	r3, r0
 800840c:	2b00      	cmp	r3, #0
 800840e:	d001      	beq.n	8008414 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8008410:	2301      	movs	r3, #1
 8008412:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800841a:	461a      	mov	r2, r3
 800841c:	2300      	movs	r3, #0
 800841e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008426:	461a      	mov	r2, r3
 8008428:	2300      	movs	r3, #0
 800842a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008432:	461a      	mov	r2, r3
 8008434:	2300      	movs	r3, #0
 8008436:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008438:	2300      	movs	r3, #0
 800843a:	613b      	str	r3, [r7, #16]
 800843c:	e043      	b.n	80084c6 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	015a      	lsls	r2, r3, #5
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	4413      	add	r3, r2
 8008446:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008450:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008454:	d118      	bne.n	8008488 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8008456:	693b      	ldr	r3, [r7, #16]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d10a      	bne.n	8008472 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	015a      	lsls	r2, r3, #5
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	4413      	add	r3, r2
 8008464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008468:	461a      	mov	r2, r3
 800846a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800846e:	6013      	str	r3, [r2, #0]
 8008470:	e013      	b.n	800849a <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	015a      	lsls	r2, r3, #5
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	4413      	add	r3, r2
 800847a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800847e:	461a      	mov	r2, r3
 8008480:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008484:	6013      	str	r3, [r2, #0]
 8008486:	e008      	b.n	800849a <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008488:	693b      	ldr	r3, [r7, #16]
 800848a:	015a      	lsls	r2, r3, #5
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	4413      	add	r3, r2
 8008490:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008494:	461a      	mov	r2, r3
 8008496:	2300      	movs	r3, #0
 8008498:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800849a:	693b      	ldr	r3, [r7, #16]
 800849c:	015a      	lsls	r2, r3, #5
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	4413      	add	r3, r2
 80084a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084a6:	461a      	mov	r2, r3
 80084a8:	2300      	movs	r3, #0
 80084aa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80084ac:	693b      	ldr	r3, [r7, #16]
 80084ae:	015a      	lsls	r2, r3, #5
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	4413      	add	r3, r2
 80084b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084b8:	461a      	mov	r2, r3
 80084ba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80084be:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80084c0:	693b      	ldr	r3, [r7, #16]
 80084c2:	3301      	adds	r3, #1
 80084c4:	613b      	str	r3, [r7, #16]
 80084c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c8:	693a      	ldr	r2, [r7, #16]
 80084ca:	429a      	cmp	r2, r3
 80084cc:	d3b7      	bcc.n	800843e <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80084ce:	2300      	movs	r3, #0
 80084d0:	613b      	str	r3, [r7, #16]
 80084d2:	e043      	b.n	800855c <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	015a      	lsls	r2, r3, #5
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	4413      	add	r3, r2
 80084dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80084e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80084ea:	d118      	bne.n	800851e <USB_DevInit+0x21a>
    {
      if (i == 0U)
 80084ec:	693b      	ldr	r3, [r7, #16]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d10a      	bne.n	8008508 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80084f2:	693b      	ldr	r3, [r7, #16]
 80084f4:	015a      	lsls	r2, r3, #5
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	4413      	add	r3, r2
 80084fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084fe:	461a      	mov	r2, r3
 8008500:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008504:	6013      	str	r3, [r2, #0]
 8008506:	e013      	b.n	8008530 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008508:	693b      	ldr	r3, [r7, #16]
 800850a:	015a      	lsls	r2, r3, #5
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	4413      	add	r3, r2
 8008510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008514:	461a      	mov	r2, r3
 8008516:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800851a:	6013      	str	r3, [r2, #0]
 800851c:	e008      	b.n	8008530 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	015a      	lsls	r2, r3, #5
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	4413      	add	r3, r2
 8008526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800852a:	461a      	mov	r2, r3
 800852c:	2300      	movs	r3, #0
 800852e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008530:	693b      	ldr	r3, [r7, #16]
 8008532:	015a      	lsls	r2, r3, #5
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	4413      	add	r3, r2
 8008538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800853c:	461a      	mov	r2, r3
 800853e:	2300      	movs	r3, #0
 8008540:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008542:	693b      	ldr	r3, [r7, #16]
 8008544:	015a      	lsls	r2, r3, #5
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	4413      	add	r3, r2
 800854a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800854e:	461a      	mov	r2, r3
 8008550:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008554:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008556:	693b      	ldr	r3, [r7, #16]
 8008558:	3301      	adds	r3, #1
 800855a:	613b      	str	r3, [r7, #16]
 800855c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800855e:	693a      	ldr	r2, [r7, #16]
 8008560:	429a      	cmp	r2, r3
 8008562:	d3b7      	bcc.n	80084d4 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800856a:	691b      	ldr	r3, [r3, #16]
 800856c:	68fa      	ldr	r2, [r7, #12]
 800856e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008572:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008576:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2200      	movs	r2, #0
 800857c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008584:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008588:	2b00      	cmp	r3, #0
 800858a:	d105      	bne.n	8008598 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	699b      	ldr	r3, [r3, #24]
 8008590:	f043 0210 	orr.w	r2, r3, #16
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	699a      	ldr	r2, [r3, #24]
 800859c:	4b0e      	ldr	r3, [pc, #56]	; (80085d8 <USB_DevInit+0x2d4>)
 800859e:	4313      	orrs	r3, r2
 80085a0:	687a      	ldr	r2, [r7, #4]
 80085a2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80085a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d005      	beq.n	80085b6 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	699b      	ldr	r3, [r3, #24]
 80085ae:	f043 0208 	orr.w	r2, r3, #8
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80085b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085b8:	2b01      	cmp	r3, #1
 80085ba:	d105      	bne.n	80085c8 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	699a      	ldr	r2, [r3, #24]
 80085c0:	4b06      	ldr	r3, [pc, #24]	; (80085dc <USB_DevInit+0x2d8>)
 80085c2:	4313      	orrs	r3, r2
 80085c4:	687a      	ldr	r2, [r7, #4]
 80085c6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80085c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3718      	adds	r7, #24
 80085ce:	46bd      	mov	sp, r7
 80085d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80085d4:	b004      	add	sp, #16
 80085d6:	4770      	bx	lr
 80085d8:	803c3800 	.word	0x803c3800
 80085dc:	40000004 	.word	0x40000004

080085e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80085e0:	b480      	push	{r7}
 80085e2:	b085      	sub	sp, #20
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
 80085e8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80085ea:	2300      	movs	r3, #0
 80085ec:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	019b      	lsls	r3, r3, #6
 80085f2:	f043 0220 	orr.w	r2, r3, #32
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	3301      	adds	r3, #1
 80085fe:	60fb      	str	r3, [r7, #12]
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	4a09      	ldr	r2, [pc, #36]	; (8008628 <USB_FlushTxFifo+0x48>)
 8008604:	4293      	cmp	r3, r2
 8008606:	d901      	bls.n	800860c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008608:	2303      	movs	r3, #3
 800860a:	e006      	b.n	800861a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	691b      	ldr	r3, [r3, #16]
 8008610:	f003 0320 	and.w	r3, r3, #32
 8008614:	2b20      	cmp	r3, #32
 8008616:	d0f0      	beq.n	80085fa <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008618:	2300      	movs	r3, #0
}
 800861a:	4618      	mov	r0, r3
 800861c:	3714      	adds	r7, #20
 800861e:	46bd      	mov	sp, r7
 8008620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008624:	4770      	bx	lr
 8008626:	bf00      	nop
 8008628:	00030d40 	.word	0x00030d40

0800862c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800862c:	b480      	push	{r7}
 800862e:	b085      	sub	sp, #20
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008634:	2300      	movs	r3, #0
 8008636:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2210      	movs	r2, #16
 800863c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	3301      	adds	r3, #1
 8008642:	60fb      	str	r3, [r7, #12]
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	4a09      	ldr	r2, [pc, #36]	; (800866c <USB_FlushRxFifo+0x40>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d901      	bls.n	8008650 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800864c:	2303      	movs	r3, #3
 800864e:	e006      	b.n	800865e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	691b      	ldr	r3, [r3, #16]
 8008654:	f003 0310 	and.w	r3, r3, #16
 8008658:	2b10      	cmp	r3, #16
 800865a:	d0f0      	beq.n	800863e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800865c:	2300      	movs	r3, #0
}
 800865e:	4618      	mov	r0, r3
 8008660:	3714      	adds	r7, #20
 8008662:	46bd      	mov	sp, r7
 8008664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008668:	4770      	bx	lr
 800866a:	bf00      	nop
 800866c:	00030d40 	.word	0x00030d40

08008670 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008670:	b480      	push	{r7}
 8008672:	b085      	sub	sp, #20
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
 8008678:	460b      	mov	r3, r1
 800867a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008686:	681a      	ldr	r2, [r3, #0]
 8008688:	78fb      	ldrb	r3, [r7, #3]
 800868a:	68f9      	ldr	r1, [r7, #12]
 800868c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008690:	4313      	orrs	r3, r2
 8008692:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008694:	2300      	movs	r3, #0
}
 8008696:	4618      	mov	r0, r3
 8008698:	3714      	adds	r7, #20
 800869a:	46bd      	mov	sp, r7
 800869c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a0:	4770      	bx	lr

080086a2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80086a2:	b480      	push	{r7}
 80086a4:	b087      	sub	sp, #28
 80086a6:	af00      	add	r7, sp, #0
 80086a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80086ae:	693b      	ldr	r3, [r7, #16]
 80086b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086b4:	689b      	ldr	r3, [r3, #8]
 80086b6:	f003 0306 	and.w	r3, r3, #6
 80086ba:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d102      	bne.n	80086c8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80086c2:	2300      	movs	r3, #0
 80086c4:	75fb      	strb	r3, [r7, #23]
 80086c6:	e00a      	b.n	80086de <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	2b02      	cmp	r3, #2
 80086cc:	d002      	beq.n	80086d4 <USB_GetDevSpeed+0x32>
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	2b06      	cmp	r3, #6
 80086d2:	d102      	bne.n	80086da <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80086d4:	2302      	movs	r3, #2
 80086d6:	75fb      	strb	r3, [r7, #23]
 80086d8:	e001      	b.n	80086de <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80086da:	230f      	movs	r3, #15
 80086dc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80086de:	7dfb      	ldrb	r3, [r7, #23]
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	371c      	adds	r7, #28
 80086e4:	46bd      	mov	sp, r7
 80086e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ea:	4770      	bx	lr

080086ec <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b085      	sub	sp, #20
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
 80086f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	781b      	ldrb	r3, [r3, #0]
 80086fe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	785b      	ldrb	r3, [r3, #1]
 8008704:	2b01      	cmp	r3, #1
 8008706:	d139      	bne.n	800877c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800870e:	69da      	ldr	r2, [r3, #28]
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	781b      	ldrb	r3, [r3, #0]
 8008714:	f003 030f 	and.w	r3, r3, #15
 8008718:	2101      	movs	r1, #1
 800871a:	fa01 f303 	lsl.w	r3, r1, r3
 800871e:	b29b      	uxth	r3, r3
 8008720:	68f9      	ldr	r1, [r7, #12]
 8008722:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008726:	4313      	orrs	r3, r2
 8008728:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	015a      	lsls	r2, r3, #5
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	4413      	add	r3, r2
 8008732:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800873c:	2b00      	cmp	r3, #0
 800873e:	d153      	bne.n	80087e8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	015a      	lsls	r2, r3, #5
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	4413      	add	r3, r2
 8008748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800874c:	681a      	ldr	r2, [r3, #0]
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	689b      	ldr	r3, [r3, #8]
 8008752:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	78db      	ldrb	r3, [r3, #3]
 800875a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800875c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	059b      	lsls	r3, r3, #22
 8008762:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008764:	431a      	orrs	r2, r3
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	0159      	lsls	r1, r3, #5
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	440b      	add	r3, r1
 800876e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008772:	4619      	mov	r1, r3
 8008774:	4b20      	ldr	r3, [pc, #128]	; (80087f8 <USB_ActivateEndpoint+0x10c>)
 8008776:	4313      	orrs	r3, r2
 8008778:	600b      	str	r3, [r1, #0]
 800877a:	e035      	b.n	80087e8 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008782:	69da      	ldr	r2, [r3, #28]
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	781b      	ldrb	r3, [r3, #0]
 8008788:	f003 030f 	and.w	r3, r3, #15
 800878c:	2101      	movs	r1, #1
 800878e:	fa01 f303 	lsl.w	r3, r1, r3
 8008792:	041b      	lsls	r3, r3, #16
 8008794:	68f9      	ldr	r1, [r7, #12]
 8008796:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800879a:	4313      	orrs	r3, r2
 800879c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	015a      	lsls	r2, r3, #5
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	4413      	add	r3, r2
 80087a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d119      	bne.n	80087e8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	015a      	lsls	r2, r3, #5
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	4413      	add	r3, r2
 80087bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087c0:	681a      	ldr	r2, [r3, #0]
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	689b      	ldr	r3, [r3, #8]
 80087c6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	78db      	ldrb	r3, [r3, #3]
 80087ce:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80087d0:	430b      	orrs	r3, r1
 80087d2:	431a      	orrs	r2, r3
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	0159      	lsls	r1, r3, #5
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	440b      	add	r3, r1
 80087dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087e0:	4619      	mov	r1, r3
 80087e2:	4b05      	ldr	r3, [pc, #20]	; (80087f8 <USB_ActivateEndpoint+0x10c>)
 80087e4:	4313      	orrs	r3, r2
 80087e6:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80087e8:	2300      	movs	r3, #0
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	3714      	adds	r7, #20
 80087ee:	46bd      	mov	sp, r7
 80087f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f4:	4770      	bx	lr
 80087f6:	bf00      	nop
 80087f8:	10008000 	.word	0x10008000

080087fc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b085      	sub	sp, #20
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
 8008804:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	781b      	ldrb	r3, [r3, #0]
 800880e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	785b      	ldrb	r3, [r3, #1]
 8008814:	2b01      	cmp	r3, #1
 8008816:	d161      	bne.n	80088dc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	015a      	lsls	r2, r3, #5
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	4413      	add	r3, r2
 8008820:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800882a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800882e:	d11f      	bne.n	8008870 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	015a      	lsls	r2, r3, #5
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	4413      	add	r3, r2
 8008838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	68ba      	ldr	r2, [r7, #8]
 8008840:	0151      	lsls	r1, r2, #5
 8008842:	68fa      	ldr	r2, [r7, #12]
 8008844:	440a      	add	r2, r1
 8008846:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800884a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800884e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	015a      	lsls	r2, r3, #5
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	4413      	add	r3, r2
 8008858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	68ba      	ldr	r2, [r7, #8]
 8008860:	0151      	lsls	r1, r2, #5
 8008862:	68fa      	ldr	r2, [r7, #12]
 8008864:	440a      	add	r2, r1
 8008866:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800886a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800886e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008876:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	781b      	ldrb	r3, [r3, #0]
 800887c:	f003 030f 	and.w	r3, r3, #15
 8008880:	2101      	movs	r1, #1
 8008882:	fa01 f303 	lsl.w	r3, r1, r3
 8008886:	b29b      	uxth	r3, r3
 8008888:	43db      	mvns	r3, r3
 800888a:	68f9      	ldr	r1, [r7, #12]
 800888c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008890:	4013      	ands	r3, r2
 8008892:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800889a:	69da      	ldr	r2, [r3, #28]
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	781b      	ldrb	r3, [r3, #0]
 80088a0:	f003 030f 	and.w	r3, r3, #15
 80088a4:	2101      	movs	r1, #1
 80088a6:	fa01 f303 	lsl.w	r3, r1, r3
 80088aa:	b29b      	uxth	r3, r3
 80088ac:	43db      	mvns	r3, r3
 80088ae:	68f9      	ldr	r1, [r7, #12]
 80088b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80088b4:	4013      	ands	r3, r2
 80088b6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	015a      	lsls	r2, r3, #5
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	4413      	add	r3, r2
 80088c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088c4:	681a      	ldr	r2, [r3, #0]
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	0159      	lsls	r1, r3, #5
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	440b      	add	r3, r1
 80088ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088d2:	4619      	mov	r1, r3
 80088d4:	4b35      	ldr	r3, [pc, #212]	; (80089ac <USB_DeactivateEndpoint+0x1b0>)
 80088d6:	4013      	ands	r3, r2
 80088d8:	600b      	str	r3, [r1, #0]
 80088da:	e060      	b.n	800899e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	015a      	lsls	r2, r3, #5
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	4413      	add	r3, r2
 80088e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80088ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80088f2:	d11f      	bne.n	8008934 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	015a      	lsls	r2, r3, #5
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	4413      	add	r3, r2
 80088fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	68ba      	ldr	r2, [r7, #8]
 8008904:	0151      	lsls	r1, r2, #5
 8008906:	68fa      	ldr	r2, [r7, #12]
 8008908:	440a      	add	r2, r1
 800890a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800890e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008912:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	015a      	lsls	r2, r3, #5
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	4413      	add	r3, r2
 800891c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	68ba      	ldr	r2, [r7, #8]
 8008924:	0151      	lsls	r1, r2, #5
 8008926:	68fa      	ldr	r2, [r7, #12]
 8008928:	440a      	add	r2, r1
 800892a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800892e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008932:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800893a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	781b      	ldrb	r3, [r3, #0]
 8008940:	f003 030f 	and.w	r3, r3, #15
 8008944:	2101      	movs	r1, #1
 8008946:	fa01 f303 	lsl.w	r3, r1, r3
 800894a:	041b      	lsls	r3, r3, #16
 800894c:	43db      	mvns	r3, r3
 800894e:	68f9      	ldr	r1, [r7, #12]
 8008950:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008954:	4013      	ands	r3, r2
 8008956:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800895e:	69da      	ldr	r2, [r3, #28]
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	781b      	ldrb	r3, [r3, #0]
 8008964:	f003 030f 	and.w	r3, r3, #15
 8008968:	2101      	movs	r1, #1
 800896a:	fa01 f303 	lsl.w	r3, r1, r3
 800896e:	041b      	lsls	r3, r3, #16
 8008970:	43db      	mvns	r3, r3
 8008972:	68f9      	ldr	r1, [r7, #12]
 8008974:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008978:	4013      	ands	r3, r2
 800897a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	015a      	lsls	r2, r3, #5
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	4413      	add	r3, r2
 8008984:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008988:	681a      	ldr	r2, [r3, #0]
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	0159      	lsls	r1, r3, #5
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	440b      	add	r3, r1
 8008992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008996:	4619      	mov	r1, r3
 8008998:	4b05      	ldr	r3, [pc, #20]	; (80089b0 <USB_DeactivateEndpoint+0x1b4>)
 800899a:	4013      	ands	r3, r2
 800899c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800899e:	2300      	movs	r3, #0
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	3714      	adds	r7, #20
 80089a4:	46bd      	mov	sp, r7
 80089a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089aa:	4770      	bx	lr
 80089ac:	ec337800 	.word	0xec337800
 80089b0:	eff37800 	.word	0xeff37800

080089b4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b08a      	sub	sp, #40	; 0x28
 80089b8:	af02      	add	r7, sp, #8
 80089ba:	60f8      	str	r0, [r7, #12]
 80089bc:	60b9      	str	r1, [r7, #8]
 80089be:	4613      	mov	r3, r2
 80089c0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	781b      	ldrb	r3, [r3, #0]
 80089ca:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	785b      	ldrb	r3, [r3, #1]
 80089d0:	2b01      	cmp	r3, #1
 80089d2:	f040 8163 	bne.w	8008c9c <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	695b      	ldr	r3, [r3, #20]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d132      	bne.n	8008a44 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80089de:	69bb      	ldr	r3, [r7, #24]
 80089e0:	015a      	lsls	r2, r3, #5
 80089e2:	69fb      	ldr	r3, [r7, #28]
 80089e4:	4413      	add	r3, r2
 80089e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089ea:	691a      	ldr	r2, [r3, #16]
 80089ec:	69bb      	ldr	r3, [r7, #24]
 80089ee:	0159      	lsls	r1, r3, #5
 80089f0:	69fb      	ldr	r3, [r7, #28]
 80089f2:	440b      	add	r3, r1
 80089f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089f8:	4619      	mov	r1, r3
 80089fa:	4ba5      	ldr	r3, [pc, #660]	; (8008c90 <USB_EPStartXfer+0x2dc>)
 80089fc:	4013      	ands	r3, r2
 80089fe:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008a00:	69bb      	ldr	r3, [r7, #24]
 8008a02:	015a      	lsls	r2, r3, #5
 8008a04:	69fb      	ldr	r3, [r7, #28]
 8008a06:	4413      	add	r3, r2
 8008a08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a0c:	691b      	ldr	r3, [r3, #16]
 8008a0e:	69ba      	ldr	r2, [r7, #24]
 8008a10:	0151      	lsls	r1, r2, #5
 8008a12:	69fa      	ldr	r2, [r7, #28]
 8008a14:	440a      	add	r2, r1
 8008a16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a1a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008a1e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008a20:	69bb      	ldr	r3, [r7, #24]
 8008a22:	015a      	lsls	r2, r3, #5
 8008a24:	69fb      	ldr	r3, [r7, #28]
 8008a26:	4413      	add	r3, r2
 8008a28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a2c:	691a      	ldr	r2, [r3, #16]
 8008a2e:	69bb      	ldr	r3, [r7, #24]
 8008a30:	0159      	lsls	r1, r3, #5
 8008a32:	69fb      	ldr	r3, [r7, #28]
 8008a34:	440b      	add	r3, r1
 8008a36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a3a:	4619      	mov	r1, r3
 8008a3c:	4b95      	ldr	r3, [pc, #596]	; (8008c94 <USB_EPStartXfer+0x2e0>)
 8008a3e:	4013      	ands	r3, r2
 8008a40:	610b      	str	r3, [r1, #16]
 8008a42:	e074      	b.n	8008b2e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008a44:	69bb      	ldr	r3, [r7, #24]
 8008a46:	015a      	lsls	r2, r3, #5
 8008a48:	69fb      	ldr	r3, [r7, #28]
 8008a4a:	4413      	add	r3, r2
 8008a4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a50:	691a      	ldr	r2, [r3, #16]
 8008a52:	69bb      	ldr	r3, [r7, #24]
 8008a54:	0159      	lsls	r1, r3, #5
 8008a56:	69fb      	ldr	r3, [r7, #28]
 8008a58:	440b      	add	r3, r1
 8008a5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a5e:	4619      	mov	r1, r3
 8008a60:	4b8c      	ldr	r3, [pc, #560]	; (8008c94 <USB_EPStartXfer+0x2e0>)
 8008a62:	4013      	ands	r3, r2
 8008a64:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008a66:	69bb      	ldr	r3, [r7, #24]
 8008a68:	015a      	lsls	r2, r3, #5
 8008a6a:	69fb      	ldr	r3, [r7, #28]
 8008a6c:	4413      	add	r3, r2
 8008a6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a72:	691a      	ldr	r2, [r3, #16]
 8008a74:	69bb      	ldr	r3, [r7, #24]
 8008a76:	0159      	lsls	r1, r3, #5
 8008a78:	69fb      	ldr	r3, [r7, #28]
 8008a7a:	440b      	add	r3, r1
 8008a7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a80:	4619      	mov	r1, r3
 8008a82:	4b83      	ldr	r3, [pc, #524]	; (8008c90 <USB_EPStartXfer+0x2dc>)
 8008a84:	4013      	ands	r3, r2
 8008a86:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008a88:	69bb      	ldr	r3, [r7, #24]
 8008a8a:	015a      	lsls	r2, r3, #5
 8008a8c:	69fb      	ldr	r3, [r7, #28]
 8008a8e:	4413      	add	r3, r2
 8008a90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a94:	691a      	ldr	r2, [r3, #16]
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	6959      	ldr	r1, [r3, #20]
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	689b      	ldr	r3, [r3, #8]
 8008a9e:	440b      	add	r3, r1
 8008aa0:	1e59      	subs	r1, r3, #1
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	689b      	ldr	r3, [r3, #8]
 8008aa6:	fbb1 f3f3 	udiv	r3, r1, r3
 8008aaa:	04d9      	lsls	r1, r3, #19
 8008aac:	4b7a      	ldr	r3, [pc, #488]	; (8008c98 <USB_EPStartXfer+0x2e4>)
 8008aae:	400b      	ands	r3, r1
 8008ab0:	69b9      	ldr	r1, [r7, #24]
 8008ab2:	0148      	lsls	r0, r1, #5
 8008ab4:	69f9      	ldr	r1, [r7, #28]
 8008ab6:	4401      	add	r1, r0
 8008ab8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008abc:	4313      	orrs	r3, r2
 8008abe:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008ac0:	69bb      	ldr	r3, [r7, #24]
 8008ac2:	015a      	lsls	r2, r3, #5
 8008ac4:	69fb      	ldr	r3, [r7, #28]
 8008ac6:	4413      	add	r3, r2
 8008ac8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008acc:	691a      	ldr	r2, [r3, #16]
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	695b      	ldr	r3, [r3, #20]
 8008ad2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008ad6:	69b9      	ldr	r1, [r7, #24]
 8008ad8:	0148      	lsls	r0, r1, #5
 8008ada:	69f9      	ldr	r1, [r7, #28]
 8008adc:	4401      	add	r1, r0
 8008ade:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008ae2:	4313      	orrs	r3, r2
 8008ae4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	78db      	ldrb	r3, [r3, #3]
 8008aea:	2b01      	cmp	r3, #1
 8008aec:	d11f      	bne.n	8008b2e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008aee:	69bb      	ldr	r3, [r7, #24]
 8008af0:	015a      	lsls	r2, r3, #5
 8008af2:	69fb      	ldr	r3, [r7, #28]
 8008af4:	4413      	add	r3, r2
 8008af6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008afa:	691b      	ldr	r3, [r3, #16]
 8008afc:	69ba      	ldr	r2, [r7, #24]
 8008afe:	0151      	lsls	r1, r2, #5
 8008b00:	69fa      	ldr	r2, [r7, #28]
 8008b02:	440a      	add	r2, r1
 8008b04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b08:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008b0c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008b0e:	69bb      	ldr	r3, [r7, #24]
 8008b10:	015a      	lsls	r2, r3, #5
 8008b12:	69fb      	ldr	r3, [r7, #28]
 8008b14:	4413      	add	r3, r2
 8008b16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b1a:	691b      	ldr	r3, [r3, #16]
 8008b1c:	69ba      	ldr	r2, [r7, #24]
 8008b1e:	0151      	lsls	r1, r2, #5
 8008b20:	69fa      	ldr	r2, [r7, #28]
 8008b22:	440a      	add	r2, r1
 8008b24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b28:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008b2c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008b2e:	79fb      	ldrb	r3, [r7, #7]
 8008b30:	2b01      	cmp	r3, #1
 8008b32:	d14b      	bne.n	8008bcc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	691b      	ldr	r3, [r3, #16]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d009      	beq.n	8008b50 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008b3c:	69bb      	ldr	r3, [r7, #24]
 8008b3e:	015a      	lsls	r2, r3, #5
 8008b40:	69fb      	ldr	r3, [r7, #28]
 8008b42:	4413      	add	r3, r2
 8008b44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b48:	461a      	mov	r2, r3
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	691b      	ldr	r3, [r3, #16]
 8008b4e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	78db      	ldrb	r3, [r3, #3]
 8008b54:	2b01      	cmp	r3, #1
 8008b56:	d128      	bne.n	8008baa <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008b58:	69fb      	ldr	r3, [r7, #28]
 8008b5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b5e:	689b      	ldr	r3, [r3, #8]
 8008b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d110      	bne.n	8008b8a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008b68:	69bb      	ldr	r3, [r7, #24]
 8008b6a:	015a      	lsls	r2, r3, #5
 8008b6c:	69fb      	ldr	r3, [r7, #28]
 8008b6e:	4413      	add	r3, r2
 8008b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	69ba      	ldr	r2, [r7, #24]
 8008b78:	0151      	lsls	r1, r2, #5
 8008b7a:	69fa      	ldr	r2, [r7, #28]
 8008b7c:	440a      	add	r2, r1
 8008b7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b82:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008b86:	6013      	str	r3, [r2, #0]
 8008b88:	e00f      	b.n	8008baa <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008b8a:	69bb      	ldr	r3, [r7, #24]
 8008b8c:	015a      	lsls	r2, r3, #5
 8008b8e:	69fb      	ldr	r3, [r7, #28]
 8008b90:	4413      	add	r3, r2
 8008b92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	69ba      	ldr	r2, [r7, #24]
 8008b9a:	0151      	lsls	r1, r2, #5
 8008b9c:	69fa      	ldr	r2, [r7, #28]
 8008b9e:	440a      	add	r2, r1
 8008ba0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ba4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ba8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008baa:	69bb      	ldr	r3, [r7, #24]
 8008bac:	015a      	lsls	r2, r3, #5
 8008bae:	69fb      	ldr	r3, [r7, #28]
 8008bb0:	4413      	add	r3, r2
 8008bb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	69ba      	ldr	r2, [r7, #24]
 8008bba:	0151      	lsls	r1, r2, #5
 8008bbc:	69fa      	ldr	r2, [r7, #28]
 8008bbe:	440a      	add	r2, r1
 8008bc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bc4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008bc8:	6013      	str	r3, [r2, #0]
 8008bca:	e133      	b.n	8008e34 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008bcc:	69bb      	ldr	r3, [r7, #24]
 8008bce:	015a      	lsls	r2, r3, #5
 8008bd0:	69fb      	ldr	r3, [r7, #28]
 8008bd2:	4413      	add	r3, r2
 8008bd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	69ba      	ldr	r2, [r7, #24]
 8008bdc:	0151      	lsls	r1, r2, #5
 8008bde:	69fa      	ldr	r2, [r7, #28]
 8008be0:	440a      	add	r2, r1
 8008be2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008be6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008bea:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	78db      	ldrb	r3, [r3, #3]
 8008bf0:	2b01      	cmp	r3, #1
 8008bf2:	d015      	beq.n	8008c20 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	695b      	ldr	r3, [r3, #20]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	f000 811b 	beq.w	8008e34 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008bfe:	69fb      	ldr	r3, [r7, #28]
 8008c00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	781b      	ldrb	r3, [r3, #0]
 8008c0a:	f003 030f 	and.w	r3, r3, #15
 8008c0e:	2101      	movs	r1, #1
 8008c10:	fa01 f303 	lsl.w	r3, r1, r3
 8008c14:	69f9      	ldr	r1, [r7, #28]
 8008c16:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c1a:	4313      	orrs	r3, r2
 8008c1c:	634b      	str	r3, [r1, #52]	; 0x34
 8008c1e:	e109      	b.n	8008e34 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008c20:	69fb      	ldr	r3, [r7, #28]
 8008c22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c26:	689b      	ldr	r3, [r3, #8]
 8008c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d110      	bne.n	8008c52 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008c30:	69bb      	ldr	r3, [r7, #24]
 8008c32:	015a      	lsls	r2, r3, #5
 8008c34:	69fb      	ldr	r3, [r7, #28]
 8008c36:	4413      	add	r3, r2
 8008c38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	69ba      	ldr	r2, [r7, #24]
 8008c40:	0151      	lsls	r1, r2, #5
 8008c42:	69fa      	ldr	r2, [r7, #28]
 8008c44:	440a      	add	r2, r1
 8008c46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c4a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008c4e:	6013      	str	r3, [r2, #0]
 8008c50:	e00f      	b.n	8008c72 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008c52:	69bb      	ldr	r3, [r7, #24]
 8008c54:	015a      	lsls	r2, r3, #5
 8008c56:	69fb      	ldr	r3, [r7, #28]
 8008c58:	4413      	add	r3, r2
 8008c5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	69ba      	ldr	r2, [r7, #24]
 8008c62:	0151      	lsls	r1, r2, #5
 8008c64:	69fa      	ldr	r2, [r7, #28]
 8008c66:	440a      	add	r2, r1
 8008c68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c70:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008c72:	68bb      	ldr	r3, [r7, #8]
 8008c74:	68d9      	ldr	r1, [r3, #12]
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	781a      	ldrb	r2, [r3, #0]
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	695b      	ldr	r3, [r3, #20]
 8008c7e:	b298      	uxth	r0, r3
 8008c80:	79fb      	ldrb	r3, [r7, #7]
 8008c82:	9300      	str	r3, [sp, #0]
 8008c84:	4603      	mov	r3, r0
 8008c86:	68f8      	ldr	r0, [r7, #12]
 8008c88:	f000 fa38 	bl	80090fc <USB_WritePacket>
 8008c8c:	e0d2      	b.n	8008e34 <USB_EPStartXfer+0x480>
 8008c8e:	bf00      	nop
 8008c90:	e007ffff 	.word	0xe007ffff
 8008c94:	fff80000 	.word	0xfff80000
 8008c98:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008c9c:	69bb      	ldr	r3, [r7, #24]
 8008c9e:	015a      	lsls	r2, r3, #5
 8008ca0:	69fb      	ldr	r3, [r7, #28]
 8008ca2:	4413      	add	r3, r2
 8008ca4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ca8:	691a      	ldr	r2, [r3, #16]
 8008caa:	69bb      	ldr	r3, [r7, #24]
 8008cac:	0159      	lsls	r1, r3, #5
 8008cae:	69fb      	ldr	r3, [r7, #28]
 8008cb0:	440b      	add	r3, r1
 8008cb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cb6:	4619      	mov	r1, r3
 8008cb8:	4b61      	ldr	r3, [pc, #388]	; (8008e40 <USB_EPStartXfer+0x48c>)
 8008cba:	4013      	ands	r3, r2
 8008cbc:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008cbe:	69bb      	ldr	r3, [r7, #24]
 8008cc0:	015a      	lsls	r2, r3, #5
 8008cc2:	69fb      	ldr	r3, [r7, #28]
 8008cc4:	4413      	add	r3, r2
 8008cc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cca:	691a      	ldr	r2, [r3, #16]
 8008ccc:	69bb      	ldr	r3, [r7, #24]
 8008cce:	0159      	lsls	r1, r3, #5
 8008cd0:	69fb      	ldr	r3, [r7, #28]
 8008cd2:	440b      	add	r3, r1
 8008cd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cd8:	4619      	mov	r1, r3
 8008cda:	4b5a      	ldr	r3, [pc, #360]	; (8008e44 <USB_EPStartXfer+0x490>)
 8008cdc:	4013      	ands	r3, r2
 8008cde:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	695b      	ldr	r3, [r3, #20]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d123      	bne.n	8008d30 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008ce8:	69bb      	ldr	r3, [r7, #24]
 8008cea:	015a      	lsls	r2, r3, #5
 8008cec:	69fb      	ldr	r3, [r7, #28]
 8008cee:	4413      	add	r3, r2
 8008cf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cf4:	691a      	ldr	r2, [r3, #16]
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	689b      	ldr	r3, [r3, #8]
 8008cfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008cfe:	69b9      	ldr	r1, [r7, #24]
 8008d00:	0148      	lsls	r0, r1, #5
 8008d02:	69f9      	ldr	r1, [r7, #28]
 8008d04:	4401      	add	r1, r0
 8008d06:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008d0a:	4313      	orrs	r3, r2
 8008d0c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008d0e:	69bb      	ldr	r3, [r7, #24]
 8008d10:	015a      	lsls	r2, r3, #5
 8008d12:	69fb      	ldr	r3, [r7, #28]
 8008d14:	4413      	add	r3, r2
 8008d16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d1a:	691b      	ldr	r3, [r3, #16]
 8008d1c:	69ba      	ldr	r2, [r7, #24]
 8008d1e:	0151      	lsls	r1, r2, #5
 8008d20:	69fa      	ldr	r2, [r7, #28]
 8008d22:	440a      	add	r2, r1
 8008d24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d28:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008d2c:	6113      	str	r3, [r2, #16]
 8008d2e:	e033      	b.n	8008d98 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	695a      	ldr	r2, [r3, #20]
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	689b      	ldr	r3, [r3, #8]
 8008d38:	4413      	add	r3, r2
 8008d3a:	1e5a      	subs	r2, r3, #1
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	689b      	ldr	r3, [r3, #8]
 8008d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d44:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008d46:	69bb      	ldr	r3, [r7, #24]
 8008d48:	015a      	lsls	r2, r3, #5
 8008d4a:	69fb      	ldr	r3, [r7, #28]
 8008d4c:	4413      	add	r3, r2
 8008d4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d52:	691a      	ldr	r2, [r3, #16]
 8008d54:	8afb      	ldrh	r3, [r7, #22]
 8008d56:	04d9      	lsls	r1, r3, #19
 8008d58:	4b3b      	ldr	r3, [pc, #236]	; (8008e48 <USB_EPStartXfer+0x494>)
 8008d5a:	400b      	ands	r3, r1
 8008d5c:	69b9      	ldr	r1, [r7, #24]
 8008d5e:	0148      	lsls	r0, r1, #5
 8008d60:	69f9      	ldr	r1, [r7, #28]
 8008d62:	4401      	add	r1, r0
 8008d64:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008d68:	4313      	orrs	r3, r2
 8008d6a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8008d6c:	69bb      	ldr	r3, [r7, #24]
 8008d6e:	015a      	lsls	r2, r3, #5
 8008d70:	69fb      	ldr	r3, [r7, #28]
 8008d72:	4413      	add	r3, r2
 8008d74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d78:	691a      	ldr	r2, [r3, #16]
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	689b      	ldr	r3, [r3, #8]
 8008d7e:	8af9      	ldrh	r1, [r7, #22]
 8008d80:	fb01 f303 	mul.w	r3, r1, r3
 8008d84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d88:	69b9      	ldr	r1, [r7, #24]
 8008d8a:	0148      	lsls	r0, r1, #5
 8008d8c:	69f9      	ldr	r1, [r7, #28]
 8008d8e:	4401      	add	r1, r0
 8008d90:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008d94:	4313      	orrs	r3, r2
 8008d96:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008d98:	79fb      	ldrb	r3, [r7, #7]
 8008d9a:	2b01      	cmp	r3, #1
 8008d9c:	d10d      	bne.n	8008dba <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008d9e:	68bb      	ldr	r3, [r7, #8]
 8008da0:	68db      	ldr	r3, [r3, #12]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d009      	beq.n	8008dba <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008da6:	68bb      	ldr	r3, [r7, #8]
 8008da8:	68d9      	ldr	r1, [r3, #12]
 8008daa:	69bb      	ldr	r3, [r7, #24]
 8008dac:	015a      	lsls	r2, r3, #5
 8008dae:	69fb      	ldr	r3, [r7, #28]
 8008db0:	4413      	add	r3, r2
 8008db2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008db6:	460a      	mov	r2, r1
 8008db8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	78db      	ldrb	r3, [r3, #3]
 8008dbe:	2b01      	cmp	r3, #1
 8008dc0:	d128      	bne.n	8008e14 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008dc2:	69fb      	ldr	r3, [r7, #28]
 8008dc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dc8:	689b      	ldr	r3, [r3, #8]
 8008dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d110      	bne.n	8008df4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008dd2:	69bb      	ldr	r3, [r7, #24]
 8008dd4:	015a      	lsls	r2, r3, #5
 8008dd6:	69fb      	ldr	r3, [r7, #28]
 8008dd8:	4413      	add	r3, r2
 8008dda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	69ba      	ldr	r2, [r7, #24]
 8008de2:	0151      	lsls	r1, r2, #5
 8008de4:	69fa      	ldr	r2, [r7, #28]
 8008de6:	440a      	add	r2, r1
 8008de8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008dec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008df0:	6013      	str	r3, [r2, #0]
 8008df2:	e00f      	b.n	8008e14 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008df4:	69bb      	ldr	r3, [r7, #24]
 8008df6:	015a      	lsls	r2, r3, #5
 8008df8:	69fb      	ldr	r3, [r7, #28]
 8008dfa:	4413      	add	r3, r2
 8008dfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	69ba      	ldr	r2, [r7, #24]
 8008e04:	0151      	lsls	r1, r2, #5
 8008e06:	69fa      	ldr	r2, [r7, #28]
 8008e08:	440a      	add	r2, r1
 8008e0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e12:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008e14:	69bb      	ldr	r3, [r7, #24]
 8008e16:	015a      	lsls	r2, r3, #5
 8008e18:	69fb      	ldr	r3, [r7, #28]
 8008e1a:	4413      	add	r3, r2
 8008e1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	69ba      	ldr	r2, [r7, #24]
 8008e24:	0151      	lsls	r1, r2, #5
 8008e26:	69fa      	ldr	r2, [r7, #28]
 8008e28:	440a      	add	r2, r1
 8008e2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e2e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008e32:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008e34:	2300      	movs	r3, #0
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	3720      	adds	r7, #32
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}
 8008e3e:	bf00      	nop
 8008e40:	fff80000 	.word	0xfff80000
 8008e44:	e007ffff 	.word	0xe007ffff
 8008e48:	1ff80000 	.word	0x1ff80000

08008e4c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b087      	sub	sp, #28
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	60f8      	str	r0, [r7, #12]
 8008e54:	60b9      	str	r1, [r7, #8]
 8008e56:	4613      	mov	r3, r2
 8008e58:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	781b      	ldrb	r3, [r3, #0]
 8008e62:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	785b      	ldrb	r3, [r3, #1]
 8008e68:	2b01      	cmp	r3, #1
 8008e6a:	f040 80cd 	bne.w	8009008 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	695b      	ldr	r3, [r3, #20]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d132      	bne.n	8008edc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008e76:	693b      	ldr	r3, [r7, #16]
 8008e78:	015a      	lsls	r2, r3, #5
 8008e7a:	697b      	ldr	r3, [r7, #20]
 8008e7c:	4413      	add	r3, r2
 8008e7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e82:	691a      	ldr	r2, [r3, #16]
 8008e84:	693b      	ldr	r3, [r7, #16]
 8008e86:	0159      	lsls	r1, r3, #5
 8008e88:	697b      	ldr	r3, [r7, #20]
 8008e8a:	440b      	add	r3, r1
 8008e8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e90:	4619      	mov	r1, r3
 8008e92:	4b98      	ldr	r3, [pc, #608]	; (80090f4 <USB_EP0StartXfer+0x2a8>)
 8008e94:	4013      	ands	r3, r2
 8008e96:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008e98:	693b      	ldr	r3, [r7, #16]
 8008e9a:	015a      	lsls	r2, r3, #5
 8008e9c:	697b      	ldr	r3, [r7, #20]
 8008e9e:	4413      	add	r3, r2
 8008ea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ea4:	691b      	ldr	r3, [r3, #16]
 8008ea6:	693a      	ldr	r2, [r7, #16]
 8008ea8:	0151      	lsls	r1, r2, #5
 8008eaa:	697a      	ldr	r2, [r7, #20]
 8008eac:	440a      	add	r2, r1
 8008eae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008eb2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008eb6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008eb8:	693b      	ldr	r3, [r7, #16]
 8008eba:	015a      	lsls	r2, r3, #5
 8008ebc:	697b      	ldr	r3, [r7, #20]
 8008ebe:	4413      	add	r3, r2
 8008ec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ec4:	691a      	ldr	r2, [r3, #16]
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	0159      	lsls	r1, r3, #5
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	440b      	add	r3, r1
 8008ece:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ed2:	4619      	mov	r1, r3
 8008ed4:	4b88      	ldr	r3, [pc, #544]	; (80090f8 <USB_EP0StartXfer+0x2ac>)
 8008ed6:	4013      	ands	r3, r2
 8008ed8:	610b      	str	r3, [r1, #16]
 8008eda:	e04e      	b.n	8008f7a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	015a      	lsls	r2, r3, #5
 8008ee0:	697b      	ldr	r3, [r7, #20]
 8008ee2:	4413      	add	r3, r2
 8008ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ee8:	691a      	ldr	r2, [r3, #16]
 8008eea:	693b      	ldr	r3, [r7, #16]
 8008eec:	0159      	lsls	r1, r3, #5
 8008eee:	697b      	ldr	r3, [r7, #20]
 8008ef0:	440b      	add	r3, r1
 8008ef2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ef6:	4619      	mov	r1, r3
 8008ef8:	4b7f      	ldr	r3, [pc, #508]	; (80090f8 <USB_EP0StartXfer+0x2ac>)
 8008efa:	4013      	ands	r3, r2
 8008efc:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008efe:	693b      	ldr	r3, [r7, #16]
 8008f00:	015a      	lsls	r2, r3, #5
 8008f02:	697b      	ldr	r3, [r7, #20]
 8008f04:	4413      	add	r3, r2
 8008f06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f0a:	691a      	ldr	r2, [r3, #16]
 8008f0c:	693b      	ldr	r3, [r7, #16]
 8008f0e:	0159      	lsls	r1, r3, #5
 8008f10:	697b      	ldr	r3, [r7, #20]
 8008f12:	440b      	add	r3, r1
 8008f14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f18:	4619      	mov	r1, r3
 8008f1a:	4b76      	ldr	r3, [pc, #472]	; (80090f4 <USB_EP0StartXfer+0x2a8>)
 8008f1c:	4013      	ands	r3, r2
 8008f1e:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	695a      	ldr	r2, [r3, #20]
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	689b      	ldr	r3, [r3, #8]
 8008f28:	429a      	cmp	r2, r3
 8008f2a:	d903      	bls.n	8008f34 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	689a      	ldr	r2, [r3, #8]
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008f34:	693b      	ldr	r3, [r7, #16]
 8008f36:	015a      	lsls	r2, r3, #5
 8008f38:	697b      	ldr	r3, [r7, #20]
 8008f3a:	4413      	add	r3, r2
 8008f3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f40:	691b      	ldr	r3, [r3, #16]
 8008f42:	693a      	ldr	r2, [r7, #16]
 8008f44:	0151      	lsls	r1, r2, #5
 8008f46:	697a      	ldr	r2, [r7, #20]
 8008f48:	440a      	add	r2, r1
 8008f4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f4e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008f52:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008f54:	693b      	ldr	r3, [r7, #16]
 8008f56:	015a      	lsls	r2, r3, #5
 8008f58:	697b      	ldr	r3, [r7, #20]
 8008f5a:	4413      	add	r3, r2
 8008f5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f60:	691a      	ldr	r2, [r3, #16]
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	695b      	ldr	r3, [r3, #20]
 8008f66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f6a:	6939      	ldr	r1, [r7, #16]
 8008f6c:	0148      	lsls	r0, r1, #5
 8008f6e:	6979      	ldr	r1, [r7, #20]
 8008f70:	4401      	add	r1, r0
 8008f72:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008f76:	4313      	orrs	r3, r2
 8008f78:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008f7a:	79fb      	ldrb	r3, [r7, #7]
 8008f7c:	2b01      	cmp	r3, #1
 8008f7e:	d11e      	bne.n	8008fbe <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	691b      	ldr	r3, [r3, #16]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d009      	beq.n	8008f9c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008f88:	693b      	ldr	r3, [r7, #16]
 8008f8a:	015a      	lsls	r2, r3, #5
 8008f8c:	697b      	ldr	r3, [r7, #20]
 8008f8e:	4413      	add	r3, r2
 8008f90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f94:	461a      	mov	r2, r3
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	691b      	ldr	r3, [r3, #16]
 8008f9a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008f9c:	693b      	ldr	r3, [r7, #16]
 8008f9e:	015a      	lsls	r2, r3, #5
 8008fa0:	697b      	ldr	r3, [r7, #20]
 8008fa2:	4413      	add	r3, r2
 8008fa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	693a      	ldr	r2, [r7, #16]
 8008fac:	0151      	lsls	r1, r2, #5
 8008fae:	697a      	ldr	r2, [r7, #20]
 8008fb0:	440a      	add	r2, r1
 8008fb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008fb6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008fba:	6013      	str	r3, [r2, #0]
 8008fbc:	e092      	b.n	80090e4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	015a      	lsls	r2, r3, #5
 8008fc2:	697b      	ldr	r3, [r7, #20]
 8008fc4:	4413      	add	r3, r2
 8008fc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	693a      	ldr	r2, [r7, #16]
 8008fce:	0151      	lsls	r1, r2, #5
 8008fd0:	697a      	ldr	r2, [r7, #20]
 8008fd2:	440a      	add	r2, r1
 8008fd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008fd8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008fdc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	695b      	ldr	r3, [r3, #20]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d07e      	beq.n	80090e4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008fe6:	697b      	ldr	r3, [r7, #20]
 8008fe8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	781b      	ldrb	r3, [r3, #0]
 8008ff2:	f003 030f 	and.w	r3, r3, #15
 8008ff6:	2101      	movs	r1, #1
 8008ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8008ffc:	6979      	ldr	r1, [r7, #20]
 8008ffe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009002:	4313      	orrs	r3, r2
 8009004:	634b      	str	r3, [r1, #52]	; 0x34
 8009006:	e06d      	b.n	80090e4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009008:	693b      	ldr	r3, [r7, #16]
 800900a:	015a      	lsls	r2, r3, #5
 800900c:	697b      	ldr	r3, [r7, #20]
 800900e:	4413      	add	r3, r2
 8009010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009014:	691a      	ldr	r2, [r3, #16]
 8009016:	693b      	ldr	r3, [r7, #16]
 8009018:	0159      	lsls	r1, r3, #5
 800901a:	697b      	ldr	r3, [r7, #20]
 800901c:	440b      	add	r3, r1
 800901e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009022:	4619      	mov	r1, r3
 8009024:	4b34      	ldr	r3, [pc, #208]	; (80090f8 <USB_EP0StartXfer+0x2ac>)
 8009026:	4013      	ands	r3, r2
 8009028:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800902a:	693b      	ldr	r3, [r7, #16]
 800902c:	015a      	lsls	r2, r3, #5
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	4413      	add	r3, r2
 8009032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009036:	691a      	ldr	r2, [r3, #16]
 8009038:	693b      	ldr	r3, [r7, #16]
 800903a:	0159      	lsls	r1, r3, #5
 800903c:	697b      	ldr	r3, [r7, #20]
 800903e:	440b      	add	r3, r1
 8009040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009044:	4619      	mov	r1, r3
 8009046:	4b2b      	ldr	r3, [pc, #172]	; (80090f4 <USB_EP0StartXfer+0x2a8>)
 8009048:	4013      	ands	r3, r2
 800904a:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	695b      	ldr	r3, [r3, #20]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d003      	beq.n	800905c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	689a      	ldr	r2, [r3, #8]
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	015a      	lsls	r2, r3, #5
 8009060:	697b      	ldr	r3, [r7, #20]
 8009062:	4413      	add	r3, r2
 8009064:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009068:	691b      	ldr	r3, [r3, #16]
 800906a:	693a      	ldr	r2, [r7, #16]
 800906c:	0151      	lsls	r1, r2, #5
 800906e:	697a      	ldr	r2, [r7, #20]
 8009070:	440a      	add	r2, r1
 8009072:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009076:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800907a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800907c:	693b      	ldr	r3, [r7, #16]
 800907e:	015a      	lsls	r2, r3, #5
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	4413      	add	r3, r2
 8009084:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009088:	691a      	ldr	r2, [r3, #16]
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	689b      	ldr	r3, [r3, #8]
 800908e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009092:	6939      	ldr	r1, [r7, #16]
 8009094:	0148      	lsls	r0, r1, #5
 8009096:	6979      	ldr	r1, [r7, #20]
 8009098:	4401      	add	r1, r0
 800909a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800909e:	4313      	orrs	r3, r2
 80090a0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80090a2:	79fb      	ldrb	r3, [r7, #7]
 80090a4:	2b01      	cmp	r3, #1
 80090a6:	d10d      	bne.n	80090c4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	68db      	ldr	r3, [r3, #12]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d009      	beq.n	80090c4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	68d9      	ldr	r1, [r3, #12]
 80090b4:	693b      	ldr	r3, [r7, #16]
 80090b6:	015a      	lsls	r2, r3, #5
 80090b8:	697b      	ldr	r3, [r7, #20]
 80090ba:	4413      	add	r3, r2
 80090bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090c0:	460a      	mov	r2, r1
 80090c2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80090c4:	693b      	ldr	r3, [r7, #16]
 80090c6:	015a      	lsls	r2, r3, #5
 80090c8:	697b      	ldr	r3, [r7, #20]
 80090ca:	4413      	add	r3, r2
 80090cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	693a      	ldr	r2, [r7, #16]
 80090d4:	0151      	lsls	r1, r2, #5
 80090d6:	697a      	ldr	r2, [r7, #20]
 80090d8:	440a      	add	r2, r1
 80090da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090de:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80090e2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80090e4:	2300      	movs	r3, #0
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	371c      	adds	r7, #28
 80090ea:	46bd      	mov	sp, r7
 80090ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f0:	4770      	bx	lr
 80090f2:	bf00      	nop
 80090f4:	e007ffff 	.word	0xe007ffff
 80090f8:	fff80000 	.word	0xfff80000

080090fc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80090fc:	b480      	push	{r7}
 80090fe:	b089      	sub	sp, #36	; 0x24
 8009100:	af00      	add	r7, sp, #0
 8009102:	60f8      	str	r0, [r7, #12]
 8009104:	60b9      	str	r1, [r7, #8]
 8009106:	4611      	mov	r1, r2
 8009108:	461a      	mov	r2, r3
 800910a:	460b      	mov	r3, r1
 800910c:	71fb      	strb	r3, [r7, #7]
 800910e:	4613      	mov	r3, r2
 8009110:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8009116:	68bb      	ldr	r3, [r7, #8]
 8009118:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800911a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800911e:	2b00      	cmp	r3, #0
 8009120:	d11a      	bne.n	8009158 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009122:	88bb      	ldrh	r3, [r7, #4]
 8009124:	3303      	adds	r3, #3
 8009126:	089b      	lsrs	r3, r3, #2
 8009128:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800912a:	2300      	movs	r3, #0
 800912c:	61bb      	str	r3, [r7, #24]
 800912e:	e00f      	b.n	8009150 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009130:	79fb      	ldrb	r3, [r7, #7]
 8009132:	031a      	lsls	r2, r3, #12
 8009134:	697b      	ldr	r3, [r7, #20]
 8009136:	4413      	add	r3, r2
 8009138:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800913c:	461a      	mov	r2, r3
 800913e:	69fb      	ldr	r3, [r7, #28]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009144:	69fb      	ldr	r3, [r7, #28]
 8009146:	3304      	adds	r3, #4
 8009148:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800914a:	69bb      	ldr	r3, [r7, #24]
 800914c:	3301      	adds	r3, #1
 800914e:	61bb      	str	r3, [r7, #24]
 8009150:	69ba      	ldr	r2, [r7, #24]
 8009152:	693b      	ldr	r3, [r7, #16]
 8009154:	429a      	cmp	r2, r3
 8009156:	d3eb      	bcc.n	8009130 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009158:	2300      	movs	r3, #0
}
 800915a:	4618      	mov	r0, r3
 800915c:	3724      	adds	r7, #36	; 0x24
 800915e:	46bd      	mov	sp, r7
 8009160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009164:	4770      	bx	lr

08009166 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009166:	b480      	push	{r7}
 8009168:	b089      	sub	sp, #36	; 0x24
 800916a:	af00      	add	r7, sp, #0
 800916c:	60f8      	str	r0, [r7, #12]
 800916e:	60b9      	str	r1, [r7, #8]
 8009170:	4613      	mov	r3, r2
 8009172:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800917c:	88fb      	ldrh	r3, [r7, #6]
 800917e:	3303      	adds	r3, #3
 8009180:	089b      	lsrs	r3, r3, #2
 8009182:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8009184:	2300      	movs	r3, #0
 8009186:	61bb      	str	r3, [r7, #24]
 8009188:	e00b      	b.n	80091a2 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800918a:	697b      	ldr	r3, [r7, #20]
 800918c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009190:	681a      	ldr	r2, [r3, #0]
 8009192:	69fb      	ldr	r3, [r7, #28]
 8009194:	601a      	str	r2, [r3, #0]
    pDest++;
 8009196:	69fb      	ldr	r3, [r7, #28]
 8009198:	3304      	adds	r3, #4
 800919a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800919c:	69bb      	ldr	r3, [r7, #24]
 800919e:	3301      	adds	r3, #1
 80091a0:	61bb      	str	r3, [r7, #24]
 80091a2:	69ba      	ldr	r2, [r7, #24]
 80091a4:	693b      	ldr	r3, [r7, #16]
 80091a6:	429a      	cmp	r2, r3
 80091a8:	d3ef      	bcc.n	800918a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80091aa:	69fb      	ldr	r3, [r7, #28]
}
 80091ac:	4618      	mov	r0, r3
 80091ae:	3724      	adds	r7, #36	; 0x24
 80091b0:	46bd      	mov	sp, r7
 80091b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b6:	4770      	bx	lr

080091b8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80091b8:	b480      	push	{r7}
 80091ba:	b085      	sub	sp, #20
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
 80091c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	781b      	ldrb	r3, [r3, #0]
 80091ca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	785b      	ldrb	r3, [r3, #1]
 80091d0:	2b01      	cmp	r3, #1
 80091d2:	d12c      	bne.n	800922e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	015a      	lsls	r2, r3, #5
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	4413      	add	r3, r2
 80091dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	db12      	blt.n	800920c <USB_EPSetStall+0x54>
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d00f      	beq.n	800920c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	015a      	lsls	r2, r3, #5
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	4413      	add	r3, r2
 80091f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	68ba      	ldr	r2, [r7, #8]
 80091fc:	0151      	lsls	r1, r2, #5
 80091fe:	68fa      	ldr	r2, [r7, #12]
 8009200:	440a      	add	r2, r1
 8009202:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009206:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800920a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	015a      	lsls	r2, r3, #5
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	4413      	add	r3, r2
 8009214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	68ba      	ldr	r2, [r7, #8]
 800921c:	0151      	lsls	r1, r2, #5
 800921e:	68fa      	ldr	r2, [r7, #12]
 8009220:	440a      	add	r2, r1
 8009222:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009226:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800922a:	6013      	str	r3, [r2, #0]
 800922c:	e02b      	b.n	8009286 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	015a      	lsls	r2, r3, #5
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	4413      	add	r3, r2
 8009236:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	2b00      	cmp	r3, #0
 800923e:	db12      	blt.n	8009266 <USB_EPSetStall+0xae>
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d00f      	beq.n	8009266 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	015a      	lsls	r2, r3, #5
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	4413      	add	r3, r2
 800924e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	68ba      	ldr	r2, [r7, #8]
 8009256:	0151      	lsls	r1, r2, #5
 8009258:	68fa      	ldr	r2, [r7, #12]
 800925a:	440a      	add	r2, r1
 800925c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009260:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009264:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009266:	68bb      	ldr	r3, [r7, #8]
 8009268:	015a      	lsls	r2, r3, #5
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	4413      	add	r3, r2
 800926e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	68ba      	ldr	r2, [r7, #8]
 8009276:	0151      	lsls	r1, r2, #5
 8009278:	68fa      	ldr	r2, [r7, #12]
 800927a:	440a      	add	r2, r1
 800927c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009280:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009284:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009286:	2300      	movs	r3, #0
}
 8009288:	4618      	mov	r0, r3
 800928a:	3714      	adds	r7, #20
 800928c:	46bd      	mov	sp, r7
 800928e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009292:	4770      	bx	lr

08009294 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009294:	b480      	push	{r7}
 8009296:	b085      	sub	sp, #20
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
 800929c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	781b      	ldrb	r3, [r3, #0]
 80092a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	785b      	ldrb	r3, [r3, #1]
 80092ac:	2b01      	cmp	r3, #1
 80092ae:	d128      	bne.n	8009302 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	015a      	lsls	r2, r3, #5
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	4413      	add	r3, r2
 80092b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	68ba      	ldr	r2, [r7, #8]
 80092c0:	0151      	lsls	r1, r2, #5
 80092c2:	68fa      	ldr	r2, [r7, #12]
 80092c4:	440a      	add	r2, r1
 80092c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80092ce:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	78db      	ldrb	r3, [r3, #3]
 80092d4:	2b03      	cmp	r3, #3
 80092d6:	d003      	beq.n	80092e0 <USB_EPClearStall+0x4c>
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	78db      	ldrb	r3, [r3, #3]
 80092dc:	2b02      	cmp	r3, #2
 80092de:	d138      	bne.n	8009352 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	015a      	lsls	r2, r3, #5
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	4413      	add	r3, r2
 80092e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	68ba      	ldr	r2, [r7, #8]
 80092f0:	0151      	lsls	r1, r2, #5
 80092f2:	68fa      	ldr	r2, [r7, #12]
 80092f4:	440a      	add	r2, r1
 80092f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80092fe:	6013      	str	r3, [r2, #0]
 8009300:	e027      	b.n	8009352 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	015a      	lsls	r2, r3, #5
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	4413      	add	r3, r2
 800930a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	68ba      	ldr	r2, [r7, #8]
 8009312:	0151      	lsls	r1, r2, #5
 8009314:	68fa      	ldr	r2, [r7, #12]
 8009316:	440a      	add	r2, r1
 8009318:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800931c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009320:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	78db      	ldrb	r3, [r3, #3]
 8009326:	2b03      	cmp	r3, #3
 8009328:	d003      	beq.n	8009332 <USB_EPClearStall+0x9e>
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	78db      	ldrb	r3, [r3, #3]
 800932e:	2b02      	cmp	r3, #2
 8009330:	d10f      	bne.n	8009352 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	015a      	lsls	r2, r3, #5
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	4413      	add	r3, r2
 800933a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	68ba      	ldr	r2, [r7, #8]
 8009342:	0151      	lsls	r1, r2, #5
 8009344:	68fa      	ldr	r2, [r7, #12]
 8009346:	440a      	add	r2, r1
 8009348:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800934c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009350:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009352:	2300      	movs	r3, #0
}
 8009354:	4618      	mov	r0, r3
 8009356:	3714      	adds	r7, #20
 8009358:	46bd      	mov	sp, r7
 800935a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935e:	4770      	bx	lr

08009360 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009360:	b480      	push	{r7}
 8009362:	b085      	sub	sp, #20
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
 8009368:	460b      	mov	r3, r1
 800936a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	68fa      	ldr	r2, [r7, #12]
 800937a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800937e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009382:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800938a:	681a      	ldr	r2, [r3, #0]
 800938c:	78fb      	ldrb	r3, [r7, #3]
 800938e:	011b      	lsls	r3, r3, #4
 8009390:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009394:	68f9      	ldr	r1, [r7, #12]
 8009396:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800939a:	4313      	orrs	r3, r2
 800939c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800939e:	2300      	movs	r3, #0
}
 80093a0:	4618      	mov	r0, r3
 80093a2:	3714      	adds	r7, #20
 80093a4:	46bd      	mov	sp, r7
 80093a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093aa:	4770      	bx	lr

080093ac <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80093ac:	b480      	push	{r7}
 80093ae:	b085      	sub	sp, #20
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	68fa      	ldr	r2, [r7, #12]
 80093c2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80093c6:	f023 0303 	bic.w	r3, r3, #3
 80093ca:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093d2:	685b      	ldr	r3, [r3, #4]
 80093d4:	68fa      	ldr	r2, [r7, #12]
 80093d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80093da:	f023 0302 	bic.w	r3, r3, #2
 80093de:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80093e0:	2300      	movs	r3, #0
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	3714      	adds	r7, #20
 80093e6:	46bd      	mov	sp, r7
 80093e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ec:	4770      	bx	lr

080093ee <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80093ee:	b480      	push	{r7}
 80093f0:	b085      	sub	sp, #20
 80093f2:	af00      	add	r7, sp, #0
 80093f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	68fa      	ldr	r2, [r7, #12]
 8009404:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009408:	f023 0303 	bic.w	r3, r3, #3
 800940c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009414:	685b      	ldr	r3, [r3, #4]
 8009416:	68fa      	ldr	r2, [r7, #12]
 8009418:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800941c:	f043 0302 	orr.w	r3, r3, #2
 8009420:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009422:	2300      	movs	r3, #0
}
 8009424:	4618      	mov	r0, r3
 8009426:	3714      	adds	r7, #20
 8009428:	46bd      	mov	sp, r7
 800942a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942e:	4770      	bx	lr

08009430 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009430:	b480      	push	{r7}
 8009432:	b085      	sub	sp, #20
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	695b      	ldr	r3, [r3, #20]
 800943c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	699b      	ldr	r3, [r3, #24]
 8009442:	68fa      	ldr	r2, [r7, #12]
 8009444:	4013      	ands	r3, r2
 8009446:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009448:	68fb      	ldr	r3, [r7, #12]
}
 800944a:	4618      	mov	r0, r3
 800944c:	3714      	adds	r7, #20
 800944e:	46bd      	mov	sp, r7
 8009450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009454:	4770      	bx	lr

08009456 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009456:	b480      	push	{r7}
 8009458:	b085      	sub	sp, #20
 800945a:	af00      	add	r7, sp, #0
 800945c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009468:	699b      	ldr	r3, [r3, #24]
 800946a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009472:	69db      	ldr	r3, [r3, #28]
 8009474:	68ba      	ldr	r2, [r7, #8]
 8009476:	4013      	ands	r3, r2
 8009478:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800947a:	68bb      	ldr	r3, [r7, #8]
 800947c:	0c1b      	lsrs	r3, r3, #16
}
 800947e:	4618      	mov	r0, r3
 8009480:	3714      	adds	r7, #20
 8009482:	46bd      	mov	sp, r7
 8009484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009488:	4770      	bx	lr

0800948a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800948a:	b480      	push	{r7}
 800948c:	b085      	sub	sp, #20
 800948e:	af00      	add	r7, sp, #0
 8009490:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800949c:	699b      	ldr	r3, [r3, #24]
 800949e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094a6:	69db      	ldr	r3, [r3, #28]
 80094a8:	68ba      	ldr	r2, [r7, #8]
 80094aa:	4013      	ands	r3, r2
 80094ac:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	b29b      	uxth	r3, r3
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3714      	adds	r7, #20
 80094b6:	46bd      	mov	sp, r7
 80094b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094bc:	4770      	bx	lr

080094be <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80094be:	b480      	push	{r7}
 80094c0:	b085      	sub	sp, #20
 80094c2:	af00      	add	r7, sp, #0
 80094c4:	6078      	str	r0, [r7, #4]
 80094c6:	460b      	mov	r3, r1
 80094c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80094ce:	78fb      	ldrb	r3, [r7, #3]
 80094d0:	015a      	lsls	r2, r3, #5
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	4413      	add	r3, r2
 80094d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094da:	689b      	ldr	r3, [r3, #8]
 80094dc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094e4:	695b      	ldr	r3, [r3, #20]
 80094e6:	68ba      	ldr	r2, [r7, #8]
 80094e8:	4013      	ands	r3, r2
 80094ea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80094ec:	68bb      	ldr	r3, [r7, #8]
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	3714      	adds	r7, #20
 80094f2:	46bd      	mov	sp, r7
 80094f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f8:	4770      	bx	lr

080094fa <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80094fa:	b480      	push	{r7}
 80094fc:	b087      	sub	sp, #28
 80094fe:	af00      	add	r7, sp, #0
 8009500:	6078      	str	r0, [r7, #4]
 8009502:	460b      	mov	r3, r1
 8009504:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800950a:	697b      	ldr	r3, [r7, #20]
 800950c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009510:	691b      	ldr	r3, [r3, #16]
 8009512:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009514:	697b      	ldr	r3, [r7, #20]
 8009516:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800951a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800951c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800951e:	78fb      	ldrb	r3, [r7, #3]
 8009520:	f003 030f 	and.w	r3, r3, #15
 8009524:	68fa      	ldr	r2, [r7, #12]
 8009526:	fa22 f303 	lsr.w	r3, r2, r3
 800952a:	01db      	lsls	r3, r3, #7
 800952c:	b2db      	uxtb	r3, r3
 800952e:	693a      	ldr	r2, [r7, #16]
 8009530:	4313      	orrs	r3, r2
 8009532:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009534:	78fb      	ldrb	r3, [r7, #3]
 8009536:	015a      	lsls	r2, r3, #5
 8009538:	697b      	ldr	r3, [r7, #20]
 800953a:	4413      	add	r3, r2
 800953c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009540:	689b      	ldr	r3, [r3, #8]
 8009542:	693a      	ldr	r2, [r7, #16]
 8009544:	4013      	ands	r3, r2
 8009546:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009548:	68bb      	ldr	r3, [r7, #8]
}
 800954a:	4618      	mov	r0, r3
 800954c:	371c      	adds	r7, #28
 800954e:	46bd      	mov	sp, r7
 8009550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009554:	4770      	bx	lr

08009556 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009556:	b480      	push	{r7}
 8009558:	b083      	sub	sp, #12
 800955a:	af00      	add	r7, sp, #0
 800955c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	695b      	ldr	r3, [r3, #20]
 8009562:	f003 0301 	and.w	r3, r3, #1
}
 8009566:	4618      	mov	r0, r3
 8009568:	370c      	adds	r7, #12
 800956a:	46bd      	mov	sp, r7
 800956c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009570:	4770      	bx	lr
	...

08009574 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009574:	b480      	push	{r7}
 8009576:	b085      	sub	sp, #20
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009586:	681a      	ldr	r2, [r3, #0]
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800958e:	4619      	mov	r1, r3
 8009590:	4b09      	ldr	r3, [pc, #36]	; (80095b8 <USB_ActivateSetup+0x44>)
 8009592:	4013      	ands	r3, r2
 8009594:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800959c:	685b      	ldr	r3, [r3, #4]
 800959e:	68fa      	ldr	r2, [r7, #12]
 80095a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80095a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80095a8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80095aa:	2300      	movs	r3, #0
}
 80095ac:	4618      	mov	r0, r3
 80095ae:	3714      	adds	r7, #20
 80095b0:	46bd      	mov	sp, r7
 80095b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b6:	4770      	bx	lr
 80095b8:	fffff800 	.word	0xfffff800

080095bc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80095bc:	b480      	push	{r7}
 80095be:	b087      	sub	sp, #28
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	60f8      	str	r0, [r7, #12]
 80095c4:	460b      	mov	r3, r1
 80095c6:	607a      	str	r2, [r7, #4]
 80095c8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	333c      	adds	r3, #60	; 0x3c
 80095d2:	3304      	adds	r3, #4
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80095d8:	693b      	ldr	r3, [r7, #16]
 80095da:	4a26      	ldr	r2, [pc, #152]	; (8009674 <USB_EP0_OutStart+0xb8>)
 80095dc:	4293      	cmp	r3, r2
 80095de:	d90a      	bls.n	80095f6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80095e0:	697b      	ldr	r3, [r7, #20]
 80095e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80095ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80095f0:	d101      	bne.n	80095f6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80095f2:	2300      	movs	r3, #0
 80095f4:	e037      	b.n	8009666 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80095f6:	697b      	ldr	r3, [r7, #20]
 80095f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095fc:	461a      	mov	r2, r3
 80095fe:	2300      	movs	r3, #0
 8009600:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009602:	697b      	ldr	r3, [r7, #20]
 8009604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009608:	691b      	ldr	r3, [r3, #16]
 800960a:	697a      	ldr	r2, [r7, #20]
 800960c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009610:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009614:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800961c:	691b      	ldr	r3, [r3, #16]
 800961e:	697a      	ldr	r2, [r7, #20]
 8009620:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009624:	f043 0318 	orr.w	r3, r3, #24
 8009628:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800962a:	697b      	ldr	r3, [r7, #20]
 800962c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009630:	691b      	ldr	r3, [r3, #16]
 8009632:	697a      	ldr	r2, [r7, #20]
 8009634:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009638:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800963c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800963e:	7afb      	ldrb	r3, [r7, #11]
 8009640:	2b01      	cmp	r3, #1
 8009642:	d10f      	bne.n	8009664 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009644:	697b      	ldr	r3, [r7, #20]
 8009646:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800964a:	461a      	mov	r2, r3
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009650:	697b      	ldr	r3, [r7, #20]
 8009652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	697a      	ldr	r2, [r7, #20]
 800965a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800965e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009662:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009664:	2300      	movs	r3, #0
}
 8009666:	4618      	mov	r0, r3
 8009668:	371c      	adds	r7, #28
 800966a:	46bd      	mov	sp, r7
 800966c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009670:	4770      	bx	lr
 8009672:	bf00      	nop
 8009674:	4f54300a 	.word	0x4f54300a

08009678 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009678:	b480      	push	{r7}
 800967a:	b085      	sub	sp, #20
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8009680:	2300      	movs	r3, #0
 8009682:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	3301      	adds	r3, #1
 8009688:	60fb      	str	r3, [r7, #12]
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	4a13      	ldr	r2, [pc, #76]	; (80096dc <USB_CoreReset+0x64>)
 800968e:	4293      	cmp	r3, r2
 8009690:	d901      	bls.n	8009696 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009692:	2303      	movs	r3, #3
 8009694:	e01b      	b.n	80096ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	691b      	ldr	r3, [r3, #16]
 800969a:	2b00      	cmp	r3, #0
 800969c:	daf2      	bge.n	8009684 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800969e:	2300      	movs	r3, #0
 80096a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	691b      	ldr	r3, [r3, #16]
 80096a6:	f043 0201 	orr.w	r2, r3, #1
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	3301      	adds	r3, #1
 80096b2:	60fb      	str	r3, [r7, #12]
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	4a09      	ldr	r2, [pc, #36]	; (80096dc <USB_CoreReset+0x64>)
 80096b8:	4293      	cmp	r3, r2
 80096ba:	d901      	bls.n	80096c0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80096bc:	2303      	movs	r3, #3
 80096be:	e006      	b.n	80096ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	691b      	ldr	r3, [r3, #16]
 80096c4:	f003 0301 	and.w	r3, r3, #1
 80096c8:	2b01      	cmp	r3, #1
 80096ca:	d0f0      	beq.n	80096ae <USB_CoreReset+0x36>

  return HAL_OK;
 80096cc:	2300      	movs	r3, #0
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	3714      	adds	r7, #20
 80096d2:	46bd      	mov	sp, r7
 80096d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d8:	4770      	bx	lr
 80096da:	bf00      	nop
 80096dc:	00030d40 	.word	0x00030d40

080096e0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80096e4:	4904      	ldr	r1, [pc, #16]	; (80096f8 <MX_FATFS_Init+0x18>)
 80096e6:	4805      	ldr	r0, [pc, #20]	; (80096fc <MX_FATFS_Init+0x1c>)
 80096e8:	f001 fed8 	bl	800b49c <FATFS_LinkDriver>
 80096ec:	4603      	mov	r3, r0
 80096ee:	461a      	mov	r2, r3
 80096f0:	4b03      	ldr	r3, [pc, #12]	; (8009700 <MX_FATFS_Init+0x20>)
 80096f2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80096f4:	bf00      	nop
 80096f6:	bd80      	pop	{r7, pc}
 80096f8:	20000d08 	.word	0x20000d08
 80096fc:	20000010 	.word	0x20000010
 8009700:	20000d0c 	.word	0x20000d0c

08009704 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8009704:	b480      	push	{r7}
 8009706:	b083      	sub	sp, #12
 8009708:	af00      	add	r7, sp, #0
 800970a:	4603      	mov	r3, r0
 800970c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = 0;
 800970e:	4b06      	ldr	r3, [pc, #24]	; (8009728 <USER_initialize+0x24>)
 8009710:	2200      	movs	r2, #0
 8009712:	701a      	strb	r2, [r3, #0]
    return Stat;
 8009714:	4b04      	ldr	r3, [pc, #16]	; (8009728 <USER_initialize+0x24>)
 8009716:	781b      	ldrb	r3, [r3, #0]
 8009718:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800971a:	4618      	mov	r0, r3
 800971c:	370c      	adds	r7, #12
 800971e:	46bd      	mov	sp, r7
 8009720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009724:	4770      	bx	lr
 8009726:	bf00      	nop
 8009728:	2000000d 	.word	0x2000000d

0800972c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800972c:	b480      	push	{r7}
 800972e:	b083      	sub	sp, #12
 8009730:	af00      	add	r7, sp, #0
 8009732:	4603      	mov	r3, r0
 8009734:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	  Stat = STA_NOINIT;
 8009736:	4b0a      	ldr	r3, [pc, #40]	; (8009760 <USER_status+0x34>)
 8009738:	2201      	movs	r2, #1
 800973a:	701a      	strb	r2, [r3, #0]
	  Stat &= ~STA_NOINIT;
 800973c:	4b08      	ldr	r3, [pc, #32]	; (8009760 <USER_status+0x34>)
 800973e:	781b      	ldrb	r3, [r3, #0]
 8009740:	b2db      	uxtb	r3, r3
 8009742:	f023 0301 	bic.w	r3, r3, #1
 8009746:	b2da      	uxtb	r2, r3
 8009748:	4b05      	ldr	r3, [pc, #20]	; (8009760 <USER_status+0x34>)
 800974a:	701a      	strb	r2, [r3, #0]
    return Stat;
 800974c:	4b04      	ldr	r3, [pc, #16]	; (8009760 <USER_status+0x34>)
 800974e:	781b      	ldrb	r3, [r3, #0]
 8009750:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8009752:	4618      	mov	r0, r3
 8009754:	370c      	adds	r7, #12
 8009756:	46bd      	mov	sp, r7
 8009758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975c:	4770      	bx	lr
 800975e:	bf00      	nop
 8009760:	2000000d 	.word	0x2000000d

08009764 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b086      	sub	sp, #24
 8009768:	af00      	add	r7, sp, #0
 800976a:	60b9      	str	r1, [r7, #8]
 800976c:	607a      	str	r2, [r7, #4]
 800976e:	603b      	str	r3, [r7, #0]
 8009770:	4603      	mov	r3, r0
 8009772:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	uint32_t SecAdd = sector * SECTOR_SIZE;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	031b      	lsls	r3, r3, #12
 8009778:	617b      	str	r3, [r7, #20]
	uint32_t Size = count * SECTOR_SIZE;
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	031b      	lsls	r3, r3, #12
 800977e:	613b      	str	r3, [r7, #16]

	if(QSPI_Read((uint8_t*)buff, (uint32_t)SecAdd, (uint32_t) Size ) ==  HAL_OK)
 8009780:	693a      	ldr	r2, [r7, #16]
 8009782:	6979      	ldr	r1, [r7, #20]
 8009784:	68b8      	ldr	r0, [r7, #8]
 8009786:	f001 ff7b 	bl	800b680 <QSPI_Read>
 800978a:	4603      	mov	r3, r0
 800978c:	2b00      	cmp	r3, #0
 800978e:	d101      	bne.n	8009794 <USER_read+0x30>
	{
		return RES_OK;
 8009790:	2300      	movs	r3, #0
 8009792:	e000      	b.n	8009796 <USER_read+0x32>
	}
	else
	{
		return RES_ERROR;
 8009794:	2301      	movs	r3, #1
	}
	return RES_OK;
  /* USER CODE END READ */
}
 8009796:	4618      	mov	r0, r3
 8009798:	3718      	adds	r7, #24
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}
	...

080097a0 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b086      	sub	sp, #24
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	60b9      	str	r1, [r7, #8]
 80097a8:	607a      	str	r2, [r7, #4]
 80097aa:	603b      	str	r3, [r7, #0]
 80097ac:	4603      	mov	r3, r0
 80097ae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	DSector = sector;
 80097b0:	4a1a      	ldr	r2, [pc, #104]	; (800981c <USER_write+0x7c>)
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6013      	str	r3, [r2, #0]
	SecAdd = sector * SECTOR_SIZE;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	031b      	lsls	r3, r3, #12
 80097ba:	4a19      	ldr	r2, [pc, #100]	; (8009820 <USER_write+0x80>)
 80097bc:	6013      	str	r3, [r2, #0]
	Size = count * SECTOR_SIZE;
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	031b      	lsls	r3, r3, #12
 80097c2:	4a18      	ldr	r2, [pc, #96]	; (8009824 <USER_write+0x84>)
 80097c4:	6013      	str	r3, [r2, #0]
	for(uint16_t i = 0; i< count; i++)
 80097c6:	2300      	movs	r3, #0
 80097c8:	82fb      	strh	r3, [r7, #22]
 80097ca:	e010      	b.n	80097ee <USER_write+0x4e>
	{
		if(QSPI_Erase_Sector4K(SecAdd + (i * SECTOR_SIZE)) != HAL_OK)
 80097cc:	8afb      	ldrh	r3, [r7, #22]
 80097ce:	031b      	lsls	r3, r3, #12
 80097d0:	461a      	mov	r2, r3
 80097d2:	4b13      	ldr	r3, [pc, #76]	; (8009820 <USER_write+0x80>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	4413      	add	r3, r2
 80097d8:	4618      	mov	r0, r3
 80097da:	f001 fe7f 	bl	800b4dc <QSPI_Erase_Sector4K>
 80097de:	4603      	mov	r3, r0
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d001      	beq.n	80097e8 <USER_write+0x48>
		{
			return RES_ERROR;
 80097e4:	2301      	movs	r3, #1
 80097e6:	e014      	b.n	8009812 <USER_write+0x72>
	for(uint16_t i = 0; i< count; i++)
 80097e8:	8afb      	ldrh	r3, [r7, #22]
 80097ea:	3301      	adds	r3, #1
 80097ec:	82fb      	strh	r3, [r7, #22]
 80097ee:	8afb      	ldrh	r3, [r7, #22]
 80097f0:	683a      	ldr	r2, [r7, #0]
 80097f2:	429a      	cmp	r2, r3
 80097f4:	d8ea      	bhi.n	80097cc <USER_write+0x2c>
		}
	}

	if(QSPI_Write((uint8_t *)buff, SecAdd, Size) != HAL_OK)
 80097f6:	4b0a      	ldr	r3, [pc, #40]	; (8009820 <USER_write+0x80>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	4a0a      	ldr	r2, [pc, #40]	; (8009824 <USER_write+0x84>)
 80097fc:	6812      	ldr	r2, [r2, #0]
 80097fe:	4619      	mov	r1, r3
 8009800:	68b8      	ldr	r0, [r7, #8]
 8009802:	f001 fead 	bl	800b560 <QSPI_Write>
 8009806:	4603      	mov	r3, r0
 8009808:	2b00      	cmp	r3, #0
 800980a:	d001      	beq.n	8009810 <USER_write+0x70>
	{
		return RES_ERROR;
 800980c:	2301      	movs	r3, #1
 800980e:	e000      	b.n	8009812 <USER_write+0x72>
	}
	return RES_OK;
 8009810:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8009812:	4618      	mov	r0, r3
 8009814:	3718      	adds	r7, #24
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}
 800981a:	bf00      	nop
 800981c:	20002d80 	.word	0x20002d80
 8009820:	20002d78 	.word	0x20002d78
 8009824:	20002d7c 	.word	0x20002d7c

08009828 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8009828:	b480      	push	{r7}
 800982a:	b085      	sub	sp, #20
 800982c:	af00      	add	r7, sp, #0
 800982e:	4603      	mov	r3, r0
 8009830:	603a      	str	r2, [r7, #0]
 8009832:	71fb      	strb	r3, [r7, #7]
 8009834:	460b      	mov	r3, r1
 8009836:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	DRESULT res = RES_ERROR;
 8009838:	2301      	movs	r3, #1
 800983a:	73fb      	strb	r3, [r7, #15]

	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800983c:	4b1b      	ldr	r3, [pc, #108]	; (80098ac <USER_ioctl+0x84>)
 800983e:	781b      	ldrb	r3, [r3, #0]
 8009840:	b2db      	uxtb	r3, r3
 8009842:	f003 0301 	and.w	r3, r3, #1
 8009846:	2b00      	cmp	r3, #0
 8009848:	d001      	beq.n	800984e <USER_ioctl+0x26>
 800984a:	2303      	movs	r3, #3
 800984c:	e027      	b.n	800989e <USER_ioctl+0x76>

	switch (cmd)
 800984e:	79bb      	ldrb	r3, [r7, #6]
 8009850:	2b03      	cmp	r3, #3
 8009852:	d821      	bhi.n	8009898 <USER_ioctl+0x70>
 8009854:	a201      	add	r2, pc, #4	; (adr r2, 800985c <USER_ioctl+0x34>)
 8009856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800985a:	bf00      	nop
 800985c:	0800986d 	.word	0x0800986d
 8009860:	08009873 	.word	0x08009873
 8009864:	08009881 	.word	0x08009881
 8009868:	0800988f 	.word	0x0800988f
	{
	/* Make sure that no pending write process */
	case CTRL_SYNC :
		res = RES_OK;
 800986c:	2300      	movs	r3, #0
 800986e:	73fb      	strb	r3, [r7, #15]
		break;
 8009870:	e014      	b.n	800989c <USER_ioctl+0x74>

		/* Get number of sectors on the disk (DWORD) */
	case GET_SECTOR_COUNT :
		*(DWORD*)buff = 4096; //SDRAM_DEVICE_SIZE / BLOCK_SIZE;
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009878:	601a      	str	r2, [r3, #0]
		res = RES_OK;
 800987a:	2300      	movs	r3, #0
 800987c:	73fb      	strb	r3, [r7, #15]
		break;
 800987e:	e00d      	b.n	800989c <USER_ioctl+0x74>

		/* Get R/W sector size (WORD) */
	case GET_SECTOR_SIZE :
		*(WORD*)buff = SECTOR_SIZE;
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009886:	801a      	strh	r2, [r3, #0]
		res = RES_OK;
 8009888:	2300      	movs	r3, #0
 800988a:	73fb      	strb	r3, [r7, #15]
		break;
 800988c:	e006      	b.n	800989c <USER_ioctl+0x74>

		/* Get erase block size in unit of sector (DWORD) */
	case GET_BLOCK_SIZE :
		*(DWORD*)buff = SECTOR_SIZE;
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009894:	601a      	str	r2, [r3, #0]
		break;
 8009896:	e001      	b.n	800989c <USER_ioctl+0x74>

	default:
		res = RES_PARERR;
 8009898:	2304      	movs	r3, #4
 800989a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800989c:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800989e:	4618      	mov	r0, r3
 80098a0:	3714      	adds	r7, #20
 80098a2:	46bd      	mov	sp, r7
 80098a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a8:	4770      	bx	lr
 80098aa:	bf00      	nop
 80098ac:	2000000d 	.word	0x2000000d

080098b0 <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 80098b0:	b480      	push	{r7}
 80098b2:	b085      	sub	sp, #20
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	3308      	adds	r3, #8
 80098bc:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	781b      	ldrb	r3, [r3, #0]
 80098c2:	2b04      	cmp	r3, #4
 80098c4:	d001      	beq.n	80098ca <verify_packet+0x1a>
    return 1; /* Incorrect type */
 80098c6:	2301      	movs	r3, #1
 80098c8:	e00c      	b.n	80098e4 <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	3302      	adds	r3, #2
 80098ce:	781b      	ldrb	r3, [r3, #0]
 80098d0:	461a      	mov	r2, r3
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80098d8:	3b03      	subs	r3, #3
 80098da:	429a      	cmp	r2, r3
 80098dc:	d001      	beq.n	80098e2 <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 80098de:	2302      	movs	r3, #2
 80098e0:	e000      	b.n	80098e4 <verify_packet+0x34>
  
  return 0;      
 80098e2:	2300      	movs	r3, #0
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	3714      	adds	r7, #20
 80098e8:	46bd      	mov	sp, r7
 80098ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ee:	4770      	bx	lr

080098f0 <hci_init>:
}

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b084      	sub	sp, #16
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
 80098f8:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d002      	beq.n	8009906 <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 8009900:	4a18      	ldr	r2, [pc, #96]	; (8009964 <hci_init+0x74>)
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 8009906:	4818      	ldr	r0, [pc, #96]	; (8009968 <hci_init+0x78>)
 8009908:	f000 f8a2 	bl	8009a50 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 800990c:	4817      	ldr	r0, [pc, #92]	; (800996c <hci_init+0x7c>)
 800990e:	f000 f89f 	bl	8009a50 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 8009912:	f7f7 f935 	bl	8000b80 <hci_tl_lowlevel_init>

  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8009916:	2300      	movs	r3, #0
 8009918:	73fb      	strb	r3, [r7, #15]
 800991a:	e00c      	b.n	8009936 <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 800991c:	7bfb      	ldrb	r3, [r7, #15]
 800991e:	228c      	movs	r2, #140	; 0x8c
 8009920:	fb02 f303 	mul.w	r3, r2, r3
 8009924:	4a12      	ldr	r2, [pc, #72]	; (8009970 <hci_init+0x80>)
 8009926:	4413      	add	r3, r2
 8009928:	4619      	mov	r1, r3
 800992a:	480f      	ldr	r0, [pc, #60]	; (8009968 <hci_init+0x78>)
 800992c:	f000 f8e8 	bl	8009b00 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8009930:	7bfb      	ldrb	r3, [r7, #15]
 8009932:	3301      	adds	r3, #1
 8009934:	73fb      	strb	r3, [r7, #15]
 8009936:	7bfb      	ldrb	r3, [r7, #15]
 8009938:	2b09      	cmp	r3, #9
 800993a:	d9ef      	bls.n	800991c <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 800993c:	4b09      	ldr	r3, [pc, #36]	; (8009964 <hci_init+0x74>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d003      	beq.n	800994c <hci_init+0x5c>
 8009944:	4b07      	ldr	r3, [pc, #28]	; (8009964 <hci_init+0x74>)
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	2000      	movs	r0, #0
 800994a:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 800994c:	4b05      	ldr	r3, [pc, #20]	; (8009964 <hci_init+0x74>)
 800994e:	689b      	ldr	r3, [r3, #8]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d002      	beq.n	800995a <hci_init+0x6a>
 8009954:	4b03      	ldr	r3, [pc, #12]	; (8009964 <hci_init+0x74>)
 8009956:	689b      	ldr	r3, [r3, #8]
 8009958:	4798      	blx	r3
}
 800995a:	bf00      	nop
 800995c:	3710      	adds	r7, #16
 800995e:	46bd      	mov	sp, r7
 8009960:	bd80      	pop	{r7, pc}
 8009962:	bf00      	nop
 8009964:	200008a8 	.word	0x200008a8
 8009968:	20002d84 	.word	0x20002d84
 800996c:	20002d8c 	.word	0x20002d8c
 8009970:	20000330 	.word	0x20000330

08009974 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 8009974:	b480      	push	{r7}
 8009976:	b083      	sub	sp, #12
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	4a0b      	ldr	r2, [pc, #44]	; (80099b0 <hci_register_io_bus+0x3c>)
 8009982:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	68db      	ldr	r3, [r3, #12]
 8009988:	4a09      	ldr	r2, [pc, #36]	; (80099b0 <hci_register_io_bus+0x3c>)
 800998a:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	691b      	ldr	r3, [r3, #16]
 8009990:	4a07      	ldr	r2, [pc, #28]	; (80099b0 <hci_register_io_bus+0x3c>)
 8009992:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	699b      	ldr	r3, [r3, #24]
 8009998:	4a05      	ldr	r2, [pc, #20]	; (80099b0 <hci_register_io_bus+0x3c>)
 800999a:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	689b      	ldr	r3, [r3, #8]
 80099a0:	4a03      	ldr	r2, [pc, #12]	; (80099b0 <hci_register_io_bus+0x3c>)
 80099a2:	6093      	str	r3, [r2, #8]
}
 80099a4:	bf00      	nop
 80099a6:	370c      	adds	r7, #12
 80099a8:	46bd      	mov	sp, r7
 80099aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ae:	4770      	bx	lr
 80099b0:	200008a8 	.word	0x200008a8

080099b4 <hci_notify_asynch_evt>:
    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
  }
}

int32_t hci_notify_asynch_evt(void* pdata)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b086      	sub	sp, #24
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 80099bc:	2300      	movs	r3, #0
 80099be:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 80099c0:	2300      	movs	r3, #0
 80099c2:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 80099c4:	481f      	ldr	r0, [pc, #124]	; (8009a44 <hci_notify_asynch_evt+0x90>)
 80099c6:	f000 f853 	bl	8009a70 <list_is_empty>
 80099ca:	4603      	mov	r3, r0
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d132      	bne.n	8009a36 <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 80099d0:	f107 030c 	add.w	r3, r7, #12
 80099d4:	4619      	mov	r1, r3
 80099d6:	481b      	ldr	r0, [pc, #108]	; (8009a44 <hci_notify_asynch_evt+0x90>)
 80099d8:	f000 f8d9 	bl	8009b8e <list_remove_head>
    
    if (hciContext.io.Receive)
 80099dc:	4b1a      	ldr	r3, [pc, #104]	; (8009a48 <hci_notify_asynch_evt+0x94>)
 80099de:	68db      	ldr	r3, [r3, #12]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d02a      	beq.n	8009a3a <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 80099e4:	4b18      	ldr	r3, [pc, #96]	; (8009a48 <hci_notify_asynch_evt+0x94>)
 80099e6:	68db      	ldr	r3, [r3, #12]
 80099e8:	68fa      	ldr	r2, [r7, #12]
 80099ea:	3208      	adds	r2, #8
 80099ec:	2180      	movs	r1, #128	; 0x80
 80099ee:	4610      	mov	r0, r2
 80099f0:	4798      	blx	r3
 80099f2:	4603      	mov	r3, r0
 80099f4:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 80099f6:	7cfb      	ldrb	r3, [r7, #19]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d016      	beq.n	8009a2a <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	7cfa      	ldrb	r2, [r7, #19]
 8009a00:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
        if (verify_packet(hciReadPacket) == 0)
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	4618      	mov	r0, r3
 8009a08:	f7ff ff52 	bl	80098b0 <verify_packet>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d105      	bne.n	8009a1e <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	4619      	mov	r1, r3
 8009a16:	480d      	ldr	r0, [pc, #52]	; (8009a4c <hci_notify_asynch_evt+0x98>)
 8009a18:	f000 f872 	bl	8009b00 <list_insert_tail>
 8009a1c:	e00d      	b.n	8009a3a <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	4619      	mov	r1, r3
 8009a22:	4808      	ldr	r0, [pc, #32]	; (8009a44 <hci_notify_asynch_evt+0x90>)
 8009a24:	f000 f846 	bl	8009ab4 <list_insert_head>
 8009a28:	e007      	b.n	8009a3a <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	4619      	mov	r1, r3
 8009a2e:	4805      	ldr	r0, [pc, #20]	; (8009a44 <hci_notify_asynch_evt+0x90>)
 8009a30:	f000 f840 	bl	8009ab4 <list_insert_head>
 8009a34:	e001      	b.n	8009a3a <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 8009a36:	2301      	movs	r3, #1
 8009a38:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8009a3a:	697b      	ldr	r3, [r7, #20]
  
}
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	3718      	adds	r7, #24
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}
 8009a44:	20002d84 	.word	0x20002d84
 8009a48:	200008a8 	.word	0x200008a8
 8009a4c:	20002d8c 	.word	0x20002d8c

08009a50 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 8009a50:	b480      	push	{r7}
 8009a52:	b083      	sub	sp, #12
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	687a      	ldr	r2, [r7, #4]
 8009a5c:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	687a      	ldr	r2, [r7, #4]
 8009a62:	605a      	str	r2, [r3, #4]
}
 8009a64:	bf00      	nop
 8009a66:	370c      	adds	r7, #12
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6e:	4770      	bx	lr

08009a70 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 8009a70:	b480      	push	{r7}
 8009a72:	b087      	sub	sp, #28
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009a78:	f3ef 8310 	mrs	r3, PRIMASK
 8009a7c:	60fb      	str	r3, [r7, #12]
  return(result);
 8009a7e:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009a80:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8009a82:	b672      	cpsid	i
}
 8009a84:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	687a      	ldr	r2, [r7, #4]
 8009a8c:	429a      	cmp	r2, r3
 8009a8e:	d102      	bne.n	8009a96 <list_is_empty+0x26>
  {
    return_value = 1;
 8009a90:	2301      	movs	r3, #1
 8009a92:	75fb      	strb	r3, [r7, #23]
 8009a94:	e001      	b.n	8009a9a <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 8009a96:	2300      	movs	r3, #0
 8009a98:	75fb      	strb	r3, [r7, #23]
 8009a9a:	693b      	ldr	r3, [r7, #16]
 8009a9c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	f383 8810 	msr	PRIMASK, r3
}
 8009aa4:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 8009aa6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	371c      	adds	r7, #28
 8009aac:	46bd      	mov	sp, r7
 8009aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab2:	4770      	bx	lr

08009ab4 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 8009ab4:	b480      	push	{r7}
 8009ab6:	b087      	sub	sp, #28
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
 8009abc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009abe:	f3ef 8310 	mrs	r3, PRIMASK
 8009ac2:	60fb      	str	r3, [r7, #12]
  return(result);
 8009ac4:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009ac6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009ac8:	b672      	cpsid	i
}
 8009aca:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681a      	ldr	r2, [r3, #0]
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	687a      	ldr	r2, [r7, #4]
 8009ad8:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	683a      	ldr	r2, [r7, #0]
 8009ade:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	683a      	ldr	r2, [r7, #0]
 8009ae6:	605a      	str	r2, [r3, #4]
 8009ae8:	697b      	ldr	r3, [r7, #20]
 8009aea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009aec:	693b      	ldr	r3, [r7, #16]
 8009aee:	f383 8810 	msr	PRIMASK, r3
}
 8009af2:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8009af4:	bf00      	nop
 8009af6:	371c      	adds	r7, #28
 8009af8:	46bd      	mov	sp, r7
 8009afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afe:	4770      	bx	lr

08009b00 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 8009b00:	b480      	push	{r7}
 8009b02:	b087      	sub	sp, #28
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
 8009b08:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009b0a:	f3ef 8310 	mrs	r3, PRIMASK
 8009b0e:	60fb      	str	r3, [r7, #12]
  return(result);
 8009b10:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009b12:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009b14:	b672      	cpsid	i
}
 8009b16:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	687a      	ldr	r2, [r7, #4]
 8009b1c:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	685a      	ldr	r2, [r3, #4]
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	683a      	ldr	r2, [r7, #0]
 8009b2a:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	685b      	ldr	r3, [r3, #4]
 8009b30:	683a      	ldr	r2, [r7, #0]
 8009b32:	601a      	str	r2, [r3, #0]
 8009b34:	697b      	ldr	r3, [r7, #20]
 8009b36:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b38:	693b      	ldr	r3, [r7, #16]
 8009b3a:	f383 8810 	msr	PRIMASK, r3
}
 8009b3e:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8009b40:	bf00      	nop
 8009b42:	371c      	adds	r7, #28
 8009b44:	46bd      	mov	sp, r7
 8009b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4a:	4770      	bx	lr

08009b4c <list_remove_node>:

void list_remove_node (tListNode * node)
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	b087      	sub	sp, #28
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009b54:	f3ef 8310 	mrs	r3, PRIMASK
 8009b58:	60fb      	str	r3, [r7, #12]
  return(result);
 8009b5a:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009b5c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009b5e:	b672      	cpsid	i
}
 8009b60:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	685b      	ldr	r3, [r3, #4]
 8009b66:	687a      	ldr	r2, [r7, #4]
 8009b68:	6812      	ldr	r2, [r2, #0]
 8009b6a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	687a      	ldr	r2, [r7, #4]
 8009b72:	6852      	ldr	r2, [r2, #4]
 8009b74:	605a      	str	r2, [r3, #4]
 8009b76:	697b      	ldr	r3, [r7, #20]
 8009b78:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b7a:	693b      	ldr	r3, [r7, #16]
 8009b7c:	f383 8810 	msr	PRIMASK, r3
}
 8009b80:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8009b82:	bf00      	nop
 8009b84:	371c      	adds	r7, #28
 8009b86:	46bd      	mov	sp, r7
 8009b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8c:	4770      	bx	lr

08009b8e <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 8009b8e:	b580      	push	{r7, lr}
 8009b90:	b086      	sub	sp, #24
 8009b92:	af00      	add	r7, sp, #0
 8009b94:	6078      	str	r0, [r7, #4]
 8009b96:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009b98:	f3ef 8310 	mrs	r3, PRIMASK
 8009b9c:	60fb      	str	r3, [r7, #12]
  return(result);
 8009b9e:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009ba0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009ba2:	b672      	cpsid	i
}
 8009ba4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681a      	ldr	r2, [r3, #0]
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	f7ff ffca 	bl	8009b4c <list_remove_node>
  (*node)->next = NULL;
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	605a      	str	r2, [r3, #4]
 8009bc8:	697b      	ldr	r3, [r7, #20]
 8009bca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009bcc:	693b      	ldr	r3, [r7, #16]
 8009bce:	f383 8810 	msr	PRIMASK, r3
}
 8009bd2:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8009bd4:	bf00      	nop
 8009bd6:	3718      	adds	r7, #24
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	bd80      	pop	{r7, pc}

08009bdc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b084      	sub	sp, #16
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
 8009be4:	460b      	mov	r3, r1
 8009be6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009be8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009bec:	f002 fc44 	bl	800c478 <malloc>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d105      	bne.n	8009c06 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8009c02:	2302      	movs	r3, #2
 8009c04:	e066      	b.n	8009cd4 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	68fa      	ldr	r2, [r7, #12]
 8009c0a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	7c1b      	ldrb	r3, [r3, #16]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d119      	bne.n	8009c4a <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009c16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c1a:	2202      	movs	r2, #2
 8009c1c:	2181      	movs	r1, #129	; 0x81
 8009c1e:	6878      	ldr	r0, [r7, #4]
 8009c20:	f002 fa5d 	bl	800c0de <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2201      	movs	r2, #1
 8009c28:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009c2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c2e:	2202      	movs	r2, #2
 8009c30:	2101      	movs	r1, #1
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	f002 fa53 	bl	800c0de <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2201      	movs	r2, #1
 8009c3c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2210      	movs	r2, #16
 8009c44:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8009c48:	e016      	b.n	8009c78 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009c4a:	2340      	movs	r3, #64	; 0x40
 8009c4c:	2202      	movs	r2, #2
 8009c4e:	2181      	movs	r1, #129	; 0x81
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	f002 fa44 	bl	800c0de <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	2201      	movs	r2, #1
 8009c5a:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009c5c:	2340      	movs	r3, #64	; 0x40
 8009c5e:	2202      	movs	r2, #2
 8009c60:	2101      	movs	r1, #1
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f002 fa3b 	bl	800c0de <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2201      	movs	r2, #1
 8009c6c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2210      	movs	r2, #16
 8009c74:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009c78:	2308      	movs	r3, #8
 8009c7a:	2203      	movs	r2, #3
 8009c7c:	2182      	movs	r1, #130	; 0x82
 8009c7e:	6878      	ldr	r0, [r7, #4]
 8009c80:	f002 fa2d 	bl	800c0de <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2201      	movs	r2, #1
 8009c88:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	2200      	movs	r2, #0
 8009c9a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	7c1b      	ldrb	r3, [r3, #16]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d109      	bne.n	8009cc2 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009cb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009cb8:	2101      	movs	r1, #1
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	f002 fafe 	bl	800c2bc <USBD_LL_PrepareReceive>
 8009cc0:	e007      	b.n	8009cd2 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009cc8:	2340      	movs	r3, #64	; 0x40
 8009cca:	2101      	movs	r1, #1
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f002 faf5 	bl	800c2bc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009cd2:	2300      	movs	r3, #0
}
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	3710      	adds	r7, #16
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	bd80      	pop	{r7, pc}

08009cdc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b084      	sub	sp, #16
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
 8009ce4:	460b      	mov	r3, r1
 8009ce6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8009ce8:	2300      	movs	r3, #0
 8009cea:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009cec:	2181      	movs	r1, #129	; 0x81
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f002 fa1b 	bl	800c12a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009cfa:	2101      	movs	r1, #1
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	f002 fa14 	bl	800c12a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2200      	movs	r2, #0
 8009d06:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009d0a:	2182      	movs	r1, #130	; 0x82
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f002 fa0c 	bl	800c12a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2200      	movs	r2, #0
 8009d16:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d00e      	beq.n	8009d4a <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d32:	685b      	ldr	r3, [r3, #4]
 8009d34:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	f002 fba3 	bl	800c488 <free>
    pdev->pClassData = NULL;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2200      	movs	r2, #0
 8009d46:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8009d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	3710      	adds	r7, #16
 8009d50:	46bd      	mov	sp, r7
 8009d52:	bd80      	pop	{r7, pc}

08009d54 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b086      	sub	sp, #24
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
 8009d5c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009d64:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8009d66:	2300      	movs	r3, #0
 8009d68:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d6e:	2300      	movs	r3, #0
 8009d70:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	781b      	ldrb	r3, [r3, #0]
 8009d76:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d03a      	beq.n	8009df4 <USBD_CDC_Setup+0xa0>
 8009d7e:	2b20      	cmp	r3, #32
 8009d80:	f040 8097 	bne.w	8009eb2 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	88db      	ldrh	r3, [r3, #6]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d029      	beq.n	8009de0 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	781b      	ldrb	r3, [r3, #0]
 8009d90:	b25b      	sxtb	r3, r3
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	da11      	bge.n	8009dba <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d9c:	689b      	ldr	r3, [r3, #8]
 8009d9e:	683a      	ldr	r2, [r7, #0]
 8009da0:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8009da2:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009da4:	683a      	ldr	r2, [r7, #0]
 8009da6:	88d2      	ldrh	r2, [r2, #6]
 8009da8:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8009daa:	6939      	ldr	r1, [r7, #16]
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	88db      	ldrh	r3, [r3, #6]
 8009db0:	461a      	mov	r2, r3
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	f001 faa6 	bl	800b304 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8009db8:	e082      	b.n	8009ec0 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	785a      	ldrb	r2, [r3, #1]
 8009dbe:	693b      	ldr	r3, [r7, #16]
 8009dc0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	88db      	ldrh	r3, [r3, #6]
 8009dc8:	b2da      	uxtb	r2, r3
 8009dca:	693b      	ldr	r3, [r7, #16]
 8009dcc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8009dd0:	6939      	ldr	r1, [r7, #16]
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	88db      	ldrh	r3, [r3, #6]
 8009dd6:	461a      	mov	r2, r3
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	f001 fabf 	bl	800b35c <USBD_CtlPrepareRx>
    break;
 8009dde:	e06f      	b.n	8009ec0 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009de6:	689b      	ldr	r3, [r3, #8]
 8009de8:	683a      	ldr	r2, [r7, #0]
 8009dea:	7850      	ldrb	r0, [r2, #1]
 8009dec:	2200      	movs	r2, #0
 8009dee:	6839      	ldr	r1, [r7, #0]
 8009df0:	4798      	blx	r3
    break;
 8009df2:	e065      	b.n	8009ec0 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	785b      	ldrb	r3, [r3, #1]
 8009df8:	2b0b      	cmp	r3, #11
 8009dfa:	d84f      	bhi.n	8009e9c <USBD_CDC_Setup+0x148>
 8009dfc:	a201      	add	r2, pc, #4	; (adr r2, 8009e04 <USBD_CDC_Setup+0xb0>)
 8009dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e02:	bf00      	nop
 8009e04:	08009e35 	.word	0x08009e35
 8009e08:	08009eab 	.word	0x08009eab
 8009e0c:	08009e9d 	.word	0x08009e9d
 8009e10:	08009e9d 	.word	0x08009e9d
 8009e14:	08009e9d 	.word	0x08009e9d
 8009e18:	08009e9d 	.word	0x08009e9d
 8009e1c:	08009e9d 	.word	0x08009e9d
 8009e20:	08009e9d 	.word	0x08009e9d
 8009e24:	08009e9d 	.word	0x08009e9d
 8009e28:	08009e9d 	.word	0x08009e9d
 8009e2c:	08009e5d 	.word	0x08009e5d
 8009e30:	08009e85 	.word	0x08009e85
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e3a:	2b03      	cmp	r3, #3
 8009e3c:	d107      	bne.n	8009e4e <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009e3e:	f107 030c 	add.w	r3, r7, #12
 8009e42:	2202      	movs	r2, #2
 8009e44:	4619      	mov	r1, r3
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	f001 fa5c 	bl	800b304 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8009e4c:	e030      	b.n	8009eb0 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8009e4e:	6839      	ldr	r1, [r7, #0]
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f001 f9e6 	bl	800b222 <USBD_CtlError>
        ret = USBD_FAIL;
 8009e56:	2303      	movs	r3, #3
 8009e58:	75fb      	strb	r3, [r7, #23]
      break;
 8009e5a:	e029      	b.n	8009eb0 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e62:	2b03      	cmp	r3, #3
 8009e64:	d107      	bne.n	8009e76 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009e66:	f107 030f 	add.w	r3, r7, #15
 8009e6a:	2201      	movs	r2, #1
 8009e6c:	4619      	mov	r1, r3
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	f001 fa48 	bl	800b304 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8009e74:	e01c      	b.n	8009eb0 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8009e76:	6839      	ldr	r1, [r7, #0]
 8009e78:	6878      	ldr	r0, [r7, #4]
 8009e7a:	f001 f9d2 	bl	800b222 <USBD_CtlError>
        ret = USBD_FAIL;
 8009e7e:	2303      	movs	r3, #3
 8009e80:	75fb      	strb	r3, [r7, #23]
      break;
 8009e82:	e015      	b.n	8009eb0 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e8a:	2b03      	cmp	r3, #3
 8009e8c:	d00f      	beq.n	8009eae <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8009e8e:	6839      	ldr	r1, [r7, #0]
 8009e90:	6878      	ldr	r0, [r7, #4]
 8009e92:	f001 f9c6 	bl	800b222 <USBD_CtlError>
        ret = USBD_FAIL;
 8009e96:	2303      	movs	r3, #3
 8009e98:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8009e9a:	e008      	b.n	8009eae <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8009e9c:	6839      	ldr	r1, [r7, #0]
 8009e9e:	6878      	ldr	r0, [r7, #4]
 8009ea0:	f001 f9bf 	bl	800b222 <USBD_CtlError>
      ret = USBD_FAIL;
 8009ea4:	2303      	movs	r3, #3
 8009ea6:	75fb      	strb	r3, [r7, #23]
      break;
 8009ea8:	e002      	b.n	8009eb0 <USBD_CDC_Setup+0x15c>
      break;
 8009eaa:	bf00      	nop
 8009eac:	e008      	b.n	8009ec0 <USBD_CDC_Setup+0x16c>
      break;
 8009eae:	bf00      	nop
    }
    break;
 8009eb0:	e006      	b.n	8009ec0 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8009eb2:	6839      	ldr	r1, [r7, #0]
 8009eb4:	6878      	ldr	r0, [r7, #4]
 8009eb6:	f001 f9b4 	bl	800b222 <USBD_CtlError>
    ret = USBD_FAIL;
 8009eba:	2303      	movs	r3, #3
 8009ebc:	75fb      	strb	r3, [r7, #23]
    break;
 8009ebe:	bf00      	nop
  }

  return (uint8_t)ret;
 8009ec0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	3718      	adds	r7, #24
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}
 8009eca:	bf00      	nop

08009ecc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b084      	sub	sp, #16
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
 8009ed4:	460b      	mov	r3, r1
 8009ed6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009ede:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d101      	bne.n	8009eee <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009eea:	2303      	movs	r3, #3
 8009eec:	e049      	b.n	8009f82 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009ef4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009ef6:	78fa      	ldrb	r2, [r7, #3]
 8009ef8:	6879      	ldr	r1, [r7, #4]
 8009efa:	4613      	mov	r3, r2
 8009efc:	009b      	lsls	r3, r3, #2
 8009efe:	4413      	add	r3, r2
 8009f00:	009b      	lsls	r3, r3, #2
 8009f02:	440b      	add	r3, r1
 8009f04:	3318      	adds	r3, #24
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d029      	beq.n	8009f60 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009f0c:	78fa      	ldrb	r2, [r7, #3]
 8009f0e:	6879      	ldr	r1, [r7, #4]
 8009f10:	4613      	mov	r3, r2
 8009f12:	009b      	lsls	r3, r3, #2
 8009f14:	4413      	add	r3, r2
 8009f16:	009b      	lsls	r3, r3, #2
 8009f18:	440b      	add	r3, r1
 8009f1a:	3318      	adds	r3, #24
 8009f1c:	681a      	ldr	r2, [r3, #0]
 8009f1e:	78f9      	ldrb	r1, [r7, #3]
 8009f20:	68f8      	ldr	r0, [r7, #12]
 8009f22:	460b      	mov	r3, r1
 8009f24:	00db      	lsls	r3, r3, #3
 8009f26:	1a5b      	subs	r3, r3, r1
 8009f28:	009b      	lsls	r3, r3, #2
 8009f2a:	4403      	add	r3, r0
 8009f2c:	3344      	adds	r3, #68	; 0x44
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	fbb2 f1f3 	udiv	r1, r2, r3
 8009f34:	fb03 f301 	mul.w	r3, r3, r1
 8009f38:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d110      	bne.n	8009f60 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8009f3e:	78fa      	ldrb	r2, [r7, #3]
 8009f40:	6879      	ldr	r1, [r7, #4]
 8009f42:	4613      	mov	r3, r2
 8009f44:	009b      	lsls	r3, r3, #2
 8009f46:	4413      	add	r3, r2
 8009f48:	009b      	lsls	r3, r3, #2
 8009f4a:	440b      	add	r3, r1
 8009f4c:	3318      	adds	r3, #24
 8009f4e:	2200      	movs	r2, #0
 8009f50:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009f52:	78f9      	ldrb	r1, [r7, #3]
 8009f54:	2300      	movs	r3, #0
 8009f56:	2200      	movs	r2, #0
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f002 f98e 	bl	800c27a <USBD_LL_Transmit>
 8009f5e:	e00f      	b.n	8009f80 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009f60:	68bb      	ldr	r3, [r7, #8]
 8009f62:	2200      	movs	r2, #0
 8009f64:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009f6e:	691b      	ldr	r3, [r3, #16]
 8009f70:	68ba      	ldr	r2, [r7, #8]
 8009f72:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009f76:	68ba      	ldr	r2, [r7, #8]
 8009f78:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009f7c:	78fa      	ldrb	r2, [r7, #3]
 8009f7e:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8009f80:	2300      	movs	r3, #0
}
 8009f82:	4618      	mov	r0, r3
 8009f84:	3710      	adds	r7, #16
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bd80      	pop	{r7, pc}

08009f8a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009f8a:	b580      	push	{r7, lr}
 8009f8c:	b084      	sub	sp, #16
 8009f8e:	af00      	add	r7, sp, #0
 8009f90:	6078      	str	r0, [r7, #4]
 8009f92:	460b      	mov	r3, r1
 8009f94:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009f9c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d101      	bne.n	8009fac <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009fa8:	2303      	movs	r3, #3
 8009faa:	e015      	b.n	8009fd8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009fac:	78fb      	ldrb	r3, [r7, #3]
 8009fae:	4619      	mov	r1, r3
 8009fb0:	6878      	ldr	r0, [r7, #4]
 8009fb2:	f002 f9a4 	bl	800c2fe <USBD_LL_GetRxDataSize>
 8009fb6:	4602      	mov	r2, r0
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009fc4:	68db      	ldr	r3, [r3, #12]
 8009fc6:	68fa      	ldr	r2, [r7, #12]
 8009fc8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009fcc:	68fa      	ldr	r2, [r7, #12]
 8009fce:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009fd2:	4611      	mov	r1, r2
 8009fd4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009fd6:	2300      	movs	r3, #0
}
 8009fd8:	4618      	mov	r0, r3
 8009fda:	3710      	adds	r7, #16
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bd80      	pop	{r7, pc}

08009fe0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b084      	sub	sp, #16
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009fee:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d015      	beq.n	800a026 <USBD_CDC_EP0_RxReady+0x46>
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a000:	2bff      	cmp	r3, #255	; 0xff
 800a002:	d010      	beq.n	800a026 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a00a:	689b      	ldr	r3, [r3, #8]
 800a00c:	68fa      	ldr	r2, [r7, #12]
 800a00e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800a012:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a014:	68fa      	ldr	r2, [r7, #12]
 800a016:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a01a:	b292      	uxth	r2, r2
 800a01c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	22ff      	movs	r2, #255	; 0xff
 800a022:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800a026:	2300      	movs	r3, #0
}
 800a028:	4618      	mov	r0, r3
 800a02a:	3710      	adds	r7, #16
 800a02c:	46bd      	mov	sp, r7
 800a02e:	bd80      	pop	{r7, pc}

0800a030 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a030:	b480      	push	{r7}
 800a032:	b083      	sub	sp, #12
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2243      	movs	r2, #67	; 0x43
 800a03c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800a03e:	4b03      	ldr	r3, [pc, #12]	; (800a04c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a040:	4618      	mov	r0, r3
 800a042:	370c      	adds	r7, #12
 800a044:	46bd      	mov	sp, r7
 800a046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04a:	4770      	bx	lr
 800a04c:	200000ac 	.word	0x200000ac

0800a050 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a050:	b480      	push	{r7}
 800a052:	b083      	sub	sp, #12
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2243      	movs	r2, #67	; 0x43
 800a05c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800a05e:	4b03      	ldr	r3, [pc, #12]	; (800a06c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a060:	4618      	mov	r0, r3
 800a062:	370c      	adds	r7, #12
 800a064:	46bd      	mov	sp, r7
 800a066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06a:	4770      	bx	lr
 800a06c:	20000068 	.word	0x20000068

0800a070 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a070:	b480      	push	{r7}
 800a072:	b083      	sub	sp, #12
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2243      	movs	r2, #67	; 0x43
 800a07c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800a07e:	4b03      	ldr	r3, [pc, #12]	; (800a08c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a080:	4618      	mov	r0, r3
 800a082:	370c      	adds	r7, #12
 800a084:	46bd      	mov	sp, r7
 800a086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08a:	4770      	bx	lr
 800a08c:	200000f0 	.word	0x200000f0

0800a090 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a090:	b480      	push	{r7}
 800a092:	b083      	sub	sp, #12
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	220a      	movs	r2, #10
 800a09c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a09e:	4b03      	ldr	r3, [pc, #12]	; (800a0ac <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	370c      	adds	r7, #12
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0aa:	4770      	bx	lr
 800a0ac:	20000024 	.word	0x20000024

0800a0b0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a0b0:	b480      	push	{r7}
 800a0b2:	b083      	sub	sp, #12
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
 800a0b8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d101      	bne.n	800a0c4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a0c0:	2303      	movs	r3, #3
 800a0c2:	e004      	b.n	800a0ce <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	683a      	ldr	r2, [r7, #0]
 800a0c8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800a0cc:	2300      	movs	r3, #0
}
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	370c      	adds	r7, #12
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d8:	4770      	bx	lr

0800a0da <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a0da:	b480      	push	{r7}
 800a0dc:	b087      	sub	sp, #28
 800a0de:	af00      	add	r7, sp, #0
 800a0e0:	60f8      	str	r0, [r7, #12]
 800a0e2:	60b9      	str	r1, [r7, #8]
 800a0e4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a0ec:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800a0ee:	697b      	ldr	r3, [r7, #20]
 800a0f0:	68ba      	ldr	r2, [r7, #8]
 800a0f2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a0f6:	697b      	ldr	r3, [r7, #20]
 800a0f8:	687a      	ldr	r2, [r7, #4]
 800a0fa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a0fe:	2300      	movs	r3, #0
}
 800a100:	4618      	mov	r0, r3
 800a102:	371c      	adds	r7, #28
 800a104:	46bd      	mov	sp, r7
 800a106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10a:	4770      	bx	lr

0800a10c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a10c:	b480      	push	{r7}
 800a10e:	b085      	sub	sp, #20
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
 800a114:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a11c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	683a      	ldr	r2, [r7, #0]
 800a122:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a126:	2300      	movs	r3, #0
}
 800a128:	4618      	mov	r0, r3
 800a12a:	3714      	adds	r7, #20
 800a12c:	46bd      	mov	sp, r7
 800a12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a132:	4770      	bx	lr

0800a134 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b084      	sub	sp, #16
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a142:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d101      	bne.n	800a152 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a14e:	2303      	movs	r3, #3
 800a150:	e016      	b.n	800a180 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	7c1b      	ldrb	r3, [r3, #16]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d109      	bne.n	800a16e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a160:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a164:	2101      	movs	r1, #1
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	f002 f8a8 	bl	800c2bc <USBD_LL_PrepareReceive>
 800a16c:	e007      	b.n	800a17e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a174:	2340      	movs	r3, #64	; 0x40
 800a176:	2101      	movs	r1, #1
 800a178:	6878      	ldr	r0, [r7, #4]
 800a17a:	f002 f89f 	bl	800c2bc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a17e:	2300      	movs	r3, #0
}
 800a180:	4618      	mov	r0, r3
 800a182:	3710      	adds	r7, #16
 800a184:	46bd      	mov	sp, r7
 800a186:	bd80      	pop	{r7, pc}

0800a188 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b086      	sub	sp, #24
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	60f8      	str	r0, [r7, #12]
 800a190:	60b9      	str	r1, [r7, #8]
 800a192:	4613      	mov	r3, r2
 800a194:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d101      	bne.n	800a1a0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a19c:	2303      	movs	r3, #3
 800a19e:	e025      	b.n	800a1ec <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d003      	beq.n	800a1b2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d003      	beq.n	800a1c4 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	2200      	movs	r2, #0
 800a1c0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d003      	beq.n	800a1d2 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	68ba      	ldr	r2, [r7, #8]
 800a1ce:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	2201      	movs	r2, #1
 800a1d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	79fa      	ldrb	r2, [r7, #7]
 800a1de:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a1e0:	68f8      	ldr	r0, [r7, #12]
 800a1e2:	f001 ff15 	bl	800c010 <USBD_LL_Init>
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a1ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	3718      	adds	r7, #24
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	bd80      	pop	{r7, pc}

0800a1f4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b084      	sub	sp, #16
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
 800a1fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a1fe:	2300      	movs	r3, #0
 800a200:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d101      	bne.n	800a20c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800a208:	2303      	movs	r3, #3
 800a20a:	e010      	b.n	800a22e <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	683a      	ldr	r2, [r7, #0]
 800a210:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a21a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a21c:	f107 020e 	add.w	r2, r7, #14
 800a220:	4610      	mov	r0, r2
 800a222:	4798      	blx	r3
 800a224:	4602      	mov	r2, r0
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800a22c:	2300      	movs	r3, #0
}
 800a22e:	4618      	mov	r0, r3
 800a230:	3710      	adds	r7, #16
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}

0800a236 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a236:	b580      	push	{r7, lr}
 800a238:	b082      	sub	sp, #8
 800a23a:	af00      	add	r7, sp, #0
 800a23c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a23e:	6878      	ldr	r0, [r7, #4]
 800a240:	f001 ff32 	bl	800c0a8 <USBD_LL_Start>
 800a244:	4603      	mov	r3, r0
}
 800a246:	4618      	mov	r0, r3
 800a248:	3708      	adds	r7, #8
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}

0800a24e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a24e:	b480      	push	{r7}
 800a250:	b083      	sub	sp, #12
 800a252:	af00      	add	r7, sp, #0
 800a254:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a256:	2300      	movs	r3, #0
}
 800a258:	4618      	mov	r0, r3
 800a25a:	370c      	adds	r7, #12
 800a25c:	46bd      	mov	sp, r7
 800a25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a262:	4770      	bx	lr

0800a264 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b084      	sub	sp, #16
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
 800a26c:	460b      	mov	r3, r1
 800a26e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a270:	2303      	movs	r3, #3
 800a272:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d009      	beq.n	800a292 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	78fa      	ldrb	r2, [r7, #3]
 800a288:	4611      	mov	r1, r2
 800a28a:	6878      	ldr	r0, [r7, #4]
 800a28c:	4798      	blx	r3
 800a28e:	4603      	mov	r3, r0
 800a290:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a292:	7bfb      	ldrb	r3, [r7, #15]
}
 800a294:	4618      	mov	r0, r3
 800a296:	3710      	adds	r7, #16
 800a298:	46bd      	mov	sp, r7
 800a29a:	bd80      	pop	{r7, pc}

0800a29c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b082      	sub	sp, #8
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
 800a2a4:	460b      	mov	r3, r1
 800a2a6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d007      	beq.n	800a2c2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2b8:	685b      	ldr	r3, [r3, #4]
 800a2ba:	78fa      	ldrb	r2, [r7, #3]
 800a2bc:	4611      	mov	r1, r2
 800a2be:	6878      	ldr	r0, [r7, #4]
 800a2c0:	4798      	blx	r3
  }

  return USBD_OK;
 800a2c2:	2300      	movs	r3, #0
}
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	3708      	adds	r7, #8
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	bd80      	pop	{r7, pc}

0800a2cc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b084      	sub	sp, #16
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
 800a2d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a2dc:	6839      	ldr	r1, [r7, #0]
 800a2de:	4618      	mov	r0, r3
 800a2e0:	f000 ff65 	bl	800b1ae <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2201      	movs	r2, #1
 800a2e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a2f2:	461a      	mov	r2, r3
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a300:	f003 031f 	and.w	r3, r3, #31
 800a304:	2b02      	cmp	r3, #2
 800a306:	d01a      	beq.n	800a33e <USBD_LL_SetupStage+0x72>
 800a308:	2b02      	cmp	r3, #2
 800a30a:	d822      	bhi.n	800a352 <USBD_LL_SetupStage+0x86>
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d002      	beq.n	800a316 <USBD_LL_SetupStage+0x4a>
 800a310:	2b01      	cmp	r3, #1
 800a312:	d00a      	beq.n	800a32a <USBD_LL_SetupStage+0x5e>
 800a314:	e01d      	b.n	800a352 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a31c:	4619      	mov	r1, r3
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	f000 fa18 	bl	800a754 <USBD_StdDevReq>
 800a324:	4603      	mov	r3, r0
 800a326:	73fb      	strb	r3, [r7, #15]
      break;
 800a328:	e020      	b.n	800a36c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a330:	4619      	mov	r1, r3
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	f000 fa7c 	bl	800a830 <USBD_StdItfReq>
 800a338:	4603      	mov	r3, r0
 800a33a:	73fb      	strb	r3, [r7, #15]
      break;
 800a33c:	e016      	b.n	800a36c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a344:	4619      	mov	r1, r3
 800a346:	6878      	ldr	r0, [r7, #4]
 800a348:	f000 faba 	bl	800a8c0 <USBD_StdEPReq>
 800a34c:	4603      	mov	r3, r0
 800a34e:	73fb      	strb	r3, [r7, #15]
      break;
 800a350:	e00c      	b.n	800a36c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a358:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a35c:	b2db      	uxtb	r3, r3
 800a35e:	4619      	mov	r1, r3
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	f001 ff01 	bl	800c168 <USBD_LL_StallEP>
 800a366:	4603      	mov	r3, r0
 800a368:	73fb      	strb	r3, [r7, #15]
      break;
 800a36a:	bf00      	nop
  }

  return ret;
 800a36c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a36e:	4618      	mov	r0, r3
 800a370:	3710      	adds	r7, #16
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}

0800a376 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a376:	b580      	push	{r7, lr}
 800a378:	b086      	sub	sp, #24
 800a37a:	af00      	add	r7, sp, #0
 800a37c:	60f8      	str	r0, [r7, #12]
 800a37e:	460b      	mov	r3, r1
 800a380:	607a      	str	r2, [r7, #4]
 800a382:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a384:	7afb      	ldrb	r3, [r7, #11]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d137      	bne.n	800a3fa <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a390:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a398:	2b03      	cmp	r3, #3
 800a39a:	d14a      	bne.n	800a432 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800a39c:	693b      	ldr	r3, [r7, #16]
 800a39e:	689a      	ldr	r2, [r3, #8]
 800a3a0:	693b      	ldr	r3, [r7, #16]
 800a3a2:	68db      	ldr	r3, [r3, #12]
 800a3a4:	429a      	cmp	r2, r3
 800a3a6:	d913      	bls.n	800a3d0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a3a8:	693b      	ldr	r3, [r7, #16]
 800a3aa:	689a      	ldr	r2, [r3, #8]
 800a3ac:	693b      	ldr	r3, [r7, #16]
 800a3ae:	68db      	ldr	r3, [r3, #12]
 800a3b0:	1ad2      	subs	r2, r2, r3
 800a3b2:	693b      	ldr	r3, [r7, #16]
 800a3b4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a3b6:	693b      	ldr	r3, [r7, #16]
 800a3b8:	68da      	ldr	r2, [r3, #12]
 800a3ba:	693b      	ldr	r3, [r7, #16]
 800a3bc:	689b      	ldr	r3, [r3, #8]
 800a3be:	4293      	cmp	r3, r2
 800a3c0:	bf28      	it	cs
 800a3c2:	4613      	movcs	r3, r2
 800a3c4:	461a      	mov	r2, r3
 800a3c6:	6879      	ldr	r1, [r7, #4]
 800a3c8:	68f8      	ldr	r0, [r7, #12]
 800a3ca:	f000 ffe4 	bl	800b396 <USBD_CtlContinueRx>
 800a3ce:	e030      	b.n	800a432 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3d6:	691b      	ldr	r3, [r3, #16]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d00a      	beq.n	800a3f2 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a3e2:	2b03      	cmp	r3, #3
 800a3e4:	d105      	bne.n	800a3f2 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3ec:	691b      	ldr	r3, [r3, #16]
 800a3ee:	68f8      	ldr	r0, [r7, #12]
 800a3f0:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800a3f2:	68f8      	ldr	r0, [r7, #12]
 800a3f4:	f000 ffe0 	bl	800b3b8 <USBD_CtlSendStatus>
 800a3f8:	e01b      	b.n	800a432 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a400:	699b      	ldr	r3, [r3, #24]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d013      	beq.n	800a42e <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800a40c:	2b03      	cmp	r3, #3
 800a40e:	d10e      	bne.n	800a42e <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a416:	699b      	ldr	r3, [r3, #24]
 800a418:	7afa      	ldrb	r2, [r7, #11]
 800a41a:	4611      	mov	r1, r2
 800a41c:	68f8      	ldr	r0, [r7, #12]
 800a41e:	4798      	blx	r3
 800a420:	4603      	mov	r3, r0
 800a422:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800a424:	7dfb      	ldrb	r3, [r7, #23]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d003      	beq.n	800a432 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800a42a:	7dfb      	ldrb	r3, [r7, #23]
 800a42c:	e002      	b.n	800a434 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a42e:	2303      	movs	r3, #3
 800a430:	e000      	b.n	800a434 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800a432:	2300      	movs	r3, #0
}
 800a434:	4618      	mov	r0, r3
 800a436:	3718      	adds	r7, #24
 800a438:	46bd      	mov	sp, r7
 800a43a:	bd80      	pop	{r7, pc}

0800a43c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b086      	sub	sp, #24
 800a440:	af00      	add	r7, sp, #0
 800a442:	60f8      	str	r0, [r7, #12]
 800a444:	460b      	mov	r3, r1
 800a446:	607a      	str	r2, [r7, #4]
 800a448:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a44a:	7afb      	ldrb	r3, [r7, #11]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d16a      	bne.n	800a526 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	3314      	adds	r3, #20
 800a454:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a45c:	2b02      	cmp	r3, #2
 800a45e:	d155      	bne.n	800a50c <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800a460:	693b      	ldr	r3, [r7, #16]
 800a462:	689a      	ldr	r2, [r3, #8]
 800a464:	693b      	ldr	r3, [r7, #16]
 800a466:	68db      	ldr	r3, [r3, #12]
 800a468:	429a      	cmp	r2, r3
 800a46a:	d914      	bls.n	800a496 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a46c:	693b      	ldr	r3, [r7, #16]
 800a46e:	689a      	ldr	r2, [r3, #8]
 800a470:	693b      	ldr	r3, [r7, #16]
 800a472:	68db      	ldr	r3, [r3, #12]
 800a474:	1ad2      	subs	r2, r2, r3
 800a476:	693b      	ldr	r3, [r7, #16]
 800a478:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a47a:	693b      	ldr	r3, [r7, #16]
 800a47c:	689b      	ldr	r3, [r3, #8]
 800a47e:	461a      	mov	r2, r3
 800a480:	6879      	ldr	r1, [r7, #4]
 800a482:	68f8      	ldr	r0, [r7, #12]
 800a484:	f000 ff59 	bl	800b33a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a488:	2300      	movs	r3, #0
 800a48a:	2200      	movs	r2, #0
 800a48c:	2100      	movs	r1, #0
 800a48e:	68f8      	ldr	r0, [r7, #12]
 800a490:	f001 ff14 	bl	800c2bc <USBD_LL_PrepareReceive>
 800a494:	e03a      	b.n	800a50c <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a496:	693b      	ldr	r3, [r7, #16]
 800a498:	68da      	ldr	r2, [r3, #12]
 800a49a:	693b      	ldr	r3, [r7, #16]
 800a49c:	689b      	ldr	r3, [r3, #8]
 800a49e:	429a      	cmp	r2, r3
 800a4a0:	d11c      	bne.n	800a4dc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a4a2:	693b      	ldr	r3, [r7, #16]
 800a4a4:	685a      	ldr	r2, [r3, #4]
 800a4a6:	693b      	ldr	r3, [r7, #16]
 800a4a8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a4aa:	429a      	cmp	r2, r3
 800a4ac:	d316      	bcc.n	800a4dc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a4ae:	693b      	ldr	r3, [r7, #16]
 800a4b0:	685a      	ldr	r2, [r3, #4]
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a4b8:	429a      	cmp	r2, r3
 800a4ba:	d20f      	bcs.n	800a4dc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a4bc:	2200      	movs	r2, #0
 800a4be:	2100      	movs	r1, #0
 800a4c0:	68f8      	ldr	r0, [r7, #12]
 800a4c2:	f000 ff3a 	bl	800b33a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	2100      	movs	r1, #0
 800a4d4:	68f8      	ldr	r0, [r7, #12]
 800a4d6:	f001 fef1 	bl	800c2bc <USBD_LL_PrepareReceive>
 800a4da:	e017      	b.n	800a50c <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4e2:	68db      	ldr	r3, [r3, #12]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d00a      	beq.n	800a4fe <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a4ee:	2b03      	cmp	r3, #3
 800a4f0:	d105      	bne.n	800a4fe <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4f8:	68db      	ldr	r3, [r3, #12]
 800a4fa:	68f8      	ldr	r0, [r7, #12]
 800a4fc:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a4fe:	2180      	movs	r1, #128	; 0x80
 800a500:	68f8      	ldr	r0, [r7, #12]
 800a502:	f001 fe31 	bl	800c168 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a506:	68f8      	ldr	r0, [r7, #12]
 800a508:	f000 ff69 	bl	800b3de <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a512:	2b01      	cmp	r3, #1
 800a514:	d123      	bne.n	800a55e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800a516:	68f8      	ldr	r0, [r7, #12]
 800a518:	f7ff fe99 	bl	800a24e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	2200      	movs	r2, #0
 800a520:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a524:	e01b      	b.n	800a55e <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a52c:	695b      	ldr	r3, [r3, #20]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d013      	beq.n	800a55a <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800a538:	2b03      	cmp	r3, #3
 800a53a:	d10e      	bne.n	800a55a <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a542:	695b      	ldr	r3, [r3, #20]
 800a544:	7afa      	ldrb	r2, [r7, #11]
 800a546:	4611      	mov	r1, r2
 800a548:	68f8      	ldr	r0, [r7, #12]
 800a54a:	4798      	blx	r3
 800a54c:	4603      	mov	r3, r0
 800a54e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800a550:	7dfb      	ldrb	r3, [r7, #23]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d003      	beq.n	800a55e <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800a556:	7dfb      	ldrb	r3, [r7, #23]
 800a558:	e002      	b.n	800a560 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a55a:	2303      	movs	r3, #3
 800a55c:	e000      	b.n	800a560 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800a55e:	2300      	movs	r3, #0
}
 800a560:	4618      	mov	r0, r3
 800a562:	3718      	adds	r7, #24
 800a564:	46bd      	mov	sp, r7
 800a566:	bd80      	pop	{r7, pc}

0800a568 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b082      	sub	sp, #8
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2201      	movs	r2, #1
 800a574:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2200      	movs	r2, #0
 800a57c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2200      	movs	r2, #0
 800a584:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2200      	movs	r2, #0
 800a58a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a594:	2b00      	cmp	r3, #0
 800a596:	d009      	beq.n	800a5ac <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a59e:	685b      	ldr	r3, [r3, #4]
 800a5a0:	687a      	ldr	r2, [r7, #4]
 800a5a2:	6852      	ldr	r2, [r2, #4]
 800a5a4:	b2d2      	uxtb	r2, r2
 800a5a6:	4611      	mov	r1, r2
 800a5a8:	6878      	ldr	r0, [r7, #4]
 800a5aa:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a5ac:	2340      	movs	r3, #64	; 0x40
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	2100      	movs	r1, #0
 800a5b2:	6878      	ldr	r0, [r7, #4]
 800a5b4:	f001 fd93 	bl	800c0de <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2201      	movs	r2, #1
 800a5bc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2240      	movs	r2, #64	; 0x40
 800a5c4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a5c8:	2340      	movs	r3, #64	; 0x40
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	2180      	movs	r1, #128	; 0x80
 800a5ce:	6878      	ldr	r0, [r7, #4]
 800a5d0:	f001 fd85 	bl	800c0de <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2201      	movs	r2, #1
 800a5d8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2240      	movs	r2, #64	; 0x40
 800a5de:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800a5e0:	2300      	movs	r3, #0
}
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	3708      	adds	r7, #8
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd80      	pop	{r7, pc}

0800a5ea <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a5ea:	b480      	push	{r7}
 800a5ec:	b083      	sub	sp, #12
 800a5ee:	af00      	add	r7, sp, #0
 800a5f0:	6078      	str	r0, [r7, #4]
 800a5f2:	460b      	mov	r3, r1
 800a5f4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	78fa      	ldrb	r2, [r7, #3]
 800a5fa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a5fc:	2300      	movs	r3, #0
}
 800a5fe:	4618      	mov	r0, r3
 800a600:	370c      	adds	r7, #12
 800a602:	46bd      	mov	sp, r7
 800a604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a608:	4770      	bx	lr

0800a60a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a60a:	b480      	push	{r7}
 800a60c:	b083      	sub	sp, #12
 800a60e:	af00      	add	r7, sp, #0
 800a610:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2204      	movs	r2, #4
 800a622:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a626:	2300      	movs	r3, #0
}
 800a628:	4618      	mov	r0, r3
 800a62a:	370c      	adds	r7, #12
 800a62c:	46bd      	mov	sp, r7
 800a62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a632:	4770      	bx	lr

0800a634 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a634:	b480      	push	{r7}
 800a636:	b083      	sub	sp, #12
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a642:	2b04      	cmp	r3, #4
 800a644:	d105      	bne.n	800a652 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a652:	2300      	movs	r3, #0
}
 800a654:	4618      	mov	r0, r3
 800a656:	370c      	adds	r7, #12
 800a658:	46bd      	mov	sp, r7
 800a65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65e:	4770      	bx	lr

0800a660 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b082      	sub	sp, #8
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a66e:	2b03      	cmp	r3, #3
 800a670:	d10b      	bne.n	800a68a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a678:	69db      	ldr	r3, [r3, #28]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d005      	beq.n	800a68a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a684:	69db      	ldr	r3, [r3, #28]
 800a686:	6878      	ldr	r0, [r7, #4]
 800a688:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a68a:	2300      	movs	r3, #0
}
 800a68c:	4618      	mov	r0, r3
 800a68e:	3708      	adds	r7, #8
 800a690:	46bd      	mov	sp, r7
 800a692:	bd80      	pop	{r7, pc}

0800a694 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a694:	b480      	push	{r7}
 800a696:	b083      	sub	sp, #12
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
 800a69c:	460b      	mov	r3, r1
 800a69e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800a6a0:	2300      	movs	r3, #0
}
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	370c      	adds	r7, #12
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ac:	4770      	bx	lr

0800a6ae <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a6ae:	b480      	push	{r7}
 800a6b0:	b083      	sub	sp, #12
 800a6b2:	af00      	add	r7, sp, #0
 800a6b4:	6078      	str	r0, [r7, #4]
 800a6b6:	460b      	mov	r3, r1
 800a6b8:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800a6ba:	2300      	movs	r3, #0
}
 800a6bc:	4618      	mov	r0, r3
 800a6be:	370c      	adds	r7, #12
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c6:	4770      	bx	lr

0800a6c8 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a6c8:	b480      	push	{r7}
 800a6ca:	b083      	sub	sp, #12
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a6d0:	2300      	movs	r3, #0
}
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	370c      	adds	r7, #12
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6dc:	4770      	bx	lr

0800a6de <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a6de:	b580      	push	{r7, lr}
 800a6e0:	b082      	sub	sp, #8
 800a6e2:	af00      	add	r7, sp, #0
 800a6e4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	2201      	movs	r2, #1
 800a6ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d009      	beq.n	800a70c <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6fe:	685b      	ldr	r3, [r3, #4]
 800a700:	687a      	ldr	r2, [r7, #4]
 800a702:	6852      	ldr	r2, [r2, #4]
 800a704:	b2d2      	uxtb	r2, r2
 800a706:	4611      	mov	r1, r2
 800a708:	6878      	ldr	r0, [r7, #4]
 800a70a:	4798      	blx	r3
  }

  return USBD_OK;
 800a70c:	2300      	movs	r3, #0
}
 800a70e:	4618      	mov	r0, r3
 800a710:	3708      	adds	r7, #8
 800a712:	46bd      	mov	sp, r7
 800a714:	bd80      	pop	{r7, pc}

0800a716 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a716:	b480      	push	{r7}
 800a718:	b087      	sub	sp, #28
 800a71a:	af00      	add	r7, sp, #0
 800a71c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a722:	697b      	ldr	r3, [r7, #20]
 800a724:	781b      	ldrb	r3, [r3, #0]
 800a726:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a728:	697b      	ldr	r3, [r7, #20]
 800a72a:	3301      	adds	r3, #1
 800a72c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a72e:	697b      	ldr	r3, [r7, #20]
 800a730:	781b      	ldrb	r3, [r3, #0]
 800a732:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a734:	8a3b      	ldrh	r3, [r7, #16]
 800a736:	021b      	lsls	r3, r3, #8
 800a738:	b21a      	sxth	r2, r3
 800a73a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a73e:	4313      	orrs	r3, r2
 800a740:	b21b      	sxth	r3, r3
 800a742:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a744:	89fb      	ldrh	r3, [r7, #14]
}
 800a746:	4618      	mov	r0, r3
 800a748:	371c      	adds	r7, #28
 800a74a:	46bd      	mov	sp, r7
 800a74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a750:	4770      	bx	lr
	...

0800a754 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b084      	sub	sp, #16
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
 800a75c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a75e:	2300      	movs	r3, #0
 800a760:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	781b      	ldrb	r3, [r3, #0]
 800a766:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a76a:	2b40      	cmp	r3, #64	; 0x40
 800a76c:	d005      	beq.n	800a77a <USBD_StdDevReq+0x26>
 800a76e:	2b40      	cmp	r3, #64	; 0x40
 800a770:	d853      	bhi.n	800a81a <USBD_StdDevReq+0xc6>
 800a772:	2b00      	cmp	r3, #0
 800a774:	d00b      	beq.n	800a78e <USBD_StdDevReq+0x3a>
 800a776:	2b20      	cmp	r3, #32
 800a778:	d14f      	bne.n	800a81a <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a780:	689b      	ldr	r3, [r3, #8]
 800a782:	6839      	ldr	r1, [r7, #0]
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	4798      	blx	r3
 800a788:	4603      	mov	r3, r0
 800a78a:	73fb      	strb	r3, [r7, #15]
    break;
 800a78c:	e04a      	b.n	800a824 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	785b      	ldrb	r3, [r3, #1]
 800a792:	2b09      	cmp	r3, #9
 800a794:	d83b      	bhi.n	800a80e <USBD_StdDevReq+0xba>
 800a796:	a201      	add	r2, pc, #4	; (adr r2, 800a79c <USBD_StdDevReq+0x48>)
 800a798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a79c:	0800a7f1 	.word	0x0800a7f1
 800a7a0:	0800a805 	.word	0x0800a805
 800a7a4:	0800a80f 	.word	0x0800a80f
 800a7a8:	0800a7fb 	.word	0x0800a7fb
 800a7ac:	0800a80f 	.word	0x0800a80f
 800a7b0:	0800a7cf 	.word	0x0800a7cf
 800a7b4:	0800a7c5 	.word	0x0800a7c5
 800a7b8:	0800a80f 	.word	0x0800a80f
 800a7bc:	0800a7e7 	.word	0x0800a7e7
 800a7c0:	0800a7d9 	.word	0x0800a7d9
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800a7c4:	6839      	ldr	r1, [r7, #0]
 800a7c6:	6878      	ldr	r0, [r7, #4]
 800a7c8:	f000 f9d8 	bl	800ab7c <USBD_GetDescriptor>
      break;
 800a7cc:	e024      	b.n	800a818 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800a7ce:	6839      	ldr	r1, [r7, #0]
 800a7d0:	6878      	ldr	r0, [r7, #4]
 800a7d2:	f000 fb67 	bl	800aea4 <USBD_SetAddress>
      break;
 800a7d6:	e01f      	b.n	800a818 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800a7d8:	6839      	ldr	r1, [r7, #0]
 800a7da:	6878      	ldr	r0, [r7, #4]
 800a7dc:	f000 fba6 	bl	800af2c <USBD_SetConfig>
 800a7e0:	4603      	mov	r3, r0
 800a7e2:	73fb      	strb	r3, [r7, #15]
      break;
 800a7e4:	e018      	b.n	800a818 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800a7e6:	6839      	ldr	r1, [r7, #0]
 800a7e8:	6878      	ldr	r0, [r7, #4]
 800a7ea:	f000 fc43 	bl	800b074 <USBD_GetConfig>
      break;
 800a7ee:	e013      	b.n	800a818 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800a7f0:	6839      	ldr	r1, [r7, #0]
 800a7f2:	6878      	ldr	r0, [r7, #4]
 800a7f4:	f000 fc73 	bl	800b0de <USBD_GetStatus>
      break;
 800a7f8:	e00e      	b.n	800a818 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800a7fa:	6839      	ldr	r1, [r7, #0]
 800a7fc:	6878      	ldr	r0, [r7, #4]
 800a7fe:	f000 fca1 	bl	800b144 <USBD_SetFeature>
      break;
 800a802:	e009      	b.n	800a818 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800a804:	6839      	ldr	r1, [r7, #0]
 800a806:	6878      	ldr	r0, [r7, #4]
 800a808:	f000 fcb0 	bl	800b16c <USBD_ClrFeature>
      break;
 800a80c:	e004      	b.n	800a818 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800a80e:	6839      	ldr	r1, [r7, #0]
 800a810:	6878      	ldr	r0, [r7, #4]
 800a812:	f000 fd06 	bl	800b222 <USBD_CtlError>
      break;
 800a816:	bf00      	nop
    }
    break;
 800a818:	e004      	b.n	800a824 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800a81a:	6839      	ldr	r1, [r7, #0]
 800a81c:	6878      	ldr	r0, [r7, #4]
 800a81e:	f000 fd00 	bl	800b222 <USBD_CtlError>
    break;
 800a822:	bf00      	nop
  }

  return ret;
 800a824:	7bfb      	ldrb	r3, [r7, #15]
}
 800a826:	4618      	mov	r0, r3
 800a828:	3710      	adds	r7, #16
 800a82a:	46bd      	mov	sp, r7
 800a82c:	bd80      	pop	{r7, pc}
 800a82e:	bf00      	nop

0800a830 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b084      	sub	sp, #16
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
 800a838:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a83a:	2300      	movs	r3, #0
 800a83c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	781b      	ldrb	r3, [r3, #0]
 800a842:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a846:	2b40      	cmp	r3, #64	; 0x40
 800a848:	d005      	beq.n	800a856 <USBD_StdItfReq+0x26>
 800a84a:	2b40      	cmp	r3, #64	; 0x40
 800a84c:	d82e      	bhi.n	800a8ac <USBD_StdItfReq+0x7c>
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d001      	beq.n	800a856 <USBD_StdItfReq+0x26>
 800a852:	2b20      	cmp	r3, #32
 800a854:	d12a      	bne.n	800a8ac <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a85c:	3b01      	subs	r3, #1
 800a85e:	2b02      	cmp	r3, #2
 800a860:	d81d      	bhi.n	800a89e <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	889b      	ldrh	r3, [r3, #4]
 800a866:	b2db      	uxtb	r3, r3
 800a868:	2b01      	cmp	r3, #1
 800a86a:	d813      	bhi.n	800a894 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a872:	689b      	ldr	r3, [r3, #8]
 800a874:	6839      	ldr	r1, [r7, #0]
 800a876:	6878      	ldr	r0, [r7, #4]
 800a878:	4798      	blx	r3
 800a87a:	4603      	mov	r3, r0
 800a87c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	88db      	ldrh	r3, [r3, #6]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d110      	bne.n	800a8a8 <USBD_StdItfReq+0x78>
 800a886:	7bfb      	ldrb	r3, [r7, #15]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d10d      	bne.n	800a8a8 <USBD_StdItfReq+0x78>
        {
          (void)USBD_CtlSendStatus(pdev);
 800a88c:	6878      	ldr	r0, [r7, #4]
 800a88e:	f000 fd93 	bl	800b3b8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800a892:	e009      	b.n	800a8a8 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 800a894:	6839      	ldr	r1, [r7, #0]
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	f000 fcc3 	bl	800b222 <USBD_CtlError>
      break;
 800a89c:	e004      	b.n	800a8a8 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 800a89e:	6839      	ldr	r1, [r7, #0]
 800a8a0:	6878      	ldr	r0, [r7, #4]
 800a8a2:	f000 fcbe 	bl	800b222 <USBD_CtlError>
      break;
 800a8a6:	e000      	b.n	800a8aa <USBD_StdItfReq+0x7a>
      break;
 800a8a8:	bf00      	nop
    }
    break;
 800a8aa:	e004      	b.n	800a8b6 <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 800a8ac:	6839      	ldr	r1, [r7, #0]
 800a8ae:	6878      	ldr	r0, [r7, #4]
 800a8b0:	f000 fcb7 	bl	800b222 <USBD_CtlError>
    break;
 800a8b4:	bf00      	nop
  }

  return ret;
 800a8b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	3710      	adds	r7, #16
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	bd80      	pop	{r7, pc}

0800a8c0 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b084      	sub	sp, #16
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
 800a8c8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	889b      	ldrh	r3, [r3, #4]
 800a8d2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a8d4:	683b      	ldr	r3, [r7, #0]
 800a8d6:	781b      	ldrb	r3, [r3, #0]
 800a8d8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a8dc:	2b40      	cmp	r3, #64	; 0x40
 800a8de:	d007      	beq.n	800a8f0 <USBD_StdEPReq+0x30>
 800a8e0:	2b40      	cmp	r3, #64	; 0x40
 800a8e2:	f200 8140 	bhi.w	800ab66 <USBD_StdEPReq+0x2a6>
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d00c      	beq.n	800a904 <USBD_StdEPReq+0x44>
 800a8ea:	2b20      	cmp	r3, #32
 800a8ec:	f040 813b 	bne.w	800ab66 <USBD_StdEPReq+0x2a6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8f6:	689b      	ldr	r3, [r3, #8]
 800a8f8:	6839      	ldr	r1, [r7, #0]
 800a8fa:	6878      	ldr	r0, [r7, #4]
 800a8fc:	4798      	blx	r3
 800a8fe:	4603      	mov	r3, r0
 800a900:	73fb      	strb	r3, [r7, #15]
    break;
 800a902:	e135      	b.n	800ab70 <USBD_StdEPReq+0x2b0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	785b      	ldrb	r3, [r3, #1]
 800a908:	2b03      	cmp	r3, #3
 800a90a:	d007      	beq.n	800a91c <USBD_StdEPReq+0x5c>
 800a90c:	2b03      	cmp	r3, #3
 800a90e:	f300 8124 	bgt.w	800ab5a <USBD_StdEPReq+0x29a>
 800a912:	2b00      	cmp	r3, #0
 800a914:	d07b      	beq.n	800aa0e <USBD_StdEPReq+0x14e>
 800a916:	2b01      	cmp	r3, #1
 800a918:	d03b      	beq.n	800a992 <USBD_StdEPReq+0xd2>
 800a91a:	e11e      	b.n	800ab5a <USBD_StdEPReq+0x29a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a922:	2b02      	cmp	r3, #2
 800a924:	d002      	beq.n	800a92c <USBD_StdEPReq+0x6c>
 800a926:	2b03      	cmp	r3, #3
 800a928:	d016      	beq.n	800a958 <USBD_StdEPReq+0x98>
 800a92a:	e02c      	b.n	800a986 <USBD_StdEPReq+0xc6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a92c:	7bbb      	ldrb	r3, [r7, #14]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d00d      	beq.n	800a94e <USBD_StdEPReq+0x8e>
 800a932:	7bbb      	ldrb	r3, [r7, #14]
 800a934:	2b80      	cmp	r3, #128	; 0x80
 800a936:	d00a      	beq.n	800a94e <USBD_StdEPReq+0x8e>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800a938:	7bbb      	ldrb	r3, [r7, #14]
 800a93a:	4619      	mov	r1, r3
 800a93c:	6878      	ldr	r0, [r7, #4]
 800a93e:	f001 fc13 	bl	800c168 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a942:	2180      	movs	r1, #128	; 0x80
 800a944:	6878      	ldr	r0, [r7, #4]
 800a946:	f001 fc0f 	bl	800c168 <USBD_LL_StallEP>
 800a94a:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800a94c:	e020      	b.n	800a990 <USBD_StdEPReq+0xd0>
          USBD_CtlError(pdev, req);
 800a94e:	6839      	ldr	r1, [r7, #0]
 800a950:	6878      	ldr	r0, [r7, #4]
 800a952:	f000 fc66 	bl	800b222 <USBD_CtlError>
        break;
 800a956:	e01b      	b.n	800a990 <USBD_StdEPReq+0xd0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	885b      	ldrh	r3, [r3, #2]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d10e      	bne.n	800a97e <USBD_StdEPReq+0xbe>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a960:	7bbb      	ldrb	r3, [r7, #14]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d00b      	beq.n	800a97e <USBD_StdEPReq+0xbe>
 800a966:	7bbb      	ldrb	r3, [r7, #14]
 800a968:	2b80      	cmp	r3, #128	; 0x80
 800a96a:	d008      	beq.n	800a97e <USBD_StdEPReq+0xbe>
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	88db      	ldrh	r3, [r3, #6]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d104      	bne.n	800a97e <USBD_StdEPReq+0xbe>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800a974:	7bbb      	ldrb	r3, [r7, #14]
 800a976:	4619      	mov	r1, r3
 800a978:	6878      	ldr	r0, [r7, #4]
 800a97a:	f001 fbf5 	bl	800c168 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800a97e:	6878      	ldr	r0, [r7, #4]
 800a980:	f000 fd1a 	bl	800b3b8 <USBD_CtlSendStatus>

        break;
 800a984:	e004      	b.n	800a990 <USBD_StdEPReq+0xd0>

      default:
        USBD_CtlError(pdev, req);
 800a986:	6839      	ldr	r1, [r7, #0]
 800a988:	6878      	ldr	r0, [r7, #4]
 800a98a:	f000 fc4a 	bl	800b222 <USBD_CtlError>
        break;
 800a98e:	bf00      	nop
      }
      break;
 800a990:	e0e8      	b.n	800ab64 <USBD_StdEPReq+0x2a4>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a998:	2b02      	cmp	r3, #2
 800a99a:	d002      	beq.n	800a9a2 <USBD_StdEPReq+0xe2>
 800a99c:	2b03      	cmp	r3, #3
 800a99e:	d016      	beq.n	800a9ce <USBD_StdEPReq+0x10e>
 800a9a0:	e02e      	b.n	800aa00 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a9a2:	7bbb      	ldrb	r3, [r7, #14]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d00d      	beq.n	800a9c4 <USBD_StdEPReq+0x104>
 800a9a8:	7bbb      	ldrb	r3, [r7, #14]
 800a9aa:	2b80      	cmp	r3, #128	; 0x80
 800a9ac:	d00a      	beq.n	800a9c4 <USBD_StdEPReq+0x104>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800a9ae:	7bbb      	ldrb	r3, [r7, #14]
 800a9b0:	4619      	mov	r1, r3
 800a9b2:	6878      	ldr	r0, [r7, #4]
 800a9b4:	f001 fbd8 	bl	800c168 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a9b8:	2180      	movs	r1, #128	; 0x80
 800a9ba:	6878      	ldr	r0, [r7, #4]
 800a9bc:	f001 fbd4 	bl	800c168 <USBD_LL_StallEP>
 800a9c0:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800a9c2:	e023      	b.n	800aa0c <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 800a9c4:	6839      	ldr	r1, [r7, #0]
 800a9c6:	6878      	ldr	r0, [r7, #4]
 800a9c8:	f000 fc2b 	bl	800b222 <USBD_CtlError>
        break;
 800a9cc:	e01e      	b.n	800aa0c <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800a9ce:	683b      	ldr	r3, [r7, #0]
 800a9d0:	885b      	ldrh	r3, [r3, #2]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d119      	bne.n	800aa0a <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800a9d6:	7bbb      	ldrb	r3, [r7, #14]
 800a9d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d004      	beq.n	800a9ea <USBD_StdEPReq+0x12a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a9e0:	7bbb      	ldrb	r3, [r7, #14]
 800a9e2:	4619      	mov	r1, r3
 800a9e4:	6878      	ldr	r0, [r7, #4]
 800a9e6:	f001 fbde 	bl	800c1a6 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800a9ea:	6878      	ldr	r0, [r7, #4]
 800a9ec:	f000 fce4 	bl	800b3b8 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9f6:	689b      	ldr	r3, [r3, #8]
 800a9f8:	6839      	ldr	r1, [r7, #0]
 800a9fa:	6878      	ldr	r0, [r7, #4]
 800a9fc:	4798      	blx	r3
        }
        break;
 800a9fe:	e004      	b.n	800aa0a <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 800aa00:	6839      	ldr	r1, [r7, #0]
 800aa02:	6878      	ldr	r0, [r7, #4]
 800aa04:	f000 fc0d 	bl	800b222 <USBD_CtlError>
        break;
 800aa08:	e000      	b.n	800aa0c <USBD_StdEPReq+0x14c>
        break;
 800aa0a:	bf00      	nop
      }
      break;
 800aa0c:	e0aa      	b.n	800ab64 <USBD_StdEPReq+0x2a4>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa14:	2b02      	cmp	r3, #2
 800aa16:	d002      	beq.n	800aa1e <USBD_StdEPReq+0x15e>
 800aa18:	2b03      	cmp	r3, #3
 800aa1a:	d032      	beq.n	800aa82 <USBD_StdEPReq+0x1c2>
 800aa1c:	e097      	b.n	800ab4e <USBD_StdEPReq+0x28e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aa1e:	7bbb      	ldrb	r3, [r7, #14]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d007      	beq.n	800aa34 <USBD_StdEPReq+0x174>
 800aa24:	7bbb      	ldrb	r3, [r7, #14]
 800aa26:	2b80      	cmp	r3, #128	; 0x80
 800aa28:	d004      	beq.n	800aa34 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 800aa2a:	6839      	ldr	r1, [r7, #0]
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	f000 fbf8 	bl	800b222 <USBD_CtlError>
          break;
 800aa32:	e091      	b.n	800ab58 <USBD_StdEPReq+0x298>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aa34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	da0b      	bge.n	800aa54 <USBD_StdEPReq+0x194>
 800aa3c:	7bbb      	ldrb	r3, [r7, #14]
 800aa3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aa42:	4613      	mov	r3, r2
 800aa44:	009b      	lsls	r3, r3, #2
 800aa46:	4413      	add	r3, r2
 800aa48:	009b      	lsls	r3, r3, #2
 800aa4a:	3310      	adds	r3, #16
 800aa4c:	687a      	ldr	r2, [r7, #4]
 800aa4e:	4413      	add	r3, r2
 800aa50:	3304      	adds	r3, #4
 800aa52:	e00b      	b.n	800aa6c <USBD_StdEPReq+0x1ac>
              &pdev->ep_out[ep_addr & 0x7FU];
 800aa54:	7bbb      	ldrb	r3, [r7, #14]
 800aa56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aa5a:	4613      	mov	r3, r2
 800aa5c:	009b      	lsls	r3, r3, #2
 800aa5e:	4413      	add	r3, r2
 800aa60:	009b      	lsls	r3, r3, #2
 800aa62:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800aa66:	687a      	ldr	r2, [r7, #4]
 800aa68:	4413      	add	r3, r2
 800aa6a:	3304      	adds	r3, #4
 800aa6c:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800aa6e:	68bb      	ldr	r3, [r7, #8]
 800aa70:	2200      	movs	r2, #0
 800aa72:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800aa74:	68bb      	ldr	r3, [r7, #8]
 800aa76:	2202      	movs	r2, #2
 800aa78:	4619      	mov	r1, r3
 800aa7a:	6878      	ldr	r0, [r7, #4]
 800aa7c:	f000 fc42 	bl	800b304 <USBD_CtlSendData>
        break;
 800aa80:	e06a      	b.n	800ab58 <USBD_StdEPReq+0x298>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800aa82:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	da11      	bge.n	800aaae <USBD_StdEPReq+0x1ee>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800aa8a:	7bbb      	ldrb	r3, [r7, #14]
 800aa8c:	f003 020f 	and.w	r2, r3, #15
 800aa90:	6879      	ldr	r1, [r7, #4]
 800aa92:	4613      	mov	r3, r2
 800aa94:	009b      	lsls	r3, r3, #2
 800aa96:	4413      	add	r3, r2
 800aa98:	009b      	lsls	r3, r3, #2
 800aa9a:	440b      	add	r3, r1
 800aa9c:	3324      	adds	r3, #36	; 0x24
 800aa9e:	881b      	ldrh	r3, [r3, #0]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d117      	bne.n	800aad4 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 800aaa4:	6839      	ldr	r1, [r7, #0]
 800aaa6:	6878      	ldr	r0, [r7, #4]
 800aaa8:	f000 fbbb 	bl	800b222 <USBD_CtlError>
            break;
 800aaac:	e054      	b.n	800ab58 <USBD_StdEPReq+0x298>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800aaae:	7bbb      	ldrb	r3, [r7, #14]
 800aab0:	f003 020f 	and.w	r2, r3, #15
 800aab4:	6879      	ldr	r1, [r7, #4]
 800aab6:	4613      	mov	r3, r2
 800aab8:	009b      	lsls	r3, r3, #2
 800aaba:	4413      	add	r3, r2
 800aabc:	009b      	lsls	r3, r3, #2
 800aabe:	440b      	add	r3, r1
 800aac0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800aac4:	881b      	ldrh	r3, [r3, #0]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d104      	bne.n	800aad4 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 800aaca:	6839      	ldr	r1, [r7, #0]
 800aacc:	6878      	ldr	r0, [r7, #4]
 800aace:	f000 fba8 	bl	800b222 <USBD_CtlError>
            break;
 800aad2:	e041      	b.n	800ab58 <USBD_StdEPReq+0x298>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aad4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	da0b      	bge.n	800aaf4 <USBD_StdEPReq+0x234>
 800aadc:	7bbb      	ldrb	r3, [r7, #14]
 800aade:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aae2:	4613      	mov	r3, r2
 800aae4:	009b      	lsls	r3, r3, #2
 800aae6:	4413      	add	r3, r2
 800aae8:	009b      	lsls	r3, r3, #2
 800aaea:	3310      	adds	r3, #16
 800aaec:	687a      	ldr	r2, [r7, #4]
 800aaee:	4413      	add	r3, r2
 800aaf0:	3304      	adds	r3, #4
 800aaf2:	e00b      	b.n	800ab0c <USBD_StdEPReq+0x24c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800aaf4:	7bbb      	ldrb	r3, [r7, #14]
 800aaf6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aafa:	4613      	mov	r3, r2
 800aafc:	009b      	lsls	r3, r3, #2
 800aafe:	4413      	add	r3, r2
 800ab00:	009b      	lsls	r3, r3, #2
 800ab02:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ab06:	687a      	ldr	r2, [r7, #4]
 800ab08:	4413      	add	r3, r2
 800ab0a:	3304      	adds	r3, #4
 800ab0c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ab0e:	7bbb      	ldrb	r3, [r7, #14]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d002      	beq.n	800ab1a <USBD_StdEPReq+0x25a>
 800ab14:	7bbb      	ldrb	r3, [r7, #14]
 800ab16:	2b80      	cmp	r3, #128	; 0x80
 800ab18:	d103      	bne.n	800ab22 <USBD_StdEPReq+0x262>
          {
            pep->status = 0x0000U;
 800ab1a:	68bb      	ldr	r3, [r7, #8]
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	601a      	str	r2, [r3, #0]
 800ab20:	e00e      	b.n	800ab40 <USBD_StdEPReq+0x280>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ab22:	7bbb      	ldrb	r3, [r7, #14]
 800ab24:	4619      	mov	r1, r3
 800ab26:	6878      	ldr	r0, [r7, #4]
 800ab28:	f001 fb5c 	bl	800c1e4 <USBD_LL_IsStallEP>
 800ab2c:	4603      	mov	r3, r0
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d003      	beq.n	800ab3a <USBD_StdEPReq+0x27a>
          {
            pep->status = 0x0001U;
 800ab32:	68bb      	ldr	r3, [r7, #8]
 800ab34:	2201      	movs	r2, #1
 800ab36:	601a      	str	r2, [r3, #0]
 800ab38:	e002      	b.n	800ab40 <USBD_StdEPReq+0x280>
          }
          else
          {
            pep->status = 0x0000U;
 800ab3a:	68bb      	ldr	r3, [r7, #8]
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ab40:	68bb      	ldr	r3, [r7, #8]
 800ab42:	2202      	movs	r2, #2
 800ab44:	4619      	mov	r1, r3
 800ab46:	6878      	ldr	r0, [r7, #4]
 800ab48:	f000 fbdc 	bl	800b304 <USBD_CtlSendData>
          break;
 800ab4c:	e004      	b.n	800ab58 <USBD_StdEPReq+0x298>

      default:
        USBD_CtlError(pdev, req);
 800ab4e:	6839      	ldr	r1, [r7, #0]
 800ab50:	6878      	ldr	r0, [r7, #4]
 800ab52:	f000 fb66 	bl	800b222 <USBD_CtlError>
        break;
 800ab56:	bf00      	nop
      }
      break;
 800ab58:	e004      	b.n	800ab64 <USBD_StdEPReq+0x2a4>

    default:
      USBD_CtlError(pdev, req);
 800ab5a:	6839      	ldr	r1, [r7, #0]
 800ab5c:	6878      	ldr	r0, [r7, #4]
 800ab5e:	f000 fb60 	bl	800b222 <USBD_CtlError>
      break;
 800ab62:	bf00      	nop
    }
    break;
 800ab64:	e004      	b.n	800ab70 <USBD_StdEPReq+0x2b0>

  default:
    USBD_CtlError(pdev, req);
 800ab66:	6839      	ldr	r1, [r7, #0]
 800ab68:	6878      	ldr	r0, [r7, #4]
 800ab6a:	f000 fb5a 	bl	800b222 <USBD_CtlError>
    break;
 800ab6e:	bf00      	nop
  }

  return ret;
 800ab70:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab72:	4618      	mov	r0, r3
 800ab74:	3710      	adds	r7, #16
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}
	...

0800ab7c <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b084      	sub	sp, #16
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
 800ab84:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ab86:	2300      	movs	r3, #0
 800ab88:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ab8e:	2300      	movs	r3, #0
 800ab90:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	885b      	ldrh	r3, [r3, #2]
 800ab96:	0a1b      	lsrs	r3, r3, #8
 800ab98:	b29b      	uxth	r3, r3
 800ab9a:	3b01      	subs	r3, #1
 800ab9c:	2b0e      	cmp	r3, #14
 800ab9e:	f200 8152 	bhi.w	800ae46 <USBD_GetDescriptor+0x2ca>
 800aba2:	a201      	add	r2, pc, #4	; (adr r2, 800aba8 <USBD_GetDescriptor+0x2c>)
 800aba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aba8:	0800ac19 	.word	0x0800ac19
 800abac:	0800ac31 	.word	0x0800ac31
 800abb0:	0800ac71 	.word	0x0800ac71
 800abb4:	0800ae47 	.word	0x0800ae47
 800abb8:	0800ae47 	.word	0x0800ae47
 800abbc:	0800ade7 	.word	0x0800ade7
 800abc0:	0800ae13 	.word	0x0800ae13
 800abc4:	0800ae47 	.word	0x0800ae47
 800abc8:	0800ae47 	.word	0x0800ae47
 800abcc:	0800ae47 	.word	0x0800ae47
 800abd0:	0800ae47 	.word	0x0800ae47
 800abd4:	0800ae47 	.word	0x0800ae47
 800abd8:	0800ae47 	.word	0x0800ae47
 800abdc:	0800ae47 	.word	0x0800ae47
 800abe0:	0800abe5 	.word	0x0800abe5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800abea:	69db      	ldr	r3, [r3, #28]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d00b      	beq.n	800ac08 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800abf6:	69db      	ldr	r3, [r3, #28]
 800abf8:	687a      	ldr	r2, [r7, #4]
 800abfa:	7c12      	ldrb	r2, [r2, #16]
 800abfc:	f107 0108 	add.w	r1, r7, #8
 800ac00:	4610      	mov	r0, r2
 800ac02:	4798      	blx	r3
 800ac04:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800ac06:	e126      	b.n	800ae56 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800ac08:	6839      	ldr	r1, [r7, #0]
 800ac0a:	6878      	ldr	r0, [r7, #4]
 800ac0c:	f000 fb09 	bl	800b222 <USBD_CtlError>
      err++;
 800ac10:	7afb      	ldrb	r3, [r7, #11]
 800ac12:	3301      	adds	r3, #1
 800ac14:	72fb      	strb	r3, [r7, #11]
    break;
 800ac16:	e11e      	b.n	800ae56 <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	687a      	ldr	r2, [r7, #4]
 800ac22:	7c12      	ldrb	r2, [r2, #16]
 800ac24:	f107 0108 	add.w	r1, r7, #8
 800ac28:	4610      	mov	r0, r2
 800ac2a:	4798      	blx	r3
 800ac2c:	60f8      	str	r0, [r7, #12]
    break;
 800ac2e:	e112      	b.n	800ae56 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	7c1b      	ldrb	r3, [r3, #16]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d10d      	bne.n	800ac54 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac40:	f107 0208 	add.w	r2, r7, #8
 800ac44:	4610      	mov	r0, r2
 800ac46:	4798      	blx	r3
 800ac48:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	3301      	adds	r3, #1
 800ac4e:	2202      	movs	r2, #2
 800ac50:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800ac52:	e100      	b.n	800ae56 <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac5c:	f107 0208 	add.w	r2, r7, #8
 800ac60:	4610      	mov	r0, r2
 800ac62:	4798      	blx	r3
 800ac64:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	3301      	adds	r3, #1
 800ac6a:	2202      	movs	r2, #2
 800ac6c:	701a      	strb	r2, [r3, #0]
    break;
 800ac6e:	e0f2      	b.n	800ae56 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	885b      	ldrh	r3, [r3, #2]
 800ac74:	b2db      	uxtb	r3, r3
 800ac76:	2b05      	cmp	r3, #5
 800ac78:	f200 80ac 	bhi.w	800add4 <USBD_GetDescriptor+0x258>
 800ac7c:	a201      	add	r2, pc, #4	; (adr r2, 800ac84 <USBD_GetDescriptor+0x108>)
 800ac7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac82:	bf00      	nop
 800ac84:	0800ac9d 	.word	0x0800ac9d
 800ac88:	0800acd1 	.word	0x0800acd1
 800ac8c:	0800ad05 	.word	0x0800ad05
 800ac90:	0800ad39 	.word	0x0800ad39
 800ac94:	0800ad6d 	.word	0x0800ad6d
 800ac98:	0800ada1 	.word	0x0800ada1
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aca2:	685b      	ldr	r3, [r3, #4]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d00b      	beq.n	800acc0 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acae:	685b      	ldr	r3, [r3, #4]
 800acb0:	687a      	ldr	r2, [r7, #4]
 800acb2:	7c12      	ldrb	r2, [r2, #16]
 800acb4:	f107 0108 	add.w	r1, r7, #8
 800acb8:	4610      	mov	r0, r2
 800acba:	4798      	blx	r3
 800acbc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800acbe:	e091      	b.n	800ade4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800acc0:	6839      	ldr	r1, [r7, #0]
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	f000 faad 	bl	800b222 <USBD_CtlError>
        err++;
 800acc8:	7afb      	ldrb	r3, [r7, #11]
 800acca:	3301      	adds	r3, #1
 800accc:	72fb      	strb	r3, [r7, #11]
      break;
 800acce:	e089      	b.n	800ade4 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acd6:	689b      	ldr	r3, [r3, #8]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d00b      	beq.n	800acf4 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ace2:	689b      	ldr	r3, [r3, #8]
 800ace4:	687a      	ldr	r2, [r7, #4]
 800ace6:	7c12      	ldrb	r2, [r2, #16]
 800ace8:	f107 0108 	add.w	r1, r7, #8
 800acec:	4610      	mov	r0, r2
 800acee:	4798      	blx	r3
 800acf0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800acf2:	e077      	b.n	800ade4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800acf4:	6839      	ldr	r1, [r7, #0]
 800acf6:	6878      	ldr	r0, [r7, #4]
 800acf8:	f000 fa93 	bl	800b222 <USBD_CtlError>
        err++;
 800acfc:	7afb      	ldrb	r3, [r7, #11]
 800acfe:	3301      	adds	r3, #1
 800ad00:	72fb      	strb	r3, [r7, #11]
      break;
 800ad02:	e06f      	b.n	800ade4 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad0a:	68db      	ldr	r3, [r3, #12]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d00b      	beq.n	800ad28 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad16:	68db      	ldr	r3, [r3, #12]
 800ad18:	687a      	ldr	r2, [r7, #4]
 800ad1a:	7c12      	ldrb	r2, [r2, #16]
 800ad1c:	f107 0108 	add.w	r1, r7, #8
 800ad20:	4610      	mov	r0, r2
 800ad22:	4798      	blx	r3
 800ad24:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ad26:	e05d      	b.n	800ade4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800ad28:	6839      	ldr	r1, [r7, #0]
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	f000 fa79 	bl	800b222 <USBD_CtlError>
        err++;
 800ad30:	7afb      	ldrb	r3, [r7, #11]
 800ad32:	3301      	adds	r3, #1
 800ad34:	72fb      	strb	r3, [r7, #11]
      break;
 800ad36:	e055      	b.n	800ade4 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad3e:	691b      	ldr	r3, [r3, #16]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d00b      	beq.n	800ad5c <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad4a:	691b      	ldr	r3, [r3, #16]
 800ad4c:	687a      	ldr	r2, [r7, #4]
 800ad4e:	7c12      	ldrb	r2, [r2, #16]
 800ad50:	f107 0108 	add.w	r1, r7, #8
 800ad54:	4610      	mov	r0, r2
 800ad56:	4798      	blx	r3
 800ad58:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ad5a:	e043      	b.n	800ade4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800ad5c:	6839      	ldr	r1, [r7, #0]
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	f000 fa5f 	bl	800b222 <USBD_CtlError>
        err++;
 800ad64:	7afb      	ldrb	r3, [r7, #11]
 800ad66:	3301      	adds	r3, #1
 800ad68:	72fb      	strb	r3, [r7, #11]
      break;
 800ad6a:	e03b      	b.n	800ade4 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad72:	695b      	ldr	r3, [r3, #20]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d00b      	beq.n	800ad90 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad7e:	695b      	ldr	r3, [r3, #20]
 800ad80:	687a      	ldr	r2, [r7, #4]
 800ad82:	7c12      	ldrb	r2, [r2, #16]
 800ad84:	f107 0108 	add.w	r1, r7, #8
 800ad88:	4610      	mov	r0, r2
 800ad8a:	4798      	blx	r3
 800ad8c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ad8e:	e029      	b.n	800ade4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800ad90:	6839      	ldr	r1, [r7, #0]
 800ad92:	6878      	ldr	r0, [r7, #4]
 800ad94:	f000 fa45 	bl	800b222 <USBD_CtlError>
        err++;
 800ad98:	7afb      	ldrb	r3, [r7, #11]
 800ad9a:	3301      	adds	r3, #1
 800ad9c:	72fb      	strb	r3, [r7, #11]
      break;
 800ad9e:	e021      	b.n	800ade4 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ada6:	699b      	ldr	r3, [r3, #24]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d00b      	beq.n	800adc4 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800adb2:	699b      	ldr	r3, [r3, #24]
 800adb4:	687a      	ldr	r2, [r7, #4]
 800adb6:	7c12      	ldrb	r2, [r2, #16]
 800adb8:	f107 0108 	add.w	r1, r7, #8
 800adbc:	4610      	mov	r0, r2
 800adbe:	4798      	blx	r3
 800adc0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800adc2:	e00f      	b.n	800ade4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800adc4:	6839      	ldr	r1, [r7, #0]
 800adc6:	6878      	ldr	r0, [r7, #4]
 800adc8:	f000 fa2b 	bl	800b222 <USBD_CtlError>
        err++;
 800adcc:	7afb      	ldrb	r3, [r7, #11]
 800adce:	3301      	adds	r3, #1
 800add0:	72fb      	strb	r3, [r7, #11]
      break;
 800add2:	e007      	b.n	800ade4 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800add4:	6839      	ldr	r1, [r7, #0]
 800add6:	6878      	ldr	r0, [r7, #4]
 800add8:	f000 fa23 	bl	800b222 <USBD_CtlError>
      err++;
 800addc:	7afb      	ldrb	r3, [r7, #11]
 800adde:	3301      	adds	r3, #1
 800ade0:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800ade2:	bf00      	nop
    }
    break;
 800ade4:	e037      	b.n	800ae56 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	7c1b      	ldrb	r3, [r3, #16]
 800adea:	2b00      	cmp	r3, #0
 800adec:	d109      	bne.n	800ae02 <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adf6:	f107 0208 	add.w	r2, r7, #8
 800adfa:	4610      	mov	r0, r2
 800adfc:	4798      	blx	r3
 800adfe:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800ae00:	e029      	b.n	800ae56 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800ae02:	6839      	ldr	r1, [r7, #0]
 800ae04:	6878      	ldr	r0, [r7, #4]
 800ae06:	f000 fa0c 	bl	800b222 <USBD_CtlError>
      err++;
 800ae0a:	7afb      	ldrb	r3, [r7, #11]
 800ae0c:	3301      	adds	r3, #1
 800ae0e:	72fb      	strb	r3, [r7, #11]
    break;
 800ae10:	e021      	b.n	800ae56 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	7c1b      	ldrb	r3, [r3, #16]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d10d      	bne.n	800ae36 <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae22:	f107 0208 	add.w	r2, r7, #8
 800ae26:	4610      	mov	r0, r2
 800ae28:	4798      	blx	r3
 800ae2a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	3301      	adds	r3, #1
 800ae30:	2207      	movs	r2, #7
 800ae32:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800ae34:	e00f      	b.n	800ae56 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800ae36:	6839      	ldr	r1, [r7, #0]
 800ae38:	6878      	ldr	r0, [r7, #4]
 800ae3a:	f000 f9f2 	bl	800b222 <USBD_CtlError>
      err++;
 800ae3e:	7afb      	ldrb	r3, [r7, #11]
 800ae40:	3301      	adds	r3, #1
 800ae42:	72fb      	strb	r3, [r7, #11]
    break;
 800ae44:	e007      	b.n	800ae56 <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 800ae46:	6839      	ldr	r1, [r7, #0]
 800ae48:	6878      	ldr	r0, [r7, #4]
 800ae4a:	f000 f9ea 	bl	800b222 <USBD_CtlError>
    err++;
 800ae4e:	7afb      	ldrb	r3, [r7, #11]
 800ae50:	3301      	adds	r3, #1
 800ae52:	72fb      	strb	r3, [r7, #11]
    break;
 800ae54:	bf00      	nop
  }

  if (err != 0U)
 800ae56:	7afb      	ldrb	r3, [r7, #11]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d11e      	bne.n	800ae9a <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800ae5c:	683b      	ldr	r3, [r7, #0]
 800ae5e:	88db      	ldrh	r3, [r3, #6]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d016      	beq.n	800ae92 <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 800ae64:	893b      	ldrh	r3, [r7, #8]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d00e      	beq.n	800ae88 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	88da      	ldrh	r2, [r3, #6]
 800ae6e:	893b      	ldrh	r3, [r7, #8]
 800ae70:	4293      	cmp	r3, r2
 800ae72:	bf28      	it	cs
 800ae74:	4613      	movcs	r3, r2
 800ae76:	b29b      	uxth	r3, r3
 800ae78:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800ae7a:	893b      	ldrh	r3, [r7, #8]
 800ae7c:	461a      	mov	r2, r3
 800ae7e:	68f9      	ldr	r1, [r7, #12]
 800ae80:	6878      	ldr	r0, [r7, #4]
 800ae82:	f000 fa3f 	bl	800b304 <USBD_CtlSendData>
 800ae86:	e009      	b.n	800ae9c <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800ae88:	6839      	ldr	r1, [r7, #0]
 800ae8a:	6878      	ldr	r0, [r7, #4]
 800ae8c:	f000 f9c9 	bl	800b222 <USBD_CtlError>
 800ae90:	e004      	b.n	800ae9c <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800ae92:	6878      	ldr	r0, [r7, #4]
 800ae94:	f000 fa90 	bl	800b3b8 <USBD_CtlSendStatus>
 800ae98:	e000      	b.n	800ae9c <USBD_GetDescriptor+0x320>
    return;
 800ae9a:	bf00      	nop
    }
  }
}
 800ae9c:	3710      	adds	r7, #16
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}
 800aea2:	bf00      	nop

0800aea4 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b084      	sub	sp, #16
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
 800aeac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800aeae:	683b      	ldr	r3, [r7, #0]
 800aeb0:	889b      	ldrh	r3, [r3, #4]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d130      	bne.n	800af18 <USBD_SetAddress+0x74>
 800aeb6:	683b      	ldr	r3, [r7, #0]
 800aeb8:	88db      	ldrh	r3, [r3, #6]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d12c      	bne.n	800af18 <USBD_SetAddress+0x74>
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	885b      	ldrh	r3, [r3, #2]
 800aec2:	2b7f      	cmp	r3, #127	; 0x7f
 800aec4:	d828      	bhi.n	800af18 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	885b      	ldrh	r3, [r3, #2]
 800aeca:	b2db      	uxtb	r3, r3
 800aecc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aed0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aed8:	2b03      	cmp	r3, #3
 800aeda:	d104      	bne.n	800aee6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800aedc:	6839      	ldr	r1, [r7, #0]
 800aede:	6878      	ldr	r0, [r7, #4]
 800aee0:	f000 f99f 	bl	800b222 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aee4:	e01d      	b.n	800af22 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	7bfa      	ldrb	r2, [r7, #15]
 800aeea:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800aeee:	7bfb      	ldrb	r3, [r7, #15]
 800aef0:	4619      	mov	r1, r3
 800aef2:	6878      	ldr	r0, [r7, #4]
 800aef4:	f001 f9a2 	bl	800c23c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800aef8:	6878      	ldr	r0, [r7, #4]
 800aefa:	f000 fa5d 	bl	800b3b8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800aefe:	7bfb      	ldrb	r3, [r7, #15]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d004      	beq.n	800af0e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2202      	movs	r2, #2
 800af08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af0c:	e009      	b.n	800af22 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	2201      	movs	r2, #1
 800af12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af16:	e004      	b.n	800af22 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800af18:	6839      	ldr	r1, [r7, #0]
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	f000 f981 	bl	800b222 <USBD_CtlError>
  }
}
 800af20:	bf00      	nop
 800af22:	bf00      	nop
 800af24:	3710      	adds	r7, #16
 800af26:	46bd      	mov	sp, r7
 800af28:	bd80      	pop	{r7, pc}
	...

0800af2c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b084      	sub	sp, #16
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
 800af34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800af36:	2300      	movs	r3, #0
 800af38:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	885b      	ldrh	r3, [r3, #2]
 800af3e:	b2da      	uxtb	r2, r3
 800af40:	4b4b      	ldr	r3, [pc, #300]	; (800b070 <USBD_SetConfig+0x144>)
 800af42:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800af44:	4b4a      	ldr	r3, [pc, #296]	; (800b070 <USBD_SetConfig+0x144>)
 800af46:	781b      	ldrb	r3, [r3, #0]
 800af48:	2b03      	cmp	r3, #3
 800af4a:	d905      	bls.n	800af58 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800af4c:	6839      	ldr	r1, [r7, #0]
 800af4e:	6878      	ldr	r0, [r7, #4]
 800af50:	f000 f967 	bl	800b222 <USBD_CtlError>
    return USBD_FAIL;
 800af54:	2303      	movs	r3, #3
 800af56:	e087      	b.n	800b068 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af5e:	2b02      	cmp	r3, #2
 800af60:	d002      	beq.n	800af68 <USBD_SetConfig+0x3c>
 800af62:	2b03      	cmp	r3, #3
 800af64:	d025      	beq.n	800afb2 <USBD_SetConfig+0x86>
 800af66:	e071      	b.n	800b04c <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800af68:	4b41      	ldr	r3, [pc, #260]	; (800b070 <USBD_SetConfig+0x144>)
 800af6a:	781b      	ldrb	r3, [r3, #0]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d01c      	beq.n	800afaa <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800af70:	4b3f      	ldr	r3, [pc, #252]	; (800b070 <USBD_SetConfig+0x144>)
 800af72:	781b      	ldrb	r3, [r3, #0]
 800af74:	461a      	mov	r2, r3
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800af7a:	4b3d      	ldr	r3, [pc, #244]	; (800b070 <USBD_SetConfig+0x144>)
 800af7c:	781b      	ldrb	r3, [r3, #0]
 800af7e:	4619      	mov	r1, r3
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	f7ff f96f 	bl	800a264 <USBD_SetClassConfig>
 800af86:	4603      	mov	r3, r0
 800af88:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800af8a:	7bfb      	ldrb	r3, [r7, #15]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d004      	beq.n	800af9a <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800af90:	6839      	ldr	r1, [r7, #0]
 800af92:	6878      	ldr	r0, [r7, #4]
 800af94:	f000 f945 	bl	800b222 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800af98:	e065      	b.n	800b066 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	f000 fa0c 	bl	800b3b8 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2203      	movs	r2, #3
 800afa4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800afa8:	e05d      	b.n	800b066 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800afaa:	6878      	ldr	r0, [r7, #4]
 800afac:	f000 fa04 	bl	800b3b8 <USBD_CtlSendStatus>
    break;
 800afb0:	e059      	b.n	800b066 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800afb2:	4b2f      	ldr	r3, [pc, #188]	; (800b070 <USBD_SetConfig+0x144>)
 800afb4:	781b      	ldrb	r3, [r3, #0]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d112      	bne.n	800afe0 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	2202      	movs	r2, #2
 800afbe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800afc2:	4b2b      	ldr	r3, [pc, #172]	; (800b070 <USBD_SetConfig+0x144>)
 800afc4:	781b      	ldrb	r3, [r3, #0]
 800afc6:	461a      	mov	r2, r3
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800afcc:	4b28      	ldr	r3, [pc, #160]	; (800b070 <USBD_SetConfig+0x144>)
 800afce:	781b      	ldrb	r3, [r3, #0]
 800afd0:	4619      	mov	r1, r3
 800afd2:	6878      	ldr	r0, [r7, #4]
 800afd4:	f7ff f962 	bl	800a29c <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800afd8:	6878      	ldr	r0, [r7, #4]
 800afda:	f000 f9ed 	bl	800b3b8 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800afde:	e042      	b.n	800b066 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800afe0:	4b23      	ldr	r3, [pc, #140]	; (800b070 <USBD_SetConfig+0x144>)
 800afe2:	781b      	ldrb	r3, [r3, #0]
 800afe4:	461a      	mov	r2, r3
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	685b      	ldr	r3, [r3, #4]
 800afea:	429a      	cmp	r2, r3
 800afec:	d02a      	beq.n	800b044 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	685b      	ldr	r3, [r3, #4]
 800aff2:	b2db      	uxtb	r3, r3
 800aff4:	4619      	mov	r1, r3
 800aff6:	6878      	ldr	r0, [r7, #4]
 800aff8:	f7ff f950 	bl	800a29c <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800affc:	4b1c      	ldr	r3, [pc, #112]	; (800b070 <USBD_SetConfig+0x144>)
 800affe:	781b      	ldrb	r3, [r3, #0]
 800b000:	461a      	mov	r2, r3
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800b006:	4b1a      	ldr	r3, [pc, #104]	; (800b070 <USBD_SetConfig+0x144>)
 800b008:	781b      	ldrb	r3, [r3, #0]
 800b00a:	4619      	mov	r1, r3
 800b00c:	6878      	ldr	r0, [r7, #4]
 800b00e:	f7ff f929 	bl	800a264 <USBD_SetClassConfig>
 800b012:	4603      	mov	r3, r0
 800b014:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800b016:	7bfb      	ldrb	r3, [r7, #15]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d00f      	beq.n	800b03c <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800b01c:	6839      	ldr	r1, [r7, #0]
 800b01e:	6878      	ldr	r0, [r7, #4]
 800b020:	f000 f8ff 	bl	800b222 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	685b      	ldr	r3, [r3, #4]
 800b028:	b2db      	uxtb	r3, r3
 800b02a:	4619      	mov	r1, r3
 800b02c:	6878      	ldr	r0, [r7, #4]
 800b02e:	f7ff f935 	bl	800a29c <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	2202      	movs	r2, #2
 800b036:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800b03a:	e014      	b.n	800b066 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800b03c:	6878      	ldr	r0, [r7, #4]
 800b03e:	f000 f9bb 	bl	800b3b8 <USBD_CtlSendStatus>
    break;
 800b042:	e010      	b.n	800b066 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800b044:	6878      	ldr	r0, [r7, #4]
 800b046:	f000 f9b7 	bl	800b3b8 <USBD_CtlSendStatus>
    break;
 800b04a:	e00c      	b.n	800b066 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800b04c:	6839      	ldr	r1, [r7, #0]
 800b04e:	6878      	ldr	r0, [r7, #4]
 800b050:	f000 f8e7 	bl	800b222 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b054:	4b06      	ldr	r3, [pc, #24]	; (800b070 <USBD_SetConfig+0x144>)
 800b056:	781b      	ldrb	r3, [r3, #0]
 800b058:	4619      	mov	r1, r3
 800b05a:	6878      	ldr	r0, [r7, #4]
 800b05c:	f7ff f91e 	bl	800a29c <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800b060:	2303      	movs	r3, #3
 800b062:	73fb      	strb	r3, [r7, #15]
    break;
 800b064:	bf00      	nop
  }

  return ret;
 800b066:	7bfb      	ldrb	r3, [r7, #15]
}
 800b068:	4618      	mov	r0, r3
 800b06a:	3710      	adds	r7, #16
 800b06c:	46bd      	mov	sp, r7
 800b06e:	bd80      	pop	{r7, pc}
 800b070:	200008c8 	.word	0x200008c8

0800b074 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b082      	sub	sp, #8
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
 800b07c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b07e:	683b      	ldr	r3, [r7, #0]
 800b080:	88db      	ldrh	r3, [r3, #6]
 800b082:	2b01      	cmp	r3, #1
 800b084:	d004      	beq.n	800b090 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b086:	6839      	ldr	r1, [r7, #0]
 800b088:	6878      	ldr	r0, [r7, #4]
 800b08a:	f000 f8ca 	bl	800b222 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800b08e:	e022      	b.n	800b0d6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b096:	2b02      	cmp	r3, #2
 800b098:	dc02      	bgt.n	800b0a0 <USBD_GetConfig+0x2c>
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	dc03      	bgt.n	800b0a6 <USBD_GetConfig+0x32>
 800b09e:	e015      	b.n	800b0cc <USBD_GetConfig+0x58>
 800b0a0:	2b03      	cmp	r3, #3
 800b0a2:	d00b      	beq.n	800b0bc <USBD_GetConfig+0x48>
 800b0a4:	e012      	b.n	800b0cc <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	3308      	adds	r3, #8
 800b0b0:	2201      	movs	r2, #1
 800b0b2:	4619      	mov	r1, r3
 800b0b4:	6878      	ldr	r0, [r7, #4]
 800b0b6:	f000 f925 	bl	800b304 <USBD_CtlSendData>
      break;
 800b0ba:	e00c      	b.n	800b0d6 <USBD_GetConfig+0x62>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	3304      	adds	r3, #4
 800b0c0:	2201      	movs	r2, #1
 800b0c2:	4619      	mov	r1, r3
 800b0c4:	6878      	ldr	r0, [r7, #4]
 800b0c6:	f000 f91d 	bl	800b304 <USBD_CtlSendData>
      break;
 800b0ca:	e004      	b.n	800b0d6 <USBD_GetConfig+0x62>
      USBD_CtlError(pdev, req);
 800b0cc:	6839      	ldr	r1, [r7, #0]
 800b0ce:	6878      	ldr	r0, [r7, #4]
 800b0d0:	f000 f8a7 	bl	800b222 <USBD_CtlError>
      break;
 800b0d4:	bf00      	nop
}
 800b0d6:	bf00      	nop
 800b0d8:	3708      	adds	r7, #8
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	bd80      	pop	{r7, pc}

0800b0de <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0de:	b580      	push	{r7, lr}
 800b0e0:	b082      	sub	sp, #8
 800b0e2:	af00      	add	r7, sp, #0
 800b0e4:	6078      	str	r0, [r7, #4]
 800b0e6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0ee:	3b01      	subs	r3, #1
 800b0f0:	2b02      	cmp	r3, #2
 800b0f2:	d81e      	bhi.n	800b132 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800b0f4:	683b      	ldr	r3, [r7, #0]
 800b0f6:	88db      	ldrh	r3, [r3, #6]
 800b0f8:	2b02      	cmp	r3, #2
 800b0fa:	d004      	beq.n	800b106 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800b0fc:	6839      	ldr	r1, [r7, #0]
 800b0fe:	6878      	ldr	r0, [r7, #4]
 800b100:	f000 f88f 	bl	800b222 <USBD_CtlError>
      break;
 800b104:	e01a      	b.n	800b13c <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	2201      	movs	r2, #1
 800b10a:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b112:	2b00      	cmp	r3, #0
 800b114:	d005      	beq.n	800b122 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	68db      	ldr	r3, [r3, #12]
 800b11a:	f043 0202 	orr.w	r2, r3, #2
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	330c      	adds	r3, #12
 800b126:	2202      	movs	r2, #2
 800b128:	4619      	mov	r1, r3
 800b12a:	6878      	ldr	r0, [r7, #4]
 800b12c:	f000 f8ea 	bl	800b304 <USBD_CtlSendData>
    break;
 800b130:	e004      	b.n	800b13c <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800b132:	6839      	ldr	r1, [r7, #0]
 800b134:	6878      	ldr	r0, [r7, #4]
 800b136:	f000 f874 	bl	800b222 <USBD_CtlError>
    break;
 800b13a:	bf00      	nop
  }
}
 800b13c:	bf00      	nop
 800b13e:	3708      	adds	r7, #8
 800b140:	46bd      	mov	sp, r7
 800b142:	bd80      	pop	{r7, pc}

0800b144 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b144:	b580      	push	{r7, lr}
 800b146:	b082      	sub	sp, #8
 800b148:	af00      	add	r7, sp, #0
 800b14a:	6078      	str	r0, [r7, #4]
 800b14c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	885b      	ldrh	r3, [r3, #2]
 800b152:	2b01      	cmp	r3, #1
 800b154:	d106      	bne.n	800b164 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	2201      	movs	r2, #1
 800b15a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b15e:	6878      	ldr	r0, [r7, #4]
 800b160:	f000 f92a 	bl	800b3b8 <USBD_CtlSendStatus>
  }
}
 800b164:	bf00      	nop
 800b166:	3708      	adds	r7, #8
 800b168:	46bd      	mov	sp, r7
 800b16a:	bd80      	pop	{r7, pc}

0800b16c <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b082      	sub	sp, #8
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
 800b174:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b17c:	3b01      	subs	r3, #1
 800b17e:	2b02      	cmp	r3, #2
 800b180:	d80b      	bhi.n	800b19a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b182:	683b      	ldr	r3, [r7, #0]
 800b184:	885b      	ldrh	r3, [r3, #2]
 800b186:	2b01      	cmp	r3, #1
 800b188:	d10c      	bne.n	800b1a4 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	2200      	movs	r2, #0
 800b18e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b192:	6878      	ldr	r0, [r7, #4]
 800b194:	f000 f910 	bl	800b3b8 <USBD_CtlSendStatus>
      }
      break;
 800b198:	e004      	b.n	800b1a4 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800b19a:	6839      	ldr	r1, [r7, #0]
 800b19c:	6878      	ldr	r0, [r7, #4]
 800b19e:	f000 f840 	bl	800b222 <USBD_CtlError>
      break;
 800b1a2:	e000      	b.n	800b1a6 <USBD_ClrFeature+0x3a>
      break;
 800b1a4:	bf00      	nop
  }
}
 800b1a6:	bf00      	nop
 800b1a8:	3708      	adds	r7, #8
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	bd80      	pop	{r7, pc}

0800b1ae <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b1ae:	b580      	push	{r7, lr}
 800b1b0:	b084      	sub	sp, #16
 800b1b2:	af00      	add	r7, sp, #0
 800b1b4:	6078      	str	r0, [r7, #4]
 800b1b6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	781a      	ldrb	r2, [r3, #0]
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	3301      	adds	r3, #1
 800b1c8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	781a      	ldrb	r2, [r3, #0]
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	3301      	adds	r3, #1
 800b1d6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b1d8:	68f8      	ldr	r0, [r7, #12]
 800b1da:	f7ff fa9c 	bl	800a716 <SWAPBYTE>
 800b1de:	4603      	mov	r3, r0
 800b1e0:	461a      	mov	r2, r3
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	3301      	adds	r3, #1
 800b1ea:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	3301      	adds	r3, #1
 800b1f0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b1f2:	68f8      	ldr	r0, [r7, #12]
 800b1f4:	f7ff fa8f 	bl	800a716 <SWAPBYTE>
 800b1f8:	4603      	mov	r3, r0
 800b1fa:	461a      	mov	r2, r3
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	3301      	adds	r3, #1
 800b204:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	3301      	adds	r3, #1
 800b20a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b20c:	68f8      	ldr	r0, [r7, #12]
 800b20e:	f7ff fa82 	bl	800a716 <SWAPBYTE>
 800b212:	4603      	mov	r3, r0
 800b214:	461a      	mov	r2, r3
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	80da      	strh	r2, [r3, #6]
}
 800b21a:	bf00      	nop
 800b21c:	3710      	adds	r7, #16
 800b21e:	46bd      	mov	sp, r7
 800b220:	bd80      	pop	{r7, pc}

0800b222 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b222:	b580      	push	{r7, lr}
 800b224:	b082      	sub	sp, #8
 800b226:	af00      	add	r7, sp, #0
 800b228:	6078      	str	r0, [r7, #4]
 800b22a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b22c:	2180      	movs	r1, #128	; 0x80
 800b22e:	6878      	ldr	r0, [r7, #4]
 800b230:	f000 ff9a 	bl	800c168 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b234:	2100      	movs	r1, #0
 800b236:	6878      	ldr	r0, [r7, #4]
 800b238:	f000 ff96 	bl	800c168 <USBD_LL_StallEP>
}
 800b23c:	bf00      	nop
 800b23e:	3708      	adds	r7, #8
 800b240:	46bd      	mov	sp, r7
 800b242:	bd80      	pop	{r7, pc}

0800b244 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b086      	sub	sp, #24
 800b248:	af00      	add	r7, sp, #0
 800b24a:	60f8      	str	r0, [r7, #12]
 800b24c:	60b9      	str	r1, [r7, #8]
 800b24e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b250:	2300      	movs	r3, #0
 800b252:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d036      	beq.n	800b2c8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b25e:	6938      	ldr	r0, [r7, #16]
 800b260:	f000 f836 	bl	800b2d0 <USBD_GetLen>
 800b264:	4603      	mov	r3, r0
 800b266:	3301      	adds	r3, #1
 800b268:	b29b      	uxth	r3, r3
 800b26a:	005b      	lsls	r3, r3, #1
 800b26c:	b29a      	uxth	r2, r3
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b272:	7dfb      	ldrb	r3, [r7, #23]
 800b274:	68ba      	ldr	r2, [r7, #8]
 800b276:	4413      	add	r3, r2
 800b278:	687a      	ldr	r2, [r7, #4]
 800b27a:	7812      	ldrb	r2, [r2, #0]
 800b27c:	701a      	strb	r2, [r3, #0]
  idx++;
 800b27e:	7dfb      	ldrb	r3, [r7, #23]
 800b280:	3301      	adds	r3, #1
 800b282:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b284:	7dfb      	ldrb	r3, [r7, #23]
 800b286:	68ba      	ldr	r2, [r7, #8]
 800b288:	4413      	add	r3, r2
 800b28a:	2203      	movs	r2, #3
 800b28c:	701a      	strb	r2, [r3, #0]
  idx++;
 800b28e:	7dfb      	ldrb	r3, [r7, #23]
 800b290:	3301      	adds	r3, #1
 800b292:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b294:	e013      	b.n	800b2be <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b296:	7dfb      	ldrb	r3, [r7, #23]
 800b298:	68ba      	ldr	r2, [r7, #8]
 800b29a:	4413      	add	r3, r2
 800b29c:	693a      	ldr	r2, [r7, #16]
 800b29e:	7812      	ldrb	r2, [r2, #0]
 800b2a0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b2a2:	693b      	ldr	r3, [r7, #16]
 800b2a4:	3301      	adds	r3, #1
 800b2a6:	613b      	str	r3, [r7, #16]
    idx++;
 800b2a8:	7dfb      	ldrb	r3, [r7, #23]
 800b2aa:	3301      	adds	r3, #1
 800b2ac:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b2ae:	7dfb      	ldrb	r3, [r7, #23]
 800b2b0:	68ba      	ldr	r2, [r7, #8]
 800b2b2:	4413      	add	r3, r2
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	701a      	strb	r2, [r3, #0]
    idx++;
 800b2b8:	7dfb      	ldrb	r3, [r7, #23]
 800b2ba:	3301      	adds	r3, #1
 800b2bc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b2be:	693b      	ldr	r3, [r7, #16]
 800b2c0:	781b      	ldrb	r3, [r3, #0]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d1e7      	bne.n	800b296 <USBD_GetString+0x52>
 800b2c6:	e000      	b.n	800b2ca <USBD_GetString+0x86>
    return;
 800b2c8:	bf00      	nop
  }
}
 800b2ca:	3718      	adds	r7, #24
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	bd80      	pop	{r7, pc}

0800b2d0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b2d0:	b480      	push	{r7}
 800b2d2:	b085      	sub	sp, #20
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b2d8:	2300      	movs	r3, #0
 800b2da:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b2e0:	e005      	b.n	800b2ee <USBD_GetLen+0x1e>
  {
    len++;
 800b2e2:	7bfb      	ldrb	r3, [r7, #15]
 800b2e4:	3301      	adds	r3, #1
 800b2e6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b2e8:	68bb      	ldr	r3, [r7, #8]
 800b2ea:	3301      	adds	r3, #1
 800b2ec:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b2ee:	68bb      	ldr	r3, [r7, #8]
 800b2f0:	781b      	ldrb	r3, [r3, #0]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d1f5      	bne.n	800b2e2 <USBD_GetLen+0x12>
  }

  return len;
 800b2f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	3714      	adds	r7, #20
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b302:	4770      	bx	lr

0800b304 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b304:	b580      	push	{r7, lr}
 800b306:	b084      	sub	sp, #16
 800b308:	af00      	add	r7, sp, #0
 800b30a:	60f8      	str	r0, [r7, #12]
 800b30c:	60b9      	str	r1, [r7, #8]
 800b30e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	2202      	movs	r2, #2
 800b314:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	687a      	ldr	r2, [r7, #4]
 800b31c:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	687a      	ldr	r2, [r7, #4]
 800b322:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	68ba      	ldr	r2, [r7, #8]
 800b328:	2100      	movs	r1, #0
 800b32a:	68f8      	ldr	r0, [r7, #12]
 800b32c:	f000 ffa5 	bl	800c27a <USBD_LL_Transmit>

  return USBD_OK;
 800b330:	2300      	movs	r3, #0
}
 800b332:	4618      	mov	r0, r3
 800b334:	3710      	adds	r7, #16
 800b336:	46bd      	mov	sp, r7
 800b338:	bd80      	pop	{r7, pc}

0800b33a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b33a:	b580      	push	{r7, lr}
 800b33c:	b084      	sub	sp, #16
 800b33e:	af00      	add	r7, sp, #0
 800b340:	60f8      	str	r0, [r7, #12]
 800b342:	60b9      	str	r1, [r7, #8]
 800b344:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	68ba      	ldr	r2, [r7, #8]
 800b34a:	2100      	movs	r1, #0
 800b34c:	68f8      	ldr	r0, [r7, #12]
 800b34e:	f000 ff94 	bl	800c27a <USBD_LL_Transmit>

  return USBD_OK;
 800b352:	2300      	movs	r3, #0
}
 800b354:	4618      	mov	r0, r3
 800b356:	3710      	adds	r7, #16
 800b358:	46bd      	mov	sp, r7
 800b35a:	bd80      	pop	{r7, pc}

0800b35c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b084      	sub	sp, #16
 800b360:	af00      	add	r7, sp, #0
 800b362:	60f8      	str	r0, [r7, #12]
 800b364:	60b9      	str	r1, [r7, #8]
 800b366:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	2203      	movs	r2, #3
 800b36c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	687a      	ldr	r2, [r7, #4]
 800b374:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	687a      	ldr	r2, [r7, #4]
 800b37c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	68ba      	ldr	r2, [r7, #8]
 800b384:	2100      	movs	r1, #0
 800b386:	68f8      	ldr	r0, [r7, #12]
 800b388:	f000 ff98 	bl	800c2bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b38c:	2300      	movs	r3, #0
}
 800b38e:	4618      	mov	r0, r3
 800b390:	3710      	adds	r7, #16
 800b392:	46bd      	mov	sp, r7
 800b394:	bd80      	pop	{r7, pc}

0800b396 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b396:	b580      	push	{r7, lr}
 800b398:	b084      	sub	sp, #16
 800b39a:	af00      	add	r7, sp, #0
 800b39c:	60f8      	str	r0, [r7, #12]
 800b39e:	60b9      	str	r1, [r7, #8]
 800b3a0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	68ba      	ldr	r2, [r7, #8]
 800b3a6:	2100      	movs	r1, #0
 800b3a8:	68f8      	ldr	r0, [r7, #12]
 800b3aa:	f000 ff87 	bl	800c2bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b3ae:	2300      	movs	r3, #0
}
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	3710      	adds	r7, #16
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	bd80      	pop	{r7, pc}

0800b3b8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b082      	sub	sp, #8
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2204      	movs	r2, #4
 800b3c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	2100      	movs	r1, #0
 800b3ce:	6878      	ldr	r0, [r7, #4]
 800b3d0:	f000 ff53 	bl	800c27a <USBD_LL_Transmit>

  return USBD_OK;
 800b3d4:	2300      	movs	r3, #0
}
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	3708      	adds	r7, #8
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	bd80      	pop	{r7, pc}

0800b3de <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b3de:	b580      	push	{r7, lr}
 800b3e0:	b082      	sub	sp, #8
 800b3e2:	af00      	add	r7, sp, #0
 800b3e4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	2205      	movs	r2, #5
 800b3ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	2100      	movs	r1, #0
 800b3f4:	6878      	ldr	r0, [r7, #4]
 800b3f6:	f000 ff61 	bl	800c2bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b3fa:	2300      	movs	r3, #0
}
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	3708      	adds	r7, #8
 800b400:	46bd      	mov	sp, r7
 800b402:	bd80      	pop	{r7, pc}

0800b404 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b404:	b480      	push	{r7}
 800b406:	b087      	sub	sp, #28
 800b408:	af00      	add	r7, sp, #0
 800b40a:	60f8      	str	r0, [r7, #12]
 800b40c:	60b9      	str	r1, [r7, #8]
 800b40e:	4613      	mov	r3, r2
 800b410:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b412:	2301      	movs	r3, #1
 800b414:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b416:	2300      	movs	r3, #0
 800b418:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b41a:	4b1f      	ldr	r3, [pc, #124]	; (800b498 <FATFS_LinkDriverEx+0x94>)
 800b41c:	7a5b      	ldrb	r3, [r3, #9]
 800b41e:	b2db      	uxtb	r3, r3
 800b420:	2b00      	cmp	r3, #0
 800b422:	d131      	bne.n	800b488 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b424:	4b1c      	ldr	r3, [pc, #112]	; (800b498 <FATFS_LinkDriverEx+0x94>)
 800b426:	7a5b      	ldrb	r3, [r3, #9]
 800b428:	b2db      	uxtb	r3, r3
 800b42a:	461a      	mov	r2, r3
 800b42c:	4b1a      	ldr	r3, [pc, #104]	; (800b498 <FATFS_LinkDriverEx+0x94>)
 800b42e:	2100      	movs	r1, #0
 800b430:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b432:	4b19      	ldr	r3, [pc, #100]	; (800b498 <FATFS_LinkDriverEx+0x94>)
 800b434:	7a5b      	ldrb	r3, [r3, #9]
 800b436:	b2db      	uxtb	r3, r3
 800b438:	4a17      	ldr	r2, [pc, #92]	; (800b498 <FATFS_LinkDriverEx+0x94>)
 800b43a:	009b      	lsls	r3, r3, #2
 800b43c:	4413      	add	r3, r2
 800b43e:	68fa      	ldr	r2, [r7, #12]
 800b440:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b442:	4b15      	ldr	r3, [pc, #84]	; (800b498 <FATFS_LinkDriverEx+0x94>)
 800b444:	7a5b      	ldrb	r3, [r3, #9]
 800b446:	b2db      	uxtb	r3, r3
 800b448:	461a      	mov	r2, r3
 800b44a:	4b13      	ldr	r3, [pc, #76]	; (800b498 <FATFS_LinkDriverEx+0x94>)
 800b44c:	4413      	add	r3, r2
 800b44e:	79fa      	ldrb	r2, [r7, #7]
 800b450:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b452:	4b11      	ldr	r3, [pc, #68]	; (800b498 <FATFS_LinkDriverEx+0x94>)
 800b454:	7a5b      	ldrb	r3, [r3, #9]
 800b456:	b2db      	uxtb	r3, r3
 800b458:	1c5a      	adds	r2, r3, #1
 800b45a:	b2d1      	uxtb	r1, r2
 800b45c:	4a0e      	ldr	r2, [pc, #56]	; (800b498 <FATFS_LinkDriverEx+0x94>)
 800b45e:	7251      	strb	r1, [r2, #9]
 800b460:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b462:	7dbb      	ldrb	r3, [r7, #22]
 800b464:	3330      	adds	r3, #48	; 0x30
 800b466:	b2da      	uxtb	r2, r3
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b46c:	68bb      	ldr	r3, [r7, #8]
 800b46e:	3301      	adds	r3, #1
 800b470:	223a      	movs	r2, #58	; 0x3a
 800b472:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b474:	68bb      	ldr	r3, [r7, #8]
 800b476:	3302      	adds	r3, #2
 800b478:	222f      	movs	r2, #47	; 0x2f
 800b47a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b47c:	68bb      	ldr	r3, [r7, #8]
 800b47e:	3303      	adds	r3, #3
 800b480:	2200      	movs	r2, #0
 800b482:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b484:	2300      	movs	r3, #0
 800b486:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b488:	7dfb      	ldrb	r3, [r7, #23]
}
 800b48a:	4618      	mov	r0, r3
 800b48c:	371c      	adds	r7, #28
 800b48e:	46bd      	mov	sp, r7
 800b490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b494:	4770      	bx	lr
 800b496:	bf00      	nop
 800b498:	200008cc 	.word	0x200008cc

0800b49c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b082      	sub	sp, #8
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
 800b4a4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b4a6:	2200      	movs	r2, #0
 800b4a8:	6839      	ldr	r1, [r7, #0]
 800b4aa:	6878      	ldr	r0, [r7, #4]
 800b4ac:	f7ff ffaa 	bl	800b404 <FATFS_LinkDriverEx>
 800b4b0:	4603      	mov	r3, r0
}
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	3708      	adds	r7, #8
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	bd80      	pop	{r7, pc}
	...

0800b4bc <QSPI_Init>:
  * @brief  QSPI Init
  * @param  None
  * @retval HAL_ERROR or HAL_OK
  */
uint8_t QSPI_Init(void)
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	af00      	add	r7, sp, #0
  /* Configuration of the dummy cycles on QSPI memory side */
  if (QSPI_DummyCyclesCfg(&hqspi) != HAL_OK)
 800b4c0:	4805      	ldr	r0, [pc, #20]	; (800b4d8 <QSPI_Init+0x1c>)
 800b4c2:	f000 f9a1 	bl	800b808 <QSPI_DummyCyclesCfg>
 800b4c6:	4603      	mov	r3, r0
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d001      	beq.n	800b4d0 <QSPI_Init+0x14>
  {
    return HAL_ERROR;
 800b4cc:	2301      	movs	r3, #1
 800b4ce:	e000      	b.n	800b4d2 <QSPI_Init+0x16>
  }
  return HAL_OK;
 800b4d0:	2300      	movs	r3, #0
}
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	bd80      	pop	{r7, pc}
 800b4d6:	bf00      	nop
 800b4d8:	20000a98 	.word	0x20000a98

0800b4dc <QSPI_Erase_Sector4K>:
  * @brief  Erases the specified sector of the QSPI memory.
  * @param  SectorAddress: Block address to erase
  * @retval QSPI memory status
  */
uint8_t QSPI_Erase_Sector4K(uint32_t SectorAddress)
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b092      	sub	sp, #72	; 0x48
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  uint8_t reg1[6];

  if (QSPI_WriteEnable() != HAL_OK)
 800b4e4:	f000 f90e 	bl	800b704 <QSPI_WriteEnable>
 800b4e8:	4603      	mov	r3, r0
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d001      	beq.n	800b4f2 <QSPI_Erase_Sector4K+0x16>
  {
    return HAL_ERROR;
 800b4ee:	2301      	movs	r3, #1
 800b4f0:	e030      	b.n	800b554 <QSPI_Erase_Sector4K+0x78>
  }

  /* Initialize the erase command */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800b4f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b4f6:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction = 0x20; //SUBSECTOR_ERASE_4_BYTE_ADDR_CMD;
 800b4f8:	2320      	movs	r3, #32
 800b4fa:	613b      	str	r3, [r7, #16]
  s_command.AddressMode = QSPI_ADDRESS_1_LINE;
 800b4fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b500:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressSize = QSPI_ADDRESS_24_BITS; //QSPI_ADDRESS_32_BITS;
 800b502:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b506:	61fb      	str	r3, [r7, #28]
  s_command.Address = SectorAddress;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	617b      	str	r3, [r7, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800b50c:	2300      	movs	r3, #0
 800b50e:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode = QSPI_DATA_NONE;
 800b510:	2300      	movs	r3, #0
 800b512:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles = 0;
 800b514:	2300      	movs	r3, #0
 800b516:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 800b518:	2300      	movs	r3, #0
 800b51a:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 800b51c:	2300      	movs	r3, #0
 800b51e:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 800b520:	2300      	movs	r3, #0
 800b522:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b524:	f107 0310 	add.w	r3, r7, #16
 800b528:	f241 3288 	movw	r2, #5000	; 0x1388
 800b52c:	4619      	mov	r1, r3
 800b52e:	480b      	ldr	r0, [pc, #44]	; (800b55c <QSPI_Erase_Sector4K+0x80>)
 800b530:	f7f8 feda 	bl	80042e8 <HAL_QSPI_Command>
 800b534:	4603      	mov	r3, r0
 800b536:	2b00      	cmp	r3, #0
 800b538:	d001      	beq.n	800b53e <QSPI_Erase_Sector4K+0x62>
  {
    return HAL_ERROR;
 800b53a:	2301      	movs	r3, #1
 800b53c:	e00a      	b.n	800b554 <QSPI_Erase_Sector4K+0x78>
  }

  // -------------------------------------------------------------------------------------

  //  if (QSPI_AutoPolling_Erase_in_progress(&hqspi, QSPI_SUBSECTOR_ERASE_MAX_TIME) != HAL_OK)  {    return HAL_ERROR;  }
  if (QSPI_AutoPolling_Write_in_progress(&hqspi, QSPI_SUBSECTOR_ERASE_MAX_TIME) != HAL_OK)
 800b53e:	f44f 7148 	mov.w	r1, #800	; 0x320
 800b542:	4806      	ldr	r0, [pc, #24]	; (800b55c <QSPI_Erase_Sector4K+0x80>)
 800b544:	f000 f928 	bl	800b798 <QSPI_AutoPolling_Write_in_progress>
 800b548:	4603      	mov	r3, r0
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d001      	beq.n	800b552 <QSPI_Erase_Sector4K+0x76>
  {
    return HAL_ERROR;
 800b54e:	2301      	movs	r3, #1
 800b550:	e000      	b.n	800b554 <QSPI_Erase_Sector4K+0x78>
  }

  return HAL_OK;
 800b552:	2300      	movs	r3, #0
}
 800b554:	4618      	mov	r0, r3
 800b556:	3748      	adds	r7, #72	; 0x48
 800b558:	46bd      	mov	sp, r7
 800b55a:	bd80      	pop	{r7, pc}
 800b55c:	20000a98 	.word	0x20000a98

0800b560 <QSPI_Write>:
  * @param  WriteAddr: Write start address
  * @param  Size: Size of data to write
  * @retval QSPI memory status
  */
uint8_t QSPI_Write(uint8_t *pData, uint32_t WriteAddr, uint32_t Size)
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b096      	sub	sp, #88	; 0x58
 800b564:	af00      	add	r7, sp, #0
 800b566:	60f8      	str	r0, [r7, #12]
 800b568:	60b9      	str	r1, [r7, #8]
 800b56a:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint32_t end_addr = 0, current_size = 0, current_addr = 0;
 800b56c:	2300      	movs	r3, #0
 800b56e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b570:	2300      	movs	r3, #0
 800b572:	657b      	str	r3, [r7, #84]	; 0x54
 800b574:	2300      	movs	r3, #0
 800b576:	653b      	str	r3, [r7, #80]	; 0x50
  pData = pData - 1;
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	3b01      	subs	r3, #1
 800b57c:	60fb      	str	r3, [r7, #12]
  /* Calculation of the size between the write address and the end of the page */
  current_addr = 0;
 800b57e:	2300      	movs	r3, #0
 800b580:	653b      	str	r3, [r7, #80]	; 0x50
  while (current_addr <= WriteAddr)
 800b582:	e003      	b.n	800b58c <QSPI_Write+0x2c>
  {
    current_addr += QSPI_PAGE_SIZE;
 800b584:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b586:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800b58a:	653b      	str	r3, [r7, #80]	; 0x50
  while (current_addr <= WriteAddr)
 800b58c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b58e:	68bb      	ldr	r3, [r7, #8]
 800b590:	429a      	cmp	r2, r3
 800b592:	d9f7      	bls.n	800b584 <QSPI_Write+0x24>
  }
  current_size = current_addr - WriteAddr;
 800b594:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b596:	68bb      	ldr	r3, [r7, #8]
 800b598:	1ad3      	subs	r3, r2, r3
 800b59a:	657b      	str	r3, [r7, #84]	; 0x54

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
 800b59c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	429a      	cmp	r2, r3
 800b5a2:	d901      	bls.n	800b5a8 <QSPI_Write+0x48>
  {
    current_size = Size;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	657b      	str	r3, [r7, #84]	; 0x54
  }
  //  wr_time1 = systick_count_up;
  /* Initialize the address variables */
  current_addr = WriteAddr;
 800b5a8:	68bb      	ldr	r3, [r7, #8]
 800b5aa:	653b      	str	r3, [r7, #80]	; 0x50
  end_addr = WriteAddr + Size;
 800b5ac:	68ba      	ldr	r2, [r7, #8]
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	4413      	add	r3, r2
 800b5b2:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Initialize the program command */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800b5b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b5b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.Instruction = 0x02; // simple page programm //QPI_PAGE_PROG_4_BYTE_ADDR_CMD;
 800b5ba:	2302      	movs	r3, #2
 800b5bc:	617b      	str	r3, [r7, #20]
  s_command.AddressMode = QSPI_ADDRESS_1_LINE;
 800b5be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b5c2:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.AddressSize = QSPI_ADDRESS_24_BITS;
 800b5c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b5c8:	623b      	str	r3, [r7, #32]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DataMode = QSPI_DATA_1_LINE;
 800b5ce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b5d2:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DummyCycles = 0;
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 800b5d8:	2300      	movs	r3, #0
 800b5da:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 800b5dc:	2300      	movs	r3, #0
 800b5de:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Perform the write page by page */
  do
  {
    /* Enable write operations */
    if (QSPI_WriteEnable() != HAL_OK)
 800b5e4:	f000 f88e 	bl	800b704 <QSPI_WriteEnable>
 800b5e8:	4603      	mov	r3, r0
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d001      	beq.n	800b5f2 <QSPI_Write+0x92>
    {
      return HAL_ERROR;
 800b5ee:	2301      	movs	r3, #1
 800b5f0:	e03f      	b.n	800b672 <QSPI_Write+0x112>
    }

    /* Configure the command */
    s_command.Address = current_addr;
 800b5f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5f4:	61bb      	str	r3, [r7, #24]
    s_command.NbData = current_size;
 800b5f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b5f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b5fa:	f107 0314 	add.w	r3, r7, #20
 800b5fe:	f241 3288 	movw	r2, #5000	; 0x1388
 800b602:	4619      	mov	r1, r3
 800b604:	481d      	ldr	r0, [pc, #116]	; (800b67c <QSPI_Write+0x11c>)
 800b606:	f7f8 fe6f 	bl	80042e8 <HAL_QSPI_Command>
 800b60a:	4603      	mov	r3, r0
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d001      	beq.n	800b614 <QSPI_Write+0xb4>
    {
      return HAL_ERROR;
 800b610:	2301      	movs	r3, #1
 800b612:	e02e      	b.n	800b672 <QSPI_Write+0x112>
    }

    /* Transmission of the data */
    if (HAL_QSPI_Transmit(&hqspi, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b614:	f241 3288 	movw	r2, #5000	; 0x1388
 800b618:	68f9      	ldr	r1, [r7, #12]
 800b61a:	4818      	ldr	r0, [pc, #96]	; (800b67c <QSPI_Write+0x11c>)
 800b61c:	f7f8 fec2 	bl	80043a4 <HAL_QSPI_Transmit>
 800b620:	4603      	mov	r3, r0
 800b622:	2b00      	cmp	r3, #0
 800b624:	d001      	beq.n	800b62a <QSPI_Write+0xca>
    {
      return HAL_ERROR;
 800b626:	2301      	movs	r3, #1
 800b628:	e023      	b.n	800b672 <QSPI_Write+0x112>
    }

    if (QSPI_AutoPolling_Write_in_progress(&hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b62a:	f241 3188 	movw	r1, #5000	; 0x1388
 800b62e:	4813      	ldr	r0, [pc, #76]	; (800b67c <QSPI_Write+0x11c>)
 800b630:	f000 f8b2 	bl	800b798 <QSPI_AutoPolling_Write_in_progress>
 800b634:	4603      	mov	r3, r0
 800b636:	2b00      	cmp	r3, #0
 800b638:	d001      	beq.n	800b63e <QSPI_Write+0xde>
    {
      return HAL_ERROR;
 800b63a:	2301      	movs	r3, #1
 800b63c:	e019      	b.n	800b672 <QSPI_Write+0x112>
    }

    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 800b63e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b640:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b642:	4413      	add	r3, r2
 800b644:	653b      	str	r3, [r7, #80]	; 0x50
    pData += current_size;
 800b646:	68fa      	ldr	r2, [r7, #12]
 800b648:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b64a:	4413      	add	r3, r2
 800b64c:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + QSPI_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : QSPI_PAGE_SIZE;
 800b64e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b650:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800b654:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b656:	429a      	cmp	r2, r3
 800b658:	d203      	bcs.n	800b662 <QSPI_Write+0x102>
 800b65a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b65c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b65e:	1ad3      	subs	r3, r2, r3
 800b660:	e001      	b.n	800b666 <QSPI_Write+0x106>
 800b662:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b666:	657b      	str	r3, [r7, #84]	; 0x54
  } while (current_addr < end_addr);
 800b668:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b66a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b66c:	429a      	cmp	r2, r3
 800b66e:	d3b9      	bcc.n	800b5e4 <QSPI_Write+0x84>

  return HAL_OK;
 800b670:	2300      	movs	r3, #0
}
 800b672:	4618      	mov	r0, r3
 800b674:	3758      	adds	r7, #88	; 0x58
 800b676:	46bd      	mov	sp, r7
 800b678:	bd80      	pop	{r7, pc}
 800b67a:	bf00      	nop
 800b67c:	20000a98 	.word	0x20000a98

0800b680 <QSPI_Read>:
  * @param  ReadAddr: Read start address
  * @param  Size: Size of data to read
  * @retval QSPI memory status
  */
uint8_t QSPI_Read(uint8_t *pData, uint32_t ReadAddr, uint32_t Size)
{
 800b680:	b580      	push	{r7, lr}
 800b682:	b092      	sub	sp, #72	; 0x48
 800b684:	af00      	add	r7, sp, #0
 800b686:	60f8      	str	r0, [r7, #12]
 800b688:	60b9      	str	r1, [r7, #8]
 800b68a:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the read command */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800b68c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b690:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction = 0x03; // simple data read // QPI_READ_4_BYTE_ADDR_CMD; //
 800b692:	2303      	movs	r3, #3
 800b694:	613b      	str	r3, [r7, #16]
  s_command.AddressMode = QSPI_ADDRESS_1_LINE;
 800b696:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b69a:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressSize = QSPI_ADDRESS_24_BITS;
 800b69c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b6a0:	61fb      	str	r3, [r7, #28]
  s_command.Address = ReadAddr;
 800b6a2:	68bb      	ldr	r3, [r7, #8]
 800b6a4:	617b      	str	r3, [r7, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode = QSPI_DATA_1_LINE;
 800b6aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b6ae:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles = QSPI_DUMMY_CYCLES_READ;
 800b6b0:	2308      	movs	r3, #8
 800b6b2:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData = Size;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 800b6bc:	2300      	movs	r3, #0
 800b6be:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b6c4:	f107 0310 	add.w	r3, r7, #16
 800b6c8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b6cc:	4619      	mov	r1, r3
 800b6ce:	480c      	ldr	r0, [pc, #48]	; (800b700 <QSPI_Read+0x80>)
 800b6d0:	f7f8 fe0a 	bl	80042e8 <HAL_QSPI_Command>
 800b6d4:	4603      	mov	r3, r0
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d001      	beq.n	800b6de <QSPI_Read+0x5e>
  {
    return HAL_ERROR;
 800b6da:	2301      	movs	r3, #1
 800b6dc:	e00b      	b.n	800b6f6 <QSPI_Read+0x76>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b6de:	f241 3288 	movw	r2, #5000	; 0x1388
 800b6e2:	68f9      	ldr	r1, [r7, #12]
 800b6e4:	4806      	ldr	r0, [pc, #24]	; (800b700 <QSPI_Read+0x80>)
 800b6e6:	f7f8 feef 	bl	80044c8 <HAL_QSPI_Receive>
 800b6ea:	4603      	mov	r3, r0
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d001      	beq.n	800b6f4 <QSPI_Read+0x74>
  {
    return HAL_ERROR;
 800b6f0:	2301      	movs	r3, #1
 800b6f2:	e000      	b.n	800b6f6 <QSPI_Read+0x76>
  }

  return HAL_OK;
 800b6f4:	2300      	movs	r3, #0
}
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	3748      	adds	r7, #72	; 0x48
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	bd80      	pop	{r7, pc}
 800b6fe:	bf00      	nop
 800b700:	20000a98 	.word	0x20000a98

0800b704 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi: QSPI handle
  * @retval None
  */
uint8_t QSPI_WriteEnable(void)
{
 800b704:	b580      	push	{r7, lr}
 800b706:	b094      	sub	sp, #80	; 0x50
 800b708:	af00      	add	r7, sp, #0
  QSPI_CommandTypeDef s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800b70a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b70e:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Instruction = WRITE_ENABLE_CMD; // ok
 800b710:	2306      	movs	r3, #6
 800b712:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode = QSPI_ADDRESS_NONE;
 800b714:	2300      	movs	r3, #0
 800b716:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800b718:	2300      	movs	r3, #0
 800b71a:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DataMode = QSPI_DATA_NONE;
 800b71c:	2300      	movs	r3, #0
 800b71e:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DummyCycles = 0;
 800b720:	2300      	movs	r3, #0
 800b722:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 800b724:	2300      	movs	r3, #0
 800b726:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 800b728:	2300      	movs	r3, #0
 800b72a:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 800b72c:	2300      	movs	r3, #0
 800b72e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b730:	f107 0318 	add.w	r3, r7, #24
 800b734:	f241 3288 	movw	r2, #5000	; 0x1388
 800b738:	4619      	mov	r1, r3
 800b73a:	4816      	ldr	r0, [pc, #88]	; (800b794 <QSPI_WriteEnable+0x90>)
 800b73c:	f7f8 fdd4 	bl	80042e8 <HAL_QSPI_Command>
 800b740:	4603      	mov	r3, r0
 800b742:	2b00      	cmp	r3, #0
 800b744:	d001      	beq.n	800b74a <QSPI_WriteEnable+0x46>
  {
    return HAL_ERROR;
 800b746:	2301      	movs	r3, #1
 800b748:	e01f      	b.n	800b78a <QSPI_WriteEnable+0x86>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match = QSPI_SR_WREN;
 800b74a:	2302      	movs	r3, #2
 800b74c:	603b      	str	r3, [r7, #0]
  s_config.Mask = QSPI_SR_WREN;
 800b74e:	2302      	movs	r3, #2
 800b750:	607b      	str	r3, [r7, #4]
  s_config.MatchMode = QSPI_MATCH_MODE_AND;
 800b752:	2300      	movs	r3, #0
 800b754:	613b      	str	r3, [r7, #16]
  s_config.StatusBytesSize = 1;
 800b756:	2301      	movs	r3, #1
 800b758:	60fb      	str	r3, [r7, #12]
  s_config.Interval = 1;
 800b75a:	2301      	movs	r3, #1
 800b75c:	60bb      	str	r3, [r7, #8]
  s_config.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 800b75e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b762:	617b      	str	r3, [r7, #20]

  s_command.Instruction = READ_STATUS_REG_CMD;
 800b764:	2305      	movs	r3, #5
 800b766:	61bb      	str	r3, [r7, #24]
  s_command.DataMode = QSPI_DATA_1_LINE;
 800b768:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b76c:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_QSPI_AutoPolling(&hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b76e:	463a      	mov	r2, r7
 800b770:	f107 0118 	add.w	r1, r7, #24
 800b774:	f241 3388 	movw	r3, #5000	; 0x1388
 800b778:	4806      	ldr	r0, [pc, #24]	; (800b794 <QSPI_WriteEnable+0x90>)
 800b77a:	f7f8 ff42 	bl	8004602 <HAL_QSPI_AutoPolling>
 800b77e:	4603      	mov	r3, r0
 800b780:	2b00      	cmp	r3, #0
 800b782:	d001      	beq.n	800b788 <QSPI_WriteEnable+0x84>
  {
    return HAL_ERROR;
 800b784:	2301      	movs	r3, #1
 800b786:	e000      	b.n	800b78a <QSPI_WriteEnable+0x86>
  }

  return HAL_OK;
 800b788:	2300      	movs	r3, #0
}
 800b78a:	4618      	mov	r0, r3
 800b78c:	3750      	adds	r7, #80	; 0x50
 800b78e:	46bd      	mov	sp, r7
 800b790:	bd80      	pop	{r7, pc}
 800b792:	bf00      	nop
 800b794:	20000a98 	.word	0x20000a98

0800b798 <QSPI_AutoPolling_Write_in_progress>:
  * @param  hqspi: QSPI handle
  * @param  Timeout
  * @retval None
  */
uint8_t QSPI_AutoPolling_Write_in_progress(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800b798:	b580      	push	{r7, lr}
 800b79a:	b096      	sub	sp, #88	; 0x58
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
 800b7a0:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800b7a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b7a6:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction = READ_STATUS_REG_CMD;
 800b7a8:	2305      	movs	r3, #5
 800b7aa:	623b      	str	r3, [r7, #32]
  s_command.AddressMode = QSPI_ADDRESS_NONE;
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode = QSPI_DATA_1_LINE;
 800b7b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b7b8:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles = 0;
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 800b7be:	2300      	movs	r3, #0
 800b7c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	657b      	str	r3, [r7, #84]	; 0x54

  s_config.Match = 0;
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	60bb      	str	r3, [r7, #8]
  //  s_config.Mask            = QSPI_SR_WIP;
  s_config.Mask = QSPI_SR_WIP; /*!< Write in progress */
 800b7ce:	2301      	movs	r3, #1
 800b7d0:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode = QSPI_MATCH_MODE_AND;
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 800b7d6:	2301      	movs	r3, #1
 800b7d8:	617b      	str	r3, [r7, #20]
  s_config.Interval = 1; //0x10;
 800b7da:	2301      	movs	r3, #1
 800b7dc:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 800b7de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b7e2:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 800b7e4:	f107 0208 	add.w	r2, r7, #8
 800b7e8:	f107 0120 	add.w	r1, r7, #32
 800b7ec:	683b      	ldr	r3, [r7, #0]
 800b7ee:	6878      	ldr	r0, [r7, #4]
 800b7f0:	f7f8 ff07 	bl	8004602 <HAL_QSPI_AutoPolling>
 800b7f4:	4603      	mov	r3, r0
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d001      	beq.n	800b7fe <QSPI_AutoPolling_Write_in_progress+0x66>
  {
    return HAL_ERROR;
 800b7fa:	2301      	movs	r3, #1
 800b7fc:	e000      	b.n	800b800 <QSPI_AutoPolling_Write_in_progress+0x68>
  }

  return HAL_OK;
 800b7fe:	2300      	movs	r3, #0
}
 800b800:	4618      	mov	r0, r3
 800b802:	3758      	adds	r7, #88	; 0x58
 800b804:	46bd      	mov	sp, r7
 800b806:	bd80      	pop	{r7, pc}

0800b808 <QSPI_DummyCyclesCfg>:
  * @brief  This function configure the dummy cycles on memory side.
  * @param  hqspi: QSPI handle
  * @retval None
  */
uint8_t QSPI_DummyCyclesCfg(QSPI_HandleTypeDef *hqspi)
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b094      	sub	sp, #80	; 0x50
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint8_t reg[2];

  /* Initialize the reading of status register */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE; //QSPI_INSTRUCTION_4_LINES;
 800b810:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b814:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction = READ_STATUS_REG_CMD;
 800b816:	2305      	movs	r3, #5
 800b818:	613b      	str	r3, [r7, #16]
  s_command.AddressMode = QSPI_ADDRESS_NONE;
 800b81a:	2300      	movs	r3, #0
 800b81c:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800b81e:	2300      	movs	r3, #0
 800b820:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode = QSPI_DATA_1_LINE; // QSPI_DATA_4_LINES;
 800b822:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b826:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles = 0;
 800b828:	2300      	movs	r3, #0
 800b82a:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData = 1;
 800b82c:	2301      	movs	r3, #1
 800b82e:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 800b830:	2300      	movs	r3, #0
 800b832:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 800b834:	2300      	movs	r3, #0
 800b836:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 800b838:	2300      	movs	r3, #0
 800b83a:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b83c:	f107 0310 	add.w	r3, r7, #16
 800b840:	f241 3288 	movw	r2, #5000	; 0x1388
 800b844:	4619      	mov	r1, r3
 800b846:	6878      	ldr	r0, [r7, #4]
 800b848:	f7f8 fd4e 	bl	80042e8 <HAL_QSPI_Command>
 800b84c:	4603      	mov	r3, r0
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d001      	beq.n	800b856 <QSPI_DummyCyclesCfg+0x4e>
  {
    return HAL_ERROR;
 800b852:	2301      	movs	r3, #1
 800b854:	e08f      	b.n	800b976 <QSPI_DummyCyclesCfg+0x16e>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b856:	f107 030c 	add.w	r3, r7, #12
 800b85a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b85e:	4619      	mov	r1, r3
 800b860:	6878      	ldr	r0, [r7, #4]
 800b862:	f7f8 fe31 	bl	80044c8 <HAL_QSPI_Receive>
 800b866:	4603      	mov	r3, r0
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d001      	beq.n	800b870 <QSPI_DummyCyclesCfg+0x68>
  {
    return HAL_ERROR;
 800b86c:	2301      	movs	r3, #1
 800b86e:	e082      	b.n	800b976 <QSPI_DummyCyclesCfg+0x16e>
  }

  /* Initialize the reading of configuration register */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800b870:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b874:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction = READ_CFG_REG_CMD;
 800b876:	2315      	movs	r3, #21
 800b878:	613b      	str	r3, [r7, #16]
  s_command.AddressMode = QSPI_ADDRESS_NONE;
 800b87a:	2300      	movs	r3, #0
 800b87c:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800b87e:	2300      	movs	r3, #0
 800b880:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode = QSPI_DATA_1_LINE;
 800b882:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b886:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles = 0;
 800b888:	2300      	movs	r3, #0
 800b88a:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData = 1;
 800b88c:	2301      	movs	r3, #1
 800b88e:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 800b890:	2300      	movs	r3, #0
 800b892:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 800b894:	2300      	movs	r3, #0
 800b896:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 800b898:	2300      	movs	r3, #0
 800b89a:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b89c:	f107 0310 	add.w	r3, r7, #16
 800b8a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b8a4:	4619      	mov	r1, r3
 800b8a6:	6878      	ldr	r0, [r7, #4]
 800b8a8:	f7f8 fd1e 	bl	80042e8 <HAL_QSPI_Command>
 800b8ac:	4603      	mov	r3, r0
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d001      	beq.n	800b8b6 <QSPI_DummyCyclesCfg+0xae>
  {
    return HAL_ERROR;
 800b8b2:	2301      	movs	r3, #1
 800b8b4:	e05f      	b.n	800b976 <QSPI_DummyCyclesCfg+0x16e>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &(reg[1]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b8b6:	f107 030c 	add.w	r3, r7, #12
 800b8ba:	3301      	adds	r3, #1
 800b8bc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b8c0:	4619      	mov	r1, r3
 800b8c2:	6878      	ldr	r0, [r7, #4]
 800b8c4:	f7f8 fe00 	bl	80044c8 <HAL_QSPI_Receive>
 800b8c8:	4603      	mov	r3, r0
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d001      	beq.n	800b8d2 <QSPI_DummyCyclesCfg+0xca>
  {
    return HAL_ERROR;
 800b8ce:	2301      	movs	r3, #1
 800b8d0:	e051      	b.n	800b976 <QSPI_DummyCyclesCfg+0x16e>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable() != HAL_OK)
 800b8d2:	f7ff ff17 	bl	800b704 <QSPI_WriteEnable>
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d001      	beq.n	800b8e0 <QSPI_DummyCyclesCfg+0xd8>
  {
    return HAL_ERROR;
 800b8dc:	2301      	movs	r3, #1
 800b8de:	e04a      	b.n	800b976 <QSPI_DummyCyclesCfg+0x16e>
  }

  /* Update the configuration register with new dummy cycles */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800b8e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b8e4:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction = WRITE_STATUS_CFG_REG_CMD;
 800b8e6:	2301      	movs	r3, #1
 800b8e8:	613b      	str	r3, [r7, #16]
  s_command.AddressMode = QSPI_ADDRESS_NONE;
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode = QSPI_DATA_1_LINE;
 800b8f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b8f6:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles = 0;
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData = 2;
 800b8fc:	2302      	movs	r3, #2
 800b8fe:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 800b900:	2300      	movs	r3, #0
 800b902:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 800b904:	2300      	movs	r3, #0
 800b906:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 800b908:	2300      	movs	r3, #0
 800b90a:	647b      	str	r3, [r7, #68]	; 0x44

  /* QSPI_DUMMY_CYCLES_READ_QUAD = 3 for 10 cycles in QPI mode */
  //  MODIFY_REG( reg[1], QSPI_CR_NB_DUMMY, (QSPI_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(QSPI_CR_NB_DUMMY)));
  MODIFY_REG(reg[1], QSPI_CR_NB_DUMMY, (QSPI_DUMMY_CYCLES_READ << POSITION_VAL(QSPI_CR_NB_DUMMY)));
 800b90c:	7b7b      	ldrb	r3, [r7, #13]
 800b90e:	b25b      	sxtb	r3, r3
 800b910:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b914:	b25a      	sxtb	r2, r3
 800b916:	23c0      	movs	r3, #192	; 0xc0
 800b918:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b91a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b91c:	fa93 f3a3 	rbit	r3, r3
 800b920:	64bb      	str	r3, [r7, #72]	; 0x48
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800b922:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b924:	fab3 f383 	clz	r3, r3
 800b928:	b2db      	uxtb	r3, r3
 800b92a:	4619      	mov	r1, r3
 800b92c:	2308      	movs	r3, #8
 800b92e:	408b      	lsls	r3, r1
 800b930:	b25b      	sxtb	r3, r3
 800b932:	4313      	orrs	r3, r2
 800b934:	b25b      	sxtb	r3, r3
 800b936:	b2db      	uxtb	r3, r3
 800b938:	737b      	strb	r3, [r7, #13]

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b93a:	f107 0310 	add.w	r3, r7, #16
 800b93e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b942:	4619      	mov	r1, r3
 800b944:	6878      	ldr	r0, [r7, #4]
 800b946:	f7f8 fccf 	bl	80042e8 <HAL_QSPI_Command>
 800b94a:	4603      	mov	r3, r0
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d001      	beq.n	800b954 <QSPI_DummyCyclesCfg+0x14c>
  {
    return HAL_ERROR;
 800b950:	2301      	movs	r3, #1
 800b952:	e010      	b.n	800b976 <QSPI_DummyCyclesCfg+0x16e>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b954:	f107 030c 	add.w	r3, r7, #12
 800b958:	f241 3288 	movw	r2, #5000	; 0x1388
 800b95c:	4619      	mov	r1, r3
 800b95e:	6878      	ldr	r0, [r7, #4]
 800b960:	f7f8 fd20 	bl	80043a4 <HAL_QSPI_Transmit>
 800b964:	4603      	mov	r3, r0
 800b966:	2b00      	cmp	r3, #0
 800b968:	d001      	beq.n	800b96e <QSPI_DummyCyclesCfg+0x166>
  {
    return HAL_ERROR;
 800b96a:	2301      	movs	r3, #1
 800b96c:	e003      	b.n	800b976 <QSPI_DummyCyclesCfg+0x16e>
  }

  /* 40ms  Write Status/Configuration Register Cycle Time */
  HAL_Delay(40);
 800b96e:	2028      	movs	r0, #40	; 0x28
 800b970:	f7f6 f9b0 	bl	8001cd4 <HAL_Delay>

  return HAL_OK;
 800b974:	2300      	movs	r3, #0
}
 800b976:	4618      	mov	r0, r3
 800b978:	3750      	adds	r7, #80	; 0x50
 800b97a:	46bd      	mov	sp, r7
 800b97c:	bd80      	pop	{r7, pc}
	...

0800b980 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b980:	b580      	push	{r7, lr}
 800b982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b984:	2200      	movs	r2, #0
 800b986:	4912      	ldr	r1, [pc, #72]	; (800b9d0 <MX_USB_DEVICE_Init+0x50>)
 800b988:	4812      	ldr	r0, [pc, #72]	; (800b9d4 <MX_USB_DEVICE_Init+0x54>)
 800b98a:	f7fe fbfd 	bl	800a188 <USBD_Init>
 800b98e:	4603      	mov	r3, r0
 800b990:	2b00      	cmp	r3, #0
 800b992:	d001      	beq.n	800b998 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b994:	f7f5 fc74 	bl	8001280 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b998:	490f      	ldr	r1, [pc, #60]	; (800b9d8 <MX_USB_DEVICE_Init+0x58>)
 800b99a:	480e      	ldr	r0, [pc, #56]	; (800b9d4 <MX_USB_DEVICE_Init+0x54>)
 800b99c:	f7fe fc2a 	bl	800a1f4 <USBD_RegisterClass>
 800b9a0:	4603      	mov	r3, r0
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d001      	beq.n	800b9aa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b9a6:	f7f5 fc6b 	bl	8001280 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b9aa:	490c      	ldr	r1, [pc, #48]	; (800b9dc <MX_USB_DEVICE_Init+0x5c>)
 800b9ac:	4809      	ldr	r0, [pc, #36]	; (800b9d4 <MX_USB_DEVICE_Init+0x54>)
 800b9ae:	f7fe fb7f 	bl	800a0b0 <USBD_CDC_RegisterInterface>
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d001      	beq.n	800b9bc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b9b8:	f7f5 fc62 	bl	8001280 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b9bc:	4805      	ldr	r0, [pc, #20]	; (800b9d4 <MX_USB_DEVICE_Init+0x54>)
 800b9be:	f7fe fc3a 	bl	800a236 <USBD_Start>
 800b9c2:	4603      	mov	r3, r0
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d001      	beq.n	800b9cc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b9c8:	f7f5 fc5a 	bl	8001280 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b9cc:	bf00      	nop
 800b9ce:	bd80      	pop	{r7, pc}
 800b9d0:	20000148 	.word	0x20000148
 800b9d4:	20002d94 	.word	0x20002d94
 800b9d8:	20000030 	.word	0x20000030
 800b9dc:	20000134 	.word	0x20000134

0800b9e0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	4905      	ldr	r1, [pc, #20]	; (800b9fc <CDC_Init_FS+0x1c>)
 800b9e8:	4805      	ldr	r0, [pc, #20]	; (800ba00 <CDC_Init_FS+0x20>)
 800b9ea:	f7fe fb76 	bl	800a0da <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b9ee:	4905      	ldr	r1, [pc, #20]	; (800ba04 <CDC_Init_FS+0x24>)
 800b9f0:	4803      	ldr	r0, [pc, #12]	; (800ba00 <CDC_Init_FS+0x20>)
 800b9f2:	f7fe fb8b 	bl	800a10c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b9f6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	bd80      	pop	{r7, pc}
 800b9fc:	20003864 	.word	0x20003864
 800ba00:	20002d94 	.word	0x20002d94
 800ba04:	20003064 	.word	0x20003064

0800ba08 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ba08:	b480      	push	{r7}
 800ba0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ba0c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ba0e:	4618      	mov	r0, r3
 800ba10:	46bd      	mov	sp, r7
 800ba12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba16:	4770      	bx	lr

0800ba18 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ba18:	b480      	push	{r7}
 800ba1a:	b083      	sub	sp, #12
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	4603      	mov	r3, r0
 800ba20:	6039      	str	r1, [r7, #0]
 800ba22:	71fb      	strb	r3, [r7, #7]
 800ba24:	4613      	mov	r3, r2
 800ba26:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ba28:	79fb      	ldrb	r3, [r7, #7]
 800ba2a:	2b23      	cmp	r3, #35	; 0x23
 800ba2c:	d84a      	bhi.n	800bac4 <CDC_Control_FS+0xac>
 800ba2e:	a201      	add	r2, pc, #4	; (adr r2, 800ba34 <CDC_Control_FS+0x1c>)
 800ba30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba34:	0800bac5 	.word	0x0800bac5
 800ba38:	0800bac5 	.word	0x0800bac5
 800ba3c:	0800bac5 	.word	0x0800bac5
 800ba40:	0800bac5 	.word	0x0800bac5
 800ba44:	0800bac5 	.word	0x0800bac5
 800ba48:	0800bac5 	.word	0x0800bac5
 800ba4c:	0800bac5 	.word	0x0800bac5
 800ba50:	0800bac5 	.word	0x0800bac5
 800ba54:	0800bac5 	.word	0x0800bac5
 800ba58:	0800bac5 	.word	0x0800bac5
 800ba5c:	0800bac5 	.word	0x0800bac5
 800ba60:	0800bac5 	.word	0x0800bac5
 800ba64:	0800bac5 	.word	0x0800bac5
 800ba68:	0800bac5 	.word	0x0800bac5
 800ba6c:	0800bac5 	.word	0x0800bac5
 800ba70:	0800bac5 	.word	0x0800bac5
 800ba74:	0800bac5 	.word	0x0800bac5
 800ba78:	0800bac5 	.word	0x0800bac5
 800ba7c:	0800bac5 	.word	0x0800bac5
 800ba80:	0800bac5 	.word	0x0800bac5
 800ba84:	0800bac5 	.word	0x0800bac5
 800ba88:	0800bac5 	.word	0x0800bac5
 800ba8c:	0800bac5 	.word	0x0800bac5
 800ba90:	0800bac5 	.word	0x0800bac5
 800ba94:	0800bac5 	.word	0x0800bac5
 800ba98:	0800bac5 	.word	0x0800bac5
 800ba9c:	0800bac5 	.word	0x0800bac5
 800baa0:	0800bac5 	.word	0x0800bac5
 800baa4:	0800bac5 	.word	0x0800bac5
 800baa8:	0800bac5 	.word	0x0800bac5
 800baac:	0800bac5 	.word	0x0800bac5
 800bab0:	0800bac5 	.word	0x0800bac5
 800bab4:	0800bac5 	.word	0x0800bac5
 800bab8:	0800bac5 	.word	0x0800bac5
 800babc:	0800bac5 	.word	0x0800bac5
 800bac0:	0800bac5 	.word	0x0800bac5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bac4:	bf00      	nop
  }

  return (USBD_OK);
 800bac6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bac8:	4618      	mov	r0, r3
 800baca:	370c      	adds	r7, #12
 800bacc:	46bd      	mov	sp, r7
 800bace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad2:	4770      	bx	lr

0800bad4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b082      	sub	sp, #8
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
 800badc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bade:	6879      	ldr	r1, [r7, #4]
 800bae0:	4805      	ldr	r0, [pc, #20]	; (800baf8 <CDC_Receive_FS+0x24>)
 800bae2:	f7fe fb13 	bl	800a10c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bae6:	4804      	ldr	r0, [pc, #16]	; (800baf8 <CDC_Receive_FS+0x24>)
 800bae8:	f7fe fb24 	bl	800a134 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800baec:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800baee:	4618      	mov	r0, r3
 800baf0:	3708      	adds	r7, #8
 800baf2:	46bd      	mov	sp, r7
 800baf4:	bd80      	pop	{r7, pc}
 800baf6:	bf00      	nop
 800baf8:	20002d94 	.word	0x20002d94

0800bafc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800bafc:	b480      	push	{r7}
 800bafe:	b087      	sub	sp, #28
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	60f8      	str	r0, [r7, #12]
 800bb04:	60b9      	str	r1, [r7, #8]
 800bb06:	4613      	mov	r3, r2
 800bb08:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800bb0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bb12:	4618      	mov	r0, r3
 800bb14:	371c      	adds	r7, #28
 800bb16:	46bd      	mov	sp, r7
 800bb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1c:	4770      	bx	lr
	...

0800bb20 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb20:	b480      	push	{r7}
 800bb22:	b083      	sub	sp, #12
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	4603      	mov	r3, r0
 800bb28:	6039      	str	r1, [r7, #0]
 800bb2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bb2c:	683b      	ldr	r3, [r7, #0]
 800bb2e:	2212      	movs	r2, #18
 800bb30:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bb32:	4b03      	ldr	r3, [pc, #12]	; (800bb40 <USBD_FS_DeviceDescriptor+0x20>)
}
 800bb34:	4618      	mov	r0, r3
 800bb36:	370c      	adds	r7, #12
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3e:	4770      	bx	lr
 800bb40:	20000168 	.word	0x20000168

0800bb44 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb44:	b480      	push	{r7}
 800bb46:	b083      	sub	sp, #12
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	4603      	mov	r3, r0
 800bb4c:	6039      	str	r1, [r7, #0]
 800bb4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bb50:	683b      	ldr	r3, [r7, #0]
 800bb52:	2204      	movs	r2, #4
 800bb54:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bb56:	4b03      	ldr	r3, [pc, #12]	; (800bb64 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bb58:	4618      	mov	r0, r3
 800bb5a:	370c      	adds	r7, #12
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb62:	4770      	bx	lr
 800bb64:	20000188 	.word	0x20000188

0800bb68 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b082      	sub	sp, #8
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	4603      	mov	r3, r0
 800bb70:	6039      	str	r1, [r7, #0]
 800bb72:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bb74:	79fb      	ldrb	r3, [r7, #7]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d105      	bne.n	800bb86 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bb7a:	683a      	ldr	r2, [r7, #0]
 800bb7c:	4907      	ldr	r1, [pc, #28]	; (800bb9c <USBD_FS_ProductStrDescriptor+0x34>)
 800bb7e:	4808      	ldr	r0, [pc, #32]	; (800bba0 <USBD_FS_ProductStrDescriptor+0x38>)
 800bb80:	f7ff fb60 	bl	800b244 <USBD_GetString>
 800bb84:	e004      	b.n	800bb90 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bb86:	683a      	ldr	r2, [r7, #0]
 800bb88:	4904      	ldr	r1, [pc, #16]	; (800bb9c <USBD_FS_ProductStrDescriptor+0x34>)
 800bb8a:	4805      	ldr	r0, [pc, #20]	; (800bba0 <USBD_FS_ProductStrDescriptor+0x38>)
 800bb8c:	f7ff fb5a 	bl	800b244 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bb90:	4b02      	ldr	r3, [pc, #8]	; (800bb9c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800bb92:	4618      	mov	r0, r3
 800bb94:	3708      	adds	r7, #8
 800bb96:	46bd      	mov	sp, r7
 800bb98:	bd80      	pop	{r7, pc}
 800bb9a:	bf00      	nop
 800bb9c:	20004064 	.word	0x20004064
 800bba0:	0800c67c 	.word	0x0800c67c

0800bba4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bba4:	b580      	push	{r7, lr}
 800bba6:	b082      	sub	sp, #8
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	4603      	mov	r3, r0
 800bbac:	6039      	str	r1, [r7, #0]
 800bbae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bbb0:	683a      	ldr	r2, [r7, #0]
 800bbb2:	4904      	ldr	r1, [pc, #16]	; (800bbc4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bbb4:	4804      	ldr	r0, [pc, #16]	; (800bbc8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bbb6:	f7ff fb45 	bl	800b244 <USBD_GetString>
  return USBD_StrDesc;
 800bbba:	4b02      	ldr	r3, [pc, #8]	; (800bbc4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	3708      	adds	r7, #8
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	bd80      	pop	{r7, pc}
 800bbc4:	20004064 	.word	0x20004064
 800bbc8:	0800c694 	.word	0x0800c694

0800bbcc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b082      	sub	sp, #8
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	4603      	mov	r3, r0
 800bbd4:	6039      	str	r1, [r7, #0]
 800bbd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bbd8:	683b      	ldr	r3, [r7, #0]
 800bbda:	221a      	movs	r2, #26
 800bbdc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bbde:	f000 f855 	bl	800bc8c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bbe2:	4b02      	ldr	r3, [pc, #8]	; (800bbec <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	3708      	adds	r7, #8
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	bd80      	pop	{r7, pc}
 800bbec:	2000018c 	.word	0x2000018c

0800bbf0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b082      	sub	sp, #8
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	4603      	mov	r3, r0
 800bbf8:	6039      	str	r1, [r7, #0]
 800bbfa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bbfc:	79fb      	ldrb	r3, [r7, #7]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d105      	bne.n	800bc0e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bc02:	683a      	ldr	r2, [r7, #0]
 800bc04:	4907      	ldr	r1, [pc, #28]	; (800bc24 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bc06:	4808      	ldr	r0, [pc, #32]	; (800bc28 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bc08:	f7ff fb1c 	bl	800b244 <USBD_GetString>
 800bc0c:	e004      	b.n	800bc18 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bc0e:	683a      	ldr	r2, [r7, #0]
 800bc10:	4904      	ldr	r1, [pc, #16]	; (800bc24 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bc12:	4805      	ldr	r0, [pc, #20]	; (800bc28 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bc14:	f7ff fb16 	bl	800b244 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bc18:	4b02      	ldr	r3, [pc, #8]	; (800bc24 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	3708      	adds	r7, #8
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	bd80      	pop	{r7, pc}
 800bc22:	bf00      	nop
 800bc24:	20004064 	.word	0x20004064
 800bc28:	0800c6a8 	.word	0x0800c6a8

0800bc2c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b082      	sub	sp, #8
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	4603      	mov	r3, r0
 800bc34:	6039      	str	r1, [r7, #0]
 800bc36:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bc38:	79fb      	ldrb	r3, [r7, #7]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d105      	bne.n	800bc4a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bc3e:	683a      	ldr	r2, [r7, #0]
 800bc40:	4907      	ldr	r1, [pc, #28]	; (800bc60 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bc42:	4808      	ldr	r0, [pc, #32]	; (800bc64 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bc44:	f7ff fafe 	bl	800b244 <USBD_GetString>
 800bc48:	e004      	b.n	800bc54 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bc4a:	683a      	ldr	r2, [r7, #0]
 800bc4c:	4904      	ldr	r1, [pc, #16]	; (800bc60 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bc4e:	4805      	ldr	r0, [pc, #20]	; (800bc64 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bc50:	f7ff faf8 	bl	800b244 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bc54:	4b02      	ldr	r3, [pc, #8]	; (800bc60 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bc56:	4618      	mov	r0, r3
 800bc58:	3708      	adds	r7, #8
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	bd80      	pop	{r7, pc}
 800bc5e:	bf00      	nop
 800bc60:	20004064 	.word	0x20004064
 800bc64:	0800c6b4 	.word	0x0800c6b4

0800bc68 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc68:	b480      	push	{r7}
 800bc6a:	b083      	sub	sp, #12
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	4603      	mov	r3, r0
 800bc70:	6039      	str	r1, [r7, #0]
 800bc72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800bc74:	683b      	ldr	r3, [r7, #0]
 800bc76:	220c      	movs	r2, #12
 800bc78:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800bc7a:	4b03      	ldr	r3, [pc, #12]	; (800bc88 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	370c      	adds	r7, #12
 800bc80:	46bd      	mov	sp, r7
 800bc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc86:	4770      	bx	lr
 800bc88:	2000017c 	.word	0x2000017c

0800bc8c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	b084      	sub	sp, #16
 800bc90:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bc92:	4b0f      	ldr	r3, [pc, #60]	; (800bcd0 <Get_SerialNum+0x44>)
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bc98:	4b0e      	ldr	r3, [pc, #56]	; (800bcd4 <Get_SerialNum+0x48>)
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bc9e:	4b0e      	ldr	r3, [pc, #56]	; (800bcd8 <Get_SerialNum+0x4c>)
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bca4:	68fa      	ldr	r2, [r7, #12]
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	4413      	add	r3, r2
 800bcaa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d009      	beq.n	800bcc6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bcb2:	2208      	movs	r2, #8
 800bcb4:	4909      	ldr	r1, [pc, #36]	; (800bcdc <Get_SerialNum+0x50>)
 800bcb6:	68f8      	ldr	r0, [r7, #12]
 800bcb8:	f000 f814 	bl	800bce4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bcbc:	2204      	movs	r2, #4
 800bcbe:	4908      	ldr	r1, [pc, #32]	; (800bce0 <Get_SerialNum+0x54>)
 800bcc0:	68b8      	ldr	r0, [r7, #8]
 800bcc2:	f000 f80f 	bl	800bce4 <IntToUnicode>
  }
}
 800bcc6:	bf00      	nop
 800bcc8:	3710      	adds	r7, #16
 800bcca:	46bd      	mov	sp, r7
 800bccc:	bd80      	pop	{r7, pc}
 800bcce:	bf00      	nop
 800bcd0:	1ff0f420 	.word	0x1ff0f420
 800bcd4:	1ff0f424 	.word	0x1ff0f424
 800bcd8:	1ff0f428 	.word	0x1ff0f428
 800bcdc:	2000018e 	.word	0x2000018e
 800bce0:	2000019e 	.word	0x2000019e

0800bce4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bce4:	b480      	push	{r7}
 800bce6:	b087      	sub	sp, #28
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	60f8      	str	r0, [r7, #12]
 800bcec:	60b9      	str	r1, [r7, #8]
 800bcee:	4613      	mov	r3, r2
 800bcf0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	75fb      	strb	r3, [r7, #23]
 800bcfa:	e027      	b.n	800bd4c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	0f1b      	lsrs	r3, r3, #28
 800bd00:	2b09      	cmp	r3, #9
 800bd02:	d80b      	bhi.n	800bd1c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	0f1b      	lsrs	r3, r3, #28
 800bd08:	b2da      	uxtb	r2, r3
 800bd0a:	7dfb      	ldrb	r3, [r7, #23]
 800bd0c:	005b      	lsls	r3, r3, #1
 800bd0e:	4619      	mov	r1, r3
 800bd10:	68bb      	ldr	r3, [r7, #8]
 800bd12:	440b      	add	r3, r1
 800bd14:	3230      	adds	r2, #48	; 0x30
 800bd16:	b2d2      	uxtb	r2, r2
 800bd18:	701a      	strb	r2, [r3, #0]
 800bd1a:	e00a      	b.n	800bd32 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	0f1b      	lsrs	r3, r3, #28
 800bd20:	b2da      	uxtb	r2, r3
 800bd22:	7dfb      	ldrb	r3, [r7, #23]
 800bd24:	005b      	lsls	r3, r3, #1
 800bd26:	4619      	mov	r1, r3
 800bd28:	68bb      	ldr	r3, [r7, #8]
 800bd2a:	440b      	add	r3, r1
 800bd2c:	3237      	adds	r2, #55	; 0x37
 800bd2e:	b2d2      	uxtb	r2, r2
 800bd30:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	011b      	lsls	r3, r3, #4
 800bd36:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bd38:	7dfb      	ldrb	r3, [r7, #23]
 800bd3a:	005b      	lsls	r3, r3, #1
 800bd3c:	3301      	adds	r3, #1
 800bd3e:	68ba      	ldr	r2, [r7, #8]
 800bd40:	4413      	add	r3, r2
 800bd42:	2200      	movs	r2, #0
 800bd44:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bd46:	7dfb      	ldrb	r3, [r7, #23]
 800bd48:	3301      	adds	r3, #1
 800bd4a:	75fb      	strb	r3, [r7, #23]
 800bd4c:	7dfa      	ldrb	r2, [r7, #23]
 800bd4e:	79fb      	ldrb	r3, [r7, #7]
 800bd50:	429a      	cmp	r2, r3
 800bd52:	d3d3      	bcc.n	800bcfc <IntToUnicode+0x18>
  }
}
 800bd54:	bf00      	nop
 800bd56:	bf00      	nop
 800bd58:	371c      	adds	r7, #28
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd60:	4770      	bx	lr
	...

0800bd64 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b08a      	sub	sp, #40	; 0x28
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bd6c:	f107 0314 	add.w	r3, r7, #20
 800bd70:	2200      	movs	r2, #0
 800bd72:	601a      	str	r2, [r3, #0]
 800bd74:	605a      	str	r2, [r3, #4]
 800bd76:	609a      	str	r2, [r3, #8]
 800bd78:	60da      	str	r2, [r3, #12]
 800bd7a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bd84:	d149      	bne.n	800be1a <HAL_PCD_MspInit+0xb6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bd86:	4b27      	ldr	r3, [pc, #156]	; (800be24 <HAL_PCD_MspInit+0xc0>)
 800bd88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd8a:	4a26      	ldr	r2, [pc, #152]	; (800be24 <HAL_PCD_MspInit+0xc0>)
 800bd8c:	f043 0301 	orr.w	r3, r3, #1
 800bd90:	6313      	str	r3, [r2, #48]	; 0x30
 800bd92:	4b24      	ldr	r3, [pc, #144]	; (800be24 <HAL_PCD_MspInit+0xc0>)
 800bd94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd96:	f003 0301 	and.w	r3, r3, #1
 800bd9a:	613b      	str	r3, [r7, #16]
 800bd9c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800bd9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bda2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bda4:	2300      	movs	r3, #0
 800bda6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bda8:	2300      	movs	r3, #0
 800bdaa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bdac:	f107 0314 	add.w	r3, r7, #20
 800bdb0:	4619      	mov	r1, r3
 800bdb2:	481d      	ldr	r0, [pc, #116]	; (800be28 <HAL_PCD_MspInit+0xc4>)
 800bdb4:	f7f6 fd14 	bl	80027e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_DM___White_Wire_Pin|USB_DP___Green_Wire_Pin;
 800bdb8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800bdbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bdbe:	2302      	movs	r3, #2
 800bdc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bdc6:	2303      	movs	r3, #3
 800bdc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800bdca:	230a      	movs	r3, #10
 800bdcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bdce:	f107 0314 	add.w	r3, r7, #20
 800bdd2:	4619      	mov	r1, r3
 800bdd4:	4814      	ldr	r0, [pc, #80]	; (800be28 <HAL_PCD_MspInit+0xc4>)
 800bdd6:	f7f6 fd03 	bl	80027e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bdda:	4b12      	ldr	r3, [pc, #72]	; (800be24 <HAL_PCD_MspInit+0xc0>)
 800bddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdde:	4a11      	ldr	r2, [pc, #68]	; (800be24 <HAL_PCD_MspInit+0xc0>)
 800bde0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bde4:	6353      	str	r3, [r2, #52]	; 0x34
 800bde6:	4b0f      	ldr	r3, [pc, #60]	; (800be24 <HAL_PCD_MspInit+0xc0>)
 800bde8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bdee:	60fb      	str	r3, [r7, #12]
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	4b0c      	ldr	r3, [pc, #48]	; (800be24 <HAL_PCD_MspInit+0xc0>)
 800bdf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bdf6:	4a0b      	ldr	r2, [pc, #44]	; (800be24 <HAL_PCD_MspInit+0xc0>)
 800bdf8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bdfc:	6453      	str	r3, [r2, #68]	; 0x44
 800bdfe:	4b09      	ldr	r3, [pc, #36]	; (800be24 <HAL_PCD_MspInit+0xc0>)
 800be00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800be06:	60bb      	str	r3, [r7, #8]
 800be08:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800be0a:	2200      	movs	r2, #0
 800be0c:	2100      	movs	r1, #0
 800be0e:	2043      	movs	r0, #67	; 0x43
 800be10:	f7f6 fb0b 	bl	800242a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800be14:	2043      	movs	r0, #67	; 0x43
 800be16:	f7f6 fb24 	bl	8002462 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800be1a:	bf00      	nop
 800be1c:	3728      	adds	r7, #40	; 0x28
 800be1e:	46bd      	mov	sp, r7
 800be20:	bd80      	pop	{r7, pc}
 800be22:	bf00      	nop
 800be24:	40023800 	.word	0x40023800
 800be28:	40020000 	.word	0x40020000

0800be2c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b082      	sub	sp, #8
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800be40:	4619      	mov	r1, r3
 800be42:	4610      	mov	r0, r2
 800be44:	f7fe fa42 	bl	800a2cc <USBD_LL_SetupStage>
}
 800be48:	bf00      	nop
 800be4a:	3708      	adds	r7, #8
 800be4c:	46bd      	mov	sp, r7
 800be4e:	bd80      	pop	{r7, pc}

0800be50 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be50:	b580      	push	{r7, lr}
 800be52:	b082      	sub	sp, #8
 800be54:	af00      	add	r7, sp, #0
 800be56:	6078      	str	r0, [r7, #4]
 800be58:	460b      	mov	r3, r1
 800be5a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 800be62:	78fa      	ldrb	r2, [r7, #3]
 800be64:	6879      	ldr	r1, [r7, #4]
 800be66:	4613      	mov	r3, r2
 800be68:	00db      	lsls	r3, r3, #3
 800be6a:	1a9b      	subs	r3, r3, r2
 800be6c:	009b      	lsls	r3, r3, #2
 800be6e:	440b      	add	r3, r1
 800be70:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800be74:	681a      	ldr	r2, [r3, #0]
 800be76:	78fb      	ldrb	r3, [r7, #3]
 800be78:	4619      	mov	r1, r3
 800be7a:	f7fe fa7c 	bl	800a376 <USBD_LL_DataOutStage>
}
 800be7e:	bf00      	nop
 800be80:	3708      	adds	r7, #8
 800be82:	46bd      	mov	sp, r7
 800be84:	bd80      	pop	{r7, pc}

0800be86 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be86:	b580      	push	{r7, lr}
 800be88:	b082      	sub	sp, #8
 800be8a:	af00      	add	r7, sp, #0
 800be8c:	6078      	str	r0, [r7, #4]
 800be8e:	460b      	mov	r3, r1
 800be90:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 800be98:	78fa      	ldrb	r2, [r7, #3]
 800be9a:	6879      	ldr	r1, [r7, #4]
 800be9c:	4613      	mov	r3, r2
 800be9e:	00db      	lsls	r3, r3, #3
 800bea0:	1a9b      	subs	r3, r3, r2
 800bea2:	009b      	lsls	r3, r3, #2
 800bea4:	440b      	add	r3, r1
 800bea6:	3348      	adds	r3, #72	; 0x48
 800bea8:	681a      	ldr	r2, [r3, #0]
 800beaa:	78fb      	ldrb	r3, [r7, #3]
 800beac:	4619      	mov	r1, r3
 800beae:	f7fe fac5 	bl	800a43c <USBD_LL_DataInStage>
}
 800beb2:	bf00      	nop
 800beb4:	3708      	adds	r7, #8
 800beb6:	46bd      	mov	sp, r7
 800beb8:	bd80      	pop	{r7, pc}

0800beba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800beba:	b580      	push	{r7, lr}
 800bebc:	b082      	sub	sp, #8
 800bebe:	af00      	add	r7, sp, #0
 800bec0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800bec8:	4618      	mov	r0, r3
 800beca:	f7fe fbc9 	bl	800a660 <USBD_LL_SOF>
}
 800bece:	bf00      	nop
 800bed0:	3708      	adds	r7, #8
 800bed2:	46bd      	mov	sp, r7
 800bed4:	bd80      	pop	{r7, pc}

0800bed6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bed6:	b580      	push	{r7, lr}
 800bed8:	b084      	sub	sp, #16
 800beda:	af00      	add	r7, sp, #0
 800bedc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bede:	2301      	movs	r3, #1
 800bee0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	68db      	ldr	r3, [r3, #12]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d102      	bne.n	800bef0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800beea:	2300      	movs	r3, #0
 800beec:	73fb      	strb	r3, [r7, #15]
 800beee:	e008      	b.n	800bf02 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	68db      	ldr	r3, [r3, #12]
 800bef4:	2b02      	cmp	r3, #2
 800bef6:	d102      	bne.n	800befe <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800bef8:	2301      	movs	r3, #1
 800befa:	73fb      	strb	r3, [r7, #15]
 800befc:	e001      	b.n	800bf02 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800befe:	f7f5 f9bf 	bl	8001280 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800bf08:	7bfa      	ldrb	r2, [r7, #15]
 800bf0a:	4611      	mov	r1, r2
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	f7fe fb6c 	bl	800a5ea <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800bf18:	4618      	mov	r0, r3
 800bf1a:	f7fe fb25 	bl	800a568 <USBD_LL_Reset>
}
 800bf1e:	bf00      	nop
 800bf20:	3710      	adds	r7, #16
 800bf22:	46bd      	mov	sp, r7
 800bf24:	bd80      	pop	{r7, pc}
	...

0800bf28 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b082      	sub	sp, #8
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800bf36:	4618      	mov	r0, r3
 800bf38:	f7fe fb67 	bl	800a60a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	687a      	ldr	r2, [r7, #4]
 800bf48:	6812      	ldr	r2, [r2, #0]
 800bf4a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bf4e:	f043 0301 	orr.w	r3, r3, #1
 800bf52:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	6a1b      	ldr	r3, [r3, #32]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d005      	beq.n	800bf68 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bf5c:	4b04      	ldr	r3, [pc, #16]	; (800bf70 <HAL_PCD_SuspendCallback+0x48>)
 800bf5e:	691b      	ldr	r3, [r3, #16]
 800bf60:	4a03      	ldr	r2, [pc, #12]	; (800bf70 <HAL_PCD_SuspendCallback+0x48>)
 800bf62:	f043 0306 	orr.w	r3, r3, #6
 800bf66:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bf68:	bf00      	nop
 800bf6a:	3708      	adds	r7, #8
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	bd80      	pop	{r7, pc}
 800bf70:	e000ed00 	.word	0xe000ed00

0800bf74 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf74:	b580      	push	{r7, lr}
 800bf76:	b082      	sub	sp, #8
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800bf82:	4618      	mov	r0, r3
 800bf84:	f7fe fb56 	bl	800a634 <USBD_LL_Resume>
}
 800bf88:	bf00      	nop
 800bf8a:	3708      	adds	r7, #8
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	bd80      	pop	{r7, pc}

0800bf90 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf90:	b580      	push	{r7, lr}
 800bf92:	b082      	sub	sp, #8
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
 800bf98:	460b      	mov	r3, r1
 800bf9a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800bfa2:	78fa      	ldrb	r2, [r7, #3]
 800bfa4:	4611      	mov	r1, r2
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	f7fe fb81 	bl	800a6ae <USBD_LL_IsoOUTIncomplete>
}
 800bfac:	bf00      	nop
 800bfae:	3708      	adds	r7, #8
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	bd80      	pop	{r7, pc}

0800bfb4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b082      	sub	sp, #8
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
 800bfbc:	460b      	mov	r3, r1
 800bfbe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800bfc6:	78fa      	ldrb	r2, [r7, #3]
 800bfc8:	4611      	mov	r1, r2
 800bfca:	4618      	mov	r0, r3
 800bfcc:	f7fe fb62 	bl	800a694 <USBD_LL_IsoINIncomplete>
}
 800bfd0:	bf00      	nop
 800bfd2:	3708      	adds	r7, #8
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	bd80      	pop	{r7, pc}

0800bfd8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b082      	sub	sp, #8
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	f7fe fb6e 	bl	800a6c8 <USBD_LL_DevConnected>
}
 800bfec:	bf00      	nop
 800bfee:	3708      	adds	r7, #8
 800bff0:	46bd      	mov	sp, r7
 800bff2:	bd80      	pop	{r7, pc}

0800bff4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b082      	sub	sp, #8
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800c002:	4618      	mov	r0, r3
 800c004:	f7fe fb6b 	bl	800a6de <USBD_LL_DevDisconnected>
}
 800c008:	bf00      	nop
 800c00a:	3708      	adds	r7, #8
 800c00c:	46bd      	mov	sp, r7
 800c00e:	bd80      	pop	{r7, pc}

0800c010 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c010:	b580      	push	{r7, lr}
 800c012:	b082      	sub	sp, #8
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	781b      	ldrb	r3, [r3, #0]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d13c      	bne.n	800c09a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c020:	4a20      	ldr	r2, [pc, #128]	; (800c0a4 <USBD_LL_Init+0x94>)
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
  pdev->pData = &hpcd_USB_OTG_FS;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	4a1e      	ldr	r2, [pc, #120]	; (800c0a4 <USBD_LL_Init+0x94>)
 800c02c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c030:	4b1c      	ldr	r3, [pc, #112]	; (800c0a4 <USBD_LL_Init+0x94>)
 800c032:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c036:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800c038:	4b1a      	ldr	r3, [pc, #104]	; (800c0a4 <USBD_LL_Init+0x94>)
 800c03a:	2206      	movs	r2, #6
 800c03c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c03e:	4b19      	ldr	r3, [pc, #100]	; (800c0a4 <USBD_LL_Init+0x94>)
 800c040:	2202      	movs	r2, #2
 800c042:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c044:	4b17      	ldr	r3, [pc, #92]	; (800c0a4 <USBD_LL_Init+0x94>)
 800c046:	2200      	movs	r2, #0
 800c048:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c04a:	4b16      	ldr	r3, [pc, #88]	; (800c0a4 <USBD_LL_Init+0x94>)
 800c04c:	2202      	movs	r2, #2
 800c04e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c050:	4b14      	ldr	r3, [pc, #80]	; (800c0a4 <USBD_LL_Init+0x94>)
 800c052:	2200      	movs	r2, #0
 800c054:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c056:	4b13      	ldr	r3, [pc, #76]	; (800c0a4 <USBD_LL_Init+0x94>)
 800c058:	2200      	movs	r2, #0
 800c05a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c05c:	4b11      	ldr	r3, [pc, #68]	; (800c0a4 <USBD_LL_Init+0x94>)
 800c05e:	2200      	movs	r2, #0
 800c060:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800c062:	4b10      	ldr	r3, [pc, #64]	; (800c0a4 <USBD_LL_Init+0x94>)
 800c064:	2201      	movs	r2, #1
 800c066:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c068:	4b0e      	ldr	r3, [pc, #56]	; (800c0a4 <USBD_LL_Init+0x94>)
 800c06a:	2200      	movs	r2, #0
 800c06c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c06e:	480d      	ldr	r0, [pc, #52]	; (800c0a4 <USBD_LL_Init+0x94>)
 800c070:	f7f6 fe9f 	bl	8002db2 <HAL_PCD_Init>
 800c074:	4603      	mov	r3, r0
 800c076:	2b00      	cmp	r3, #0
 800c078:	d001      	beq.n	800c07e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c07a:	f7f5 f901 	bl	8001280 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c07e:	2180      	movs	r1, #128	; 0x80
 800c080:	4808      	ldr	r0, [pc, #32]	; (800c0a4 <USBD_LL_Init+0x94>)
 800c082:	f7f8 f820 	bl	80040c6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c086:	2240      	movs	r2, #64	; 0x40
 800c088:	2100      	movs	r1, #0
 800c08a:	4806      	ldr	r0, [pc, #24]	; (800c0a4 <USBD_LL_Init+0x94>)
 800c08c:	f7f7 ffd4 	bl	8004038 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c090:	2280      	movs	r2, #128	; 0x80
 800c092:	2101      	movs	r1, #1
 800c094:	4803      	ldr	r0, [pc, #12]	; (800c0a4 <USBD_LL_Init+0x94>)
 800c096:	f7f7 ffcf 	bl	8004038 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c09a:	2300      	movs	r3, #0
}
 800c09c:	4618      	mov	r0, r3
 800c09e:	3708      	adds	r7, #8
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	bd80      	pop	{r7, pc}
 800c0a4:	20004264 	.word	0x20004264

0800c0a8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b084      	sub	sp, #16
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c0be:	4618      	mov	r0, r3
 800c0c0:	f7f6 ff9b 	bl	8002ffa <HAL_PCD_Start>
 800c0c4:	4603      	mov	r3, r0
 800c0c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c0c8:	7bfb      	ldrb	r3, [r7, #15]
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	f000 f97e 	bl	800c3cc <USBD_Get_USB_Status>
 800c0d0:	4603      	mov	r3, r0
 800c0d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c0d4:	7bbb      	ldrb	r3, [r7, #14]
}
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	3710      	adds	r7, #16
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	bd80      	pop	{r7, pc}

0800c0de <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c0de:	b580      	push	{r7, lr}
 800c0e0:	b084      	sub	sp, #16
 800c0e2:	af00      	add	r7, sp, #0
 800c0e4:	6078      	str	r0, [r7, #4]
 800c0e6:	4608      	mov	r0, r1
 800c0e8:	4611      	mov	r1, r2
 800c0ea:	461a      	mov	r2, r3
 800c0ec:	4603      	mov	r3, r0
 800c0ee:	70fb      	strb	r3, [r7, #3]
 800c0f0:	460b      	mov	r3, r1
 800c0f2:	70bb      	strb	r3, [r7, #2]
 800c0f4:	4613      	mov	r3, r2
 800c0f6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c106:	78bb      	ldrb	r3, [r7, #2]
 800c108:	883a      	ldrh	r2, [r7, #0]
 800c10a:	78f9      	ldrb	r1, [r7, #3]
 800c10c:	f7f7 fb9b 	bl	8003846 <HAL_PCD_EP_Open>
 800c110:	4603      	mov	r3, r0
 800c112:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c114:	7bfb      	ldrb	r3, [r7, #15]
 800c116:	4618      	mov	r0, r3
 800c118:	f000 f958 	bl	800c3cc <USBD_Get_USB_Status>
 800c11c:	4603      	mov	r3, r0
 800c11e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c120:	7bbb      	ldrb	r3, [r7, #14]
}
 800c122:	4618      	mov	r0, r3
 800c124:	3710      	adds	r7, #16
 800c126:	46bd      	mov	sp, r7
 800c128:	bd80      	pop	{r7, pc}

0800c12a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c12a:	b580      	push	{r7, lr}
 800c12c:	b084      	sub	sp, #16
 800c12e:	af00      	add	r7, sp, #0
 800c130:	6078      	str	r0, [r7, #4]
 800c132:	460b      	mov	r3, r1
 800c134:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c136:	2300      	movs	r3, #0
 800c138:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c13a:	2300      	movs	r3, #0
 800c13c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c144:	78fa      	ldrb	r2, [r7, #3]
 800c146:	4611      	mov	r1, r2
 800c148:	4618      	mov	r0, r3
 800c14a:	f7f7 fbe4 	bl	8003916 <HAL_PCD_EP_Close>
 800c14e:	4603      	mov	r3, r0
 800c150:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c152:	7bfb      	ldrb	r3, [r7, #15]
 800c154:	4618      	mov	r0, r3
 800c156:	f000 f939 	bl	800c3cc <USBD_Get_USB_Status>
 800c15a:	4603      	mov	r3, r0
 800c15c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c15e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c160:	4618      	mov	r0, r3
 800c162:	3710      	adds	r7, #16
 800c164:	46bd      	mov	sp, r7
 800c166:	bd80      	pop	{r7, pc}

0800c168 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b084      	sub	sp, #16
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
 800c170:	460b      	mov	r3, r1
 800c172:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c174:	2300      	movs	r3, #0
 800c176:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c178:	2300      	movs	r3, #0
 800c17a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c182:	78fa      	ldrb	r2, [r7, #3]
 800c184:	4611      	mov	r1, r2
 800c186:	4618      	mov	r0, r3
 800c188:	f7f7 fcbc 	bl	8003b04 <HAL_PCD_EP_SetStall>
 800c18c:	4603      	mov	r3, r0
 800c18e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c190:	7bfb      	ldrb	r3, [r7, #15]
 800c192:	4618      	mov	r0, r3
 800c194:	f000 f91a 	bl	800c3cc <USBD_Get_USB_Status>
 800c198:	4603      	mov	r3, r0
 800c19a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c19c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c19e:	4618      	mov	r0, r3
 800c1a0:	3710      	adds	r7, #16
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	bd80      	pop	{r7, pc}

0800c1a6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c1a6:	b580      	push	{r7, lr}
 800c1a8:	b084      	sub	sp, #16
 800c1aa:	af00      	add	r7, sp, #0
 800c1ac:	6078      	str	r0, [r7, #4]
 800c1ae:	460b      	mov	r3, r1
 800c1b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c1c0:	78fa      	ldrb	r2, [r7, #3]
 800c1c2:	4611      	mov	r1, r2
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	f7f7 fd01 	bl	8003bcc <HAL_PCD_EP_ClrStall>
 800c1ca:	4603      	mov	r3, r0
 800c1cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c1ce:	7bfb      	ldrb	r3, [r7, #15]
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	f000 f8fb 	bl	800c3cc <USBD_Get_USB_Status>
 800c1d6:	4603      	mov	r3, r0
 800c1d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c1da:	7bbb      	ldrb	r3, [r7, #14]
}
 800c1dc:	4618      	mov	r0, r3
 800c1de:	3710      	adds	r7, #16
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	bd80      	pop	{r7, pc}

0800c1e4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c1e4:	b480      	push	{r7}
 800c1e6:	b085      	sub	sp, #20
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
 800c1ec:	460b      	mov	r3, r1
 800c1ee:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c1f6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c1f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	da0b      	bge.n	800c218 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c200:	78fb      	ldrb	r3, [r7, #3]
 800c202:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c206:	68f9      	ldr	r1, [r7, #12]
 800c208:	4613      	mov	r3, r2
 800c20a:	00db      	lsls	r3, r3, #3
 800c20c:	1a9b      	subs	r3, r3, r2
 800c20e:	009b      	lsls	r3, r3, #2
 800c210:	440b      	add	r3, r1
 800c212:	333e      	adds	r3, #62	; 0x3e
 800c214:	781b      	ldrb	r3, [r3, #0]
 800c216:	e00b      	b.n	800c230 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c218:	78fb      	ldrb	r3, [r7, #3]
 800c21a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c21e:	68f9      	ldr	r1, [r7, #12]
 800c220:	4613      	mov	r3, r2
 800c222:	00db      	lsls	r3, r3, #3
 800c224:	1a9b      	subs	r3, r3, r2
 800c226:	009b      	lsls	r3, r3, #2
 800c228:	440b      	add	r3, r1
 800c22a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c22e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c230:	4618      	mov	r0, r3
 800c232:	3714      	adds	r7, #20
 800c234:	46bd      	mov	sp, r7
 800c236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c23a:	4770      	bx	lr

0800c23c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c23c:	b580      	push	{r7, lr}
 800c23e:	b084      	sub	sp, #16
 800c240:	af00      	add	r7, sp, #0
 800c242:	6078      	str	r0, [r7, #4]
 800c244:	460b      	mov	r3, r1
 800c246:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c248:	2300      	movs	r3, #0
 800c24a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c24c:	2300      	movs	r3, #0
 800c24e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c256:	78fa      	ldrb	r2, [r7, #3]
 800c258:	4611      	mov	r1, r2
 800c25a:	4618      	mov	r0, r3
 800c25c:	f7f7 face 	bl	80037fc <HAL_PCD_SetAddress>
 800c260:	4603      	mov	r3, r0
 800c262:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c264:	7bfb      	ldrb	r3, [r7, #15]
 800c266:	4618      	mov	r0, r3
 800c268:	f000 f8b0 	bl	800c3cc <USBD_Get_USB_Status>
 800c26c:	4603      	mov	r3, r0
 800c26e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c270:	7bbb      	ldrb	r3, [r7, #14]
}
 800c272:	4618      	mov	r0, r3
 800c274:	3710      	adds	r7, #16
 800c276:	46bd      	mov	sp, r7
 800c278:	bd80      	pop	{r7, pc}

0800c27a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c27a:	b580      	push	{r7, lr}
 800c27c:	b086      	sub	sp, #24
 800c27e:	af00      	add	r7, sp, #0
 800c280:	60f8      	str	r0, [r7, #12]
 800c282:	607a      	str	r2, [r7, #4]
 800c284:	603b      	str	r3, [r7, #0]
 800c286:	460b      	mov	r3, r1
 800c288:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c28a:	2300      	movs	r3, #0
 800c28c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c28e:	2300      	movs	r3, #0
 800c290:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c298:	7af9      	ldrb	r1, [r7, #11]
 800c29a:	683b      	ldr	r3, [r7, #0]
 800c29c:	687a      	ldr	r2, [r7, #4]
 800c29e:	f7f7 fbe7 	bl	8003a70 <HAL_PCD_EP_Transmit>
 800c2a2:	4603      	mov	r3, r0
 800c2a4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2a6:	7dfb      	ldrb	r3, [r7, #23]
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	f000 f88f 	bl	800c3cc <USBD_Get_USB_Status>
 800c2ae:	4603      	mov	r3, r0
 800c2b0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c2b2:	7dbb      	ldrb	r3, [r7, #22]
}
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	3718      	adds	r7, #24
 800c2b8:	46bd      	mov	sp, r7
 800c2ba:	bd80      	pop	{r7, pc}

0800c2bc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	b086      	sub	sp, #24
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	60f8      	str	r0, [r7, #12]
 800c2c4:	607a      	str	r2, [r7, #4]
 800c2c6:	603b      	str	r3, [r7, #0]
 800c2c8:	460b      	mov	r3, r1
 800c2ca:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c2da:	7af9      	ldrb	r1, [r7, #11]
 800c2dc:	683b      	ldr	r3, [r7, #0]
 800c2de:	687a      	ldr	r2, [r7, #4]
 800c2e0:	f7f7 fb63 	bl	80039aa <HAL_PCD_EP_Receive>
 800c2e4:	4603      	mov	r3, r0
 800c2e6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2e8:	7dfb      	ldrb	r3, [r7, #23]
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	f000 f86e 	bl	800c3cc <USBD_Get_USB_Status>
 800c2f0:	4603      	mov	r3, r0
 800c2f2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c2f4:	7dbb      	ldrb	r3, [r7, #22]
}
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	3718      	adds	r7, #24
 800c2fa:	46bd      	mov	sp, r7
 800c2fc:	bd80      	pop	{r7, pc}

0800c2fe <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c2fe:	b580      	push	{r7, lr}
 800c300:	b082      	sub	sp, #8
 800c302:	af00      	add	r7, sp, #0
 800c304:	6078      	str	r0, [r7, #4]
 800c306:	460b      	mov	r3, r1
 800c308:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c310:	78fa      	ldrb	r2, [r7, #3]
 800c312:	4611      	mov	r1, r2
 800c314:	4618      	mov	r0, r3
 800c316:	f7f7 fb93 	bl	8003a40 <HAL_PCD_EP_GetRxCount>
 800c31a:	4603      	mov	r3, r0
}
 800c31c:	4618      	mov	r0, r3
 800c31e:	3708      	adds	r7, #8
 800c320:	46bd      	mov	sp, r7
 800c322:	bd80      	pop	{r7, pc}

0800c324 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800c324:	b580      	push	{r7, lr}
 800c326:	b082      	sub	sp, #8
 800c328:	af00      	add	r7, sp, #0
 800c32a:	6078      	str	r0, [r7, #4]
 800c32c:	460b      	mov	r3, r1
 800c32e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800c330:	78fb      	ldrb	r3, [r7, #3]
 800c332:	2b00      	cmp	r3, #0
 800c334:	d002      	beq.n	800c33c <HAL_PCDEx_LPM_Callback+0x18>
 800c336:	2b01      	cmp	r3, #1
 800c338:	d01f      	beq.n	800c37a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800c33a:	e03b      	b.n	800c3b4 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	6a1b      	ldr	r3, [r3, #32]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d007      	beq.n	800c354 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800c344:	f000 f83c 	bl	800c3c0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c348:	4b1c      	ldr	r3, [pc, #112]	; (800c3bc <HAL_PCDEx_LPM_Callback+0x98>)
 800c34a:	691b      	ldr	r3, [r3, #16]
 800c34c:	4a1b      	ldr	r2, [pc, #108]	; (800c3bc <HAL_PCDEx_LPM_Callback+0x98>)
 800c34e:	f023 0306 	bic.w	r3, r3, #6
 800c352:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	687a      	ldr	r2, [r7, #4]
 800c360:	6812      	ldr	r2, [r2, #0]
 800c362:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c366:	f023 0301 	bic.w	r3, r3, #1
 800c36a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800c372:	4618      	mov	r0, r3
 800c374:	f7fe f95e 	bl	800a634 <USBD_LL_Resume>
    break;
 800c378:	e01c      	b.n	800c3b4 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	687a      	ldr	r2, [r7, #4]
 800c386:	6812      	ldr	r2, [r2, #0]
 800c388:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c38c:	f043 0301 	orr.w	r3, r3, #1
 800c390:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800c398:	4618      	mov	r0, r3
 800c39a:	f7fe f936 	bl	800a60a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	6a1b      	ldr	r3, [r3, #32]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d005      	beq.n	800c3b2 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c3a6:	4b05      	ldr	r3, [pc, #20]	; (800c3bc <HAL_PCDEx_LPM_Callback+0x98>)
 800c3a8:	691b      	ldr	r3, [r3, #16]
 800c3aa:	4a04      	ldr	r2, [pc, #16]	; (800c3bc <HAL_PCDEx_LPM_Callback+0x98>)
 800c3ac:	f043 0306 	orr.w	r3, r3, #6
 800c3b0:	6113      	str	r3, [r2, #16]
    break;
 800c3b2:	bf00      	nop
}
 800c3b4:	bf00      	nop
 800c3b6:	3708      	adds	r7, #8
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	bd80      	pop	{r7, pc}
 800c3bc:	e000ed00 	.word	0xe000ed00

0800c3c0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800c3c0:	b580      	push	{r7, lr}
 800c3c2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800c3c4:	f7f4 febe 	bl	8001144 <SystemClock_Config>
}
 800c3c8:	bf00      	nop
 800c3ca:	bd80      	pop	{r7, pc}

0800c3cc <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c3cc:	b480      	push	{r7}
 800c3ce:	b085      	sub	sp, #20
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	4603      	mov	r3, r0
 800c3d4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c3da:	79fb      	ldrb	r3, [r7, #7]
 800c3dc:	2b03      	cmp	r3, #3
 800c3de:	d817      	bhi.n	800c410 <USBD_Get_USB_Status+0x44>
 800c3e0:	a201      	add	r2, pc, #4	; (adr r2, 800c3e8 <USBD_Get_USB_Status+0x1c>)
 800c3e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3e6:	bf00      	nop
 800c3e8:	0800c3f9 	.word	0x0800c3f9
 800c3ec:	0800c3ff 	.word	0x0800c3ff
 800c3f0:	0800c405 	.word	0x0800c405
 800c3f4:	0800c40b 	.word	0x0800c40b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	73fb      	strb	r3, [r7, #15]
    break;
 800c3fc:	e00b      	b.n	800c416 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c3fe:	2303      	movs	r3, #3
 800c400:	73fb      	strb	r3, [r7, #15]
    break;
 800c402:	e008      	b.n	800c416 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c404:	2301      	movs	r3, #1
 800c406:	73fb      	strb	r3, [r7, #15]
    break;
 800c408:	e005      	b.n	800c416 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c40a:	2303      	movs	r3, #3
 800c40c:	73fb      	strb	r3, [r7, #15]
    break;
 800c40e:	e002      	b.n	800c416 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c410:	2303      	movs	r3, #3
 800c412:	73fb      	strb	r3, [r7, #15]
    break;
 800c414:	bf00      	nop
  }
  return usb_status;
 800c416:	7bfb      	ldrb	r3, [r7, #15]
}
 800c418:	4618      	mov	r0, r3
 800c41a:	3714      	adds	r7, #20
 800c41c:	46bd      	mov	sp, r7
 800c41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c422:	4770      	bx	lr

0800c424 <__errno>:
 800c424:	4b01      	ldr	r3, [pc, #4]	; (800c42c <__errno+0x8>)
 800c426:	6818      	ldr	r0, [r3, #0]
 800c428:	4770      	bx	lr
 800c42a:	bf00      	nop
 800c42c:	200001a8 	.word	0x200001a8

0800c430 <__libc_init_array>:
 800c430:	b570      	push	{r4, r5, r6, lr}
 800c432:	4d0d      	ldr	r5, [pc, #52]	; (800c468 <__libc_init_array+0x38>)
 800c434:	4c0d      	ldr	r4, [pc, #52]	; (800c46c <__libc_init_array+0x3c>)
 800c436:	1b64      	subs	r4, r4, r5
 800c438:	10a4      	asrs	r4, r4, #2
 800c43a:	2600      	movs	r6, #0
 800c43c:	42a6      	cmp	r6, r4
 800c43e:	d109      	bne.n	800c454 <__libc_init_array+0x24>
 800c440:	4d0b      	ldr	r5, [pc, #44]	; (800c470 <__libc_init_array+0x40>)
 800c442:	4c0c      	ldr	r4, [pc, #48]	; (800c474 <__libc_init_array+0x44>)
 800c444:	f000 f906 	bl	800c654 <_init>
 800c448:	1b64      	subs	r4, r4, r5
 800c44a:	10a4      	asrs	r4, r4, #2
 800c44c:	2600      	movs	r6, #0
 800c44e:	42a6      	cmp	r6, r4
 800c450:	d105      	bne.n	800c45e <__libc_init_array+0x2e>
 800c452:	bd70      	pop	{r4, r5, r6, pc}
 800c454:	f855 3b04 	ldr.w	r3, [r5], #4
 800c458:	4798      	blx	r3
 800c45a:	3601      	adds	r6, #1
 800c45c:	e7ee      	b.n	800c43c <__libc_init_array+0xc>
 800c45e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c462:	4798      	blx	r3
 800c464:	3601      	adds	r6, #1
 800c466:	e7f2      	b.n	800c44e <__libc_init_array+0x1e>
 800c468:	0800c6e4 	.word	0x0800c6e4
 800c46c:	0800c6e4 	.word	0x0800c6e4
 800c470:	0800c6e4 	.word	0x0800c6e4
 800c474:	0800c6e8 	.word	0x0800c6e8

0800c478 <malloc>:
 800c478:	4b02      	ldr	r3, [pc, #8]	; (800c484 <malloc+0xc>)
 800c47a:	4601      	mov	r1, r0
 800c47c:	6818      	ldr	r0, [r3, #0]
 800c47e:	f000 b871 	b.w	800c564 <_malloc_r>
 800c482:	bf00      	nop
 800c484:	200001a8 	.word	0x200001a8

0800c488 <free>:
 800c488:	4b02      	ldr	r3, [pc, #8]	; (800c494 <free+0xc>)
 800c48a:	4601      	mov	r1, r0
 800c48c:	6818      	ldr	r0, [r3, #0]
 800c48e:	f000 b819 	b.w	800c4c4 <_free_r>
 800c492:	bf00      	nop
 800c494:	200001a8 	.word	0x200001a8

0800c498 <memcpy>:
 800c498:	440a      	add	r2, r1
 800c49a:	4291      	cmp	r1, r2
 800c49c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c4a0:	d100      	bne.n	800c4a4 <memcpy+0xc>
 800c4a2:	4770      	bx	lr
 800c4a4:	b510      	push	{r4, lr}
 800c4a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c4aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c4ae:	4291      	cmp	r1, r2
 800c4b0:	d1f9      	bne.n	800c4a6 <memcpy+0xe>
 800c4b2:	bd10      	pop	{r4, pc}

0800c4b4 <memset>:
 800c4b4:	4402      	add	r2, r0
 800c4b6:	4603      	mov	r3, r0
 800c4b8:	4293      	cmp	r3, r2
 800c4ba:	d100      	bne.n	800c4be <memset+0xa>
 800c4bc:	4770      	bx	lr
 800c4be:	f803 1b01 	strb.w	r1, [r3], #1
 800c4c2:	e7f9      	b.n	800c4b8 <memset+0x4>

0800c4c4 <_free_r>:
 800c4c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c4c6:	2900      	cmp	r1, #0
 800c4c8:	d048      	beq.n	800c55c <_free_r+0x98>
 800c4ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c4ce:	9001      	str	r0, [sp, #4]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	f1a1 0404 	sub.w	r4, r1, #4
 800c4d6:	bfb8      	it	lt
 800c4d8:	18e4      	addlt	r4, r4, r3
 800c4da:	f000 f8ad 	bl	800c638 <__malloc_lock>
 800c4de:	4a20      	ldr	r2, [pc, #128]	; (800c560 <_free_r+0x9c>)
 800c4e0:	9801      	ldr	r0, [sp, #4]
 800c4e2:	6813      	ldr	r3, [r2, #0]
 800c4e4:	4615      	mov	r5, r2
 800c4e6:	b933      	cbnz	r3, 800c4f6 <_free_r+0x32>
 800c4e8:	6063      	str	r3, [r4, #4]
 800c4ea:	6014      	str	r4, [r2, #0]
 800c4ec:	b003      	add	sp, #12
 800c4ee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c4f2:	f000 b8a7 	b.w	800c644 <__malloc_unlock>
 800c4f6:	42a3      	cmp	r3, r4
 800c4f8:	d90b      	bls.n	800c512 <_free_r+0x4e>
 800c4fa:	6821      	ldr	r1, [r4, #0]
 800c4fc:	1862      	adds	r2, r4, r1
 800c4fe:	4293      	cmp	r3, r2
 800c500:	bf04      	itt	eq
 800c502:	681a      	ldreq	r2, [r3, #0]
 800c504:	685b      	ldreq	r3, [r3, #4]
 800c506:	6063      	str	r3, [r4, #4]
 800c508:	bf04      	itt	eq
 800c50a:	1852      	addeq	r2, r2, r1
 800c50c:	6022      	streq	r2, [r4, #0]
 800c50e:	602c      	str	r4, [r5, #0]
 800c510:	e7ec      	b.n	800c4ec <_free_r+0x28>
 800c512:	461a      	mov	r2, r3
 800c514:	685b      	ldr	r3, [r3, #4]
 800c516:	b10b      	cbz	r3, 800c51c <_free_r+0x58>
 800c518:	42a3      	cmp	r3, r4
 800c51a:	d9fa      	bls.n	800c512 <_free_r+0x4e>
 800c51c:	6811      	ldr	r1, [r2, #0]
 800c51e:	1855      	adds	r5, r2, r1
 800c520:	42a5      	cmp	r5, r4
 800c522:	d10b      	bne.n	800c53c <_free_r+0x78>
 800c524:	6824      	ldr	r4, [r4, #0]
 800c526:	4421      	add	r1, r4
 800c528:	1854      	adds	r4, r2, r1
 800c52a:	42a3      	cmp	r3, r4
 800c52c:	6011      	str	r1, [r2, #0]
 800c52e:	d1dd      	bne.n	800c4ec <_free_r+0x28>
 800c530:	681c      	ldr	r4, [r3, #0]
 800c532:	685b      	ldr	r3, [r3, #4]
 800c534:	6053      	str	r3, [r2, #4]
 800c536:	4421      	add	r1, r4
 800c538:	6011      	str	r1, [r2, #0]
 800c53a:	e7d7      	b.n	800c4ec <_free_r+0x28>
 800c53c:	d902      	bls.n	800c544 <_free_r+0x80>
 800c53e:	230c      	movs	r3, #12
 800c540:	6003      	str	r3, [r0, #0]
 800c542:	e7d3      	b.n	800c4ec <_free_r+0x28>
 800c544:	6825      	ldr	r5, [r4, #0]
 800c546:	1961      	adds	r1, r4, r5
 800c548:	428b      	cmp	r3, r1
 800c54a:	bf04      	itt	eq
 800c54c:	6819      	ldreq	r1, [r3, #0]
 800c54e:	685b      	ldreq	r3, [r3, #4]
 800c550:	6063      	str	r3, [r4, #4]
 800c552:	bf04      	itt	eq
 800c554:	1949      	addeq	r1, r1, r5
 800c556:	6021      	streq	r1, [r4, #0]
 800c558:	6054      	str	r4, [r2, #4]
 800c55a:	e7c7      	b.n	800c4ec <_free_r+0x28>
 800c55c:	b003      	add	sp, #12
 800c55e:	bd30      	pop	{r4, r5, pc}
 800c560:	200008d8 	.word	0x200008d8

0800c564 <_malloc_r>:
 800c564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c566:	1ccd      	adds	r5, r1, #3
 800c568:	f025 0503 	bic.w	r5, r5, #3
 800c56c:	3508      	adds	r5, #8
 800c56e:	2d0c      	cmp	r5, #12
 800c570:	bf38      	it	cc
 800c572:	250c      	movcc	r5, #12
 800c574:	2d00      	cmp	r5, #0
 800c576:	4606      	mov	r6, r0
 800c578:	db01      	blt.n	800c57e <_malloc_r+0x1a>
 800c57a:	42a9      	cmp	r1, r5
 800c57c:	d903      	bls.n	800c586 <_malloc_r+0x22>
 800c57e:	230c      	movs	r3, #12
 800c580:	6033      	str	r3, [r6, #0]
 800c582:	2000      	movs	r0, #0
 800c584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c586:	f000 f857 	bl	800c638 <__malloc_lock>
 800c58a:	4921      	ldr	r1, [pc, #132]	; (800c610 <_malloc_r+0xac>)
 800c58c:	680a      	ldr	r2, [r1, #0]
 800c58e:	4614      	mov	r4, r2
 800c590:	b99c      	cbnz	r4, 800c5ba <_malloc_r+0x56>
 800c592:	4f20      	ldr	r7, [pc, #128]	; (800c614 <_malloc_r+0xb0>)
 800c594:	683b      	ldr	r3, [r7, #0]
 800c596:	b923      	cbnz	r3, 800c5a2 <_malloc_r+0x3e>
 800c598:	4621      	mov	r1, r4
 800c59a:	4630      	mov	r0, r6
 800c59c:	f000 f83c 	bl	800c618 <_sbrk_r>
 800c5a0:	6038      	str	r0, [r7, #0]
 800c5a2:	4629      	mov	r1, r5
 800c5a4:	4630      	mov	r0, r6
 800c5a6:	f000 f837 	bl	800c618 <_sbrk_r>
 800c5aa:	1c43      	adds	r3, r0, #1
 800c5ac:	d123      	bne.n	800c5f6 <_malloc_r+0x92>
 800c5ae:	230c      	movs	r3, #12
 800c5b0:	6033      	str	r3, [r6, #0]
 800c5b2:	4630      	mov	r0, r6
 800c5b4:	f000 f846 	bl	800c644 <__malloc_unlock>
 800c5b8:	e7e3      	b.n	800c582 <_malloc_r+0x1e>
 800c5ba:	6823      	ldr	r3, [r4, #0]
 800c5bc:	1b5b      	subs	r3, r3, r5
 800c5be:	d417      	bmi.n	800c5f0 <_malloc_r+0x8c>
 800c5c0:	2b0b      	cmp	r3, #11
 800c5c2:	d903      	bls.n	800c5cc <_malloc_r+0x68>
 800c5c4:	6023      	str	r3, [r4, #0]
 800c5c6:	441c      	add	r4, r3
 800c5c8:	6025      	str	r5, [r4, #0]
 800c5ca:	e004      	b.n	800c5d6 <_malloc_r+0x72>
 800c5cc:	6863      	ldr	r3, [r4, #4]
 800c5ce:	42a2      	cmp	r2, r4
 800c5d0:	bf0c      	ite	eq
 800c5d2:	600b      	streq	r3, [r1, #0]
 800c5d4:	6053      	strne	r3, [r2, #4]
 800c5d6:	4630      	mov	r0, r6
 800c5d8:	f000 f834 	bl	800c644 <__malloc_unlock>
 800c5dc:	f104 000b 	add.w	r0, r4, #11
 800c5e0:	1d23      	adds	r3, r4, #4
 800c5e2:	f020 0007 	bic.w	r0, r0, #7
 800c5e6:	1ac2      	subs	r2, r0, r3
 800c5e8:	d0cc      	beq.n	800c584 <_malloc_r+0x20>
 800c5ea:	1a1b      	subs	r3, r3, r0
 800c5ec:	50a3      	str	r3, [r4, r2]
 800c5ee:	e7c9      	b.n	800c584 <_malloc_r+0x20>
 800c5f0:	4622      	mov	r2, r4
 800c5f2:	6864      	ldr	r4, [r4, #4]
 800c5f4:	e7cc      	b.n	800c590 <_malloc_r+0x2c>
 800c5f6:	1cc4      	adds	r4, r0, #3
 800c5f8:	f024 0403 	bic.w	r4, r4, #3
 800c5fc:	42a0      	cmp	r0, r4
 800c5fe:	d0e3      	beq.n	800c5c8 <_malloc_r+0x64>
 800c600:	1a21      	subs	r1, r4, r0
 800c602:	4630      	mov	r0, r6
 800c604:	f000 f808 	bl	800c618 <_sbrk_r>
 800c608:	3001      	adds	r0, #1
 800c60a:	d1dd      	bne.n	800c5c8 <_malloc_r+0x64>
 800c60c:	e7cf      	b.n	800c5ae <_malloc_r+0x4a>
 800c60e:	bf00      	nop
 800c610:	200008d8 	.word	0x200008d8
 800c614:	200008dc 	.word	0x200008dc

0800c618 <_sbrk_r>:
 800c618:	b538      	push	{r3, r4, r5, lr}
 800c61a:	4d06      	ldr	r5, [pc, #24]	; (800c634 <_sbrk_r+0x1c>)
 800c61c:	2300      	movs	r3, #0
 800c61e:	4604      	mov	r4, r0
 800c620:	4608      	mov	r0, r1
 800c622:	602b      	str	r3, [r5, #0]
 800c624:	f7f4 ffe6 	bl	80015f4 <_sbrk>
 800c628:	1c43      	adds	r3, r0, #1
 800c62a:	d102      	bne.n	800c632 <_sbrk_r+0x1a>
 800c62c:	682b      	ldr	r3, [r5, #0]
 800c62e:	b103      	cbz	r3, 800c632 <_sbrk_r+0x1a>
 800c630:	6023      	str	r3, [r4, #0]
 800c632:	bd38      	pop	{r3, r4, r5, pc}
 800c634:	20004668 	.word	0x20004668

0800c638 <__malloc_lock>:
 800c638:	4801      	ldr	r0, [pc, #4]	; (800c640 <__malloc_lock+0x8>)
 800c63a:	f000 b809 	b.w	800c650 <__retarget_lock_acquire_recursive>
 800c63e:	bf00      	nop
 800c640:	20004670 	.word	0x20004670

0800c644 <__malloc_unlock>:
 800c644:	4801      	ldr	r0, [pc, #4]	; (800c64c <__malloc_unlock+0x8>)
 800c646:	f000 b804 	b.w	800c652 <__retarget_lock_release_recursive>
 800c64a:	bf00      	nop
 800c64c:	20004670 	.word	0x20004670

0800c650 <__retarget_lock_acquire_recursive>:
 800c650:	4770      	bx	lr

0800c652 <__retarget_lock_release_recursive>:
 800c652:	4770      	bx	lr

0800c654 <_init>:
 800c654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c656:	bf00      	nop
 800c658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c65a:	bc08      	pop	{r3}
 800c65c:	469e      	mov	lr, r3
 800c65e:	4770      	bx	lr

0800c660 <_fini>:
 800c660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c662:	bf00      	nop
 800c664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c666:	bc08      	pop	{r3}
 800c668:	469e      	mov	lr, r3
 800c66a:	4770      	bx	lr
